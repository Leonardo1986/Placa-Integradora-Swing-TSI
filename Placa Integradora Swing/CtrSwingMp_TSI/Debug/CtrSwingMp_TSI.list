
CtrSwingMp_TSI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc18  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800fcd8  0800fcd8  00010cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff90  0800ff90  0001100c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ff90  0800ff90  0001100c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ff90  0800ff90  0001100c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff90  0800ff90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff94  0800ff94  00010f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800ff98  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000097c  2000000c  0800ffa4  0001100c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  0800ffa4  00011988  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001100c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130f0  00000000  00000000  00011034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003562  00000000  00000000  00024124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00027688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e7b  00000000  00000000  00028920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135f4  00000000  00000000  0002979b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018984  00000000  00000000  0003cd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c738  00000000  00000000  00055713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1e4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044dc  00000000  00000000  000c1e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c636c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800fcc0 	.word	0x0800fcc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800fcc0 	.word	0x0800fcc0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb8b 	bl	8000b18 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fb0b 	bl	8000a28 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb7d 	bl	8000b18 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb73 	bl	8000b18 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fb19 	bl	8000a78 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fb0f 	bl	8000a78 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	@ 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fe7d 	bl	8001178 <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	@ 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fcd3 	bl	8000e30 <__aeabi_fsub>
 800048a:	f000 fe75 	bl	8001178 <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	@ 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_d2uiz>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	2200      	movs	r2, #0
 800049c:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <__aeabi_d2uiz+0x38>)
 800049e:	0004      	movs	r4, r0
 80004a0:	000d      	movs	r5, r1
 80004a2:	f001 fdf1 	bl	8002088 <__aeabi_dcmpge>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d104      	bne.n	80004b4 <__aeabi_d2uiz+0x1c>
 80004aa:	0020      	movs	r0, r4
 80004ac:	0029      	movs	r1, r5
 80004ae:	f001 fd33 	bl	8001f18 <__aeabi_d2iz>
 80004b2:	bd70      	pop	{r4, r5, r6, pc}
 80004b4:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <__aeabi_d2uiz+0x38>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	0020      	movs	r0, r4
 80004ba:	0029      	movs	r1, r5
 80004bc:	f001 f990 	bl	80017e0 <__aeabi_dsub>
 80004c0:	f001 fd2a 	bl	8001f18 <__aeabi_d2iz>
 80004c4:	2380      	movs	r3, #128	@ 0x80
 80004c6:	061b      	lsls	r3, r3, #24
 80004c8:	469c      	mov	ip, r3
 80004ca:	4460      	add	r0, ip
 80004cc:	e7f1      	b.n	80004b2 <__aeabi_d2uiz+0x1a>
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	41e00000 	.word	0x41e00000

080004d4 <__aeabi_fadd>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	46ce      	mov	lr, r9
 80004d8:	4647      	mov	r7, r8
 80004da:	0243      	lsls	r3, r0, #9
 80004dc:	0a5a      	lsrs	r2, r3, #9
 80004de:	024e      	lsls	r6, r1, #9
 80004e0:	0045      	lsls	r5, r0, #1
 80004e2:	0fc4      	lsrs	r4, r0, #31
 80004e4:	0048      	lsls	r0, r1, #1
 80004e6:	4691      	mov	r9, r2
 80004e8:	0e2d      	lsrs	r5, r5, #24
 80004ea:	0a72      	lsrs	r2, r6, #9
 80004ec:	0e00      	lsrs	r0, r0, #24
 80004ee:	4694      	mov	ip, r2
 80004f0:	b580      	push	{r7, lr}
 80004f2:	099b      	lsrs	r3, r3, #6
 80004f4:	0fc9      	lsrs	r1, r1, #31
 80004f6:	09b6      	lsrs	r6, r6, #6
 80004f8:	1a2a      	subs	r2, r5, r0
 80004fa:	428c      	cmp	r4, r1
 80004fc:	d021      	beq.n	8000542 <__aeabi_fadd+0x6e>
 80004fe:	2a00      	cmp	r2, #0
 8000500:	dd0d      	ble.n	800051e <__aeabi_fadd+0x4a>
 8000502:	2800      	cmp	r0, #0
 8000504:	d12d      	bne.n	8000562 <__aeabi_fadd+0x8e>
 8000506:	2e00      	cmp	r6, #0
 8000508:	d100      	bne.n	800050c <__aeabi_fadd+0x38>
 800050a:	e08d      	b.n	8000628 <__aeabi_fadd+0x154>
 800050c:	1e51      	subs	r1, r2, #1
 800050e:	2a01      	cmp	r2, #1
 8000510:	d100      	bne.n	8000514 <__aeabi_fadd+0x40>
 8000512:	e11d      	b.n	8000750 <__aeabi_fadd+0x27c>
 8000514:	2aff      	cmp	r2, #255	@ 0xff
 8000516:	d100      	bne.n	800051a <__aeabi_fadd+0x46>
 8000518:	e0ab      	b.n	8000672 <__aeabi_fadd+0x19e>
 800051a:	000a      	movs	r2, r1
 800051c:	e027      	b.n	800056e <__aeabi_fadd+0x9a>
 800051e:	2a00      	cmp	r2, #0
 8000520:	d04d      	beq.n	80005be <__aeabi_fadd+0xea>
 8000522:	1b42      	subs	r2, r0, r5
 8000524:	2d00      	cmp	r5, #0
 8000526:	d000      	beq.n	800052a <__aeabi_fadd+0x56>
 8000528:	e0cc      	b.n	80006c4 <__aeabi_fadd+0x1f0>
 800052a:	2b00      	cmp	r3, #0
 800052c:	d100      	bne.n	8000530 <__aeabi_fadd+0x5c>
 800052e:	e079      	b.n	8000624 <__aeabi_fadd+0x150>
 8000530:	1e54      	subs	r4, r2, #1
 8000532:	2a01      	cmp	r2, #1
 8000534:	d100      	bne.n	8000538 <__aeabi_fadd+0x64>
 8000536:	e128      	b.n	800078a <__aeabi_fadd+0x2b6>
 8000538:	2aff      	cmp	r2, #255	@ 0xff
 800053a:	d100      	bne.n	800053e <__aeabi_fadd+0x6a>
 800053c:	e097      	b.n	800066e <__aeabi_fadd+0x19a>
 800053e:	0022      	movs	r2, r4
 8000540:	e0c5      	b.n	80006ce <__aeabi_fadd+0x1fa>
 8000542:	2a00      	cmp	r2, #0
 8000544:	dc00      	bgt.n	8000548 <__aeabi_fadd+0x74>
 8000546:	e096      	b.n	8000676 <__aeabi_fadd+0x1a2>
 8000548:	2800      	cmp	r0, #0
 800054a:	d04f      	beq.n	80005ec <__aeabi_fadd+0x118>
 800054c:	2dff      	cmp	r5, #255	@ 0xff
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0x7e>
 8000550:	e08f      	b.n	8000672 <__aeabi_fadd+0x19e>
 8000552:	2180      	movs	r1, #128	@ 0x80
 8000554:	04c9      	lsls	r1, r1, #19
 8000556:	430e      	orrs	r6, r1
 8000558:	2a1b      	cmp	r2, #27
 800055a:	dd51      	ble.n	8000600 <__aeabi_fadd+0x12c>
 800055c:	002a      	movs	r2, r5
 800055e:	3301      	adds	r3, #1
 8000560:	e018      	b.n	8000594 <__aeabi_fadd+0xc0>
 8000562:	2dff      	cmp	r5, #255	@ 0xff
 8000564:	d100      	bne.n	8000568 <__aeabi_fadd+0x94>
 8000566:	e084      	b.n	8000672 <__aeabi_fadd+0x19e>
 8000568:	2180      	movs	r1, #128	@ 0x80
 800056a:	04c9      	lsls	r1, r1, #19
 800056c:	430e      	orrs	r6, r1
 800056e:	2101      	movs	r1, #1
 8000570:	2a1b      	cmp	r2, #27
 8000572:	dc08      	bgt.n	8000586 <__aeabi_fadd+0xb2>
 8000574:	0031      	movs	r1, r6
 8000576:	2020      	movs	r0, #32
 8000578:	40d1      	lsrs	r1, r2
 800057a:	1a82      	subs	r2, r0, r2
 800057c:	4096      	lsls	r6, r2
 800057e:	0032      	movs	r2, r6
 8000580:	1e50      	subs	r0, r2, #1
 8000582:	4182      	sbcs	r2, r0
 8000584:	4311      	orrs	r1, r2
 8000586:	1a5b      	subs	r3, r3, r1
 8000588:	015a      	lsls	r2, r3, #5
 800058a:	d459      	bmi.n	8000640 <__aeabi_fadd+0x16c>
 800058c:	2107      	movs	r1, #7
 800058e:	002a      	movs	r2, r5
 8000590:	4019      	ands	r1, r3
 8000592:	d049      	beq.n	8000628 <__aeabi_fadd+0x154>
 8000594:	210f      	movs	r1, #15
 8000596:	4019      	ands	r1, r3
 8000598:	2904      	cmp	r1, #4
 800059a:	d000      	beq.n	800059e <__aeabi_fadd+0xca>
 800059c:	3304      	adds	r3, #4
 800059e:	0159      	lsls	r1, r3, #5
 80005a0:	d542      	bpl.n	8000628 <__aeabi_fadd+0x154>
 80005a2:	1c50      	adds	r0, r2, #1
 80005a4:	2afe      	cmp	r2, #254	@ 0xfe
 80005a6:	d03a      	beq.n	800061e <__aeabi_fadd+0x14a>
 80005a8:	019b      	lsls	r3, r3, #6
 80005aa:	b2c0      	uxtb	r0, r0
 80005ac:	0a5b      	lsrs	r3, r3, #9
 80005ae:	05c0      	lsls	r0, r0, #23
 80005b0:	4318      	orrs	r0, r3
 80005b2:	07e4      	lsls	r4, r4, #31
 80005b4:	4320      	orrs	r0, r4
 80005b6:	bcc0      	pop	{r6, r7}
 80005b8:	46b9      	mov	r9, r7
 80005ba:	46b0      	mov	r8, r6
 80005bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005be:	20fe      	movs	r0, #254	@ 0xfe
 80005c0:	4680      	mov	r8, r0
 80005c2:	1c6f      	adds	r7, r5, #1
 80005c4:	0038      	movs	r0, r7
 80005c6:	4647      	mov	r7, r8
 80005c8:	4207      	tst	r7, r0
 80005ca:	d000      	beq.n	80005ce <__aeabi_fadd+0xfa>
 80005cc:	e08e      	b.n	80006ec <__aeabi_fadd+0x218>
 80005ce:	2d00      	cmp	r5, #0
 80005d0:	d000      	beq.n	80005d4 <__aeabi_fadd+0x100>
 80005d2:	e0b4      	b.n	800073e <__aeabi_fadd+0x26a>
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_fadd+0x106>
 80005d8:	e0db      	b.n	8000792 <__aeabi_fadd+0x2be>
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d06c      	beq.n	80006b8 <__aeabi_fadd+0x1e4>
 80005de:	1b98      	subs	r0, r3, r6
 80005e0:	0145      	lsls	r5, r0, #5
 80005e2:	d400      	bmi.n	80005e6 <__aeabi_fadd+0x112>
 80005e4:	e0f7      	b.n	80007d6 <__aeabi_fadd+0x302>
 80005e6:	000c      	movs	r4, r1
 80005e8:	1af3      	subs	r3, r6, r3
 80005ea:	e03d      	b.n	8000668 <__aeabi_fadd+0x194>
 80005ec:	2e00      	cmp	r6, #0
 80005ee:	d01b      	beq.n	8000628 <__aeabi_fadd+0x154>
 80005f0:	1e51      	subs	r1, r2, #1
 80005f2:	2a01      	cmp	r2, #1
 80005f4:	d100      	bne.n	80005f8 <__aeabi_fadd+0x124>
 80005f6:	e082      	b.n	80006fe <__aeabi_fadd+0x22a>
 80005f8:	2aff      	cmp	r2, #255	@ 0xff
 80005fa:	d03a      	beq.n	8000672 <__aeabi_fadd+0x19e>
 80005fc:	000a      	movs	r2, r1
 80005fe:	e7ab      	b.n	8000558 <__aeabi_fadd+0x84>
 8000600:	0031      	movs	r1, r6
 8000602:	2020      	movs	r0, #32
 8000604:	40d1      	lsrs	r1, r2
 8000606:	1a82      	subs	r2, r0, r2
 8000608:	4096      	lsls	r6, r2
 800060a:	0032      	movs	r2, r6
 800060c:	1e50      	subs	r0, r2, #1
 800060e:	4182      	sbcs	r2, r0
 8000610:	430a      	orrs	r2, r1
 8000612:	189b      	adds	r3, r3, r2
 8000614:	015a      	lsls	r2, r3, #5
 8000616:	d5b9      	bpl.n	800058c <__aeabi_fadd+0xb8>
 8000618:	1c6a      	adds	r2, r5, #1
 800061a:	2dfe      	cmp	r5, #254	@ 0xfe
 800061c:	d175      	bne.n	800070a <__aeabi_fadd+0x236>
 800061e:	20ff      	movs	r0, #255	@ 0xff
 8000620:	2300      	movs	r3, #0
 8000622:	e7c4      	b.n	80005ae <__aeabi_fadd+0xda>
 8000624:	000c      	movs	r4, r1
 8000626:	0033      	movs	r3, r6
 8000628:	08db      	lsrs	r3, r3, #3
 800062a:	2aff      	cmp	r2, #255	@ 0xff
 800062c:	d146      	bne.n	80006bc <__aeabi_fadd+0x1e8>
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f5      	beq.n	800061e <__aeabi_fadd+0x14a>
 8000632:	2280      	movs	r2, #128	@ 0x80
 8000634:	03d2      	lsls	r2, r2, #15
 8000636:	4313      	orrs	r3, r2
 8000638:	025b      	lsls	r3, r3, #9
 800063a:	20ff      	movs	r0, #255	@ 0xff
 800063c:	0a5b      	lsrs	r3, r3, #9
 800063e:	e7b6      	b.n	80005ae <__aeabi_fadd+0xda>
 8000640:	019f      	lsls	r7, r3, #6
 8000642:	09bf      	lsrs	r7, r7, #6
 8000644:	0038      	movs	r0, r7
 8000646:	f001 fd29 	bl	800209c <__clzsi2>
 800064a:	3805      	subs	r0, #5
 800064c:	4087      	lsls	r7, r0
 800064e:	4285      	cmp	r5, r0
 8000650:	dc24      	bgt.n	800069c <__aeabi_fadd+0x1c8>
 8000652:	003b      	movs	r3, r7
 8000654:	2120      	movs	r1, #32
 8000656:	1b42      	subs	r2, r0, r5
 8000658:	3201      	adds	r2, #1
 800065a:	40d3      	lsrs	r3, r2
 800065c:	1a8a      	subs	r2, r1, r2
 800065e:	4097      	lsls	r7, r2
 8000660:	1e7a      	subs	r2, r7, #1
 8000662:	4197      	sbcs	r7, r2
 8000664:	2200      	movs	r2, #0
 8000666:	433b      	orrs	r3, r7
 8000668:	0759      	lsls	r1, r3, #29
 800066a:	d193      	bne.n	8000594 <__aeabi_fadd+0xc0>
 800066c:	e797      	b.n	800059e <__aeabi_fadd+0xca>
 800066e:	000c      	movs	r4, r1
 8000670:	0033      	movs	r3, r6
 8000672:	08db      	lsrs	r3, r3, #3
 8000674:	e7db      	b.n	800062e <__aeabi_fadd+0x15a>
 8000676:	2a00      	cmp	r2, #0
 8000678:	d014      	beq.n	80006a4 <__aeabi_fadd+0x1d0>
 800067a:	1b42      	subs	r2, r0, r5
 800067c:	2d00      	cmp	r5, #0
 800067e:	d14b      	bne.n	8000718 <__aeabi_fadd+0x244>
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0d0      	beq.n	8000626 <__aeabi_fadd+0x152>
 8000684:	1e51      	subs	r1, r2, #1
 8000686:	2a01      	cmp	r2, #1
 8000688:	d100      	bne.n	800068c <__aeabi_fadd+0x1b8>
 800068a:	e09e      	b.n	80007ca <__aeabi_fadd+0x2f6>
 800068c:	2aff      	cmp	r2, #255	@ 0xff
 800068e:	d0ef      	beq.n	8000670 <__aeabi_fadd+0x19c>
 8000690:	000a      	movs	r2, r1
 8000692:	2a1b      	cmp	r2, #27
 8000694:	dd5f      	ble.n	8000756 <__aeabi_fadd+0x282>
 8000696:	0002      	movs	r2, r0
 8000698:	1c73      	adds	r3, r6, #1
 800069a:	e77b      	b.n	8000594 <__aeabi_fadd+0xc0>
 800069c:	4b50      	ldr	r3, [pc, #320]	@ (80007e0 <__aeabi_fadd+0x30c>)
 800069e:	1a2a      	subs	r2, r5, r0
 80006a0:	403b      	ands	r3, r7
 80006a2:	e7e1      	b.n	8000668 <__aeabi_fadd+0x194>
 80006a4:	21fe      	movs	r1, #254	@ 0xfe
 80006a6:	1c6a      	adds	r2, r5, #1
 80006a8:	4211      	tst	r1, r2
 80006aa:	d13b      	bne.n	8000724 <__aeabi_fadd+0x250>
 80006ac:	2d00      	cmp	r5, #0
 80006ae:	d15d      	bne.n	800076c <__aeabi_fadd+0x298>
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d07f      	beq.n	80007b4 <__aeabi_fadd+0x2e0>
 80006b4:	2e00      	cmp	r6, #0
 80006b6:	d17f      	bne.n	80007b8 <__aeabi_fadd+0x2e4>
 80006b8:	2200      	movs	r2, #0
 80006ba:	08db      	lsrs	r3, r3, #3
 80006bc:	025b      	lsls	r3, r3, #9
 80006be:	0a5b      	lsrs	r3, r3, #9
 80006c0:	b2d0      	uxtb	r0, r2
 80006c2:	e774      	b.n	80005ae <__aeabi_fadd+0xda>
 80006c4:	28ff      	cmp	r0, #255	@ 0xff
 80006c6:	d0d2      	beq.n	800066e <__aeabi_fadd+0x19a>
 80006c8:	2480      	movs	r4, #128	@ 0x80
 80006ca:	04e4      	lsls	r4, r4, #19
 80006cc:	4323      	orrs	r3, r4
 80006ce:	2401      	movs	r4, #1
 80006d0:	2a1b      	cmp	r2, #27
 80006d2:	dc07      	bgt.n	80006e4 <__aeabi_fadd+0x210>
 80006d4:	001c      	movs	r4, r3
 80006d6:	2520      	movs	r5, #32
 80006d8:	40d4      	lsrs	r4, r2
 80006da:	1aaa      	subs	r2, r5, r2
 80006dc:	4093      	lsls	r3, r2
 80006de:	1e5a      	subs	r2, r3, #1
 80006e0:	4193      	sbcs	r3, r2
 80006e2:	431c      	orrs	r4, r3
 80006e4:	1b33      	subs	r3, r6, r4
 80006e6:	0005      	movs	r5, r0
 80006e8:	000c      	movs	r4, r1
 80006ea:	e74d      	b.n	8000588 <__aeabi_fadd+0xb4>
 80006ec:	1b9f      	subs	r7, r3, r6
 80006ee:	017a      	lsls	r2, r7, #5
 80006f0:	d422      	bmi.n	8000738 <__aeabi_fadd+0x264>
 80006f2:	2f00      	cmp	r7, #0
 80006f4:	d1a6      	bne.n	8000644 <__aeabi_fadd+0x170>
 80006f6:	2400      	movs	r4, #0
 80006f8:	2000      	movs	r0, #0
 80006fa:	2300      	movs	r3, #0
 80006fc:	e757      	b.n	80005ae <__aeabi_fadd+0xda>
 80006fe:	199b      	adds	r3, r3, r6
 8000700:	2501      	movs	r5, #1
 8000702:	3201      	adds	r2, #1
 8000704:	0159      	lsls	r1, r3, #5
 8000706:	d400      	bmi.n	800070a <__aeabi_fadd+0x236>
 8000708:	e740      	b.n	800058c <__aeabi_fadd+0xb8>
 800070a:	2101      	movs	r1, #1
 800070c:	4835      	ldr	r0, [pc, #212]	@ (80007e4 <__aeabi_fadd+0x310>)
 800070e:	4019      	ands	r1, r3
 8000710:	085b      	lsrs	r3, r3, #1
 8000712:	4003      	ands	r3, r0
 8000714:	430b      	orrs	r3, r1
 8000716:	e7a7      	b.n	8000668 <__aeabi_fadd+0x194>
 8000718:	28ff      	cmp	r0, #255	@ 0xff
 800071a:	d0a9      	beq.n	8000670 <__aeabi_fadd+0x19c>
 800071c:	2180      	movs	r1, #128	@ 0x80
 800071e:	04c9      	lsls	r1, r1, #19
 8000720:	430b      	orrs	r3, r1
 8000722:	e7b6      	b.n	8000692 <__aeabi_fadd+0x1be>
 8000724:	2aff      	cmp	r2, #255	@ 0xff
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0x256>
 8000728:	e779      	b.n	800061e <__aeabi_fadd+0x14a>
 800072a:	199b      	adds	r3, r3, r6
 800072c:	085b      	lsrs	r3, r3, #1
 800072e:	0759      	lsls	r1, r3, #29
 8000730:	d000      	beq.n	8000734 <__aeabi_fadd+0x260>
 8000732:	e72f      	b.n	8000594 <__aeabi_fadd+0xc0>
 8000734:	08db      	lsrs	r3, r3, #3
 8000736:	e7c1      	b.n	80006bc <__aeabi_fadd+0x1e8>
 8000738:	000c      	movs	r4, r1
 800073a:	1af7      	subs	r7, r6, r3
 800073c:	e782      	b.n	8000644 <__aeabi_fadd+0x170>
 800073e:	2b00      	cmp	r3, #0
 8000740:	d12c      	bne.n	800079c <__aeabi_fadd+0x2c8>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d193      	bne.n	800066e <__aeabi_fadd+0x19a>
 8000746:	2380      	movs	r3, #128	@ 0x80
 8000748:	2400      	movs	r4, #0
 800074a:	20ff      	movs	r0, #255	@ 0xff
 800074c:	03db      	lsls	r3, r3, #15
 800074e:	e72e      	b.n	80005ae <__aeabi_fadd+0xda>
 8000750:	2501      	movs	r5, #1
 8000752:	1b9b      	subs	r3, r3, r6
 8000754:	e718      	b.n	8000588 <__aeabi_fadd+0xb4>
 8000756:	0019      	movs	r1, r3
 8000758:	2520      	movs	r5, #32
 800075a:	40d1      	lsrs	r1, r2
 800075c:	1aaa      	subs	r2, r5, r2
 800075e:	4093      	lsls	r3, r2
 8000760:	1e5a      	subs	r2, r3, #1
 8000762:	4193      	sbcs	r3, r2
 8000764:	430b      	orrs	r3, r1
 8000766:	0005      	movs	r5, r0
 8000768:	199b      	adds	r3, r3, r6
 800076a:	e753      	b.n	8000614 <__aeabi_fadd+0x140>
 800076c:	2b00      	cmp	r3, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_fadd+0x29e>
 8000770:	e77e      	b.n	8000670 <__aeabi_fadd+0x19c>
 8000772:	2e00      	cmp	r6, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x2a4>
 8000776:	e77c      	b.n	8000672 <__aeabi_fadd+0x19e>
 8000778:	2280      	movs	r2, #128	@ 0x80
 800077a:	03d2      	lsls	r2, r2, #15
 800077c:	4591      	cmp	r9, r2
 800077e:	d302      	bcc.n	8000786 <__aeabi_fadd+0x2b2>
 8000780:	4594      	cmp	ip, r2
 8000782:	d200      	bcs.n	8000786 <__aeabi_fadd+0x2b2>
 8000784:	0033      	movs	r3, r6
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	e753      	b.n	8000632 <__aeabi_fadd+0x15e>
 800078a:	000c      	movs	r4, r1
 800078c:	1af3      	subs	r3, r6, r3
 800078e:	3501      	adds	r5, #1
 8000790:	e6fa      	b.n	8000588 <__aeabi_fadd+0xb4>
 8000792:	2e00      	cmp	r6, #0
 8000794:	d0af      	beq.n	80006f6 <__aeabi_fadd+0x222>
 8000796:	000c      	movs	r4, r1
 8000798:	0033      	movs	r3, r6
 800079a:	e78d      	b.n	80006b8 <__aeabi_fadd+0x1e4>
 800079c:	2e00      	cmp	r6, #0
 800079e:	d100      	bne.n	80007a2 <__aeabi_fadd+0x2ce>
 80007a0:	e767      	b.n	8000672 <__aeabi_fadd+0x19e>
 80007a2:	2280      	movs	r2, #128	@ 0x80
 80007a4:	03d2      	lsls	r2, r2, #15
 80007a6:	4591      	cmp	r9, r2
 80007a8:	d3ed      	bcc.n	8000786 <__aeabi_fadd+0x2b2>
 80007aa:	4594      	cmp	ip, r2
 80007ac:	d2eb      	bcs.n	8000786 <__aeabi_fadd+0x2b2>
 80007ae:	000c      	movs	r4, r1
 80007b0:	0033      	movs	r3, r6
 80007b2:	e7e8      	b.n	8000786 <__aeabi_fadd+0x2b2>
 80007b4:	0033      	movs	r3, r6
 80007b6:	e77f      	b.n	80006b8 <__aeabi_fadd+0x1e4>
 80007b8:	199b      	adds	r3, r3, r6
 80007ba:	2200      	movs	r2, #0
 80007bc:	0159      	lsls	r1, r3, #5
 80007be:	d5b9      	bpl.n	8000734 <__aeabi_fadd+0x260>
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <__aeabi_fadd+0x30c>)
 80007c2:	4013      	ands	r3, r2
 80007c4:	08db      	lsrs	r3, r3, #3
 80007c6:	2201      	movs	r2, #1
 80007c8:	e778      	b.n	80006bc <__aeabi_fadd+0x1e8>
 80007ca:	199b      	adds	r3, r3, r6
 80007cc:	3201      	adds	r2, #1
 80007ce:	3501      	adds	r5, #1
 80007d0:	0159      	lsls	r1, r3, #5
 80007d2:	d49a      	bmi.n	800070a <__aeabi_fadd+0x236>
 80007d4:	e6da      	b.n	800058c <__aeabi_fadd+0xb8>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d08d      	beq.n	80006f6 <__aeabi_fadd+0x222>
 80007da:	08db      	lsrs	r3, r3, #3
 80007dc:	e76e      	b.n	80006bc <__aeabi_fadd+0x1e8>
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	fbffffff 	.word	0xfbffffff
 80007e4:	7dffffff 	.word	0x7dffffff

080007e8 <__aeabi_fdiv>:
 80007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ea:	464f      	mov	r7, r9
 80007ec:	4646      	mov	r6, r8
 80007ee:	46d6      	mov	lr, sl
 80007f0:	0244      	lsls	r4, r0, #9
 80007f2:	b5c0      	push	{r6, r7, lr}
 80007f4:	0047      	lsls	r7, r0, #1
 80007f6:	1c0e      	adds	r6, r1, #0
 80007f8:	0a64      	lsrs	r4, r4, #9
 80007fa:	0e3f      	lsrs	r7, r7, #24
 80007fc:	0fc5      	lsrs	r5, r0, #31
 80007fe:	2f00      	cmp	r7, #0
 8000800:	d03c      	beq.n	800087c <__aeabi_fdiv+0x94>
 8000802:	2fff      	cmp	r7, #255	@ 0xff
 8000804:	d042      	beq.n	800088c <__aeabi_fdiv+0xa4>
 8000806:	2300      	movs	r3, #0
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	4699      	mov	r9, r3
 800080c:	469a      	mov	sl, r3
 800080e:	00e4      	lsls	r4, r4, #3
 8000810:	04d2      	lsls	r2, r2, #19
 8000812:	4314      	orrs	r4, r2
 8000814:	3f7f      	subs	r7, #127	@ 0x7f
 8000816:	0273      	lsls	r3, r6, #9
 8000818:	0a5b      	lsrs	r3, r3, #9
 800081a:	4698      	mov	r8, r3
 800081c:	0073      	lsls	r3, r6, #1
 800081e:	0e1b      	lsrs	r3, r3, #24
 8000820:	0ff6      	lsrs	r6, r6, #31
 8000822:	2b00      	cmp	r3, #0
 8000824:	d01b      	beq.n	800085e <__aeabi_fdiv+0x76>
 8000826:	2bff      	cmp	r3, #255	@ 0xff
 8000828:	d013      	beq.n	8000852 <__aeabi_fdiv+0x6a>
 800082a:	4642      	mov	r2, r8
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	00d2      	lsls	r2, r2, #3
 8000830:	04c9      	lsls	r1, r1, #19
 8000832:	4311      	orrs	r1, r2
 8000834:	4688      	mov	r8, r1
 8000836:	2000      	movs	r0, #0
 8000838:	3b7f      	subs	r3, #127	@ 0x7f
 800083a:	0029      	movs	r1, r5
 800083c:	1aff      	subs	r7, r7, r3
 800083e:	464b      	mov	r3, r9
 8000840:	4071      	eors	r1, r6
 8000842:	b2c9      	uxtb	r1, r1
 8000844:	2b0f      	cmp	r3, #15
 8000846:	d900      	bls.n	800084a <__aeabi_fdiv+0x62>
 8000848:	e0b5      	b.n	80009b6 <__aeabi_fdiv+0x1ce>
 800084a:	4a74      	ldr	r2, [pc, #464]	@ (8000a1c <__aeabi_fdiv+0x234>)
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	58d3      	ldr	r3, [r2, r3]
 8000850:	469f      	mov	pc, r3
 8000852:	4643      	mov	r3, r8
 8000854:	2b00      	cmp	r3, #0
 8000856:	d13f      	bne.n	80008d8 <__aeabi_fdiv+0xf0>
 8000858:	3fff      	subs	r7, #255	@ 0xff
 800085a:	3302      	adds	r3, #2
 800085c:	e003      	b.n	8000866 <__aeabi_fdiv+0x7e>
 800085e:	4643      	mov	r3, r8
 8000860:	2b00      	cmp	r3, #0
 8000862:	d12d      	bne.n	80008c0 <__aeabi_fdiv+0xd8>
 8000864:	2301      	movs	r3, #1
 8000866:	0029      	movs	r1, r5
 8000868:	464a      	mov	r2, r9
 800086a:	4071      	eors	r1, r6
 800086c:	b2c9      	uxtb	r1, r1
 800086e:	431a      	orrs	r2, r3
 8000870:	2a0e      	cmp	r2, #14
 8000872:	d838      	bhi.n	80008e6 <__aeabi_fdiv+0xfe>
 8000874:	486a      	ldr	r0, [pc, #424]	@ (8000a20 <__aeabi_fdiv+0x238>)
 8000876:	0092      	lsls	r2, r2, #2
 8000878:	5882      	ldr	r2, [r0, r2]
 800087a:	4697      	mov	pc, r2
 800087c:	2c00      	cmp	r4, #0
 800087e:	d113      	bne.n	80008a8 <__aeabi_fdiv+0xc0>
 8000880:	2304      	movs	r3, #4
 8000882:	4699      	mov	r9, r3
 8000884:	3b03      	subs	r3, #3
 8000886:	2700      	movs	r7, #0
 8000888:	469a      	mov	sl, r3
 800088a:	e7c4      	b.n	8000816 <__aeabi_fdiv+0x2e>
 800088c:	2c00      	cmp	r4, #0
 800088e:	d105      	bne.n	800089c <__aeabi_fdiv+0xb4>
 8000890:	2308      	movs	r3, #8
 8000892:	4699      	mov	r9, r3
 8000894:	3b06      	subs	r3, #6
 8000896:	27ff      	movs	r7, #255	@ 0xff
 8000898:	469a      	mov	sl, r3
 800089a:	e7bc      	b.n	8000816 <__aeabi_fdiv+0x2e>
 800089c:	230c      	movs	r3, #12
 800089e:	4699      	mov	r9, r3
 80008a0:	3b09      	subs	r3, #9
 80008a2:	27ff      	movs	r7, #255	@ 0xff
 80008a4:	469a      	mov	sl, r3
 80008a6:	e7b6      	b.n	8000816 <__aeabi_fdiv+0x2e>
 80008a8:	0020      	movs	r0, r4
 80008aa:	f001 fbf7 	bl	800209c <__clzsi2>
 80008ae:	2776      	movs	r7, #118	@ 0x76
 80008b0:	1f43      	subs	r3, r0, #5
 80008b2:	409c      	lsls	r4, r3
 80008b4:	2300      	movs	r3, #0
 80008b6:	427f      	negs	r7, r7
 80008b8:	4699      	mov	r9, r3
 80008ba:	469a      	mov	sl, r3
 80008bc:	1a3f      	subs	r7, r7, r0
 80008be:	e7aa      	b.n	8000816 <__aeabi_fdiv+0x2e>
 80008c0:	4640      	mov	r0, r8
 80008c2:	f001 fbeb 	bl	800209c <__clzsi2>
 80008c6:	4642      	mov	r2, r8
 80008c8:	1f43      	subs	r3, r0, #5
 80008ca:	409a      	lsls	r2, r3
 80008cc:	2376      	movs	r3, #118	@ 0x76
 80008ce:	425b      	negs	r3, r3
 80008d0:	1a1b      	subs	r3, r3, r0
 80008d2:	4690      	mov	r8, r2
 80008d4:	2000      	movs	r0, #0
 80008d6:	e7b0      	b.n	800083a <__aeabi_fdiv+0x52>
 80008d8:	2303      	movs	r3, #3
 80008da:	464a      	mov	r2, r9
 80008dc:	431a      	orrs	r2, r3
 80008de:	4691      	mov	r9, r2
 80008e0:	2003      	movs	r0, #3
 80008e2:	33fc      	adds	r3, #252	@ 0xfc
 80008e4:	e7a9      	b.n	800083a <__aeabi_fdiv+0x52>
 80008e6:	000d      	movs	r5, r1
 80008e8:	20ff      	movs	r0, #255	@ 0xff
 80008ea:	2200      	movs	r2, #0
 80008ec:	05c0      	lsls	r0, r0, #23
 80008ee:	07ed      	lsls	r5, r5, #31
 80008f0:	4310      	orrs	r0, r2
 80008f2:	4328      	orrs	r0, r5
 80008f4:	bce0      	pop	{r5, r6, r7}
 80008f6:	46ba      	mov	sl, r7
 80008f8:	46b1      	mov	r9, r6
 80008fa:	46a8      	mov	r8, r5
 80008fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fe:	000d      	movs	r5, r1
 8000900:	2000      	movs	r0, #0
 8000902:	2200      	movs	r2, #0
 8000904:	e7f2      	b.n	80008ec <__aeabi_fdiv+0x104>
 8000906:	4653      	mov	r3, sl
 8000908:	2b02      	cmp	r3, #2
 800090a:	d0ed      	beq.n	80008e8 <__aeabi_fdiv+0x100>
 800090c:	2b03      	cmp	r3, #3
 800090e:	d033      	beq.n	8000978 <__aeabi_fdiv+0x190>
 8000910:	46a0      	mov	r8, r4
 8000912:	2b01      	cmp	r3, #1
 8000914:	d105      	bne.n	8000922 <__aeabi_fdiv+0x13a>
 8000916:	2000      	movs	r0, #0
 8000918:	2200      	movs	r2, #0
 800091a:	e7e7      	b.n	80008ec <__aeabi_fdiv+0x104>
 800091c:	0035      	movs	r5, r6
 800091e:	2803      	cmp	r0, #3
 8000920:	d07a      	beq.n	8000a18 <__aeabi_fdiv+0x230>
 8000922:	003b      	movs	r3, r7
 8000924:	337f      	adds	r3, #127	@ 0x7f
 8000926:	2b00      	cmp	r3, #0
 8000928:	dd2d      	ble.n	8000986 <__aeabi_fdiv+0x19e>
 800092a:	4642      	mov	r2, r8
 800092c:	0752      	lsls	r2, r2, #29
 800092e:	d007      	beq.n	8000940 <__aeabi_fdiv+0x158>
 8000930:	220f      	movs	r2, #15
 8000932:	4641      	mov	r1, r8
 8000934:	400a      	ands	r2, r1
 8000936:	2a04      	cmp	r2, #4
 8000938:	d002      	beq.n	8000940 <__aeabi_fdiv+0x158>
 800093a:	2204      	movs	r2, #4
 800093c:	4694      	mov	ip, r2
 800093e:	44e0      	add	r8, ip
 8000940:	4642      	mov	r2, r8
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	d505      	bpl.n	8000952 <__aeabi_fdiv+0x16a>
 8000946:	4642      	mov	r2, r8
 8000948:	4b36      	ldr	r3, [pc, #216]	@ (8000a24 <__aeabi_fdiv+0x23c>)
 800094a:	401a      	ands	r2, r3
 800094c:	003b      	movs	r3, r7
 800094e:	4690      	mov	r8, r2
 8000950:	3380      	adds	r3, #128	@ 0x80
 8000952:	2bfe      	cmp	r3, #254	@ 0xfe
 8000954:	dcc8      	bgt.n	80008e8 <__aeabi_fdiv+0x100>
 8000956:	4642      	mov	r2, r8
 8000958:	0192      	lsls	r2, r2, #6
 800095a:	0a52      	lsrs	r2, r2, #9
 800095c:	b2d8      	uxtb	r0, r3
 800095e:	e7c5      	b.n	80008ec <__aeabi_fdiv+0x104>
 8000960:	2280      	movs	r2, #128	@ 0x80
 8000962:	2500      	movs	r5, #0
 8000964:	20ff      	movs	r0, #255	@ 0xff
 8000966:	03d2      	lsls	r2, r2, #15
 8000968:	e7c0      	b.n	80008ec <__aeabi_fdiv+0x104>
 800096a:	2280      	movs	r2, #128	@ 0x80
 800096c:	03d2      	lsls	r2, r2, #15
 800096e:	4214      	tst	r4, r2
 8000970:	d002      	beq.n	8000978 <__aeabi_fdiv+0x190>
 8000972:	4643      	mov	r3, r8
 8000974:	4213      	tst	r3, r2
 8000976:	d049      	beq.n	8000a0c <__aeabi_fdiv+0x224>
 8000978:	2280      	movs	r2, #128	@ 0x80
 800097a:	03d2      	lsls	r2, r2, #15
 800097c:	4322      	orrs	r2, r4
 800097e:	0252      	lsls	r2, r2, #9
 8000980:	20ff      	movs	r0, #255	@ 0xff
 8000982:	0a52      	lsrs	r2, r2, #9
 8000984:	e7b2      	b.n	80008ec <__aeabi_fdiv+0x104>
 8000986:	2201      	movs	r2, #1
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	2b1b      	cmp	r3, #27
 800098c:	dcc3      	bgt.n	8000916 <__aeabi_fdiv+0x12e>
 800098e:	4642      	mov	r2, r8
 8000990:	40da      	lsrs	r2, r3
 8000992:	4643      	mov	r3, r8
 8000994:	379e      	adds	r7, #158	@ 0x9e
 8000996:	40bb      	lsls	r3, r7
 8000998:	1e59      	subs	r1, r3, #1
 800099a:	418b      	sbcs	r3, r1
 800099c:	431a      	orrs	r2, r3
 800099e:	0753      	lsls	r3, r2, #29
 80009a0:	d004      	beq.n	80009ac <__aeabi_fdiv+0x1c4>
 80009a2:	230f      	movs	r3, #15
 80009a4:	4013      	ands	r3, r2
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	d000      	beq.n	80009ac <__aeabi_fdiv+0x1c4>
 80009aa:	3204      	adds	r2, #4
 80009ac:	0153      	lsls	r3, r2, #5
 80009ae:	d529      	bpl.n	8000a04 <__aeabi_fdiv+0x21c>
 80009b0:	2001      	movs	r0, #1
 80009b2:	2200      	movs	r2, #0
 80009b4:	e79a      	b.n	80008ec <__aeabi_fdiv+0x104>
 80009b6:	4642      	mov	r2, r8
 80009b8:	0163      	lsls	r3, r4, #5
 80009ba:	0155      	lsls	r5, r2, #5
 80009bc:	42ab      	cmp	r3, r5
 80009be:	d215      	bcs.n	80009ec <__aeabi_fdiv+0x204>
 80009c0:	201b      	movs	r0, #27
 80009c2:	2200      	movs	r2, #0
 80009c4:	3f01      	subs	r7, #1
 80009c6:	2601      	movs	r6, #1
 80009c8:	001c      	movs	r4, r3
 80009ca:	0052      	lsls	r2, r2, #1
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	2c00      	cmp	r4, #0
 80009d0:	db01      	blt.n	80009d6 <__aeabi_fdiv+0x1ee>
 80009d2:	429d      	cmp	r5, r3
 80009d4:	d801      	bhi.n	80009da <__aeabi_fdiv+0x1f2>
 80009d6:	1b5b      	subs	r3, r3, r5
 80009d8:	4332      	orrs	r2, r6
 80009da:	3801      	subs	r0, #1
 80009dc:	2800      	cmp	r0, #0
 80009de:	d1f3      	bne.n	80009c8 <__aeabi_fdiv+0x1e0>
 80009e0:	1e58      	subs	r0, r3, #1
 80009e2:	4183      	sbcs	r3, r0
 80009e4:	4313      	orrs	r3, r2
 80009e6:	4698      	mov	r8, r3
 80009e8:	000d      	movs	r5, r1
 80009ea:	e79a      	b.n	8000922 <__aeabi_fdiv+0x13a>
 80009ec:	201a      	movs	r0, #26
 80009ee:	2201      	movs	r2, #1
 80009f0:	1b5b      	subs	r3, r3, r5
 80009f2:	e7e8      	b.n	80009c6 <__aeabi_fdiv+0x1de>
 80009f4:	3b02      	subs	r3, #2
 80009f6:	425a      	negs	r2, r3
 80009f8:	4153      	adcs	r3, r2
 80009fa:	425b      	negs	r3, r3
 80009fc:	0035      	movs	r5, r6
 80009fe:	2200      	movs	r2, #0
 8000a00:	b2d8      	uxtb	r0, r3
 8000a02:	e773      	b.n	80008ec <__aeabi_fdiv+0x104>
 8000a04:	0192      	lsls	r2, r2, #6
 8000a06:	2000      	movs	r0, #0
 8000a08:	0a52      	lsrs	r2, r2, #9
 8000a0a:	e76f      	b.n	80008ec <__aeabi_fdiv+0x104>
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	0252      	lsls	r2, r2, #9
 8000a10:	0035      	movs	r5, r6
 8000a12:	20ff      	movs	r0, #255	@ 0xff
 8000a14:	0a52      	lsrs	r2, r2, #9
 8000a16:	e769      	b.n	80008ec <__aeabi_fdiv+0x104>
 8000a18:	4644      	mov	r4, r8
 8000a1a:	e7ad      	b.n	8000978 <__aeabi_fdiv+0x190>
 8000a1c:	0800fcf8 	.word	0x0800fcf8
 8000a20:	0800fd38 	.word	0x0800fd38
 8000a24:	f7ffffff 	.word	0xf7ffffff

08000a28 <__eqsf2>:
 8000a28:	b570      	push	{r4, r5, r6, lr}
 8000a2a:	0042      	lsls	r2, r0, #1
 8000a2c:	024e      	lsls	r6, r1, #9
 8000a2e:	004c      	lsls	r4, r1, #1
 8000a30:	0245      	lsls	r5, r0, #9
 8000a32:	0a6d      	lsrs	r5, r5, #9
 8000a34:	0e12      	lsrs	r2, r2, #24
 8000a36:	0fc3      	lsrs	r3, r0, #31
 8000a38:	0a76      	lsrs	r6, r6, #9
 8000a3a:	0e24      	lsrs	r4, r4, #24
 8000a3c:	0fc9      	lsrs	r1, r1, #31
 8000a3e:	2aff      	cmp	r2, #255	@ 0xff
 8000a40:	d010      	beq.n	8000a64 <__eqsf2+0x3c>
 8000a42:	2cff      	cmp	r4, #255	@ 0xff
 8000a44:	d00c      	beq.n	8000a60 <__eqsf2+0x38>
 8000a46:	2001      	movs	r0, #1
 8000a48:	42a2      	cmp	r2, r4
 8000a4a:	d10a      	bne.n	8000a62 <__eqsf2+0x3a>
 8000a4c:	42b5      	cmp	r5, r6
 8000a4e:	d108      	bne.n	8000a62 <__eqsf2+0x3a>
 8000a50:	428b      	cmp	r3, r1
 8000a52:	d00f      	beq.n	8000a74 <__eqsf2+0x4c>
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	d104      	bne.n	8000a62 <__eqsf2+0x3a>
 8000a58:	0028      	movs	r0, r5
 8000a5a:	1e43      	subs	r3, r0, #1
 8000a5c:	4198      	sbcs	r0, r3
 8000a5e:	e000      	b.n	8000a62 <__eqsf2+0x3a>
 8000a60:	2001      	movs	r0, #1
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
 8000a64:	2001      	movs	r0, #1
 8000a66:	2cff      	cmp	r4, #255	@ 0xff
 8000a68:	d1fb      	bne.n	8000a62 <__eqsf2+0x3a>
 8000a6a:	4335      	orrs	r5, r6
 8000a6c:	d1f9      	bne.n	8000a62 <__eqsf2+0x3a>
 8000a6e:	404b      	eors	r3, r1
 8000a70:	0018      	movs	r0, r3
 8000a72:	e7f6      	b.n	8000a62 <__eqsf2+0x3a>
 8000a74:	2000      	movs	r0, #0
 8000a76:	e7f4      	b.n	8000a62 <__eqsf2+0x3a>

08000a78 <__gesf2>:
 8000a78:	b530      	push	{r4, r5, lr}
 8000a7a:	0042      	lsls	r2, r0, #1
 8000a7c:	0244      	lsls	r4, r0, #9
 8000a7e:	024d      	lsls	r5, r1, #9
 8000a80:	0fc3      	lsrs	r3, r0, #31
 8000a82:	0048      	lsls	r0, r1, #1
 8000a84:	0a64      	lsrs	r4, r4, #9
 8000a86:	0e12      	lsrs	r2, r2, #24
 8000a88:	0a6d      	lsrs	r5, r5, #9
 8000a8a:	0e00      	lsrs	r0, r0, #24
 8000a8c:	0fc9      	lsrs	r1, r1, #31
 8000a8e:	2aff      	cmp	r2, #255	@ 0xff
 8000a90:	d019      	beq.n	8000ac6 <__gesf2+0x4e>
 8000a92:	28ff      	cmp	r0, #255	@ 0xff
 8000a94:	d00b      	beq.n	8000aae <__gesf2+0x36>
 8000a96:	2a00      	cmp	r2, #0
 8000a98:	d11e      	bne.n	8000ad8 <__gesf2+0x60>
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	d10b      	bne.n	8000ab6 <__gesf2+0x3e>
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d027      	beq.n	8000af2 <__gesf2+0x7a>
 8000aa2:	2c00      	cmp	r4, #0
 8000aa4:	d134      	bne.n	8000b10 <__gesf2+0x98>
 8000aa6:	2900      	cmp	r1, #0
 8000aa8:	d02f      	beq.n	8000b0a <__gesf2+0x92>
 8000aaa:	0008      	movs	r0, r1
 8000aac:	bd30      	pop	{r4, r5, pc}
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	d128      	bne.n	8000b04 <__gesf2+0x8c>
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	d101      	bne.n	8000aba <__gesf2+0x42>
 8000ab6:	2c00      	cmp	r4, #0
 8000ab8:	d0f5      	beq.n	8000aa6 <__gesf2+0x2e>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d107      	bne.n	8000ace <__gesf2+0x56>
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d023      	beq.n	8000b0a <__gesf2+0x92>
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	e7f2      	b.n	8000aac <__gesf2+0x34>
 8000ac6:	2c00      	cmp	r4, #0
 8000ac8:	d11c      	bne.n	8000b04 <__gesf2+0x8c>
 8000aca:	28ff      	cmp	r0, #255	@ 0xff
 8000acc:	d014      	beq.n	8000af8 <__gesf2+0x80>
 8000ace:	1e58      	subs	r0, r3, #1
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	4018      	ands	r0, r3
 8000ad4:	3801      	subs	r0, #1
 8000ad6:	e7e9      	b.n	8000aac <__gesf2+0x34>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d0f8      	beq.n	8000ace <__gesf2+0x56>
 8000adc:	428b      	cmp	r3, r1
 8000ade:	d1f6      	bne.n	8000ace <__gesf2+0x56>
 8000ae0:	4282      	cmp	r2, r0
 8000ae2:	dcf4      	bgt.n	8000ace <__gesf2+0x56>
 8000ae4:	dbeb      	blt.n	8000abe <__gesf2+0x46>
 8000ae6:	42ac      	cmp	r4, r5
 8000ae8:	d8f1      	bhi.n	8000ace <__gesf2+0x56>
 8000aea:	2000      	movs	r0, #0
 8000aec:	42ac      	cmp	r4, r5
 8000aee:	d2dd      	bcs.n	8000aac <__gesf2+0x34>
 8000af0:	e7e5      	b.n	8000abe <__gesf2+0x46>
 8000af2:	2c00      	cmp	r4, #0
 8000af4:	d0da      	beq.n	8000aac <__gesf2+0x34>
 8000af6:	e7ea      	b.n	8000ace <__gesf2+0x56>
 8000af8:	2d00      	cmp	r5, #0
 8000afa:	d103      	bne.n	8000b04 <__gesf2+0x8c>
 8000afc:	428b      	cmp	r3, r1
 8000afe:	d1e6      	bne.n	8000ace <__gesf2+0x56>
 8000b00:	2000      	movs	r0, #0
 8000b02:	e7d3      	b.n	8000aac <__gesf2+0x34>
 8000b04:	2002      	movs	r0, #2
 8000b06:	4240      	negs	r0, r0
 8000b08:	e7d0      	b.n	8000aac <__gesf2+0x34>
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	4240      	negs	r0, r0
 8000b0e:	e7cd      	b.n	8000aac <__gesf2+0x34>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d0e8      	beq.n	8000ae6 <__gesf2+0x6e>
 8000b14:	e7db      	b.n	8000ace <__gesf2+0x56>
 8000b16:	46c0      	nop			@ (mov r8, r8)

08000b18 <__lesf2>:
 8000b18:	b530      	push	{r4, r5, lr}
 8000b1a:	0042      	lsls	r2, r0, #1
 8000b1c:	0244      	lsls	r4, r0, #9
 8000b1e:	024d      	lsls	r5, r1, #9
 8000b20:	0fc3      	lsrs	r3, r0, #31
 8000b22:	0048      	lsls	r0, r1, #1
 8000b24:	0a64      	lsrs	r4, r4, #9
 8000b26:	0e12      	lsrs	r2, r2, #24
 8000b28:	0a6d      	lsrs	r5, r5, #9
 8000b2a:	0e00      	lsrs	r0, r0, #24
 8000b2c:	0fc9      	lsrs	r1, r1, #31
 8000b2e:	2aff      	cmp	r2, #255	@ 0xff
 8000b30:	d01a      	beq.n	8000b68 <__lesf2+0x50>
 8000b32:	28ff      	cmp	r0, #255	@ 0xff
 8000b34:	d00e      	beq.n	8000b54 <__lesf2+0x3c>
 8000b36:	2a00      	cmp	r2, #0
 8000b38:	d11e      	bne.n	8000b78 <__lesf2+0x60>
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d10e      	bne.n	8000b5c <__lesf2+0x44>
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d02a      	beq.n	8000b98 <__lesf2+0x80>
 8000b42:	2c00      	cmp	r4, #0
 8000b44:	d00c      	beq.n	8000b60 <__lesf2+0x48>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d01d      	beq.n	8000b86 <__lesf2+0x6e>
 8000b4a:	1e58      	subs	r0, r3, #1
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	4018      	ands	r0, r3
 8000b50:	3801      	subs	r0, #1
 8000b52:	e010      	b.n	8000b76 <__lesf2+0x5e>
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d10d      	bne.n	8000b74 <__lesf2+0x5c>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d120      	bne.n	8000b9e <__lesf2+0x86>
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d11e      	bne.n	8000b9e <__lesf2+0x86>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	d023      	beq.n	8000bac <__lesf2+0x94>
 8000b64:	0008      	movs	r0, r1
 8000b66:	e006      	b.n	8000b76 <__lesf2+0x5e>
 8000b68:	2c00      	cmp	r4, #0
 8000b6a:	d103      	bne.n	8000b74 <__lesf2+0x5c>
 8000b6c:	28ff      	cmp	r0, #255	@ 0xff
 8000b6e:	d1ec      	bne.n	8000b4a <__lesf2+0x32>
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d017      	beq.n	8000ba4 <__lesf2+0x8c>
 8000b74:	2002      	movs	r0, #2
 8000b76:	bd30      	pop	{r4, r5, pc}
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	d0e6      	beq.n	8000b4a <__lesf2+0x32>
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d1e4      	bne.n	8000b4a <__lesf2+0x32>
 8000b80:	4282      	cmp	r2, r0
 8000b82:	dce2      	bgt.n	8000b4a <__lesf2+0x32>
 8000b84:	db04      	blt.n	8000b90 <__lesf2+0x78>
 8000b86:	42ac      	cmp	r4, r5
 8000b88:	d8df      	bhi.n	8000b4a <__lesf2+0x32>
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	42ac      	cmp	r4, r5
 8000b8e:	d2f2      	bcs.n	8000b76 <__lesf2+0x5e>
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d00b      	beq.n	8000bac <__lesf2+0x94>
 8000b94:	0018      	movs	r0, r3
 8000b96:	e7ee      	b.n	8000b76 <__lesf2+0x5e>
 8000b98:	2c00      	cmp	r4, #0
 8000b9a:	d0ec      	beq.n	8000b76 <__lesf2+0x5e>
 8000b9c:	e7d5      	b.n	8000b4a <__lesf2+0x32>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d1d3      	bne.n	8000b4a <__lesf2+0x32>
 8000ba2:	e7f5      	b.n	8000b90 <__lesf2+0x78>
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d0e5      	beq.n	8000b76 <__lesf2+0x5e>
 8000baa:	e7ce      	b.n	8000b4a <__lesf2+0x32>
 8000bac:	2001      	movs	r0, #1
 8000bae:	4240      	negs	r0, r0
 8000bb0:	e7e1      	b.n	8000b76 <__lesf2+0x5e>
 8000bb2:	46c0      	nop			@ (mov r8, r8)

08000bb4 <__aeabi_fmul>:
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	464f      	mov	r7, r9
 8000bb8:	4646      	mov	r6, r8
 8000bba:	46d6      	mov	lr, sl
 8000bbc:	0243      	lsls	r3, r0, #9
 8000bbe:	0a5b      	lsrs	r3, r3, #9
 8000bc0:	0045      	lsls	r5, r0, #1
 8000bc2:	b5c0      	push	{r6, r7, lr}
 8000bc4:	4699      	mov	r9, r3
 8000bc6:	1c0f      	adds	r7, r1, #0
 8000bc8:	0e2d      	lsrs	r5, r5, #24
 8000bca:	0fc6      	lsrs	r6, r0, #31
 8000bcc:	2d00      	cmp	r5, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_fmul+0x1e>
 8000bd0:	e088      	b.n	8000ce4 <__aeabi_fmul+0x130>
 8000bd2:	2dff      	cmp	r5, #255	@ 0xff
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_fmul+0x24>
 8000bd6:	e08d      	b.n	8000cf4 <__aeabi_fmul+0x140>
 8000bd8:	2280      	movs	r2, #128	@ 0x80
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	04d2      	lsls	r2, r2, #19
 8000bde:	431a      	orrs	r2, r3
 8000be0:	2300      	movs	r3, #0
 8000be2:	4691      	mov	r9, r2
 8000be4:	4698      	mov	r8, r3
 8000be6:	469a      	mov	sl, r3
 8000be8:	3d7f      	subs	r5, #127	@ 0x7f
 8000bea:	027c      	lsls	r4, r7, #9
 8000bec:	007b      	lsls	r3, r7, #1
 8000bee:	0a64      	lsrs	r4, r4, #9
 8000bf0:	0e1b      	lsrs	r3, r3, #24
 8000bf2:	0fff      	lsrs	r7, r7, #31
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d068      	beq.n	8000cca <__aeabi_fmul+0x116>
 8000bf8:	2bff      	cmp	r3, #255	@ 0xff
 8000bfa:	d021      	beq.n	8000c40 <__aeabi_fmul+0x8c>
 8000bfc:	2280      	movs	r2, #128	@ 0x80
 8000bfe:	00e4      	lsls	r4, r4, #3
 8000c00:	04d2      	lsls	r2, r2, #19
 8000c02:	4314      	orrs	r4, r2
 8000c04:	4642      	mov	r2, r8
 8000c06:	3b7f      	subs	r3, #127	@ 0x7f
 8000c08:	195b      	adds	r3, r3, r5
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	1c5d      	adds	r5, r3, #1
 8000c0e:	2a0a      	cmp	r2, #10
 8000c10:	dc2e      	bgt.n	8000c70 <__aeabi_fmul+0xbc>
 8000c12:	407e      	eors	r6, r7
 8000c14:	4642      	mov	r2, r8
 8000c16:	2a02      	cmp	r2, #2
 8000c18:	dc23      	bgt.n	8000c62 <__aeabi_fmul+0xae>
 8000c1a:	3a01      	subs	r2, #1
 8000c1c:	2a01      	cmp	r2, #1
 8000c1e:	d900      	bls.n	8000c22 <__aeabi_fmul+0x6e>
 8000c20:	e0bd      	b.n	8000d9e <__aeabi_fmul+0x1ea>
 8000c22:	2902      	cmp	r1, #2
 8000c24:	d06e      	beq.n	8000d04 <__aeabi_fmul+0x150>
 8000c26:	2901      	cmp	r1, #1
 8000c28:	d12c      	bne.n	8000c84 <__aeabi_fmul+0xd0>
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	05c0      	lsls	r0, r0, #23
 8000c30:	07f6      	lsls	r6, r6, #31
 8000c32:	4310      	orrs	r0, r2
 8000c34:	4330      	orrs	r0, r6
 8000c36:	bce0      	pop	{r5, r6, r7}
 8000c38:	46ba      	mov	sl, r7
 8000c3a:	46b1      	mov	r9, r6
 8000c3c:	46a8      	mov	r8, r5
 8000c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c40:	002b      	movs	r3, r5
 8000c42:	33ff      	adds	r3, #255	@ 0xff
 8000c44:	2c00      	cmp	r4, #0
 8000c46:	d065      	beq.n	8000d14 <__aeabi_fmul+0x160>
 8000c48:	2203      	movs	r2, #3
 8000c4a:	4641      	mov	r1, r8
 8000c4c:	4311      	orrs	r1, r2
 8000c4e:	0032      	movs	r2, r6
 8000c50:	3501      	adds	r5, #1
 8000c52:	4688      	mov	r8, r1
 8000c54:	407a      	eors	r2, r7
 8000c56:	35ff      	adds	r5, #255	@ 0xff
 8000c58:	290a      	cmp	r1, #10
 8000c5a:	dd00      	ble.n	8000c5e <__aeabi_fmul+0xaa>
 8000c5c:	e0d8      	b.n	8000e10 <__aeabi_fmul+0x25c>
 8000c5e:	0016      	movs	r6, r2
 8000c60:	2103      	movs	r1, #3
 8000c62:	4640      	mov	r0, r8
 8000c64:	2201      	movs	r2, #1
 8000c66:	4082      	lsls	r2, r0
 8000c68:	20a6      	movs	r0, #166	@ 0xa6
 8000c6a:	00c0      	lsls	r0, r0, #3
 8000c6c:	4202      	tst	r2, r0
 8000c6e:	d020      	beq.n	8000cb2 <__aeabi_fmul+0xfe>
 8000c70:	4653      	mov	r3, sl
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d046      	beq.n	8000d04 <__aeabi_fmul+0x150>
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fmul+0xc8>
 8000c7a:	e0bb      	b.n	8000df4 <__aeabi_fmul+0x240>
 8000c7c:	4651      	mov	r1, sl
 8000c7e:	464c      	mov	r4, r9
 8000c80:	2901      	cmp	r1, #1
 8000c82:	d0d2      	beq.n	8000c2a <__aeabi_fmul+0x76>
 8000c84:	002b      	movs	r3, r5
 8000c86:	337f      	adds	r3, #127	@ 0x7f
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	dd70      	ble.n	8000d6e <__aeabi_fmul+0x1ba>
 8000c8c:	0762      	lsls	r2, r4, #29
 8000c8e:	d004      	beq.n	8000c9a <__aeabi_fmul+0xe6>
 8000c90:	220f      	movs	r2, #15
 8000c92:	4022      	ands	r2, r4
 8000c94:	2a04      	cmp	r2, #4
 8000c96:	d000      	beq.n	8000c9a <__aeabi_fmul+0xe6>
 8000c98:	3404      	adds	r4, #4
 8000c9a:	0122      	lsls	r2, r4, #4
 8000c9c:	d503      	bpl.n	8000ca6 <__aeabi_fmul+0xf2>
 8000c9e:	4b63      	ldr	r3, [pc, #396]	@ (8000e2c <__aeabi_fmul+0x278>)
 8000ca0:	401c      	ands	r4, r3
 8000ca2:	002b      	movs	r3, r5
 8000ca4:	3380      	adds	r3, #128	@ 0x80
 8000ca6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ca8:	dc2c      	bgt.n	8000d04 <__aeabi_fmul+0x150>
 8000caa:	01a2      	lsls	r2, r4, #6
 8000cac:	0a52      	lsrs	r2, r2, #9
 8000cae:	b2d8      	uxtb	r0, r3
 8000cb0:	e7bd      	b.n	8000c2e <__aeabi_fmul+0x7a>
 8000cb2:	2090      	movs	r0, #144	@ 0x90
 8000cb4:	0080      	lsls	r0, r0, #2
 8000cb6:	4202      	tst	r2, r0
 8000cb8:	d127      	bne.n	8000d0a <__aeabi_fmul+0x156>
 8000cba:	38b9      	subs	r0, #185	@ 0xb9
 8000cbc:	38ff      	subs	r0, #255	@ 0xff
 8000cbe:	4210      	tst	r0, r2
 8000cc0:	d06d      	beq.n	8000d9e <__aeabi_fmul+0x1ea>
 8000cc2:	003e      	movs	r6, r7
 8000cc4:	46a1      	mov	r9, r4
 8000cc6:	468a      	mov	sl, r1
 8000cc8:	e7d2      	b.n	8000c70 <__aeabi_fmul+0xbc>
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d141      	bne.n	8000d52 <__aeabi_fmul+0x19e>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4642      	mov	r2, r8
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	4690      	mov	r8, r2
 8000cd6:	002b      	movs	r3, r5
 8000cd8:	4642      	mov	r2, r8
 8000cda:	2101      	movs	r1, #1
 8000cdc:	1c5d      	adds	r5, r3, #1
 8000cde:	2a0a      	cmp	r2, #10
 8000ce0:	dd97      	ble.n	8000c12 <__aeabi_fmul+0x5e>
 8000ce2:	e7c5      	b.n	8000c70 <__aeabi_fmul+0xbc>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d126      	bne.n	8000d36 <__aeabi_fmul+0x182>
 8000ce8:	2304      	movs	r3, #4
 8000cea:	4698      	mov	r8, r3
 8000cec:	3b03      	subs	r3, #3
 8000cee:	2500      	movs	r5, #0
 8000cf0:	469a      	mov	sl, r3
 8000cf2:	e77a      	b.n	8000bea <__aeabi_fmul+0x36>
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d118      	bne.n	8000d2a <__aeabi_fmul+0x176>
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	4698      	mov	r8, r3
 8000cfc:	3b06      	subs	r3, #6
 8000cfe:	25ff      	movs	r5, #255	@ 0xff
 8000d00:	469a      	mov	sl, r3
 8000d02:	e772      	b.n	8000bea <__aeabi_fmul+0x36>
 8000d04:	20ff      	movs	r0, #255	@ 0xff
 8000d06:	2200      	movs	r2, #0
 8000d08:	e791      	b.n	8000c2e <__aeabi_fmul+0x7a>
 8000d0a:	2280      	movs	r2, #128	@ 0x80
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	20ff      	movs	r0, #255	@ 0xff
 8000d10:	03d2      	lsls	r2, r2, #15
 8000d12:	e78c      	b.n	8000c2e <__aeabi_fmul+0x7a>
 8000d14:	4641      	mov	r1, r8
 8000d16:	2202      	movs	r2, #2
 8000d18:	3501      	adds	r5, #1
 8000d1a:	4311      	orrs	r1, r2
 8000d1c:	4688      	mov	r8, r1
 8000d1e:	35ff      	adds	r5, #255	@ 0xff
 8000d20:	290a      	cmp	r1, #10
 8000d22:	dca5      	bgt.n	8000c70 <__aeabi_fmul+0xbc>
 8000d24:	2102      	movs	r1, #2
 8000d26:	407e      	eors	r6, r7
 8000d28:	e774      	b.n	8000c14 <__aeabi_fmul+0x60>
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	4698      	mov	r8, r3
 8000d2e:	3b09      	subs	r3, #9
 8000d30:	25ff      	movs	r5, #255	@ 0xff
 8000d32:	469a      	mov	sl, r3
 8000d34:	e759      	b.n	8000bea <__aeabi_fmul+0x36>
 8000d36:	0018      	movs	r0, r3
 8000d38:	f001 f9b0 	bl	800209c <__clzsi2>
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	1f43      	subs	r3, r0, #5
 8000d40:	2576      	movs	r5, #118	@ 0x76
 8000d42:	409a      	lsls	r2, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	426d      	negs	r5, r5
 8000d48:	4691      	mov	r9, r2
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	469a      	mov	sl, r3
 8000d4e:	1a2d      	subs	r5, r5, r0
 8000d50:	e74b      	b.n	8000bea <__aeabi_fmul+0x36>
 8000d52:	0020      	movs	r0, r4
 8000d54:	f001 f9a2 	bl	800209c <__clzsi2>
 8000d58:	4642      	mov	r2, r8
 8000d5a:	1f43      	subs	r3, r0, #5
 8000d5c:	409c      	lsls	r4, r3
 8000d5e:	1a2b      	subs	r3, r5, r0
 8000d60:	3b76      	subs	r3, #118	@ 0x76
 8000d62:	2100      	movs	r1, #0
 8000d64:	1c5d      	adds	r5, r3, #1
 8000d66:	2a0a      	cmp	r2, #10
 8000d68:	dc00      	bgt.n	8000d6c <__aeabi_fmul+0x1b8>
 8000d6a:	e752      	b.n	8000c12 <__aeabi_fmul+0x5e>
 8000d6c:	e780      	b.n	8000c70 <__aeabi_fmul+0xbc>
 8000d6e:	2201      	movs	r2, #1
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b1b      	cmp	r3, #27
 8000d74:	dd00      	ble.n	8000d78 <__aeabi_fmul+0x1c4>
 8000d76:	e758      	b.n	8000c2a <__aeabi_fmul+0x76>
 8000d78:	359e      	adds	r5, #158	@ 0x9e
 8000d7a:	0022      	movs	r2, r4
 8000d7c:	40ac      	lsls	r4, r5
 8000d7e:	40da      	lsrs	r2, r3
 8000d80:	1e63      	subs	r3, r4, #1
 8000d82:	419c      	sbcs	r4, r3
 8000d84:	4322      	orrs	r2, r4
 8000d86:	0753      	lsls	r3, r2, #29
 8000d88:	d004      	beq.n	8000d94 <__aeabi_fmul+0x1e0>
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d000      	beq.n	8000d94 <__aeabi_fmul+0x1e0>
 8000d92:	3204      	adds	r2, #4
 8000d94:	0153      	lsls	r3, r2, #5
 8000d96:	d537      	bpl.n	8000e08 <__aeabi_fmul+0x254>
 8000d98:	2001      	movs	r0, #1
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	e747      	b.n	8000c2e <__aeabi_fmul+0x7a>
 8000d9e:	0c21      	lsrs	r1, r4, #16
 8000da0:	464a      	mov	r2, r9
 8000da2:	0424      	lsls	r4, r4, #16
 8000da4:	0c24      	lsrs	r4, r4, #16
 8000da6:	0027      	movs	r7, r4
 8000da8:	0c10      	lsrs	r0, r2, #16
 8000daa:	0412      	lsls	r2, r2, #16
 8000dac:	0c12      	lsrs	r2, r2, #16
 8000dae:	4344      	muls	r4, r0
 8000db0:	4357      	muls	r7, r2
 8000db2:	4348      	muls	r0, r1
 8000db4:	4351      	muls	r1, r2
 8000db6:	0c3a      	lsrs	r2, r7, #16
 8000db8:	1909      	adds	r1, r1, r4
 8000dba:	1852      	adds	r2, r2, r1
 8000dbc:	4294      	cmp	r4, r2
 8000dbe:	d903      	bls.n	8000dc8 <__aeabi_fmul+0x214>
 8000dc0:	2180      	movs	r1, #128	@ 0x80
 8000dc2:	0249      	lsls	r1, r1, #9
 8000dc4:	468c      	mov	ip, r1
 8000dc6:	4460      	add	r0, ip
 8000dc8:	043f      	lsls	r7, r7, #16
 8000dca:	0411      	lsls	r1, r2, #16
 8000dcc:	0c3f      	lsrs	r7, r7, #16
 8000dce:	19c9      	adds	r1, r1, r7
 8000dd0:	018c      	lsls	r4, r1, #6
 8000dd2:	1e67      	subs	r7, r4, #1
 8000dd4:	41bc      	sbcs	r4, r7
 8000dd6:	0c12      	lsrs	r2, r2, #16
 8000dd8:	0e89      	lsrs	r1, r1, #26
 8000dda:	1812      	adds	r2, r2, r0
 8000ddc:	430c      	orrs	r4, r1
 8000dde:	0192      	lsls	r2, r2, #6
 8000de0:	4314      	orrs	r4, r2
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	d50e      	bpl.n	8000e04 <__aeabi_fmul+0x250>
 8000de6:	2301      	movs	r3, #1
 8000de8:	0862      	lsrs	r2, r4, #1
 8000dea:	401c      	ands	r4, r3
 8000dec:	4314      	orrs	r4, r2
 8000dee:	e749      	b.n	8000c84 <__aeabi_fmul+0xd0>
 8000df0:	003e      	movs	r6, r7
 8000df2:	46a1      	mov	r9, r4
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	464b      	mov	r3, r9
 8000df8:	03d2      	lsls	r2, r2, #15
 8000dfa:	431a      	orrs	r2, r3
 8000dfc:	0252      	lsls	r2, r2, #9
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e714      	b.n	8000c2e <__aeabi_fmul+0x7a>
 8000e04:	001d      	movs	r5, r3
 8000e06:	e73d      	b.n	8000c84 <__aeabi_fmul+0xd0>
 8000e08:	0192      	lsls	r2, r2, #6
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	0a52      	lsrs	r2, r2, #9
 8000e0e:	e70e      	b.n	8000c2e <__aeabi_fmul+0x7a>
 8000e10:	290f      	cmp	r1, #15
 8000e12:	d1ed      	bne.n	8000df0 <__aeabi_fmul+0x23c>
 8000e14:	2280      	movs	r2, #128	@ 0x80
 8000e16:	464b      	mov	r3, r9
 8000e18:	03d2      	lsls	r2, r2, #15
 8000e1a:	4213      	tst	r3, r2
 8000e1c:	d0ea      	beq.n	8000df4 <__aeabi_fmul+0x240>
 8000e1e:	4214      	tst	r4, r2
 8000e20:	d1e8      	bne.n	8000df4 <__aeabi_fmul+0x240>
 8000e22:	003e      	movs	r6, r7
 8000e24:	20ff      	movs	r0, #255	@ 0xff
 8000e26:	4322      	orrs	r2, r4
 8000e28:	e701      	b.n	8000c2e <__aeabi_fmul+0x7a>
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	f7ffffff 	.word	0xf7ffffff

08000e30 <__aeabi_fsub>:
 8000e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e32:	4647      	mov	r7, r8
 8000e34:	46ce      	mov	lr, r9
 8000e36:	024e      	lsls	r6, r1, #9
 8000e38:	0243      	lsls	r3, r0, #9
 8000e3a:	0045      	lsls	r5, r0, #1
 8000e3c:	0a72      	lsrs	r2, r6, #9
 8000e3e:	0fc4      	lsrs	r4, r0, #31
 8000e40:	0048      	lsls	r0, r1, #1
 8000e42:	b580      	push	{r7, lr}
 8000e44:	4694      	mov	ip, r2
 8000e46:	0a5f      	lsrs	r7, r3, #9
 8000e48:	0e2d      	lsrs	r5, r5, #24
 8000e4a:	099b      	lsrs	r3, r3, #6
 8000e4c:	0e00      	lsrs	r0, r0, #24
 8000e4e:	0fc9      	lsrs	r1, r1, #31
 8000e50:	09b6      	lsrs	r6, r6, #6
 8000e52:	28ff      	cmp	r0, #255	@ 0xff
 8000e54:	d024      	beq.n	8000ea0 <__aeabi_fsub+0x70>
 8000e56:	2201      	movs	r2, #1
 8000e58:	4051      	eors	r1, r2
 8000e5a:	1a2a      	subs	r2, r5, r0
 8000e5c:	428c      	cmp	r4, r1
 8000e5e:	d00f      	beq.n	8000e80 <__aeabi_fsub+0x50>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	dc00      	bgt.n	8000e66 <__aeabi_fsub+0x36>
 8000e64:	e16a      	b.n	800113c <__aeabi_fsub+0x30c>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	d135      	bne.n	8000ed6 <__aeabi_fsub+0xa6>
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_fsub+0x40>
 8000e6e:	e0a2      	b.n	8000fb6 <__aeabi_fsub+0x186>
 8000e70:	1e51      	subs	r1, r2, #1
 8000e72:	2a01      	cmp	r2, #1
 8000e74:	d100      	bne.n	8000e78 <__aeabi_fsub+0x48>
 8000e76:	e124      	b.n	80010c2 <__aeabi_fsub+0x292>
 8000e78:	2aff      	cmp	r2, #255	@ 0xff
 8000e7a:	d021      	beq.n	8000ec0 <__aeabi_fsub+0x90>
 8000e7c:	000a      	movs	r2, r1
 8000e7e:	e02f      	b.n	8000ee0 <__aeabi_fsub+0xb0>
 8000e80:	2a00      	cmp	r2, #0
 8000e82:	dc00      	bgt.n	8000e86 <__aeabi_fsub+0x56>
 8000e84:	e167      	b.n	8001156 <__aeabi_fsub+0x326>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d05e      	beq.n	8000f48 <__aeabi_fsub+0x118>
 8000e8a:	2dff      	cmp	r5, #255	@ 0xff
 8000e8c:	d018      	beq.n	8000ec0 <__aeabi_fsub+0x90>
 8000e8e:	2180      	movs	r1, #128	@ 0x80
 8000e90:	04c9      	lsls	r1, r1, #19
 8000e92:	430e      	orrs	r6, r1
 8000e94:	2a1b      	cmp	r2, #27
 8000e96:	dc00      	bgt.n	8000e9a <__aeabi_fsub+0x6a>
 8000e98:	e076      	b.n	8000f88 <__aeabi_fsub+0x158>
 8000e9a:	002a      	movs	r2, r5
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	e032      	b.n	8000f06 <__aeabi_fsub+0xd6>
 8000ea0:	002a      	movs	r2, r5
 8000ea2:	3aff      	subs	r2, #255	@ 0xff
 8000ea4:	4691      	mov	r9, r2
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d042      	beq.n	8000f30 <__aeabi_fsub+0x100>
 8000eaa:	428c      	cmp	r4, r1
 8000eac:	d055      	beq.n	8000f5a <__aeabi_fsub+0x12a>
 8000eae:	464a      	mov	r2, r9
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_fsub+0x86>
 8000eb4:	e09c      	b.n	8000ff0 <__aeabi_fsub+0x1c0>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_fsub+0x8c>
 8000eba:	e077      	b.n	8000fac <__aeabi_fsub+0x17c>
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	0033      	movs	r3, r6
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_fsub+0x98>
 8000ec6:	e06e      	b.n	8000fa6 <__aeabi_fsub+0x176>
 8000ec8:	2280      	movs	r2, #128	@ 0x80
 8000eca:	03d2      	lsls	r2, r2, #15
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	025b      	lsls	r3, r3, #9
 8000ed0:	20ff      	movs	r0, #255	@ 0xff
 8000ed2:	0a5b      	lsrs	r3, r3, #9
 8000ed4:	e024      	b.n	8000f20 <__aeabi_fsub+0xf0>
 8000ed6:	2dff      	cmp	r5, #255	@ 0xff
 8000ed8:	d0f2      	beq.n	8000ec0 <__aeabi_fsub+0x90>
 8000eda:	2180      	movs	r1, #128	@ 0x80
 8000edc:	04c9      	lsls	r1, r1, #19
 8000ede:	430e      	orrs	r6, r1
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	2a1b      	cmp	r2, #27
 8000ee4:	dc08      	bgt.n	8000ef8 <__aeabi_fsub+0xc8>
 8000ee6:	0031      	movs	r1, r6
 8000ee8:	2020      	movs	r0, #32
 8000eea:	40d1      	lsrs	r1, r2
 8000eec:	1a82      	subs	r2, r0, r2
 8000eee:	4096      	lsls	r6, r2
 8000ef0:	0032      	movs	r2, r6
 8000ef2:	1e50      	subs	r0, r2, #1
 8000ef4:	4182      	sbcs	r2, r0
 8000ef6:	4311      	orrs	r1, r2
 8000ef8:	1a5b      	subs	r3, r3, r1
 8000efa:	015a      	lsls	r2, r3, #5
 8000efc:	d460      	bmi.n	8000fc0 <__aeabi_fsub+0x190>
 8000efe:	2107      	movs	r1, #7
 8000f00:	002a      	movs	r2, r5
 8000f02:	4019      	ands	r1, r3
 8000f04:	d057      	beq.n	8000fb6 <__aeabi_fsub+0x186>
 8000f06:	210f      	movs	r1, #15
 8000f08:	4019      	ands	r1, r3
 8000f0a:	2904      	cmp	r1, #4
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fsub+0xe0>
 8000f0e:	3304      	adds	r3, #4
 8000f10:	0159      	lsls	r1, r3, #5
 8000f12:	d550      	bpl.n	8000fb6 <__aeabi_fsub+0x186>
 8000f14:	1c50      	adds	r0, r2, #1
 8000f16:	2afe      	cmp	r2, #254	@ 0xfe
 8000f18:	d045      	beq.n	8000fa6 <__aeabi_fsub+0x176>
 8000f1a:	019b      	lsls	r3, r3, #6
 8000f1c:	b2c0      	uxtb	r0, r0
 8000f1e:	0a5b      	lsrs	r3, r3, #9
 8000f20:	05c0      	lsls	r0, r0, #23
 8000f22:	4318      	orrs	r0, r3
 8000f24:	07e4      	lsls	r4, r4, #31
 8000f26:	4320      	orrs	r0, r4
 8000f28:	bcc0      	pop	{r6, r7}
 8000f2a:	46b9      	mov	r9, r7
 8000f2c:	46b0      	mov	r8, r6
 8000f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f30:	2201      	movs	r2, #1
 8000f32:	4051      	eors	r1, r2
 8000f34:	428c      	cmp	r4, r1
 8000f36:	d1ba      	bne.n	8000eae <__aeabi_fsub+0x7e>
 8000f38:	464a      	mov	r2, r9
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	d010      	beq.n	8000f60 <__aeabi_fsub+0x130>
 8000f3e:	2d00      	cmp	r5, #0
 8000f40:	d100      	bne.n	8000f44 <__aeabi_fsub+0x114>
 8000f42:	e098      	b.n	8001076 <__aeabi_fsub+0x246>
 8000f44:	2300      	movs	r3, #0
 8000f46:	e7bb      	b.n	8000ec0 <__aeabi_fsub+0x90>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d034      	beq.n	8000fb6 <__aeabi_fsub+0x186>
 8000f4c:	1e51      	subs	r1, r2, #1
 8000f4e:	2a01      	cmp	r2, #1
 8000f50:	d06e      	beq.n	8001030 <__aeabi_fsub+0x200>
 8000f52:	2aff      	cmp	r2, #255	@ 0xff
 8000f54:	d0b4      	beq.n	8000ec0 <__aeabi_fsub+0x90>
 8000f56:	000a      	movs	r2, r1
 8000f58:	e79c      	b.n	8000e94 <__aeabi_fsub+0x64>
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_fsub+0x130>
 8000f5e:	e088      	b.n	8001072 <__aeabi_fsub+0x242>
 8000f60:	20fe      	movs	r0, #254	@ 0xfe
 8000f62:	1c6a      	adds	r2, r5, #1
 8000f64:	4210      	tst	r0, r2
 8000f66:	d000      	beq.n	8000f6a <__aeabi_fsub+0x13a>
 8000f68:	e092      	b.n	8001090 <__aeabi_fsub+0x260>
 8000f6a:	2d00      	cmp	r5, #0
 8000f6c:	d000      	beq.n	8000f70 <__aeabi_fsub+0x140>
 8000f6e:	e0a4      	b.n	80010ba <__aeabi_fsub+0x28a>
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d100      	bne.n	8000f76 <__aeabi_fsub+0x146>
 8000f74:	e0cb      	b.n	800110e <__aeabi_fsub+0x2de>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d000      	beq.n	8000f7c <__aeabi_fsub+0x14c>
 8000f7a:	e0ca      	b.n	8001112 <__aeabi_fsub+0x2e2>
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	08db      	lsrs	r3, r3, #3
 8000f80:	025b      	lsls	r3, r3, #9
 8000f82:	0a5b      	lsrs	r3, r3, #9
 8000f84:	b2d0      	uxtb	r0, r2
 8000f86:	e7cb      	b.n	8000f20 <__aeabi_fsub+0xf0>
 8000f88:	0031      	movs	r1, r6
 8000f8a:	2020      	movs	r0, #32
 8000f8c:	40d1      	lsrs	r1, r2
 8000f8e:	1a82      	subs	r2, r0, r2
 8000f90:	4096      	lsls	r6, r2
 8000f92:	0032      	movs	r2, r6
 8000f94:	1e50      	subs	r0, r2, #1
 8000f96:	4182      	sbcs	r2, r0
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	189b      	adds	r3, r3, r2
 8000f9c:	015a      	lsls	r2, r3, #5
 8000f9e:	d5ae      	bpl.n	8000efe <__aeabi_fsub+0xce>
 8000fa0:	1c6a      	adds	r2, r5, #1
 8000fa2:	2dfe      	cmp	r5, #254	@ 0xfe
 8000fa4:	d14a      	bne.n	800103c <__aeabi_fsub+0x20c>
 8000fa6:	20ff      	movs	r0, #255	@ 0xff
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e7b9      	b.n	8000f20 <__aeabi_fsub+0xf0>
 8000fac:	22ff      	movs	r2, #255	@ 0xff
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d14b      	bne.n	800104a <__aeabi_fsub+0x21a>
 8000fb2:	000c      	movs	r4, r1
 8000fb4:	0033      	movs	r3, r6
 8000fb6:	08db      	lsrs	r3, r3, #3
 8000fb8:	2aff      	cmp	r2, #255	@ 0xff
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fsub+0x18e>
 8000fbc:	e781      	b.n	8000ec2 <__aeabi_fsub+0x92>
 8000fbe:	e7df      	b.n	8000f80 <__aeabi_fsub+0x150>
 8000fc0:	019f      	lsls	r7, r3, #6
 8000fc2:	09bf      	lsrs	r7, r7, #6
 8000fc4:	0038      	movs	r0, r7
 8000fc6:	f001 f869 	bl	800209c <__clzsi2>
 8000fca:	3805      	subs	r0, #5
 8000fcc:	4087      	lsls	r7, r0
 8000fce:	4285      	cmp	r5, r0
 8000fd0:	dc21      	bgt.n	8001016 <__aeabi_fsub+0x1e6>
 8000fd2:	003b      	movs	r3, r7
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	1b42      	subs	r2, r0, r5
 8000fd8:	3201      	adds	r2, #1
 8000fda:	40d3      	lsrs	r3, r2
 8000fdc:	1a8a      	subs	r2, r1, r2
 8000fde:	4097      	lsls	r7, r2
 8000fe0:	1e7a      	subs	r2, r7, #1
 8000fe2:	4197      	sbcs	r7, r2
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	433b      	orrs	r3, r7
 8000fe8:	0759      	lsls	r1, r3, #29
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x1be>
 8000fec:	e78b      	b.n	8000f06 <__aeabi_fsub+0xd6>
 8000fee:	e78f      	b.n	8000f10 <__aeabi_fsub+0xe0>
 8000ff0:	20fe      	movs	r0, #254	@ 0xfe
 8000ff2:	1c6a      	adds	r2, r5, #1
 8000ff4:	4210      	tst	r0, r2
 8000ff6:	d112      	bne.n	800101e <__aeabi_fsub+0x1ee>
 8000ff8:	2d00      	cmp	r5, #0
 8000ffa:	d152      	bne.n	80010a2 <__aeabi_fsub+0x272>
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d07c      	beq.n	80010fa <__aeabi_fsub+0x2ca>
 8001000:	2e00      	cmp	r6, #0
 8001002:	d0bb      	beq.n	8000f7c <__aeabi_fsub+0x14c>
 8001004:	1b9a      	subs	r2, r3, r6
 8001006:	0150      	lsls	r0, r2, #5
 8001008:	d400      	bmi.n	800100c <__aeabi_fsub+0x1dc>
 800100a:	e08b      	b.n	8001124 <__aeabi_fsub+0x2f4>
 800100c:	2401      	movs	r4, #1
 800100e:	2200      	movs	r2, #0
 8001010:	1af3      	subs	r3, r6, r3
 8001012:	400c      	ands	r4, r1
 8001014:	e7e8      	b.n	8000fe8 <__aeabi_fsub+0x1b8>
 8001016:	4b56      	ldr	r3, [pc, #344]	@ (8001170 <__aeabi_fsub+0x340>)
 8001018:	1a2a      	subs	r2, r5, r0
 800101a:	403b      	ands	r3, r7
 800101c:	e7e4      	b.n	8000fe8 <__aeabi_fsub+0x1b8>
 800101e:	1b9f      	subs	r7, r3, r6
 8001020:	017a      	lsls	r2, r7, #5
 8001022:	d446      	bmi.n	80010b2 <__aeabi_fsub+0x282>
 8001024:	2f00      	cmp	r7, #0
 8001026:	d1cd      	bne.n	8000fc4 <__aeabi_fsub+0x194>
 8001028:	2400      	movs	r4, #0
 800102a:	2000      	movs	r0, #0
 800102c:	2300      	movs	r3, #0
 800102e:	e777      	b.n	8000f20 <__aeabi_fsub+0xf0>
 8001030:	199b      	adds	r3, r3, r6
 8001032:	2501      	movs	r5, #1
 8001034:	3201      	adds	r2, #1
 8001036:	0159      	lsls	r1, r3, #5
 8001038:	d400      	bmi.n	800103c <__aeabi_fsub+0x20c>
 800103a:	e760      	b.n	8000efe <__aeabi_fsub+0xce>
 800103c:	2101      	movs	r1, #1
 800103e:	484d      	ldr	r0, [pc, #308]	@ (8001174 <__aeabi_fsub+0x344>)
 8001040:	4019      	ands	r1, r3
 8001042:	085b      	lsrs	r3, r3, #1
 8001044:	4003      	ands	r3, r0
 8001046:	430b      	orrs	r3, r1
 8001048:	e7ce      	b.n	8000fe8 <__aeabi_fsub+0x1b8>
 800104a:	1e57      	subs	r7, r2, #1
 800104c:	2a01      	cmp	r2, #1
 800104e:	d05a      	beq.n	8001106 <__aeabi_fsub+0x2d6>
 8001050:	000c      	movs	r4, r1
 8001052:	2aff      	cmp	r2, #255	@ 0xff
 8001054:	d033      	beq.n	80010be <__aeabi_fsub+0x28e>
 8001056:	2201      	movs	r2, #1
 8001058:	2f1b      	cmp	r7, #27
 800105a:	dc07      	bgt.n	800106c <__aeabi_fsub+0x23c>
 800105c:	2120      	movs	r1, #32
 800105e:	1bc9      	subs	r1, r1, r7
 8001060:	001a      	movs	r2, r3
 8001062:	408b      	lsls	r3, r1
 8001064:	40fa      	lsrs	r2, r7
 8001066:	1e59      	subs	r1, r3, #1
 8001068:	418b      	sbcs	r3, r1
 800106a:	431a      	orrs	r2, r3
 800106c:	0005      	movs	r5, r0
 800106e:	1ab3      	subs	r3, r6, r2
 8001070:	e743      	b.n	8000efa <__aeabi_fsub+0xca>
 8001072:	2d00      	cmp	r5, #0
 8001074:	d123      	bne.n	80010be <__aeabi_fsub+0x28e>
 8001076:	22ff      	movs	r2, #255	@ 0xff
 8001078:	2b00      	cmp	r3, #0
 800107a:	d09b      	beq.n	8000fb4 <__aeabi_fsub+0x184>
 800107c:	1e51      	subs	r1, r2, #1
 800107e:	2a01      	cmp	r2, #1
 8001080:	d0d6      	beq.n	8001030 <__aeabi_fsub+0x200>
 8001082:	2aff      	cmp	r2, #255	@ 0xff
 8001084:	d01b      	beq.n	80010be <__aeabi_fsub+0x28e>
 8001086:	291b      	cmp	r1, #27
 8001088:	dd2c      	ble.n	80010e4 <__aeabi_fsub+0x2b4>
 800108a:	0002      	movs	r2, r0
 800108c:	1c73      	adds	r3, r6, #1
 800108e:	e73a      	b.n	8000f06 <__aeabi_fsub+0xd6>
 8001090:	2aff      	cmp	r2, #255	@ 0xff
 8001092:	d088      	beq.n	8000fa6 <__aeabi_fsub+0x176>
 8001094:	199b      	adds	r3, r3, r6
 8001096:	085b      	lsrs	r3, r3, #1
 8001098:	0759      	lsls	r1, r3, #29
 800109a:	d000      	beq.n	800109e <__aeabi_fsub+0x26e>
 800109c:	e733      	b.n	8000f06 <__aeabi_fsub+0xd6>
 800109e:	08db      	lsrs	r3, r3, #3
 80010a0:	e76e      	b.n	8000f80 <__aeabi_fsub+0x150>
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d110      	bne.n	80010c8 <__aeabi_fsub+0x298>
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d043      	beq.n	8001132 <__aeabi_fsub+0x302>
 80010aa:	2401      	movs	r4, #1
 80010ac:	0033      	movs	r3, r6
 80010ae:	400c      	ands	r4, r1
 80010b0:	e706      	b.n	8000ec0 <__aeabi_fsub+0x90>
 80010b2:	2401      	movs	r4, #1
 80010b4:	1af7      	subs	r7, r6, r3
 80010b6:	400c      	ands	r4, r1
 80010b8:	e784      	b.n	8000fc4 <__aeabi_fsub+0x194>
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d104      	bne.n	80010c8 <__aeabi_fsub+0x298>
 80010be:	0033      	movs	r3, r6
 80010c0:	e6fe      	b.n	8000ec0 <__aeabi_fsub+0x90>
 80010c2:	2501      	movs	r5, #1
 80010c4:	1b9b      	subs	r3, r3, r6
 80010c6:	e718      	b.n	8000efa <__aeabi_fsub+0xca>
 80010c8:	2e00      	cmp	r6, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_fsub+0x29e>
 80010cc:	e6f8      	b.n	8000ec0 <__aeabi_fsub+0x90>
 80010ce:	2280      	movs	r2, #128	@ 0x80
 80010d0:	03d2      	lsls	r2, r2, #15
 80010d2:	4297      	cmp	r7, r2
 80010d4:	d304      	bcc.n	80010e0 <__aeabi_fsub+0x2b0>
 80010d6:	4594      	cmp	ip, r2
 80010d8:	d202      	bcs.n	80010e0 <__aeabi_fsub+0x2b0>
 80010da:	2401      	movs	r4, #1
 80010dc:	0033      	movs	r3, r6
 80010de:	400c      	ands	r4, r1
 80010e0:	08db      	lsrs	r3, r3, #3
 80010e2:	e6f1      	b.n	8000ec8 <__aeabi_fsub+0x98>
 80010e4:	001a      	movs	r2, r3
 80010e6:	2520      	movs	r5, #32
 80010e8:	40ca      	lsrs	r2, r1
 80010ea:	1a69      	subs	r1, r5, r1
 80010ec:	408b      	lsls	r3, r1
 80010ee:	1e59      	subs	r1, r3, #1
 80010f0:	418b      	sbcs	r3, r1
 80010f2:	4313      	orrs	r3, r2
 80010f4:	0005      	movs	r5, r0
 80010f6:	199b      	adds	r3, r3, r6
 80010f8:	e750      	b.n	8000f9c <__aeabi_fsub+0x16c>
 80010fa:	2e00      	cmp	r6, #0
 80010fc:	d094      	beq.n	8001028 <__aeabi_fsub+0x1f8>
 80010fe:	2401      	movs	r4, #1
 8001100:	0033      	movs	r3, r6
 8001102:	400c      	ands	r4, r1
 8001104:	e73a      	b.n	8000f7c <__aeabi_fsub+0x14c>
 8001106:	000c      	movs	r4, r1
 8001108:	2501      	movs	r5, #1
 800110a:	1af3      	subs	r3, r6, r3
 800110c:	e6f5      	b.n	8000efa <__aeabi_fsub+0xca>
 800110e:	0033      	movs	r3, r6
 8001110:	e734      	b.n	8000f7c <__aeabi_fsub+0x14c>
 8001112:	199b      	adds	r3, r3, r6
 8001114:	2200      	movs	r2, #0
 8001116:	0159      	lsls	r1, r3, #5
 8001118:	d5c1      	bpl.n	800109e <__aeabi_fsub+0x26e>
 800111a:	4a15      	ldr	r2, [pc, #84]	@ (8001170 <__aeabi_fsub+0x340>)
 800111c:	4013      	ands	r3, r2
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	2201      	movs	r2, #1
 8001122:	e72d      	b.n	8000f80 <__aeabi_fsub+0x150>
 8001124:	2a00      	cmp	r2, #0
 8001126:	d100      	bne.n	800112a <__aeabi_fsub+0x2fa>
 8001128:	e77e      	b.n	8001028 <__aeabi_fsub+0x1f8>
 800112a:	0013      	movs	r3, r2
 800112c:	2200      	movs	r2, #0
 800112e:	08db      	lsrs	r3, r3, #3
 8001130:	e726      	b.n	8000f80 <__aeabi_fsub+0x150>
 8001132:	2380      	movs	r3, #128	@ 0x80
 8001134:	2400      	movs	r4, #0
 8001136:	20ff      	movs	r0, #255	@ 0xff
 8001138:	03db      	lsls	r3, r3, #15
 800113a:	e6f1      	b.n	8000f20 <__aeabi_fsub+0xf0>
 800113c:	2a00      	cmp	r2, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_fsub+0x312>
 8001140:	e756      	b.n	8000ff0 <__aeabi_fsub+0x1c0>
 8001142:	1b47      	subs	r7, r0, r5
 8001144:	003a      	movs	r2, r7
 8001146:	2d00      	cmp	r5, #0
 8001148:	d100      	bne.n	800114c <__aeabi_fsub+0x31c>
 800114a:	e730      	b.n	8000fae <__aeabi_fsub+0x17e>
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	04d2      	lsls	r2, r2, #19
 8001150:	000c      	movs	r4, r1
 8001152:	4313      	orrs	r3, r2
 8001154:	e77f      	b.n	8001056 <__aeabi_fsub+0x226>
 8001156:	2a00      	cmp	r2, #0
 8001158:	d100      	bne.n	800115c <__aeabi_fsub+0x32c>
 800115a:	e701      	b.n	8000f60 <__aeabi_fsub+0x130>
 800115c:	1b41      	subs	r1, r0, r5
 800115e:	2d00      	cmp	r5, #0
 8001160:	d101      	bne.n	8001166 <__aeabi_fsub+0x336>
 8001162:	000a      	movs	r2, r1
 8001164:	e788      	b.n	8001078 <__aeabi_fsub+0x248>
 8001166:	2280      	movs	r2, #128	@ 0x80
 8001168:	04d2      	lsls	r2, r2, #19
 800116a:	4313      	orrs	r3, r2
 800116c:	e78b      	b.n	8001086 <__aeabi_fsub+0x256>
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	fbffffff 	.word	0xfbffffff
 8001174:	7dffffff 	.word	0x7dffffff

08001178 <__aeabi_f2iz>:
 8001178:	0241      	lsls	r1, r0, #9
 800117a:	0042      	lsls	r2, r0, #1
 800117c:	0fc3      	lsrs	r3, r0, #31
 800117e:	0a49      	lsrs	r1, r1, #9
 8001180:	2000      	movs	r0, #0
 8001182:	0e12      	lsrs	r2, r2, #24
 8001184:	2a7e      	cmp	r2, #126	@ 0x7e
 8001186:	dd03      	ble.n	8001190 <__aeabi_f2iz+0x18>
 8001188:	2a9d      	cmp	r2, #157	@ 0x9d
 800118a:	dd02      	ble.n	8001192 <__aeabi_f2iz+0x1a>
 800118c:	4a09      	ldr	r2, [pc, #36]	@ (80011b4 <__aeabi_f2iz+0x3c>)
 800118e:	1898      	adds	r0, r3, r2
 8001190:	4770      	bx	lr
 8001192:	2080      	movs	r0, #128	@ 0x80
 8001194:	0400      	lsls	r0, r0, #16
 8001196:	4301      	orrs	r1, r0
 8001198:	2a95      	cmp	r2, #149	@ 0x95
 800119a:	dc07      	bgt.n	80011ac <__aeabi_f2iz+0x34>
 800119c:	2096      	movs	r0, #150	@ 0x96
 800119e:	1a82      	subs	r2, r0, r2
 80011a0:	40d1      	lsrs	r1, r2
 80011a2:	4248      	negs	r0, r1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f3      	bne.n	8001190 <__aeabi_f2iz+0x18>
 80011a8:	0008      	movs	r0, r1
 80011aa:	e7f1      	b.n	8001190 <__aeabi_f2iz+0x18>
 80011ac:	3a96      	subs	r2, #150	@ 0x96
 80011ae:	4091      	lsls	r1, r2
 80011b0:	e7f7      	b.n	80011a2 <__aeabi_f2iz+0x2a>
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	7fffffff 	.word	0x7fffffff

080011b8 <__aeabi_i2f>:
 80011b8:	b570      	push	{r4, r5, r6, lr}
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d013      	beq.n	80011e6 <__aeabi_i2f+0x2e>
 80011be:	17c3      	asrs	r3, r0, #31
 80011c0:	18c5      	adds	r5, r0, r3
 80011c2:	405d      	eors	r5, r3
 80011c4:	0fc4      	lsrs	r4, r0, #31
 80011c6:	0028      	movs	r0, r5
 80011c8:	f000 ff68 	bl	800209c <__clzsi2>
 80011cc:	239e      	movs	r3, #158	@ 0x9e
 80011ce:	0001      	movs	r1, r0
 80011d0:	1a1b      	subs	r3, r3, r0
 80011d2:	2b96      	cmp	r3, #150	@ 0x96
 80011d4:	dc0f      	bgt.n	80011f6 <__aeabi_i2f+0x3e>
 80011d6:	2808      	cmp	r0, #8
 80011d8:	d034      	beq.n	8001244 <__aeabi_i2f+0x8c>
 80011da:	3908      	subs	r1, #8
 80011dc:	408d      	lsls	r5, r1
 80011de:	026d      	lsls	r5, r5, #9
 80011e0:	0a6d      	lsrs	r5, r5, #9
 80011e2:	b2d8      	uxtb	r0, r3
 80011e4:	e002      	b.n	80011ec <__aeabi_i2f+0x34>
 80011e6:	2400      	movs	r4, #0
 80011e8:	2000      	movs	r0, #0
 80011ea:	2500      	movs	r5, #0
 80011ec:	05c0      	lsls	r0, r0, #23
 80011ee:	4328      	orrs	r0, r5
 80011f0:	07e4      	lsls	r4, r4, #31
 80011f2:	4320      	orrs	r0, r4
 80011f4:	bd70      	pop	{r4, r5, r6, pc}
 80011f6:	2b99      	cmp	r3, #153	@ 0x99
 80011f8:	dc16      	bgt.n	8001228 <__aeabi_i2f+0x70>
 80011fa:	1f42      	subs	r2, r0, #5
 80011fc:	2805      	cmp	r0, #5
 80011fe:	d000      	beq.n	8001202 <__aeabi_i2f+0x4a>
 8001200:	4095      	lsls	r5, r2
 8001202:	002a      	movs	r2, r5
 8001204:	4811      	ldr	r0, [pc, #68]	@ (800124c <__aeabi_i2f+0x94>)
 8001206:	4002      	ands	r2, r0
 8001208:	076e      	lsls	r6, r5, #29
 800120a:	d009      	beq.n	8001220 <__aeabi_i2f+0x68>
 800120c:	260f      	movs	r6, #15
 800120e:	4035      	ands	r5, r6
 8001210:	2d04      	cmp	r5, #4
 8001212:	d005      	beq.n	8001220 <__aeabi_i2f+0x68>
 8001214:	3204      	adds	r2, #4
 8001216:	0155      	lsls	r5, r2, #5
 8001218:	d502      	bpl.n	8001220 <__aeabi_i2f+0x68>
 800121a:	239f      	movs	r3, #159	@ 0x9f
 800121c:	4002      	ands	r2, r0
 800121e:	1a5b      	subs	r3, r3, r1
 8001220:	0192      	lsls	r2, r2, #6
 8001222:	0a55      	lsrs	r5, r2, #9
 8001224:	b2d8      	uxtb	r0, r3
 8001226:	e7e1      	b.n	80011ec <__aeabi_i2f+0x34>
 8001228:	2205      	movs	r2, #5
 800122a:	1a12      	subs	r2, r2, r0
 800122c:	0028      	movs	r0, r5
 800122e:	40d0      	lsrs	r0, r2
 8001230:	0002      	movs	r2, r0
 8001232:	0008      	movs	r0, r1
 8001234:	301b      	adds	r0, #27
 8001236:	4085      	lsls	r5, r0
 8001238:	0028      	movs	r0, r5
 800123a:	1e45      	subs	r5, r0, #1
 800123c:	41a8      	sbcs	r0, r5
 800123e:	4302      	orrs	r2, r0
 8001240:	0015      	movs	r5, r2
 8001242:	e7de      	b.n	8001202 <__aeabi_i2f+0x4a>
 8001244:	026d      	lsls	r5, r5, #9
 8001246:	2096      	movs	r0, #150	@ 0x96
 8001248:	0a6d      	lsrs	r5, r5, #9
 800124a:	e7cf      	b.n	80011ec <__aeabi_i2f+0x34>
 800124c:	fbffffff 	.word	0xfbffffff

08001250 <__aeabi_dmul>:
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	4657      	mov	r7, sl
 8001254:	46de      	mov	lr, fp
 8001256:	464e      	mov	r6, r9
 8001258:	4645      	mov	r5, r8
 800125a:	b5e0      	push	{r5, r6, r7, lr}
 800125c:	001f      	movs	r7, r3
 800125e:	030b      	lsls	r3, r1, #12
 8001260:	0b1b      	lsrs	r3, r3, #12
 8001262:	0016      	movs	r6, r2
 8001264:	469a      	mov	sl, r3
 8001266:	0fca      	lsrs	r2, r1, #31
 8001268:	004b      	lsls	r3, r1, #1
 800126a:	0004      	movs	r4, r0
 800126c:	4693      	mov	fp, r2
 800126e:	b087      	sub	sp, #28
 8001270:	0d5b      	lsrs	r3, r3, #21
 8001272:	d100      	bne.n	8001276 <__aeabi_dmul+0x26>
 8001274:	e0d5      	b.n	8001422 <__aeabi_dmul+0x1d2>
 8001276:	4abb      	ldr	r2, [pc, #748]	@ (8001564 <__aeabi_dmul+0x314>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d100      	bne.n	800127e <__aeabi_dmul+0x2e>
 800127c:	e0f8      	b.n	8001470 <__aeabi_dmul+0x220>
 800127e:	4651      	mov	r1, sl
 8001280:	0f42      	lsrs	r2, r0, #29
 8001282:	00c9      	lsls	r1, r1, #3
 8001284:	430a      	orrs	r2, r1
 8001286:	2180      	movs	r1, #128	@ 0x80
 8001288:	0409      	lsls	r1, r1, #16
 800128a:	4311      	orrs	r1, r2
 800128c:	00c2      	lsls	r2, r0, #3
 800128e:	4691      	mov	r9, r2
 8001290:	4ab5      	ldr	r2, [pc, #724]	@ (8001568 <__aeabi_dmul+0x318>)
 8001292:	468a      	mov	sl, r1
 8001294:	189d      	adds	r5, r3, r2
 8001296:	2300      	movs	r3, #0
 8001298:	4698      	mov	r8, r3
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	033c      	lsls	r4, r7, #12
 800129e:	007b      	lsls	r3, r7, #1
 80012a0:	0ffa      	lsrs	r2, r7, #31
 80012a2:	0030      	movs	r0, r6
 80012a4:	0b24      	lsrs	r4, r4, #12
 80012a6:	0d5b      	lsrs	r3, r3, #21
 80012a8:	9200      	str	r2, [sp, #0]
 80012aa:	d100      	bne.n	80012ae <__aeabi_dmul+0x5e>
 80012ac:	e096      	b.n	80013dc <__aeabi_dmul+0x18c>
 80012ae:	4aad      	ldr	r2, [pc, #692]	@ (8001564 <__aeabi_dmul+0x314>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d031      	beq.n	8001318 <__aeabi_dmul+0xc8>
 80012b4:	0f72      	lsrs	r2, r6, #29
 80012b6:	00e4      	lsls	r4, r4, #3
 80012b8:	4322      	orrs	r2, r4
 80012ba:	2480      	movs	r4, #128	@ 0x80
 80012bc:	0424      	lsls	r4, r4, #16
 80012be:	4314      	orrs	r4, r2
 80012c0:	4aa9      	ldr	r2, [pc, #676]	@ (8001568 <__aeabi_dmul+0x318>)
 80012c2:	00f0      	lsls	r0, r6, #3
 80012c4:	4694      	mov	ip, r2
 80012c6:	4463      	add	r3, ip
 80012c8:	195b      	adds	r3, r3, r5
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	9201      	str	r2, [sp, #4]
 80012ce:	4642      	mov	r2, r8
 80012d0:	2600      	movs	r6, #0
 80012d2:	2a0a      	cmp	r2, #10
 80012d4:	dc42      	bgt.n	800135c <__aeabi_dmul+0x10c>
 80012d6:	465a      	mov	r2, fp
 80012d8:	9900      	ldr	r1, [sp, #0]
 80012da:	404a      	eors	r2, r1
 80012dc:	4693      	mov	fp, r2
 80012de:	4642      	mov	r2, r8
 80012e0:	2a02      	cmp	r2, #2
 80012e2:	dc32      	bgt.n	800134a <__aeabi_dmul+0xfa>
 80012e4:	3a01      	subs	r2, #1
 80012e6:	2a01      	cmp	r2, #1
 80012e8:	d900      	bls.n	80012ec <__aeabi_dmul+0x9c>
 80012ea:	e149      	b.n	8001580 <__aeabi_dmul+0x330>
 80012ec:	2e02      	cmp	r6, #2
 80012ee:	d100      	bne.n	80012f2 <__aeabi_dmul+0xa2>
 80012f0:	e0ca      	b.n	8001488 <__aeabi_dmul+0x238>
 80012f2:	2e01      	cmp	r6, #1
 80012f4:	d13d      	bne.n	8001372 <__aeabi_dmul+0x122>
 80012f6:	2300      	movs	r3, #0
 80012f8:	2400      	movs	r4, #0
 80012fa:	2200      	movs	r2, #0
 80012fc:	0010      	movs	r0, r2
 80012fe:	465a      	mov	r2, fp
 8001300:	051b      	lsls	r3, r3, #20
 8001302:	4323      	orrs	r3, r4
 8001304:	07d2      	lsls	r2, r2, #31
 8001306:	4313      	orrs	r3, r2
 8001308:	0019      	movs	r1, r3
 800130a:	b007      	add	sp, #28
 800130c:	bcf0      	pop	{r4, r5, r6, r7}
 800130e:	46bb      	mov	fp, r7
 8001310:	46b2      	mov	sl, r6
 8001312:	46a9      	mov	r9, r5
 8001314:	46a0      	mov	r8, r4
 8001316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001318:	4b92      	ldr	r3, [pc, #584]	@ (8001564 <__aeabi_dmul+0x314>)
 800131a:	4326      	orrs	r6, r4
 800131c:	18eb      	adds	r3, r5, r3
 800131e:	2e00      	cmp	r6, #0
 8001320:	d100      	bne.n	8001324 <__aeabi_dmul+0xd4>
 8001322:	e0bb      	b.n	800149c <__aeabi_dmul+0x24c>
 8001324:	2203      	movs	r2, #3
 8001326:	4641      	mov	r1, r8
 8001328:	4311      	orrs	r1, r2
 800132a:	465a      	mov	r2, fp
 800132c:	4688      	mov	r8, r1
 800132e:	9900      	ldr	r1, [sp, #0]
 8001330:	404a      	eors	r2, r1
 8001332:	2180      	movs	r1, #128	@ 0x80
 8001334:	0109      	lsls	r1, r1, #4
 8001336:	468c      	mov	ip, r1
 8001338:	0029      	movs	r1, r5
 800133a:	4461      	add	r1, ip
 800133c:	9101      	str	r1, [sp, #4]
 800133e:	4641      	mov	r1, r8
 8001340:	290a      	cmp	r1, #10
 8001342:	dd00      	ble.n	8001346 <__aeabi_dmul+0xf6>
 8001344:	e233      	b.n	80017ae <__aeabi_dmul+0x55e>
 8001346:	4693      	mov	fp, r2
 8001348:	2603      	movs	r6, #3
 800134a:	4642      	mov	r2, r8
 800134c:	2701      	movs	r7, #1
 800134e:	4097      	lsls	r7, r2
 8001350:	21a6      	movs	r1, #166	@ 0xa6
 8001352:	003a      	movs	r2, r7
 8001354:	00c9      	lsls	r1, r1, #3
 8001356:	400a      	ands	r2, r1
 8001358:	420f      	tst	r7, r1
 800135a:	d031      	beq.n	80013c0 <__aeabi_dmul+0x170>
 800135c:	9e02      	ldr	r6, [sp, #8]
 800135e:	2e02      	cmp	r6, #2
 8001360:	d100      	bne.n	8001364 <__aeabi_dmul+0x114>
 8001362:	e235      	b.n	80017d0 <__aeabi_dmul+0x580>
 8001364:	2e03      	cmp	r6, #3
 8001366:	d100      	bne.n	800136a <__aeabi_dmul+0x11a>
 8001368:	e1d2      	b.n	8001710 <__aeabi_dmul+0x4c0>
 800136a:	4654      	mov	r4, sl
 800136c:	4648      	mov	r0, r9
 800136e:	2e01      	cmp	r6, #1
 8001370:	d0c1      	beq.n	80012f6 <__aeabi_dmul+0xa6>
 8001372:	9a01      	ldr	r2, [sp, #4]
 8001374:	4b7d      	ldr	r3, [pc, #500]	@ (800156c <__aeabi_dmul+0x31c>)
 8001376:	4694      	mov	ip, r2
 8001378:	4463      	add	r3, ip
 800137a:	2b00      	cmp	r3, #0
 800137c:	dc00      	bgt.n	8001380 <__aeabi_dmul+0x130>
 800137e:	e0c0      	b.n	8001502 <__aeabi_dmul+0x2b2>
 8001380:	0742      	lsls	r2, r0, #29
 8001382:	d009      	beq.n	8001398 <__aeabi_dmul+0x148>
 8001384:	220f      	movs	r2, #15
 8001386:	4002      	ands	r2, r0
 8001388:	2a04      	cmp	r2, #4
 800138a:	d005      	beq.n	8001398 <__aeabi_dmul+0x148>
 800138c:	1d02      	adds	r2, r0, #4
 800138e:	4282      	cmp	r2, r0
 8001390:	4180      	sbcs	r0, r0
 8001392:	4240      	negs	r0, r0
 8001394:	1824      	adds	r4, r4, r0
 8001396:	0010      	movs	r0, r2
 8001398:	01e2      	lsls	r2, r4, #7
 800139a:	d506      	bpl.n	80013aa <__aeabi_dmul+0x15a>
 800139c:	4b74      	ldr	r3, [pc, #464]	@ (8001570 <__aeabi_dmul+0x320>)
 800139e:	9a01      	ldr	r2, [sp, #4]
 80013a0:	401c      	ands	r4, r3
 80013a2:	2380      	movs	r3, #128	@ 0x80
 80013a4:	4694      	mov	ip, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4463      	add	r3, ip
 80013aa:	4a72      	ldr	r2, [pc, #456]	@ (8001574 <__aeabi_dmul+0x324>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	dc6b      	bgt.n	8001488 <__aeabi_dmul+0x238>
 80013b0:	0762      	lsls	r2, r4, #29
 80013b2:	08c0      	lsrs	r0, r0, #3
 80013b4:	0264      	lsls	r4, r4, #9
 80013b6:	055b      	lsls	r3, r3, #21
 80013b8:	4302      	orrs	r2, r0
 80013ba:	0b24      	lsrs	r4, r4, #12
 80013bc:	0d5b      	lsrs	r3, r3, #21
 80013be:	e79d      	b.n	80012fc <__aeabi_dmul+0xac>
 80013c0:	2190      	movs	r1, #144	@ 0x90
 80013c2:	0089      	lsls	r1, r1, #2
 80013c4:	420f      	tst	r7, r1
 80013c6:	d163      	bne.n	8001490 <__aeabi_dmul+0x240>
 80013c8:	2288      	movs	r2, #136	@ 0x88
 80013ca:	423a      	tst	r2, r7
 80013cc:	d100      	bne.n	80013d0 <__aeabi_dmul+0x180>
 80013ce:	e0d7      	b.n	8001580 <__aeabi_dmul+0x330>
 80013d0:	9b00      	ldr	r3, [sp, #0]
 80013d2:	46a2      	mov	sl, r4
 80013d4:	469b      	mov	fp, r3
 80013d6:	4681      	mov	r9, r0
 80013d8:	9602      	str	r6, [sp, #8]
 80013da:	e7bf      	b.n	800135c <__aeabi_dmul+0x10c>
 80013dc:	0023      	movs	r3, r4
 80013de:	4333      	orrs	r3, r6
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dmul+0x194>
 80013e2:	e07f      	b.n	80014e4 <__aeabi_dmul+0x294>
 80013e4:	2c00      	cmp	r4, #0
 80013e6:	d100      	bne.n	80013ea <__aeabi_dmul+0x19a>
 80013e8:	e1ad      	b.n	8001746 <__aeabi_dmul+0x4f6>
 80013ea:	0020      	movs	r0, r4
 80013ec:	f000 fe56 	bl	800209c <__clzsi2>
 80013f0:	0002      	movs	r2, r0
 80013f2:	0003      	movs	r3, r0
 80013f4:	3a0b      	subs	r2, #11
 80013f6:	201d      	movs	r0, #29
 80013f8:	0019      	movs	r1, r3
 80013fa:	1a82      	subs	r2, r0, r2
 80013fc:	0030      	movs	r0, r6
 80013fe:	3908      	subs	r1, #8
 8001400:	40d0      	lsrs	r0, r2
 8001402:	408c      	lsls	r4, r1
 8001404:	4304      	orrs	r4, r0
 8001406:	0030      	movs	r0, r6
 8001408:	4088      	lsls	r0, r1
 800140a:	4a5b      	ldr	r2, [pc, #364]	@ (8001578 <__aeabi_dmul+0x328>)
 800140c:	1aeb      	subs	r3, r5, r3
 800140e:	4694      	mov	ip, r2
 8001410:	4463      	add	r3, ip
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	9201      	str	r2, [sp, #4]
 8001416:	4642      	mov	r2, r8
 8001418:	2600      	movs	r6, #0
 800141a:	2a0a      	cmp	r2, #10
 800141c:	dc00      	bgt.n	8001420 <__aeabi_dmul+0x1d0>
 800141e:	e75a      	b.n	80012d6 <__aeabi_dmul+0x86>
 8001420:	e79c      	b.n	800135c <__aeabi_dmul+0x10c>
 8001422:	4653      	mov	r3, sl
 8001424:	4303      	orrs	r3, r0
 8001426:	4699      	mov	r9, r3
 8001428:	d054      	beq.n	80014d4 <__aeabi_dmul+0x284>
 800142a:	4653      	mov	r3, sl
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dmul+0x1e2>
 8001430:	e177      	b.n	8001722 <__aeabi_dmul+0x4d2>
 8001432:	4650      	mov	r0, sl
 8001434:	f000 fe32 	bl	800209c <__clzsi2>
 8001438:	230b      	movs	r3, #11
 800143a:	425b      	negs	r3, r3
 800143c:	469c      	mov	ip, r3
 800143e:	0002      	movs	r2, r0
 8001440:	4484      	add	ip, r0
 8001442:	0011      	movs	r1, r2
 8001444:	4650      	mov	r0, sl
 8001446:	3908      	subs	r1, #8
 8001448:	4088      	lsls	r0, r1
 800144a:	231d      	movs	r3, #29
 800144c:	4680      	mov	r8, r0
 800144e:	4660      	mov	r0, ip
 8001450:	1a1b      	subs	r3, r3, r0
 8001452:	0020      	movs	r0, r4
 8001454:	40d8      	lsrs	r0, r3
 8001456:	0003      	movs	r3, r0
 8001458:	4640      	mov	r0, r8
 800145a:	4303      	orrs	r3, r0
 800145c:	469a      	mov	sl, r3
 800145e:	0023      	movs	r3, r4
 8001460:	408b      	lsls	r3, r1
 8001462:	4699      	mov	r9, r3
 8001464:	2300      	movs	r3, #0
 8001466:	4d44      	ldr	r5, [pc, #272]	@ (8001578 <__aeabi_dmul+0x328>)
 8001468:	4698      	mov	r8, r3
 800146a:	1aad      	subs	r5, r5, r2
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	e715      	b.n	800129c <__aeabi_dmul+0x4c>
 8001470:	4652      	mov	r2, sl
 8001472:	4302      	orrs	r2, r0
 8001474:	4691      	mov	r9, r2
 8001476:	d126      	bne.n	80014c6 <__aeabi_dmul+0x276>
 8001478:	2200      	movs	r2, #0
 800147a:	001d      	movs	r5, r3
 800147c:	2302      	movs	r3, #2
 800147e:	4692      	mov	sl, r2
 8001480:	3208      	adds	r2, #8
 8001482:	4690      	mov	r8, r2
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	e709      	b.n	800129c <__aeabi_dmul+0x4c>
 8001488:	2400      	movs	r4, #0
 800148a:	2200      	movs	r2, #0
 800148c:	4b35      	ldr	r3, [pc, #212]	@ (8001564 <__aeabi_dmul+0x314>)
 800148e:	e735      	b.n	80012fc <__aeabi_dmul+0xac>
 8001490:	2300      	movs	r3, #0
 8001492:	2480      	movs	r4, #128	@ 0x80
 8001494:	469b      	mov	fp, r3
 8001496:	0324      	lsls	r4, r4, #12
 8001498:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <__aeabi_dmul+0x314>)
 800149a:	e72f      	b.n	80012fc <__aeabi_dmul+0xac>
 800149c:	2202      	movs	r2, #2
 800149e:	4641      	mov	r1, r8
 80014a0:	4311      	orrs	r1, r2
 80014a2:	2280      	movs	r2, #128	@ 0x80
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	4694      	mov	ip, r2
 80014a8:	002a      	movs	r2, r5
 80014aa:	4462      	add	r2, ip
 80014ac:	4688      	mov	r8, r1
 80014ae:	9201      	str	r2, [sp, #4]
 80014b0:	290a      	cmp	r1, #10
 80014b2:	dd00      	ble.n	80014b6 <__aeabi_dmul+0x266>
 80014b4:	e752      	b.n	800135c <__aeabi_dmul+0x10c>
 80014b6:	465a      	mov	r2, fp
 80014b8:	2000      	movs	r0, #0
 80014ba:	9900      	ldr	r1, [sp, #0]
 80014bc:	0004      	movs	r4, r0
 80014be:	404a      	eors	r2, r1
 80014c0:	4693      	mov	fp, r2
 80014c2:	2602      	movs	r6, #2
 80014c4:	e70b      	b.n	80012de <__aeabi_dmul+0x8e>
 80014c6:	220c      	movs	r2, #12
 80014c8:	001d      	movs	r5, r3
 80014ca:	2303      	movs	r3, #3
 80014cc:	4681      	mov	r9, r0
 80014ce:	4690      	mov	r8, r2
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	e6e3      	b.n	800129c <__aeabi_dmul+0x4c>
 80014d4:	2300      	movs	r3, #0
 80014d6:	469a      	mov	sl, r3
 80014d8:	3304      	adds	r3, #4
 80014da:	4698      	mov	r8, r3
 80014dc:	3b03      	subs	r3, #3
 80014de:	2500      	movs	r5, #0
 80014e0:	9302      	str	r3, [sp, #8]
 80014e2:	e6db      	b.n	800129c <__aeabi_dmul+0x4c>
 80014e4:	4642      	mov	r2, r8
 80014e6:	3301      	adds	r3, #1
 80014e8:	431a      	orrs	r2, r3
 80014ea:	002b      	movs	r3, r5
 80014ec:	4690      	mov	r8, r2
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	9201      	str	r2, [sp, #4]
 80014f2:	4642      	mov	r2, r8
 80014f4:	2400      	movs	r4, #0
 80014f6:	2000      	movs	r0, #0
 80014f8:	2601      	movs	r6, #1
 80014fa:	2a0a      	cmp	r2, #10
 80014fc:	dc00      	bgt.n	8001500 <__aeabi_dmul+0x2b0>
 80014fe:	e6ea      	b.n	80012d6 <__aeabi_dmul+0x86>
 8001500:	e72c      	b.n	800135c <__aeabi_dmul+0x10c>
 8001502:	2201      	movs	r2, #1
 8001504:	1ad2      	subs	r2, r2, r3
 8001506:	2a38      	cmp	r2, #56	@ 0x38
 8001508:	dd00      	ble.n	800150c <__aeabi_dmul+0x2bc>
 800150a:	e6f4      	b.n	80012f6 <__aeabi_dmul+0xa6>
 800150c:	2a1f      	cmp	r2, #31
 800150e:	dc00      	bgt.n	8001512 <__aeabi_dmul+0x2c2>
 8001510:	e12a      	b.n	8001768 <__aeabi_dmul+0x518>
 8001512:	211f      	movs	r1, #31
 8001514:	4249      	negs	r1, r1
 8001516:	1acb      	subs	r3, r1, r3
 8001518:	0021      	movs	r1, r4
 800151a:	40d9      	lsrs	r1, r3
 800151c:	000b      	movs	r3, r1
 800151e:	2a20      	cmp	r2, #32
 8001520:	d005      	beq.n	800152e <__aeabi_dmul+0x2de>
 8001522:	4a16      	ldr	r2, [pc, #88]	@ (800157c <__aeabi_dmul+0x32c>)
 8001524:	9d01      	ldr	r5, [sp, #4]
 8001526:	4694      	mov	ip, r2
 8001528:	4465      	add	r5, ip
 800152a:	40ac      	lsls	r4, r5
 800152c:	4320      	orrs	r0, r4
 800152e:	1e42      	subs	r2, r0, #1
 8001530:	4190      	sbcs	r0, r2
 8001532:	4318      	orrs	r0, r3
 8001534:	2307      	movs	r3, #7
 8001536:	0019      	movs	r1, r3
 8001538:	2400      	movs	r4, #0
 800153a:	4001      	ands	r1, r0
 800153c:	4203      	tst	r3, r0
 800153e:	d00c      	beq.n	800155a <__aeabi_dmul+0x30a>
 8001540:	230f      	movs	r3, #15
 8001542:	4003      	ands	r3, r0
 8001544:	2b04      	cmp	r3, #4
 8001546:	d100      	bne.n	800154a <__aeabi_dmul+0x2fa>
 8001548:	e140      	b.n	80017cc <__aeabi_dmul+0x57c>
 800154a:	1d03      	adds	r3, r0, #4
 800154c:	4283      	cmp	r3, r0
 800154e:	41a4      	sbcs	r4, r4
 8001550:	0018      	movs	r0, r3
 8001552:	4264      	negs	r4, r4
 8001554:	0761      	lsls	r1, r4, #29
 8001556:	0264      	lsls	r4, r4, #9
 8001558:	0b24      	lsrs	r4, r4, #12
 800155a:	08c2      	lsrs	r2, r0, #3
 800155c:	2300      	movs	r3, #0
 800155e:	430a      	orrs	r2, r1
 8001560:	e6cc      	b.n	80012fc <__aeabi_dmul+0xac>
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	000007ff 	.word	0x000007ff
 8001568:	fffffc01 	.word	0xfffffc01
 800156c:	000003ff 	.word	0x000003ff
 8001570:	feffffff 	.word	0xfeffffff
 8001574:	000007fe 	.word	0x000007fe
 8001578:	fffffc0d 	.word	0xfffffc0d
 800157c:	0000043e 	.word	0x0000043e
 8001580:	4649      	mov	r1, r9
 8001582:	464a      	mov	r2, r9
 8001584:	0409      	lsls	r1, r1, #16
 8001586:	0c09      	lsrs	r1, r1, #16
 8001588:	000d      	movs	r5, r1
 800158a:	0c16      	lsrs	r6, r2, #16
 800158c:	0c02      	lsrs	r2, r0, #16
 800158e:	0400      	lsls	r0, r0, #16
 8001590:	0c00      	lsrs	r0, r0, #16
 8001592:	4345      	muls	r5, r0
 8001594:	46ac      	mov	ip, r5
 8001596:	0005      	movs	r5, r0
 8001598:	4375      	muls	r5, r6
 800159a:	46a8      	mov	r8, r5
 800159c:	0015      	movs	r5, r2
 800159e:	000f      	movs	r7, r1
 80015a0:	4375      	muls	r5, r6
 80015a2:	9200      	str	r2, [sp, #0]
 80015a4:	9502      	str	r5, [sp, #8]
 80015a6:	002a      	movs	r2, r5
 80015a8:	9d00      	ldr	r5, [sp, #0]
 80015aa:	436f      	muls	r7, r5
 80015ac:	4665      	mov	r5, ip
 80015ae:	0c2d      	lsrs	r5, r5, #16
 80015b0:	46a9      	mov	r9, r5
 80015b2:	4447      	add	r7, r8
 80015b4:	444f      	add	r7, r9
 80015b6:	45b8      	cmp	r8, r7
 80015b8:	d905      	bls.n	80015c6 <__aeabi_dmul+0x376>
 80015ba:	0015      	movs	r5, r2
 80015bc:	2280      	movs	r2, #128	@ 0x80
 80015be:	0252      	lsls	r2, r2, #9
 80015c0:	4690      	mov	r8, r2
 80015c2:	4445      	add	r5, r8
 80015c4:	9502      	str	r5, [sp, #8]
 80015c6:	0c3d      	lsrs	r5, r7, #16
 80015c8:	9503      	str	r5, [sp, #12]
 80015ca:	4665      	mov	r5, ip
 80015cc:	042d      	lsls	r5, r5, #16
 80015ce:	043f      	lsls	r7, r7, #16
 80015d0:	0c2d      	lsrs	r5, r5, #16
 80015d2:	46ac      	mov	ip, r5
 80015d4:	003d      	movs	r5, r7
 80015d6:	4465      	add	r5, ip
 80015d8:	9504      	str	r5, [sp, #16]
 80015da:	0c25      	lsrs	r5, r4, #16
 80015dc:	0424      	lsls	r4, r4, #16
 80015de:	0c24      	lsrs	r4, r4, #16
 80015e0:	46ac      	mov	ip, r5
 80015e2:	0025      	movs	r5, r4
 80015e4:	4375      	muls	r5, r6
 80015e6:	46a8      	mov	r8, r5
 80015e8:	4665      	mov	r5, ip
 80015ea:	000f      	movs	r7, r1
 80015ec:	4369      	muls	r1, r5
 80015ee:	4441      	add	r1, r8
 80015f0:	4689      	mov	r9, r1
 80015f2:	4367      	muls	r7, r4
 80015f4:	0c39      	lsrs	r1, r7, #16
 80015f6:	4449      	add	r1, r9
 80015f8:	436e      	muls	r6, r5
 80015fa:	4588      	cmp	r8, r1
 80015fc:	d903      	bls.n	8001606 <__aeabi_dmul+0x3b6>
 80015fe:	2280      	movs	r2, #128	@ 0x80
 8001600:	0252      	lsls	r2, r2, #9
 8001602:	4690      	mov	r8, r2
 8001604:	4446      	add	r6, r8
 8001606:	0c0d      	lsrs	r5, r1, #16
 8001608:	46a8      	mov	r8, r5
 800160a:	0035      	movs	r5, r6
 800160c:	4445      	add	r5, r8
 800160e:	9505      	str	r5, [sp, #20]
 8001610:	9d03      	ldr	r5, [sp, #12]
 8001612:	043f      	lsls	r7, r7, #16
 8001614:	46a8      	mov	r8, r5
 8001616:	0c3f      	lsrs	r7, r7, #16
 8001618:	0409      	lsls	r1, r1, #16
 800161a:	19c9      	adds	r1, r1, r7
 800161c:	4488      	add	r8, r1
 800161e:	4645      	mov	r5, r8
 8001620:	9503      	str	r5, [sp, #12]
 8001622:	4655      	mov	r5, sl
 8001624:	042e      	lsls	r6, r5, #16
 8001626:	0c36      	lsrs	r6, r6, #16
 8001628:	0c2f      	lsrs	r7, r5, #16
 800162a:	0035      	movs	r5, r6
 800162c:	4345      	muls	r5, r0
 800162e:	4378      	muls	r0, r7
 8001630:	4681      	mov	r9, r0
 8001632:	0038      	movs	r0, r7
 8001634:	46a8      	mov	r8, r5
 8001636:	0c2d      	lsrs	r5, r5, #16
 8001638:	46aa      	mov	sl, r5
 800163a:	9a00      	ldr	r2, [sp, #0]
 800163c:	4350      	muls	r0, r2
 800163e:	4372      	muls	r2, r6
 8001640:	444a      	add	r2, r9
 8001642:	4452      	add	r2, sl
 8001644:	4591      	cmp	r9, r2
 8001646:	d903      	bls.n	8001650 <__aeabi_dmul+0x400>
 8001648:	2580      	movs	r5, #128	@ 0x80
 800164a:	026d      	lsls	r5, r5, #9
 800164c:	46a9      	mov	r9, r5
 800164e:	4448      	add	r0, r9
 8001650:	0c15      	lsrs	r5, r2, #16
 8001652:	46a9      	mov	r9, r5
 8001654:	4645      	mov	r5, r8
 8001656:	042d      	lsls	r5, r5, #16
 8001658:	0c2d      	lsrs	r5, r5, #16
 800165a:	46a8      	mov	r8, r5
 800165c:	4665      	mov	r5, ip
 800165e:	437d      	muls	r5, r7
 8001660:	0412      	lsls	r2, r2, #16
 8001662:	4448      	add	r0, r9
 8001664:	4490      	add	r8, r2
 8001666:	46a9      	mov	r9, r5
 8001668:	0032      	movs	r2, r6
 800166a:	4665      	mov	r5, ip
 800166c:	4362      	muls	r2, r4
 800166e:	436e      	muls	r6, r5
 8001670:	437c      	muls	r4, r7
 8001672:	0c17      	lsrs	r7, r2, #16
 8001674:	1936      	adds	r6, r6, r4
 8001676:	19bf      	adds	r7, r7, r6
 8001678:	42bc      	cmp	r4, r7
 800167a:	d903      	bls.n	8001684 <__aeabi_dmul+0x434>
 800167c:	2480      	movs	r4, #128	@ 0x80
 800167e:	0264      	lsls	r4, r4, #9
 8001680:	46a4      	mov	ip, r4
 8001682:	44e1      	add	r9, ip
 8001684:	9c02      	ldr	r4, [sp, #8]
 8001686:	9e03      	ldr	r6, [sp, #12]
 8001688:	46a4      	mov	ip, r4
 800168a:	9d05      	ldr	r5, [sp, #20]
 800168c:	4466      	add	r6, ip
 800168e:	428e      	cmp	r6, r1
 8001690:	4189      	sbcs	r1, r1
 8001692:	46ac      	mov	ip, r5
 8001694:	0412      	lsls	r2, r2, #16
 8001696:	043c      	lsls	r4, r7, #16
 8001698:	0c12      	lsrs	r2, r2, #16
 800169a:	18a2      	adds	r2, r4, r2
 800169c:	4462      	add	r2, ip
 800169e:	4249      	negs	r1, r1
 80016a0:	1854      	adds	r4, r2, r1
 80016a2:	4446      	add	r6, r8
 80016a4:	46a4      	mov	ip, r4
 80016a6:	4546      	cmp	r6, r8
 80016a8:	41a4      	sbcs	r4, r4
 80016aa:	4682      	mov	sl, r0
 80016ac:	4264      	negs	r4, r4
 80016ae:	46a0      	mov	r8, r4
 80016b0:	42aa      	cmp	r2, r5
 80016b2:	4192      	sbcs	r2, r2
 80016b4:	458c      	cmp	ip, r1
 80016b6:	4189      	sbcs	r1, r1
 80016b8:	44e2      	add	sl, ip
 80016ba:	44d0      	add	r8, sl
 80016bc:	4249      	negs	r1, r1
 80016be:	4252      	negs	r2, r2
 80016c0:	430a      	orrs	r2, r1
 80016c2:	45a0      	cmp	r8, r4
 80016c4:	41a4      	sbcs	r4, r4
 80016c6:	4582      	cmp	sl, r0
 80016c8:	4189      	sbcs	r1, r1
 80016ca:	4264      	negs	r4, r4
 80016cc:	4249      	negs	r1, r1
 80016ce:	430c      	orrs	r4, r1
 80016d0:	4641      	mov	r1, r8
 80016d2:	0c3f      	lsrs	r7, r7, #16
 80016d4:	19d2      	adds	r2, r2, r7
 80016d6:	1912      	adds	r2, r2, r4
 80016d8:	0dcc      	lsrs	r4, r1, #23
 80016da:	9904      	ldr	r1, [sp, #16]
 80016dc:	0270      	lsls	r0, r6, #9
 80016de:	4308      	orrs	r0, r1
 80016e0:	1e41      	subs	r1, r0, #1
 80016e2:	4188      	sbcs	r0, r1
 80016e4:	4641      	mov	r1, r8
 80016e6:	444a      	add	r2, r9
 80016e8:	0df6      	lsrs	r6, r6, #23
 80016ea:	0252      	lsls	r2, r2, #9
 80016ec:	4330      	orrs	r0, r6
 80016ee:	0249      	lsls	r1, r1, #9
 80016f0:	4314      	orrs	r4, r2
 80016f2:	4308      	orrs	r0, r1
 80016f4:	01d2      	lsls	r2, r2, #7
 80016f6:	d535      	bpl.n	8001764 <__aeabi_dmul+0x514>
 80016f8:	2201      	movs	r2, #1
 80016fa:	0843      	lsrs	r3, r0, #1
 80016fc:	4002      	ands	r2, r0
 80016fe:	4313      	orrs	r3, r2
 8001700:	07e0      	lsls	r0, r4, #31
 8001702:	4318      	orrs	r0, r3
 8001704:	0864      	lsrs	r4, r4, #1
 8001706:	e634      	b.n	8001372 <__aeabi_dmul+0x122>
 8001708:	9b00      	ldr	r3, [sp, #0]
 800170a:	46a2      	mov	sl, r4
 800170c:	469b      	mov	fp, r3
 800170e:	4681      	mov	r9, r0
 8001710:	2480      	movs	r4, #128	@ 0x80
 8001712:	4653      	mov	r3, sl
 8001714:	0324      	lsls	r4, r4, #12
 8001716:	431c      	orrs	r4, r3
 8001718:	0324      	lsls	r4, r4, #12
 800171a:	464a      	mov	r2, r9
 800171c:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <__aeabi_dmul+0x588>)
 800171e:	0b24      	lsrs	r4, r4, #12
 8001720:	e5ec      	b.n	80012fc <__aeabi_dmul+0xac>
 8001722:	f000 fcbb 	bl	800209c <__clzsi2>
 8001726:	2315      	movs	r3, #21
 8001728:	469c      	mov	ip, r3
 800172a:	4484      	add	ip, r0
 800172c:	0002      	movs	r2, r0
 800172e:	4663      	mov	r3, ip
 8001730:	3220      	adds	r2, #32
 8001732:	2b1c      	cmp	r3, #28
 8001734:	dc00      	bgt.n	8001738 <__aeabi_dmul+0x4e8>
 8001736:	e684      	b.n	8001442 <__aeabi_dmul+0x1f2>
 8001738:	2300      	movs	r3, #0
 800173a:	4699      	mov	r9, r3
 800173c:	0023      	movs	r3, r4
 800173e:	3808      	subs	r0, #8
 8001740:	4083      	lsls	r3, r0
 8001742:	469a      	mov	sl, r3
 8001744:	e68e      	b.n	8001464 <__aeabi_dmul+0x214>
 8001746:	f000 fca9 	bl	800209c <__clzsi2>
 800174a:	0002      	movs	r2, r0
 800174c:	0003      	movs	r3, r0
 800174e:	3215      	adds	r2, #21
 8001750:	3320      	adds	r3, #32
 8001752:	2a1c      	cmp	r2, #28
 8001754:	dc00      	bgt.n	8001758 <__aeabi_dmul+0x508>
 8001756:	e64e      	b.n	80013f6 <__aeabi_dmul+0x1a6>
 8001758:	0002      	movs	r2, r0
 800175a:	0034      	movs	r4, r6
 800175c:	3a08      	subs	r2, #8
 800175e:	2000      	movs	r0, #0
 8001760:	4094      	lsls	r4, r2
 8001762:	e652      	b.n	800140a <__aeabi_dmul+0x1ba>
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	e604      	b.n	8001372 <__aeabi_dmul+0x122>
 8001768:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <__aeabi_dmul+0x58c>)
 800176a:	0021      	movs	r1, r4
 800176c:	469c      	mov	ip, r3
 800176e:	0003      	movs	r3, r0
 8001770:	9d01      	ldr	r5, [sp, #4]
 8001772:	40d3      	lsrs	r3, r2
 8001774:	4465      	add	r5, ip
 8001776:	40a9      	lsls	r1, r5
 8001778:	4319      	orrs	r1, r3
 800177a:	0003      	movs	r3, r0
 800177c:	40ab      	lsls	r3, r5
 800177e:	1e58      	subs	r0, r3, #1
 8001780:	4183      	sbcs	r3, r0
 8001782:	4319      	orrs	r1, r3
 8001784:	0008      	movs	r0, r1
 8001786:	40d4      	lsrs	r4, r2
 8001788:	074b      	lsls	r3, r1, #29
 800178a:	d009      	beq.n	80017a0 <__aeabi_dmul+0x550>
 800178c:	230f      	movs	r3, #15
 800178e:	400b      	ands	r3, r1
 8001790:	2b04      	cmp	r3, #4
 8001792:	d005      	beq.n	80017a0 <__aeabi_dmul+0x550>
 8001794:	1d0b      	adds	r3, r1, #4
 8001796:	428b      	cmp	r3, r1
 8001798:	4180      	sbcs	r0, r0
 800179a:	4240      	negs	r0, r0
 800179c:	1824      	adds	r4, r4, r0
 800179e:	0018      	movs	r0, r3
 80017a0:	0223      	lsls	r3, r4, #8
 80017a2:	d400      	bmi.n	80017a6 <__aeabi_dmul+0x556>
 80017a4:	e6d6      	b.n	8001554 <__aeabi_dmul+0x304>
 80017a6:	2301      	movs	r3, #1
 80017a8:	2400      	movs	r4, #0
 80017aa:	2200      	movs	r2, #0
 80017ac:	e5a6      	b.n	80012fc <__aeabi_dmul+0xac>
 80017ae:	290f      	cmp	r1, #15
 80017b0:	d1aa      	bne.n	8001708 <__aeabi_dmul+0x4b8>
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	4652      	mov	r2, sl
 80017b6:	031b      	lsls	r3, r3, #12
 80017b8:	421a      	tst	r2, r3
 80017ba:	d0a9      	beq.n	8001710 <__aeabi_dmul+0x4c0>
 80017bc:	421c      	tst	r4, r3
 80017be:	d1a7      	bne.n	8001710 <__aeabi_dmul+0x4c0>
 80017c0:	431c      	orrs	r4, r3
 80017c2:	9b00      	ldr	r3, [sp, #0]
 80017c4:	0002      	movs	r2, r0
 80017c6:	469b      	mov	fp, r3
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <__aeabi_dmul+0x588>)
 80017ca:	e597      	b.n	80012fc <__aeabi_dmul+0xac>
 80017cc:	2400      	movs	r4, #0
 80017ce:	e6c1      	b.n	8001554 <__aeabi_dmul+0x304>
 80017d0:	2400      	movs	r4, #0
 80017d2:	4b01      	ldr	r3, [pc, #4]	@ (80017d8 <__aeabi_dmul+0x588>)
 80017d4:	0022      	movs	r2, r4
 80017d6:	e591      	b.n	80012fc <__aeabi_dmul+0xac>
 80017d8:	000007ff 	.word	0x000007ff
 80017dc:	0000041e 	.word	0x0000041e

080017e0 <__aeabi_dsub>:
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e2:	464e      	mov	r6, r9
 80017e4:	4645      	mov	r5, r8
 80017e6:	46de      	mov	lr, fp
 80017e8:	4657      	mov	r7, sl
 80017ea:	b5e0      	push	{r5, r6, r7, lr}
 80017ec:	b085      	sub	sp, #20
 80017ee:	9000      	str	r0, [sp, #0]
 80017f0:	9101      	str	r1, [sp, #4]
 80017f2:	030c      	lsls	r4, r1, #12
 80017f4:	004f      	lsls	r7, r1, #1
 80017f6:	0fce      	lsrs	r6, r1, #31
 80017f8:	0a61      	lsrs	r1, r4, #9
 80017fa:	9c00      	ldr	r4, [sp, #0]
 80017fc:	46b0      	mov	r8, r6
 80017fe:	0f64      	lsrs	r4, r4, #29
 8001800:	430c      	orrs	r4, r1
 8001802:	9900      	ldr	r1, [sp, #0]
 8001804:	0d7f      	lsrs	r7, r7, #21
 8001806:	00c8      	lsls	r0, r1, #3
 8001808:	0011      	movs	r1, r2
 800180a:	001a      	movs	r2, r3
 800180c:	031b      	lsls	r3, r3, #12
 800180e:	469c      	mov	ip, r3
 8001810:	9100      	str	r1, [sp, #0]
 8001812:	9201      	str	r2, [sp, #4]
 8001814:	0051      	lsls	r1, r2, #1
 8001816:	0d4b      	lsrs	r3, r1, #21
 8001818:	4699      	mov	r9, r3
 800181a:	9b01      	ldr	r3, [sp, #4]
 800181c:	9d00      	ldr	r5, [sp, #0]
 800181e:	0fd9      	lsrs	r1, r3, #31
 8001820:	4663      	mov	r3, ip
 8001822:	0f6a      	lsrs	r2, r5, #29
 8001824:	0a5b      	lsrs	r3, r3, #9
 8001826:	4313      	orrs	r3, r2
 8001828:	00ea      	lsls	r2, r5, #3
 800182a:	4694      	mov	ip, r2
 800182c:	4693      	mov	fp, r2
 800182e:	4ac1      	ldr	r2, [pc, #772]	@ (8001b34 <__aeabi_dsub+0x354>)
 8001830:	9003      	str	r0, [sp, #12]
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	4591      	cmp	r9, r2
 8001836:	d100      	bne.n	800183a <__aeabi_dsub+0x5a>
 8001838:	e0cd      	b.n	80019d6 <__aeabi_dsub+0x1f6>
 800183a:	2501      	movs	r5, #1
 800183c:	4069      	eors	r1, r5
 800183e:	464d      	mov	r5, r9
 8001840:	1b7d      	subs	r5, r7, r5
 8001842:	46aa      	mov	sl, r5
 8001844:	428e      	cmp	r6, r1
 8001846:	d100      	bne.n	800184a <__aeabi_dsub+0x6a>
 8001848:	e080      	b.n	800194c <__aeabi_dsub+0x16c>
 800184a:	2d00      	cmp	r5, #0
 800184c:	dc00      	bgt.n	8001850 <__aeabi_dsub+0x70>
 800184e:	e335      	b.n	8001ebc <__aeabi_dsub+0x6dc>
 8001850:	4649      	mov	r1, r9
 8001852:	2900      	cmp	r1, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x78>
 8001856:	e0df      	b.n	8001a18 <__aeabi_dsub+0x238>
 8001858:	4297      	cmp	r7, r2
 800185a:	d100      	bne.n	800185e <__aeabi_dsub+0x7e>
 800185c:	e194      	b.n	8001b88 <__aeabi_dsub+0x3a8>
 800185e:	4652      	mov	r2, sl
 8001860:	2501      	movs	r5, #1
 8001862:	2a38      	cmp	r2, #56	@ 0x38
 8001864:	dc19      	bgt.n	800189a <__aeabi_dsub+0xba>
 8001866:	2280      	movs	r2, #128	@ 0x80
 8001868:	9b02      	ldr	r3, [sp, #8]
 800186a:	0412      	lsls	r2, r2, #16
 800186c:	4313      	orrs	r3, r2
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	4652      	mov	r2, sl
 8001872:	2a1f      	cmp	r2, #31
 8001874:	dd00      	ble.n	8001878 <__aeabi_dsub+0x98>
 8001876:	e1e3      	b.n	8001c40 <__aeabi_dsub+0x460>
 8001878:	4653      	mov	r3, sl
 800187a:	2220      	movs	r2, #32
 800187c:	4661      	mov	r1, ip
 800187e:	9d02      	ldr	r5, [sp, #8]
 8001880:	1ad2      	subs	r2, r2, r3
 8001882:	4095      	lsls	r5, r2
 8001884:	40d9      	lsrs	r1, r3
 8001886:	430d      	orrs	r5, r1
 8001888:	4661      	mov	r1, ip
 800188a:	4091      	lsls	r1, r2
 800188c:	000a      	movs	r2, r1
 800188e:	1e51      	subs	r1, r2, #1
 8001890:	418a      	sbcs	r2, r1
 8001892:	4315      	orrs	r5, r2
 8001894:	9a02      	ldr	r2, [sp, #8]
 8001896:	40da      	lsrs	r2, r3
 8001898:	1aa4      	subs	r4, r4, r2
 800189a:	1b45      	subs	r5, r0, r5
 800189c:	42a8      	cmp	r0, r5
 800189e:	4180      	sbcs	r0, r0
 80018a0:	4240      	negs	r0, r0
 80018a2:	1a24      	subs	r4, r4, r0
 80018a4:	0223      	lsls	r3, r4, #8
 80018a6:	d400      	bmi.n	80018aa <__aeabi_dsub+0xca>
 80018a8:	e13d      	b.n	8001b26 <__aeabi_dsub+0x346>
 80018aa:	0264      	lsls	r4, r4, #9
 80018ac:	0a64      	lsrs	r4, r4, #9
 80018ae:	2c00      	cmp	r4, #0
 80018b0:	d100      	bne.n	80018b4 <__aeabi_dsub+0xd4>
 80018b2:	e147      	b.n	8001b44 <__aeabi_dsub+0x364>
 80018b4:	0020      	movs	r0, r4
 80018b6:	f000 fbf1 	bl	800209c <__clzsi2>
 80018ba:	0003      	movs	r3, r0
 80018bc:	3b08      	subs	r3, #8
 80018be:	2120      	movs	r1, #32
 80018c0:	0028      	movs	r0, r5
 80018c2:	1aca      	subs	r2, r1, r3
 80018c4:	40d0      	lsrs	r0, r2
 80018c6:	409c      	lsls	r4, r3
 80018c8:	0002      	movs	r2, r0
 80018ca:	409d      	lsls	r5, r3
 80018cc:	4322      	orrs	r2, r4
 80018ce:	429f      	cmp	r7, r3
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dsub+0xf4>
 80018d2:	e177      	b.n	8001bc4 <__aeabi_dsub+0x3e4>
 80018d4:	1bd8      	subs	r0, r3, r7
 80018d6:	3001      	adds	r0, #1
 80018d8:	1a09      	subs	r1, r1, r0
 80018da:	002c      	movs	r4, r5
 80018dc:	408d      	lsls	r5, r1
 80018de:	40c4      	lsrs	r4, r0
 80018e0:	1e6b      	subs	r3, r5, #1
 80018e2:	419d      	sbcs	r5, r3
 80018e4:	0013      	movs	r3, r2
 80018e6:	40c2      	lsrs	r2, r0
 80018e8:	408b      	lsls	r3, r1
 80018ea:	4325      	orrs	r5, r4
 80018ec:	2700      	movs	r7, #0
 80018ee:	0014      	movs	r4, r2
 80018f0:	431d      	orrs	r5, r3
 80018f2:	076b      	lsls	r3, r5, #29
 80018f4:	d009      	beq.n	800190a <__aeabi_dsub+0x12a>
 80018f6:	230f      	movs	r3, #15
 80018f8:	402b      	ands	r3, r5
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d005      	beq.n	800190a <__aeabi_dsub+0x12a>
 80018fe:	1d2b      	adds	r3, r5, #4
 8001900:	42ab      	cmp	r3, r5
 8001902:	41ad      	sbcs	r5, r5
 8001904:	426d      	negs	r5, r5
 8001906:	1964      	adds	r4, r4, r5
 8001908:	001d      	movs	r5, r3
 800190a:	0223      	lsls	r3, r4, #8
 800190c:	d400      	bmi.n	8001910 <__aeabi_dsub+0x130>
 800190e:	e140      	b.n	8001b92 <__aeabi_dsub+0x3b2>
 8001910:	4a88      	ldr	r2, [pc, #544]	@ (8001b34 <__aeabi_dsub+0x354>)
 8001912:	3701      	adds	r7, #1
 8001914:	4297      	cmp	r7, r2
 8001916:	d100      	bne.n	800191a <__aeabi_dsub+0x13a>
 8001918:	e101      	b.n	8001b1e <__aeabi_dsub+0x33e>
 800191a:	2601      	movs	r6, #1
 800191c:	4643      	mov	r3, r8
 800191e:	4986      	ldr	r1, [pc, #536]	@ (8001b38 <__aeabi_dsub+0x358>)
 8001920:	08ed      	lsrs	r5, r5, #3
 8001922:	4021      	ands	r1, r4
 8001924:	074a      	lsls	r2, r1, #29
 8001926:	432a      	orrs	r2, r5
 8001928:	057c      	lsls	r4, r7, #21
 800192a:	024d      	lsls	r5, r1, #9
 800192c:	0b2d      	lsrs	r5, r5, #12
 800192e:	0d64      	lsrs	r4, r4, #21
 8001930:	401e      	ands	r6, r3
 8001932:	0524      	lsls	r4, r4, #20
 8001934:	432c      	orrs	r4, r5
 8001936:	07f6      	lsls	r6, r6, #31
 8001938:	4334      	orrs	r4, r6
 800193a:	0010      	movs	r0, r2
 800193c:	0021      	movs	r1, r4
 800193e:	b005      	add	sp, #20
 8001940:	bcf0      	pop	{r4, r5, r6, r7}
 8001942:	46bb      	mov	fp, r7
 8001944:	46b2      	mov	sl, r6
 8001946:	46a9      	mov	r9, r5
 8001948:	46a0      	mov	r8, r4
 800194a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194c:	2d00      	cmp	r5, #0
 800194e:	dc00      	bgt.n	8001952 <__aeabi_dsub+0x172>
 8001950:	e2d0      	b.n	8001ef4 <__aeabi_dsub+0x714>
 8001952:	4649      	mov	r1, r9
 8001954:	2900      	cmp	r1, #0
 8001956:	d000      	beq.n	800195a <__aeabi_dsub+0x17a>
 8001958:	e0d4      	b.n	8001b04 <__aeabi_dsub+0x324>
 800195a:	4661      	mov	r1, ip
 800195c:	9b02      	ldr	r3, [sp, #8]
 800195e:	4319      	orrs	r1, r3
 8001960:	d100      	bne.n	8001964 <__aeabi_dsub+0x184>
 8001962:	e12b      	b.n	8001bbc <__aeabi_dsub+0x3dc>
 8001964:	1e69      	subs	r1, r5, #1
 8001966:	2d01      	cmp	r5, #1
 8001968:	d100      	bne.n	800196c <__aeabi_dsub+0x18c>
 800196a:	e1d9      	b.n	8001d20 <__aeabi_dsub+0x540>
 800196c:	4295      	cmp	r5, r2
 800196e:	d100      	bne.n	8001972 <__aeabi_dsub+0x192>
 8001970:	e10a      	b.n	8001b88 <__aeabi_dsub+0x3a8>
 8001972:	2501      	movs	r5, #1
 8001974:	2938      	cmp	r1, #56	@ 0x38
 8001976:	dc17      	bgt.n	80019a8 <__aeabi_dsub+0x1c8>
 8001978:	468a      	mov	sl, r1
 800197a:	4653      	mov	r3, sl
 800197c:	2b1f      	cmp	r3, #31
 800197e:	dd00      	ble.n	8001982 <__aeabi_dsub+0x1a2>
 8001980:	e1e7      	b.n	8001d52 <__aeabi_dsub+0x572>
 8001982:	2220      	movs	r2, #32
 8001984:	1ad2      	subs	r2, r2, r3
 8001986:	9b02      	ldr	r3, [sp, #8]
 8001988:	4661      	mov	r1, ip
 800198a:	4093      	lsls	r3, r2
 800198c:	001d      	movs	r5, r3
 800198e:	4653      	mov	r3, sl
 8001990:	40d9      	lsrs	r1, r3
 8001992:	4663      	mov	r3, ip
 8001994:	4093      	lsls	r3, r2
 8001996:	001a      	movs	r2, r3
 8001998:	430d      	orrs	r5, r1
 800199a:	1e51      	subs	r1, r2, #1
 800199c:	418a      	sbcs	r2, r1
 800199e:	4653      	mov	r3, sl
 80019a0:	4315      	orrs	r5, r2
 80019a2:	9a02      	ldr	r2, [sp, #8]
 80019a4:	40da      	lsrs	r2, r3
 80019a6:	18a4      	adds	r4, r4, r2
 80019a8:	182d      	adds	r5, r5, r0
 80019aa:	4285      	cmp	r5, r0
 80019ac:	4180      	sbcs	r0, r0
 80019ae:	4240      	negs	r0, r0
 80019b0:	1824      	adds	r4, r4, r0
 80019b2:	0223      	lsls	r3, r4, #8
 80019b4:	d400      	bmi.n	80019b8 <__aeabi_dsub+0x1d8>
 80019b6:	e0b6      	b.n	8001b26 <__aeabi_dsub+0x346>
 80019b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b34 <__aeabi_dsub+0x354>)
 80019ba:	3701      	adds	r7, #1
 80019bc:	429f      	cmp	r7, r3
 80019be:	d100      	bne.n	80019c2 <__aeabi_dsub+0x1e2>
 80019c0:	e0ad      	b.n	8001b1e <__aeabi_dsub+0x33e>
 80019c2:	2101      	movs	r1, #1
 80019c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001b38 <__aeabi_dsub+0x358>)
 80019c6:	086a      	lsrs	r2, r5, #1
 80019c8:	401c      	ands	r4, r3
 80019ca:	4029      	ands	r1, r5
 80019cc:	430a      	orrs	r2, r1
 80019ce:	07e5      	lsls	r5, r4, #31
 80019d0:	4315      	orrs	r5, r2
 80019d2:	0864      	lsrs	r4, r4, #1
 80019d4:	e78d      	b.n	80018f2 <__aeabi_dsub+0x112>
 80019d6:	4a59      	ldr	r2, [pc, #356]	@ (8001b3c <__aeabi_dsub+0x35c>)
 80019d8:	9b02      	ldr	r3, [sp, #8]
 80019da:	4692      	mov	sl, r2
 80019dc:	4662      	mov	r2, ip
 80019de:	44ba      	add	sl, r7
 80019e0:	431a      	orrs	r2, r3
 80019e2:	d02c      	beq.n	8001a3e <__aeabi_dsub+0x25e>
 80019e4:	428e      	cmp	r6, r1
 80019e6:	d02e      	beq.n	8001a46 <__aeabi_dsub+0x266>
 80019e8:	4652      	mov	r2, sl
 80019ea:	2a00      	cmp	r2, #0
 80019ec:	d060      	beq.n	8001ab0 <__aeabi_dsub+0x2d0>
 80019ee:	2f00      	cmp	r7, #0
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x214>
 80019f2:	e0db      	b.n	8001bac <__aeabi_dsub+0x3cc>
 80019f4:	4663      	mov	r3, ip
 80019f6:	000e      	movs	r6, r1
 80019f8:	9c02      	ldr	r4, [sp, #8]
 80019fa:	08d8      	lsrs	r0, r3, #3
 80019fc:	0762      	lsls	r2, r4, #29
 80019fe:	4302      	orrs	r2, r0
 8001a00:	08e4      	lsrs	r4, r4, #3
 8001a02:	0013      	movs	r3, r2
 8001a04:	4323      	orrs	r3, r4
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dsub+0x22a>
 8001a08:	e254      	b.n	8001eb4 <__aeabi_dsub+0x6d4>
 8001a0a:	2580      	movs	r5, #128	@ 0x80
 8001a0c:	032d      	lsls	r5, r5, #12
 8001a0e:	4325      	orrs	r5, r4
 8001a10:	032d      	lsls	r5, r5, #12
 8001a12:	4c48      	ldr	r4, [pc, #288]	@ (8001b34 <__aeabi_dsub+0x354>)
 8001a14:	0b2d      	lsrs	r5, r5, #12
 8001a16:	e78c      	b.n	8001932 <__aeabi_dsub+0x152>
 8001a18:	4661      	mov	r1, ip
 8001a1a:	9b02      	ldr	r3, [sp, #8]
 8001a1c:	4319      	orrs	r1, r3
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x242>
 8001a20:	e0cc      	b.n	8001bbc <__aeabi_dsub+0x3dc>
 8001a22:	0029      	movs	r1, r5
 8001a24:	3901      	subs	r1, #1
 8001a26:	2d01      	cmp	r5, #1
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x24c>
 8001a2a:	e188      	b.n	8001d3e <__aeabi_dsub+0x55e>
 8001a2c:	4295      	cmp	r5, r2
 8001a2e:	d100      	bne.n	8001a32 <__aeabi_dsub+0x252>
 8001a30:	e0aa      	b.n	8001b88 <__aeabi_dsub+0x3a8>
 8001a32:	2501      	movs	r5, #1
 8001a34:	2938      	cmp	r1, #56	@ 0x38
 8001a36:	dd00      	ble.n	8001a3a <__aeabi_dsub+0x25a>
 8001a38:	e72f      	b.n	800189a <__aeabi_dsub+0xba>
 8001a3a:	468a      	mov	sl, r1
 8001a3c:	e718      	b.n	8001870 <__aeabi_dsub+0x90>
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4051      	eors	r1, r2
 8001a42:	428e      	cmp	r6, r1
 8001a44:	d1d0      	bne.n	80019e8 <__aeabi_dsub+0x208>
 8001a46:	4653      	mov	r3, sl
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x26e>
 8001a4c:	e0be      	b.n	8001bcc <__aeabi_dsub+0x3ec>
 8001a4e:	2f00      	cmp	r7, #0
 8001a50:	d000      	beq.n	8001a54 <__aeabi_dsub+0x274>
 8001a52:	e138      	b.n	8001cc6 <__aeabi_dsub+0x4e6>
 8001a54:	46ca      	mov	sl, r9
 8001a56:	0022      	movs	r2, r4
 8001a58:	4302      	orrs	r2, r0
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dsub+0x27e>
 8001a5c:	e1e2      	b.n	8001e24 <__aeabi_dsub+0x644>
 8001a5e:	4653      	mov	r3, sl
 8001a60:	1e59      	subs	r1, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d100      	bne.n	8001a68 <__aeabi_dsub+0x288>
 8001a66:	e20d      	b.n	8001e84 <__aeabi_dsub+0x6a4>
 8001a68:	4a32      	ldr	r2, [pc, #200]	@ (8001b34 <__aeabi_dsub+0x354>)
 8001a6a:	4592      	cmp	sl, r2
 8001a6c:	d100      	bne.n	8001a70 <__aeabi_dsub+0x290>
 8001a6e:	e1d2      	b.n	8001e16 <__aeabi_dsub+0x636>
 8001a70:	2701      	movs	r7, #1
 8001a72:	2938      	cmp	r1, #56	@ 0x38
 8001a74:	dc13      	bgt.n	8001a9e <__aeabi_dsub+0x2be>
 8001a76:	291f      	cmp	r1, #31
 8001a78:	dd00      	ble.n	8001a7c <__aeabi_dsub+0x29c>
 8001a7a:	e1ee      	b.n	8001e5a <__aeabi_dsub+0x67a>
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	9b02      	ldr	r3, [sp, #8]
 8001a80:	1a52      	subs	r2, r2, r1
 8001a82:	0025      	movs	r5, r4
 8001a84:	0007      	movs	r7, r0
 8001a86:	469a      	mov	sl, r3
 8001a88:	40cc      	lsrs	r4, r1
 8001a8a:	4090      	lsls	r0, r2
 8001a8c:	4095      	lsls	r5, r2
 8001a8e:	40cf      	lsrs	r7, r1
 8001a90:	44a2      	add	sl, r4
 8001a92:	1e42      	subs	r2, r0, #1
 8001a94:	4190      	sbcs	r0, r2
 8001a96:	4653      	mov	r3, sl
 8001a98:	432f      	orrs	r7, r5
 8001a9a:	4307      	orrs	r7, r0
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	003d      	movs	r5, r7
 8001aa0:	4465      	add	r5, ip
 8001aa2:	4565      	cmp	r5, ip
 8001aa4:	4192      	sbcs	r2, r2
 8001aa6:	9b02      	ldr	r3, [sp, #8]
 8001aa8:	4252      	negs	r2, r2
 8001aaa:	464f      	mov	r7, r9
 8001aac:	18d4      	adds	r4, r2, r3
 8001aae:	e780      	b.n	80019b2 <__aeabi_dsub+0x1d2>
 8001ab0:	4a23      	ldr	r2, [pc, #140]	@ (8001b40 <__aeabi_dsub+0x360>)
 8001ab2:	1c7d      	adds	r5, r7, #1
 8001ab4:	4215      	tst	r5, r2
 8001ab6:	d000      	beq.n	8001aba <__aeabi_dsub+0x2da>
 8001ab8:	e0aa      	b.n	8001c10 <__aeabi_dsub+0x430>
 8001aba:	4662      	mov	r2, ip
 8001abc:	0025      	movs	r5, r4
 8001abe:	9b02      	ldr	r3, [sp, #8]
 8001ac0:	4305      	orrs	r5, r0
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	2f00      	cmp	r7, #0
 8001ac6:	d000      	beq.n	8001aca <__aeabi_dsub+0x2ea>
 8001ac8:	e0f5      	b.n	8001cb6 <__aeabi_dsub+0x4d6>
 8001aca:	2d00      	cmp	r5, #0
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dsub+0x2f0>
 8001ace:	e16b      	b.n	8001da8 <__aeabi_dsub+0x5c8>
 8001ad0:	2a00      	cmp	r2, #0
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dsub+0x2f6>
 8001ad4:	e152      	b.n	8001d7c <__aeabi_dsub+0x59c>
 8001ad6:	4663      	mov	r3, ip
 8001ad8:	1ac5      	subs	r5, r0, r3
 8001ada:	9b02      	ldr	r3, [sp, #8]
 8001adc:	1ae2      	subs	r2, r4, r3
 8001ade:	42a8      	cmp	r0, r5
 8001ae0:	419b      	sbcs	r3, r3
 8001ae2:	425b      	negs	r3, r3
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	021a      	lsls	r2, r3, #8
 8001ae8:	d400      	bmi.n	8001aec <__aeabi_dsub+0x30c>
 8001aea:	e1d5      	b.n	8001e98 <__aeabi_dsub+0x6b8>
 8001aec:	4663      	mov	r3, ip
 8001aee:	1a1d      	subs	r5, r3, r0
 8001af0:	45ac      	cmp	ip, r5
 8001af2:	4192      	sbcs	r2, r2
 8001af4:	2601      	movs	r6, #1
 8001af6:	9b02      	ldr	r3, [sp, #8]
 8001af8:	4252      	negs	r2, r2
 8001afa:	1b1c      	subs	r4, r3, r4
 8001afc:	4688      	mov	r8, r1
 8001afe:	1aa4      	subs	r4, r4, r2
 8001b00:	400e      	ands	r6, r1
 8001b02:	e6f6      	b.n	80018f2 <__aeabi_dsub+0x112>
 8001b04:	4297      	cmp	r7, r2
 8001b06:	d03f      	beq.n	8001b88 <__aeabi_dsub+0x3a8>
 8001b08:	4652      	mov	r2, sl
 8001b0a:	2501      	movs	r5, #1
 8001b0c:	2a38      	cmp	r2, #56	@ 0x38
 8001b0e:	dd00      	ble.n	8001b12 <__aeabi_dsub+0x332>
 8001b10:	e74a      	b.n	80019a8 <__aeabi_dsub+0x1c8>
 8001b12:	2280      	movs	r2, #128	@ 0x80
 8001b14:	9b02      	ldr	r3, [sp, #8]
 8001b16:	0412      	lsls	r2, r2, #16
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	e72d      	b.n	800197a <__aeabi_dsub+0x19a>
 8001b1e:	003c      	movs	r4, r7
 8001b20:	2500      	movs	r5, #0
 8001b22:	2200      	movs	r2, #0
 8001b24:	e705      	b.n	8001932 <__aeabi_dsub+0x152>
 8001b26:	2307      	movs	r3, #7
 8001b28:	402b      	ands	r3, r5
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d000      	beq.n	8001b30 <__aeabi_dsub+0x350>
 8001b2e:	e6e2      	b.n	80018f6 <__aeabi_dsub+0x116>
 8001b30:	e06b      	b.n	8001c0a <__aeabi_dsub+0x42a>
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	000007ff 	.word	0x000007ff
 8001b38:	ff7fffff 	.word	0xff7fffff
 8001b3c:	fffff801 	.word	0xfffff801
 8001b40:	000007fe 	.word	0x000007fe
 8001b44:	0028      	movs	r0, r5
 8001b46:	f000 faa9 	bl	800209c <__clzsi2>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	3318      	adds	r3, #24
 8001b4e:	2b1f      	cmp	r3, #31
 8001b50:	dc00      	bgt.n	8001b54 <__aeabi_dsub+0x374>
 8001b52:	e6b4      	b.n	80018be <__aeabi_dsub+0xde>
 8001b54:	002a      	movs	r2, r5
 8001b56:	3808      	subs	r0, #8
 8001b58:	4082      	lsls	r2, r0
 8001b5a:	429f      	cmp	r7, r3
 8001b5c:	dd00      	ble.n	8001b60 <__aeabi_dsub+0x380>
 8001b5e:	e0b9      	b.n	8001cd4 <__aeabi_dsub+0x4f4>
 8001b60:	1bdb      	subs	r3, r3, r7
 8001b62:	1c58      	adds	r0, r3, #1
 8001b64:	281f      	cmp	r0, #31
 8001b66:	dc00      	bgt.n	8001b6a <__aeabi_dsub+0x38a>
 8001b68:	e1a0      	b.n	8001eac <__aeabi_dsub+0x6cc>
 8001b6a:	0015      	movs	r5, r2
 8001b6c:	3b1f      	subs	r3, #31
 8001b6e:	40dd      	lsrs	r5, r3
 8001b70:	2820      	cmp	r0, #32
 8001b72:	d005      	beq.n	8001b80 <__aeabi_dsub+0x3a0>
 8001b74:	2340      	movs	r3, #64	@ 0x40
 8001b76:	1a1b      	subs	r3, r3, r0
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	1e53      	subs	r3, r2, #1
 8001b7c:	419a      	sbcs	r2, r3
 8001b7e:	4315      	orrs	r5, r2
 8001b80:	2307      	movs	r3, #7
 8001b82:	2700      	movs	r7, #0
 8001b84:	402b      	ands	r3, r5
 8001b86:	e7d0      	b.n	8001b2a <__aeabi_dsub+0x34a>
 8001b88:	08c0      	lsrs	r0, r0, #3
 8001b8a:	0762      	lsls	r2, r4, #29
 8001b8c:	4302      	orrs	r2, r0
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e737      	b.n	8001a02 <__aeabi_dsub+0x222>
 8001b92:	08ea      	lsrs	r2, r5, #3
 8001b94:	0763      	lsls	r3, r4, #29
 8001b96:	431a      	orrs	r2, r3
 8001b98:	4bd3      	ldr	r3, [pc, #844]	@ (8001ee8 <__aeabi_dsub+0x708>)
 8001b9a:	08e4      	lsrs	r4, r4, #3
 8001b9c:	429f      	cmp	r7, r3
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x3c2>
 8001ba0:	e72f      	b.n	8001a02 <__aeabi_dsub+0x222>
 8001ba2:	0324      	lsls	r4, r4, #12
 8001ba4:	0b25      	lsrs	r5, r4, #12
 8001ba6:	057c      	lsls	r4, r7, #21
 8001ba8:	0d64      	lsrs	r4, r4, #21
 8001baa:	e6c2      	b.n	8001932 <__aeabi_dsub+0x152>
 8001bac:	46ca      	mov	sl, r9
 8001bae:	0022      	movs	r2, r4
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	d158      	bne.n	8001c66 <__aeabi_dsub+0x486>
 8001bb4:	4663      	mov	r3, ip
 8001bb6:	000e      	movs	r6, r1
 8001bb8:	9c02      	ldr	r4, [sp, #8]
 8001bba:	9303      	str	r3, [sp, #12]
 8001bbc:	9b03      	ldr	r3, [sp, #12]
 8001bbe:	4657      	mov	r7, sl
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	e7e7      	b.n	8001b94 <__aeabi_dsub+0x3b4>
 8001bc4:	4cc9      	ldr	r4, [pc, #804]	@ (8001eec <__aeabi_dsub+0x70c>)
 8001bc6:	1aff      	subs	r7, r7, r3
 8001bc8:	4014      	ands	r4, r2
 8001bca:	e692      	b.n	80018f2 <__aeabi_dsub+0x112>
 8001bcc:	4dc8      	ldr	r5, [pc, #800]	@ (8001ef0 <__aeabi_dsub+0x710>)
 8001bce:	1c7a      	adds	r2, r7, #1
 8001bd0:	422a      	tst	r2, r5
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dsub+0x3f6>
 8001bd4:	e084      	b.n	8001ce0 <__aeabi_dsub+0x500>
 8001bd6:	0022      	movs	r2, r4
 8001bd8:	4302      	orrs	r2, r0
 8001bda:	2f00      	cmp	r7, #0
 8001bdc:	d000      	beq.n	8001be0 <__aeabi_dsub+0x400>
 8001bde:	e0ef      	b.n	8001dc0 <__aeabi_dsub+0x5e0>
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x406>
 8001be4:	e0e5      	b.n	8001db2 <__aeabi_dsub+0x5d2>
 8001be6:	4662      	mov	r2, ip
 8001be8:	9902      	ldr	r1, [sp, #8]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dsub+0x410>
 8001bee:	e0c5      	b.n	8001d7c <__aeabi_dsub+0x59c>
 8001bf0:	4663      	mov	r3, ip
 8001bf2:	18c5      	adds	r5, r0, r3
 8001bf4:	468c      	mov	ip, r1
 8001bf6:	4285      	cmp	r5, r0
 8001bf8:	4180      	sbcs	r0, r0
 8001bfa:	4464      	add	r4, ip
 8001bfc:	4240      	negs	r0, r0
 8001bfe:	1824      	adds	r4, r4, r0
 8001c00:	0223      	lsls	r3, r4, #8
 8001c02:	d502      	bpl.n	8001c0a <__aeabi_dsub+0x42a>
 8001c04:	4bb9      	ldr	r3, [pc, #740]	@ (8001eec <__aeabi_dsub+0x70c>)
 8001c06:	3701      	adds	r7, #1
 8001c08:	401c      	ands	r4, r3
 8001c0a:	46ba      	mov	sl, r7
 8001c0c:	9503      	str	r5, [sp, #12]
 8001c0e:	e7d5      	b.n	8001bbc <__aeabi_dsub+0x3dc>
 8001c10:	4662      	mov	r2, ip
 8001c12:	1a85      	subs	r5, r0, r2
 8001c14:	42a8      	cmp	r0, r5
 8001c16:	4192      	sbcs	r2, r2
 8001c18:	4252      	negs	r2, r2
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	9b02      	ldr	r3, [sp, #8]
 8001c1e:	1ae3      	subs	r3, r4, r3
 8001c20:	001a      	movs	r2, r3
 8001c22:	464b      	mov	r3, r9
 8001c24:	1ad2      	subs	r2, r2, r3
 8001c26:	0013      	movs	r3, r2
 8001c28:	4691      	mov	r9, r2
 8001c2a:	021a      	lsls	r2, r3, #8
 8001c2c:	d46c      	bmi.n	8001d08 <__aeabi_dsub+0x528>
 8001c2e:	464a      	mov	r2, r9
 8001c30:	464c      	mov	r4, r9
 8001c32:	432a      	orrs	r2, r5
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dsub+0x458>
 8001c36:	e63a      	b.n	80018ae <__aeabi_dsub+0xce>
 8001c38:	2600      	movs	r6, #0
 8001c3a:	2400      	movs	r4, #0
 8001c3c:	2500      	movs	r5, #0
 8001c3e:	e678      	b.n	8001932 <__aeabi_dsub+0x152>
 8001c40:	9902      	ldr	r1, [sp, #8]
 8001c42:	4653      	mov	r3, sl
 8001c44:	000d      	movs	r5, r1
 8001c46:	3a20      	subs	r2, #32
 8001c48:	40d5      	lsrs	r5, r2
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d006      	beq.n	8001c5c <__aeabi_dsub+0x47c>
 8001c4e:	2240      	movs	r2, #64	@ 0x40
 8001c50:	1ad2      	subs	r2, r2, r3
 8001c52:	000b      	movs	r3, r1
 8001c54:	4093      	lsls	r3, r2
 8001c56:	4662      	mov	r2, ip
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	4693      	mov	fp, r2
 8001c5c:	465b      	mov	r3, fp
 8001c5e:	1e5a      	subs	r2, r3, #1
 8001c60:	4193      	sbcs	r3, r2
 8001c62:	431d      	orrs	r5, r3
 8001c64:	e619      	b.n	800189a <__aeabi_dsub+0xba>
 8001c66:	4653      	mov	r3, sl
 8001c68:	1e5a      	subs	r2, r3, #1
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x490>
 8001c6e:	e0c6      	b.n	8001dfe <__aeabi_dsub+0x61e>
 8001c70:	4e9d      	ldr	r6, [pc, #628]	@ (8001ee8 <__aeabi_dsub+0x708>)
 8001c72:	45b2      	cmp	sl, r6
 8001c74:	d100      	bne.n	8001c78 <__aeabi_dsub+0x498>
 8001c76:	e6bd      	b.n	80019f4 <__aeabi_dsub+0x214>
 8001c78:	4688      	mov	r8, r1
 8001c7a:	000e      	movs	r6, r1
 8001c7c:	2501      	movs	r5, #1
 8001c7e:	2a38      	cmp	r2, #56	@ 0x38
 8001c80:	dc10      	bgt.n	8001ca4 <__aeabi_dsub+0x4c4>
 8001c82:	2a1f      	cmp	r2, #31
 8001c84:	dc7f      	bgt.n	8001d86 <__aeabi_dsub+0x5a6>
 8001c86:	2120      	movs	r1, #32
 8001c88:	0025      	movs	r5, r4
 8001c8a:	1a89      	subs	r1, r1, r2
 8001c8c:	0007      	movs	r7, r0
 8001c8e:	4088      	lsls	r0, r1
 8001c90:	408d      	lsls	r5, r1
 8001c92:	40d7      	lsrs	r7, r2
 8001c94:	40d4      	lsrs	r4, r2
 8001c96:	1e41      	subs	r1, r0, #1
 8001c98:	4188      	sbcs	r0, r1
 8001c9a:	9b02      	ldr	r3, [sp, #8]
 8001c9c:	433d      	orrs	r5, r7
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	4305      	orrs	r5, r0
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	4662      	mov	r2, ip
 8001ca6:	1b55      	subs	r5, r2, r5
 8001ca8:	45ac      	cmp	ip, r5
 8001caa:	4192      	sbcs	r2, r2
 8001cac:	9b02      	ldr	r3, [sp, #8]
 8001cae:	4252      	negs	r2, r2
 8001cb0:	464f      	mov	r7, r9
 8001cb2:	1a9c      	subs	r4, r3, r2
 8001cb4:	e5f6      	b.n	80018a4 <__aeabi_dsub+0xc4>
 8001cb6:	2d00      	cmp	r5, #0
 8001cb8:	d000      	beq.n	8001cbc <__aeabi_dsub+0x4dc>
 8001cba:	e0b7      	b.n	8001e2c <__aeabi_dsub+0x64c>
 8001cbc:	2a00      	cmp	r2, #0
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x4e2>
 8001cc0:	e0f0      	b.n	8001ea4 <__aeabi_dsub+0x6c4>
 8001cc2:	2601      	movs	r6, #1
 8001cc4:	400e      	ands	r6, r1
 8001cc6:	4663      	mov	r3, ip
 8001cc8:	9802      	ldr	r0, [sp, #8]
 8001cca:	08d9      	lsrs	r1, r3, #3
 8001ccc:	0742      	lsls	r2, r0, #29
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	08c4      	lsrs	r4, r0, #3
 8001cd2:	e696      	b.n	8001a02 <__aeabi_dsub+0x222>
 8001cd4:	4c85      	ldr	r4, [pc, #532]	@ (8001eec <__aeabi_dsub+0x70c>)
 8001cd6:	1aff      	subs	r7, r7, r3
 8001cd8:	4014      	ands	r4, r2
 8001cda:	0762      	lsls	r2, r4, #29
 8001cdc:	08e4      	lsrs	r4, r4, #3
 8001cde:	e760      	b.n	8001ba2 <__aeabi_dsub+0x3c2>
 8001ce0:	4981      	ldr	r1, [pc, #516]	@ (8001ee8 <__aeabi_dsub+0x708>)
 8001ce2:	428a      	cmp	r2, r1
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x508>
 8001ce6:	e0c9      	b.n	8001e7c <__aeabi_dsub+0x69c>
 8001ce8:	4663      	mov	r3, ip
 8001cea:	18c1      	adds	r1, r0, r3
 8001cec:	4281      	cmp	r1, r0
 8001cee:	4180      	sbcs	r0, r0
 8001cf0:	9b02      	ldr	r3, [sp, #8]
 8001cf2:	4240      	negs	r0, r0
 8001cf4:	18e3      	adds	r3, r4, r3
 8001cf6:	181b      	adds	r3, r3, r0
 8001cf8:	07dd      	lsls	r5, r3, #31
 8001cfa:	085c      	lsrs	r4, r3, #1
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	0849      	lsrs	r1, r1, #1
 8001d00:	430d      	orrs	r5, r1
 8001d02:	0017      	movs	r7, r2
 8001d04:	402b      	ands	r3, r5
 8001d06:	e710      	b.n	8001b2a <__aeabi_dsub+0x34a>
 8001d08:	4663      	mov	r3, ip
 8001d0a:	1a1d      	subs	r5, r3, r0
 8001d0c:	45ac      	cmp	ip, r5
 8001d0e:	4192      	sbcs	r2, r2
 8001d10:	2601      	movs	r6, #1
 8001d12:	9b02      	ldr	r3, [sp, #8]
 8001d14:	4252      	negs	r2, r2
 8001d16:	1b1c      	subs	r4, r3, r4
 8001d18:	4688      	mov	r8, r1
 8001d1a:	1aa4      	subs	r4, r4, r2
 8001d1c:	400e      	ands	r6, r1
 8001d1e:	e5c6      	b.n	80018ae <__aeabi_dsub+0xce>
 8001d20:	4663      	mov	r3, ip
 8001d22:	18c5      	adds	r5, r0, r3
 8001d24:	9b02      	ldr	r3, [sp, #8]
 8001d26:	4285      	cmp	r5, r0
 8001d28:	4180      	sbcs	r0, r0
 8001d2a:	469c      	mov	ip, r3
 8001d2c:	4240      	negs	r0, r0
 8001d2e:	4464      	add	r4, ip
 8001d30:	1824      	adds	r4, r4, r0
 8001d32:	2701      	movs	r7, #1
 8001d34:	0223      	lsls	r3, r4, #8
 8001d36:	d400      	bmi.n	8001d3a <__aeabi_dsub+0x55a>
 8001d38:	e6f5      	b.n	8001b26 <__aeabi_dsub+0x346>
 8001d3a:	2702      	movs	r7, #2
 8001d3c:	e641      	b.n	80019c2 <__aeabi_dsub+0x1e2>
 8001d3e:	4663      	mov	r3, ip
 8001d40:	1ac5      	subs	r5, r0, r3
 8001d42:	42a8      	cmp	r0, r5
 8001d44:	4180      	sbcs	r0, r0
 8001d46:	9b02      	ldr	r3, [sp, #8]
 8001d48:	4240      	negs	r0, r0
 8001d4a:	1ae4      	subs	r4, r4, r3
 8001d4c:	2701      	movs	r7, #1
 8001d4e:	1a24      	subs	r4, r4, r0
 8001d50:	e5a8      	b.n	80018a4 <__aeabi_dsub+0xc4>
 8001d52:	9d02      	ldr	r5, [sp, #8]
 8001d54:	4652      	mov	r2, sl
 8001d56:	002b      	movs	r3, r5
 8001d58:	3a20      	subs	r2, #32
 8001d5a:	40d3      	lsrs	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	4653      	mov	r3, sl
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	d006      	beq.n	8001d72 <__aeabi_dsub+0x592>
 8001d64:	2240      	movs	r2, #64	@ 0x40
 8001d66:	1ad2      	subs	r2, r2, r3
 8001d68:	002b      	movs	r3, r5
 8001d6a:	4093      	lsls	r3, r2
 8001d6c:	4662      	mov	r2, ip
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	4693      	mov	fp, r2
 8001d72:	465d      	mov	r5, fp
 8001d74:	1e6b      	subs	r3, r5, #1
 8001d76:	419d      	sbcs	r5, r3
 8001d78:	430d      	orrs	r5, r1
 8001d7a:	e615      	b.n	80019a8 <__aeabi_dsub+0x1c8>
 8001d7c:	0762      	lsls	r2, r4, #29
 8001d7e:	08c0      	lsrs	r0, r0, #3
 8001d80:	4302      	orrs	r2, r0
 8001d82:	08e4      	lsrs	r4, r4, #3
 8001d84:	e70d      	b.n	8001ba2 <__aeabi_dsub+0x3c2>
 8001d86:	0011      	movs	r1, r2
 8001d88:	0027      	movs	r7, r4
 8001d8a:	3920      	subs	r1, #32
 8001d8c:	40cf      	lsrs	r7, r1
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d005      	beq.n	8001d9e <__aeabi_dsub+0x5be>
 8001d92:	2140      	movs	r1, #64	@ 0x40
 8001d94:	1a8a      	subs	r2, r1, r2
 8001d96:	4094      	lsls	r4, r2
 8001d98:	0025      	movs	r5, r4
 8001d9a:	4305      	orrs	r5, r0
 8001d9c:	9503      	str	r5, [sp, #12]
 8001d9e:	9d03      	ldr	r5, [sp, #12]
 8001da0:	1e6a      	subs	r2, r5, #1
 8001da2:	4195      	sbcs	r5, r2
 8001da4:	433d      	orrs	r5, r7
 8001da6:	e77d      	b.n	8001ca4 <__aeabi_dsub+0x4c4>
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d100      	bne.n	8001dae <__aeabi_dsub+0x5ce>
 8001dac:	e744      	b.n	8001c38 <__aeabi_dsub+0x458>
 8001dae:	2601      	movs	r6, #1
 8001db0:	400e      	ands	r6, r1
 8001db2:	4663      	mov	r3, ip
 8001db4:	08d9      	lsrs	r1, r3, #3
 8001db6:	9b02      	ldr	r3, [sp, #8]
 8001db8:	075a      	lsls	r2, r3, #29
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	08dc      	lsrs	r4, r3, #3
 8001dbe:	e6f0      	b.n	8001ba2 <__aeabi_dsub+0x3c2>
 8001dc0:	2a00      	cmp	r2, #0
 8001dc2:	d028      	beq.n	8001e16 <__aeabi_dsub+0x636>
 8001dc4:	4662      	mov	r2, ip
 8001dc6:	9f02      	ldr	r7, [sp, #8]
 8001dc8:	08c0      	lsrs	r0, r0, #3
 8001dca:	433a      	orrs	r2, r7
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x5f0>
 8001dce:	e6dc      	b.n	8001b8a <__aeabi_dsub+0x3aa>
 8001dd0:	0762      	lsls	r2, r4, #29
 8001dd2:	4310      	orrs	r0, r2
 8001dd4:	2280      	movs	r2, #128	@ 0x80
 8001dd6:	08e4      	lsrs	r4, r4, #3
 8001dd8:	0312      	lsls	r2, r2, #12
 8001dda:	4214      	tst	r4, r2
 8001ddc:	d009      	beq.n	8001df2 <__aeabi_dsub+0x612>
 8001dde:	08fd      	lsrs	r5, r7, #3
 8001de0:	4215      	tst	r5, r2
 8001de2:	d106      	bne.n	8001df2 <__aeabi_dsub+0x612>
 8001de4:	4663      	mov	r3, ip
 8001de6:	2601      	movs	r6, #1
 8001de8:	002c      	movs	r4, r5
 8001dea:	08d8      	lsrs	r0, r3, #3
 8001dec:	077b      	lsls	r3, r7, #29
 8001dee:	4318      	orrs	r0, r3
 8001df0:	400e      	ands	r6, r1
 8001df2:	0f42      	lsrs	r2, r0, #29
 8001df4:	00c0      	lsls	r0, r0, #3
 8001df6:	08c0      	lsrs	r0, r0, #3
 8001df8:	0752      	lsls	r2, r2, #29
 8001dfa:	4302      	orrs	r2, r0
 8001dfc:	e601      	b.n	8001a02 <__aeabi_dsub+0x222>
 8001dfe:	4663      	mov	r3, ip
 8001e00:	1a1d      	subs	r5, r3, r0
 8001e02:	45ac      	cmp	ip, r5
 8001e04:	4192      	sbcs	r2, r2
 8001e06:	9b02      	ldr	r3, [sp, #8]
 8001e08:	4252      	negs	r2, r2
 8001e0a:	1b1c      	subs	r4, r3, r4
 8001e0c:	000e      	movs	r6, r1
 8001e0e:	4688      	mov	r8, r1
 8001e10:	2701      	movs	r7, #1
 8001e12:	1aa4      	subs	r4, r4, r2
 8001e14:	e546      	b.n	80018a4 <__aeabi_dsub+0xc4>
 8001e16:	4663      	mov	r3, ip
 8001e18:	08d9      	lsrs	r1, r3, #3
 8001e1a:	9b02      	ldr	r3, [sp, #8]
 8001e1c:	075a      	lsls	r2, r3, #29
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	08dc      	lsrs	r4, r3, #3
 8001e22:	e5ee      	b.n	8001a02 <__aeabi_dsub+0x222>
 8001e24:	4663      	mov	r3, ip
 8001e26:	9c02      	ldr	r4, [sp, #8]
 8001e28:	9303      	str	r3, [sp, #12]
 8001e2a:	e6c7      	b.n	8001bbc <__aeabi_dsub+0x3dc>
 8001e2c:	08c0      	lsrs	r0, r0, #3
 8001e2e:	2a00      	cmp	r2, #0
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x654>
 8001e32:	e6aa      	b.n	8001b8a <__aeabi_dsub+0x3aa>
 8001e34:	0762      	lsls	r2, r4, #29
 8001e36:	4310      	orrs	r0, r2
 8001e38:	2280      	movs	r2, #128	@ 0x80
 8001e3a:	08e4      	lsrs	r4, r4, #3
 8001e3c:	0312      	lsls	r2, r2, #12
 8001e3e:	4214      	tst	r4, r2
 8001e40:	d0d7      	beq.n	8001df2 <__aeabi_dsub+0x612>
 8001e42:	9f02      	ldr	r7, [sp, #8]
 8001e44:	08fd      	lsrs	r5, r7, #3
 8001e46:	4215      	tst	r5, r2
 8001e48:	d1d3      	bne.n	8001df2 <__aeabi_dsub+0x612>
 8001e4a:	4663      	mov	r3, ip
 8001e4c:	2601      	movs	r6, #1
 8001e4e:	08d8      	lsrs	r0, r3, #3
 8001e50:	077b      	lsls	r3, r7, #29
 8001e52:	002c      	movs	r4, r5
 8001e54:	4318      	orrs	r0, r3
 8001e56:	400e      	ands	r6, r1
 8001e58:	e7cb      	b.n	8001df2 <__aeabi_dsub+0x612>
 8001e5a:	000a      	movs	r2, r1
 8001e5c:	0027      	movs	r7, r4
 8001e5e:	3a20      	subs	r2, #32
 8001e60:	40d7      	lsrs	r7, r2
 8001e62:	2920      	cmp	r1, #32
 8001e64:	d005      	beq.n	8001e72 <__aeabi_dsub+0x692>
 8001e66:	2240      	movs	r2, #64	@ 0x40
 8001e68:	1a52      	subs	r2, r2, r1
 8001e6a:	4094      	lsls	r4, r2
 8001e6c:	0025      	movs	r5, r4
 8001e6e:	4305      	orrs	r5, r0
 8001e70:	9503      	str	r5, [sp, #12]
 8001e72:	9d03      	ldr	r5, [sp, #12]
 8001e74:	1e6a      	subs	r2, r5, #1
 8001e76:	4195      	sbcs	r5, r2
 8001e78:	432f      	orrs	r7, r5
 8001e7a:	e610      	b.n	8001a9e <__aeabi_dsub+0x2be>
 8001e7c:	0014      	movs	r4, r2
 8001e7e:	2500      	movs	r5, #0
 8001e80:	2200      	movs	r2, #0
 8001e82:	e556      	b.n	8001932 <__aeabi_dsub+0x152>
 8001e84:	9b02      	ldr	r3, [sp, #8]
 8001e86:	4460      	add	r0, ip
 8001e88:	4699      	mov	r9, r3
 8001e8a:	4560      	cmp	r0, ip
 8001e8c:	4192      	sbcs	r2, r2
 8001e8e:	444c      	add	r4, r9
 8001e90:	4252      	negs	r2, r2
 8001e92:	0005      	movs	r5, r0
 8001e94:	18a4      	adds	r4, r4, r2
 8001e96:	e74c      	b.n	8001d32 <__aeabi_dsub+0x552>
 8001e98:	001a      	movs	r2, r3
 8001e9a:	001c      	movs	r4, r3
 8001e9c:	432a      	orrs	r2, r5
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x6c2>
 8001ea0:	e6b3      	b.n	8001c0a <__aeabi_dsub+0x42a>
 8001ea2:	e6c9      	b.n	8001c38 <__aeabi_dsub+0x458>
 8001ea4:	2480      	movs	r4, #128	@ 0x80
 8001ea6:	2600      	movs	r6, #0
 8001ea8:	0324      	lsls	r4, r4, #12
 8001eaa:	e5ae      	b.n	8001a0a <__aeabi_dsub+0x22a>
 8001eac:	2120      	movs	r1, #32
 8001eae:	2500      	movs	r5, #0
 8001eb0:	1a09      	subs	r1, r1, r0
 8001eb2:	e517      	b.n	80018e4 <__aeabi_dsub+0x104>
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2500      	movs	r5, #0
 8001eb8:	4c0b      	ldr	r4, [pc, #44]	@ (8001ee8 <__aeabi_dsub+0x708>)
 8001eba:	e53a      	b.n	8001932 <__aeabi_dsub+0x152>
 8001ebc:	2d00      	cmp	r5, #0
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x6e2>
 8001ec0:	e5f6      	b.n	8001ab0 <__aeabi_dsub+0x2d0>
 8001ec2:	464b      	mov	r3, r9
 8001ec4:	1bda      	subs	r2, r3, r7
 8001ec6:	4692      	mov	sl, r2
 8001ec8:	2f00      	cmp	r7, #0
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x6ee>
 8001ecc:	e66f      	b.n	8001bae <__aeabi_dsub+0x3ce>
 8001ece:	2a38      	cmp	r2, #56	@ 0x38
 8001ed0:	dc05      	bgt.n	8001ede <__aeabi_dsub+0x6fe>
 8001ed2:	2680      	movs	r6, #128	@ 0x80
 8001ed4:	0436      	lsls	r6, r6, #16
 8001ed6:	4334      	orrs	r4, r6
 8001ed8:	4688      	mov	r8, r1
 8001eda:	000e      	movs	r6, r1
 8001edc:	e6d1      	b.n	8001c82 <__aeabi_dsub+0x4a2>
 8001ede:	4688      	mov	r8, r1
 8001ee0:	000e      	movs	r6, r1
 8001ee2:	2501      	movs	r5, #1
 8001ee4:	e6de      	b.n	8001ca4 <__aeabi_dsub+0x4c4>
 8001ee6:	46c0      	nop			@ (mov r8, r8)
 8001ee8:	000007ff 	.word	0x000007ff
 8001eec:	ff7fffff 	.word	0xff7fffff
 8001ef0:	000007fe 	.word	0x000007fe
 8001ef4:	2d00      	cmp	r5, #0
 8001ef6:	d100      	bne.n	8001efa <__aeabi_dsub+0x71a>
 8001ef8:	e668      	b.n	8001bcc <__aeabi_dsub+0x3ec>
 8001efa:	464b      	mov	r3, r9
 8001efc:	1bd9      	subs	r1, r3, r7
 8001efe:	2f00      	cmp	r7, #0
 8001f00:	d101      	bne.n	8001f06 <__aeabi_dsub+0x726>
 8001f02:	468a      	mov	sl, r1
 8001f04:	e5a7      	b.n	8001a56 <__aeabi_dsub+0x276>
 8001f06:	2701      	movs	r7, #1
 8001f08:	2938      	cmp	r1, #56	@ 0x38
 8001f0a:	dd00      	ble.n	8001f0e <__aeabi_dsub+0x72e>
 8001f0c:	e5c7      	b.n	8001a9e <__aeabi_dsub+0x2be>
 8001f0e:	2280      	movs	r2, #128	@ 0x80
 8001f10:	0412      	lsls	r2, r2, #16
 8001f12:	4314      	orrs	r4, r2
 8001f14:	e5af      	b.n	8001a76 <__aeabi_dsub+0x296>
 8001f16:	46c0      	nop			@ (mov r8, r8)

08001f18 <__aeabi_d2iz>:
 8001f18:	000b      	movs	r3, r1
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	4d16      	ldr	r5, [pc, #88]	@ (8001f78 <__aeabi_d2iz+0x60>)
 8001f20:	030c      	lsls	r4, r1, #12
 8001f22:	b082      	sub	sp, #8
 8001f24:	0049      	lsls	r1, r1, #1
 8001f26:	2000      	movs	r0, #0
 8001f28:	9200      	str	r2, [sp, #0]
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	0b24      	lsrs	r4, r4, #12
 8001f2e:	0d49      	lsrs	r1, r1, #21
 8001f30:	0fde      	lsrs	r6, r3, #31
 8001f32:	42a9      	cmp	r1, r5
 8001f34:	dd04      	ble.n	8001f40 <__aeabi_d2iz+0x28>
 8001f36:	4811      	ldr	r0, [pc, #68]	@ (8001f7c <__aeabi_d2iz+0x64>)
 8001f38:	4281      	cmp	r1, r0
 8001f3a:	dd03      	ble.n	8001f44 <__aeabi_d2iz+0x2c>
 8001f3c:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <__aeabi_d2iz+0x68>)
 8001f3e:	18f0      	adds	r0, r6, r3
 8001f40:	b002      	add	sp, #8
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	2080      	movs	r0, #128	@ 0x80
 8001f46:	0340      	lsls	r0, r0, #13
 8001f48:	4320      	orrs	r0, r4
 8001f4a:	4c0e      	ldr	r4, [pc, #56]	@ (8001f84 <__aeabi_d2iz+0x6c>)
 8001f4c:	1a64      	subs	r4, r4, r1
 8001f4e:	2c1f      	cmp	r4, #31
 8001f50:	dd08      	ble.n	8001f64 <__aeabi_d2iz+0x4c>
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <__aeabi_d2iz+0x70>)
 8001f54:	1a5b      	subs	r3, r3, r1
 8001f56:	40d8      	lsrs	r0, r3
 8001f58:	0003      	movs	r3, r0
 8001f5a:	4258      	negs	r0, r3
 8001f5c:	2e00      	cmp	r6, #0
 8001f5e:	d1ef      	bne.n	8001f40 <__aeabi_d2iz+0x28>
 8001f60:	0018      	movs	r0, r3
 8001f62:	e7ed      	b.n	8001f40 <__aeabi_d2iz+0x28>
 8001f64:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <__aeabi_d2iz+0x74>)
 8001f66:	9a00      	ldr	r2, [sp, #0]
 8001f68:	469c      	mov	ip, r3
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	4461      	add	r1, ip
 8001f6e:	408b      	lsls	r3, r1
 8001f70:	40e2      	lsrs	r2, r4
 8001f72:	4313      	orrs	r3, r2
 8001f74:	e7f1      	b.n	8001f5a <__aeabi_d2iz+0x42>
 8001f76:	46c0      	nop			@ (mov r8, r8)
 8001f78:	000003fe 	.word	0x000003fe
 8001f7c:	0000041d 	.word	0x0000041d
 8001f80:	7fffffff 	.word	0x7fffffff
 8001f84:	00000433 	.word	0x00000433
 8001f88:	00000413 	.word	0x00000413
 8001f8c:	fffffbed 	.word	0xfffffbed

08001f90 <__aeabi_f2d>:
 8001f90:	b570      	push	{r4, r5, r6, lr}
 8001f92:	0242      	lsls	r2, r0, #9
 8001f94:	0043      	lsls	r3, r0, #1
 8001f96:	0fc4      	lsrs	r4, r0, #31
 8001f98:	20fe      	movs	r0, #254	@ 0xfe
 8001f9a:	0e1b      	lsrs	r3, r3, #24
 8001f9c:	1c59      	adds	r1, r3, #1
 8001f9e:	0a55      	lsrs	r5, r2, #9
 8001fa0:	4208      	tst	r0, r1
 8001fa2:	d00c      	beq.n	8001fbe <__aeabi_f2d+0x2e>
 8001fa4:	21e0      	movs	r1, #224	@ 0xe0
 8001fa6:	0089      	lsls	r1, r1, #2
 8001fa8:	468c      	mov	ip, r1
 8001faa:	076d      	lsls	r5, r5, #29
 8001fac:	0b12      	lsrs	r2, r2, #12
 8001fae:	4463      	add	r3, ip
 8001fb0:	051b      	lsls	r3, r3, #20
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	07e4      	lsls	r4, r4, #31
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	0028      	movs	r0, r5
 8001fba:	0019      	movs	r1, r3
 8001fbc:	bd70      	pop	{r4, r5, r6, pc}
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d114      	bne.n	8001fec <__aeabi_f2d+0x5c>
 8001fc2:	2d00      	cmp	r5, #0
 8001fc4:	d01b      	beq.n	8001ffe <__aeabi_f2d+0x6e>
 8001fc6:	0028      	movs	r0, r5
 8001fc8:	f000 f868 	bl	800209c <__clzsi2>
 8001fcc:	280a      	cmp	r0, #10
 8001fce:	dc1c      	bgt.n	800200a <__aeabi_f2d+0x7a>
 8001fd0:	230b      	movs	r3, #11
 8001fd2:	002a      	movs	r2, r5
 8001fd4:	1a1b      	subs	r3, r3, r0
 8001fd6:	40da      	lsrs	r2, r3
 8001fd8:	0003      	movs	r3, r0
 8001fda:	3315      	adds	r3, #21
 8001fdc:	409d      	lsls	r5, r3
 8001fde:	4b0e      	ldr	r3, [pc, #56]	@ (8002018 <__aeabi_f2d+0x88>)
 8001fe0:	0312      	lsls	r2, r2, #12
 8001fe2:	1a1b      	subs	r3, r3, r0
 8001fe4:	055b      	lsls	r3, r3, #21
 8001fe6:	0b12      	lsrs	r2, r2, #12
 8001fe8:	0d5b      	lsrs	r3, r3, #21
 8001fea:	e7e1      	b.n	8001fb0 <__aeabi_f2d+0x20>
 8001fec:	2d00      	cmp	r5, #0
 8001fee:	d009      	beq.n	8002004 <__aeabi_f2d+0x74>
 8001ff0:	0b13      	lsrs	r3, r2, #12
 8001ff2:	2280      	movs	r2, #128	@ 0x80
 8001ff4:	0312      	lsls	r2, r2, #12
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	076d      	lsls	r5, r5, #29
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <__aeabi_f2d+0x8c>)
 8001ffc:	e7d8      	b.n	8001fb0 <__aeabi_f2d+0x20>
 8001ffe:	2300      	movs	r3, #0
 8002000:	2200      	movs	r2, #0
 8002002:	e7d5      	b.n	8001fb0 <__aeabi_f2d+0x20>
 8002004:	2200      	movs	r2, #0
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <__aeabi_f2d+0x8c>)
 8002008:	e7d2      	b.n	8001fb0 <__aeabi_f2d+0x20>
 800200a:	0003      	movs	r3, r0
 800200c:	002a      	movs	r2, r5
 800200e:	3b0b      	subs	r3, #11
 8002010:	409a      	lsls	r2, r3
 8002012:	2500      	movs	r5, #0
 8002014:	e7e3      	b.n	8001fde <__aeabi_f2d+0x4e>
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	00000389 	.word	0x00000389
 800201c:	000007ff 	.word	0x000007ff

08002020 <__aeabi_cdrcmple>:
 8002020:	4684      	mov	ip, r0
 8002022:	0010      	movs	r0, r2
 8002024:	4662      	mov	r2, ip
 8002026:	468c      	mov	ip, r1
 8002028:	0019      	movs	r1, r3
 800202a:	4663      	mov	r3, ip
 800202c:	e000      	b.n	8002030 <__aeabi_cdcmpeq>
 800202e:	46c0      	nop			@ (mov r8, r8)

08002030 <__aeabi_cdcmpeq>:
 8002030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002032:	f000 f909 	bl	8002248 <__ledf2>
 8002036:	2800      	cmp	r0, #0
 8002038:	d401      	bmi.n	800203e <__aeabi_cdcmpeq+0xe>
 800203a:	2100      	movs	r1, #0
 800203c:	42c8      	cmn	r0, r1
 800203e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002040 <__aeabi_dcmpeq>:
 8002040:	b510      	push	{r4, lr}
 8002042:	f000 f849 	bl	80020d8 <__eqdf2>
 8002046:	4240      	negs	r0, r0
 8002048:	3001      	adds	r0, #1
 800204a:	bd10      	pop	{r4, pc}

0800204c <__aeabi_dcmplt>:
 800204c:	b510      	push	{r4, lr}
 800204e:	f000 f8fb 	bl	8002248 <__ledf2>
 8002052:	2800      	cmp	r0, #0
 8002054:	db01      	blt.n	800205a <__aeabi_dcmplt+0xe>
 8002056:	2000      	movs	r0, #0
 8002058:	bd10      	pop	{r4, pc}
 800205a:	2001      	movs	r0, #1
 800205c:	bd10      	pop	{r4, pc}
 800205e:	46c0      	nop			@ (mov r8, r8)

08002060 <__aeabi_dcmple>:
 8002060:	b510      	push	{r4, lr}
 8002062:	f000 f8f1 	bl	8002248 <__ledf2>
 8002066:	2800      	cmp	r0, #0
 8002068:	dd01      	ble.n	800206e <__aeabi_dcmple+0xe>
 800206a:	2000      	movs	r0, #0
 800206c:	bd10      	pop	{r4, pc}
 800206e:	2001      	movs	r0, #1
 8002070:	bd10      	pop	{r4, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)

08002074 <__aeabi_dcmpgt>:
 8002074:	b510      	push	{r4, lr}
 8002076:	f000 f873 	bl	8002160 <__gedf2>
 800207a:	2800      	cmp	r0, #0
 800207c:	dc01      	bgt.n	8002082 <__aeabi_dcmpgt+0xe>
 800207e:	2000      	movs	r0, #0
 8002080:	bd10      	pop	{r4, pc}
 8002082:	2001      	movs	r0, #1
 8002084:	bd10      	pop	{r4, pc}
 8002086:	46c0      	nop			@ (mov r8, r8)

08002088 <__aeabi_dcmpge>:
 8002088:	b510      	push	{r4, lr}
 800208a:	f000 f869 	bl	8002160 <__gedf2>
 800208e:	2800      	cmp	r0, #0
 8002090:	da01      	bge.n	8002096 <__aeabi_dcmpge+0xe>
 8002092:	2000      	movs	r0, #0
 8002094:	bd10      	pop	{r4, pc}
 8002096:	2001      	movs	r0, #1
 8002098:	bd10      	pop	{r4, pc}
 800209a:	46c0      	nop			@ (mov r8, r8)

0800209c <__clzsi2>:
 800209c:	211c      	movs	r1, #28
 800209e:	2301      	movs	r3, #1
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	4298      	cmp	r0, r3
 80020a4:	d301      	bcc.n	80020aa <__clzsi2+0xe>
 80020a6:	0c00      	lsrs	r0, r0, #16
 80020a8:	3910      	subs	r1, #16
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	4298      	cmp	r0, r3
 80020ae:	d301      	bcc.n	80020b4 <__clzsi2+0x18>
 80020b0:	0a00      	lsrs	r0, r0, #8
 80020b2:	3908      	subs	r1, #8
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	4298      	cmp	r0, r3
 80020b8:	d301      	bcc.n	80020be <__clzsi2+0x22>
 80020ba:	0900      	lsrs	r0, r0, #4
 80020bc:	3904      	subs	r1, #4
 80020be:	a202      	add	r2, pc, #8	@ (adr r2, 80020c8 <__clzsi2+0x2c>)
 80020c0:	5c10      	ldrb	r0, [r2, r0]
 80020c2:	1840      	adds	r0, r0, r1
 80020c4:	4770      	bx	lr
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	02020304 	.word	0x02020304
 80020cc:	01010101 	.word	0x01010101
	...

080020d8 <__eqdf2>:
 80020d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020da:	4657      	mov	r7, sl
 80020dc:	46de      	mov	lr, fp
 80020de:	464e      	mov	r6, r9
 80020e0:	4645      	mov	r5, r8
 80020e2:	b5e0      	push	{r5, r6, r7, lr}
 80020e4:	000d      	movs	r5, r1
 80020e6:	0004      	movs	r4, r0
 80020e8:	0fe8      	lsrs	r0, r5, #31
 80020ea:	4683      	mov	fp, r0
 80020ec:	0309      	lsls	r1, r1, #12
 80020ee:	0fd8      	lsrs	r0, r3, #31
 80020f0:	0b09      	lsrs	r1, r1, #12
 80020f2:	4682      	mov	sl, r0
 80020f4:	4819      	ldr	r0, [pc, #100]	@ (800215c <__eqdf2+0x84>)
 80020f6:	468c      	mov	ip, r1
 80020f8:	031f      	lsls	r7, r3, #12
 80020fa:	0069      	lsls	r1, r5, #1
 80020fc:	005e      	lsls	r6, r3, #1
 80020fe:	0d49      	lsrs	r1, r1, #21
 8002100:	0b3f      	lsrs	r7, r7, #12
 8002102:	0d76      	lsrs	r6, r6, #21
 8002104:	4281      	cmp	r1, r0
 8002106:	d018      	beq.n	800213a <__eqdf2+0x62>
 8002108:	4286      	cmp	r6, r0
 800210a:	d00f      	beq.n	800212c <__eqdf2+0x54>
 800210c:	2001      	movs	r0, #1
 800210e:	42b1      	cmp	r1, r6
 8002110:	d10d      	bne.n	800212e <__eqdf2+0x56>
 8002112:	45bc      	cmp	ip, r7
 8002114:	d10b      	bne.n	800212e <__eqdf2+0x56>
 8002116:	4294      	cmp	r4, r2
 8002118:	d109      	bne.n	800212e <__eqdf2+0x56>
 800211a:	45d3      	cmp	fp, sl
 800211c:	d01c      	beq.n	8002158 <__eqdf2+0x80>
 800211e:	2900      	cmp	r1, #0
 8002120:	d105      	bne.n	800212e <__eqdf2+0x56>
 8002122:	4660      	mov	r0, ip
 8002124:	4320      	orrs	r0, r4
 8002126:	1e43      	subs	r3, r0, #1
 8002128:	4198      	sbcs	r0, r3
 800212a:	e000      	b.n	800212e <__eqdf2+0x56>
 800212c:	2001      	movs	r0, #1
 800212e:	bcf0      	pop	{r4, r5, r6, r7}
 8002130:	46bb      	mov	fp, r7
 8002132:	46b2      	mov	sl, r6
 8002134:	46a9      	mov	r9, r5
 8002136:	46a0      	mov	r8, r4
 8002138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800213a:	2001      	movs	r0, #1
 800213c:	428e      	cmp	r6, r1
 800213e:	d1f6      	bne.n	800212e <__eqdf2+0x56>
 8002140:	4661      	mov	r1, ip
 8002142:	4339      	orrs	r1, r7
 8002144:	000f      	movs	r7, r1
 8002146:	4317      	orrs	r7, r2
 8002148:	4327      	orrs	r7, r4
 800214a:	d1f0      	bne.n	800212e <__eqdf2+0x56>
 800214c:	465b      	mov	r3, fp
 800214e:	4652      	mov	r2, sl
 8002150:	1a98      	subs	r0, r3, r2
 8002152:	1e43      	subs	r3, r0, #1
 8002154:	4198      	sbcs	r0, r3
 8002156:	e7ea      	b.n	800212e <__eqdf2+0x56>
 8002158:	2000      	movs	r0, #0
 800215a:	e7e8      	b.n	800212e <__eqdf2+0x56>
 800215c:	000007ff 	.word	0x000007ff

08002160 <__gedf2>:
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	4657      	mov	r7, sl
 8002164:	464e      	mov	r6, r9
 8002166:	4645      	mov	r5, r8
 8002168:	46de      	mov	lr, fp
 800216a:	b5e0      	push	{r5, r6, r7, lr}
 800216c:	000d      	movs	r5, r1
 800216e:	030f      	lsls	r7, r1, #12
 8002170:	0b39      	lsrs	r1, r7, #12
 8002172:	b083      	sub	sp, #12
 8002174:	0004      	movs	r4, r0
 8002176:	4680      	mov	r8, r0
 8002178:	9101      	str	r1, [sp, #4]
 800217a:	0058      	lsls	r0, r3, #1
 800217c:	0fe9      	lsrs	r1, r5, #31
 800217e:	4f31      	ldr	r7, [pc, #196]	@ (8002244 <__gedf2+0xe4>)
 8002180:	0d40      	lsrs	r0, r0, #21
 8002182:	468c      	mov	ip, r1
 8002184:	006e      	lsls	r6, r5, #1
 8002186:	0319      	lsls	r1, r3, #12
 8002188:	4682      	mov	sl, r0
 800218a:	4691      	mov	r9, r2
 800218c:	0d76      	lsrs	r6, r6, #21
 800218e:	0b09      	lsrs	r1, r1, #12
 8002190:	0fd8      	lsrs	r0, r3, #31
 8002192:	42be      	cmp	r6, r7
 8002194:	d01f      	beq.n	80021d6 <__gedf2+0x76>
 8002196:	45ba      	cmp	sl, r7
 8002198:	d00f      	beq.n	80021ba <__gedf2+0x5a>
 800219a:	2e00      	cmp	r6, #0
 800219c:	d12f      	bne.n	80021fe <__gedf2+0x9e>
 800219e:	4655      	mov	r5, sl
 80021a0:	9e01      	ldr	r6, [sp, #4]
 80021a2:	4334      	orrs	r4, r6
 80021a4:	2d00      	cmp	r5, #0
 80021a6:	d127      	bne.n	80021f8 <__gedf2+0x98>
 80021a8:	430a      	orrs	r2, r1
 80021aa:	d03a      	beq.n	8002222 <__gedf2+0xc2>
 80021ac:	2c00      	cmp	r4, #0
 80021ae:	d145      	bne.n	800223c <__gedf2+0xdc>
 80021b0:	2800      	cmp	r0, #0
 80021b2:	d11a      	bne.n	80021ea <__gedf2+0x8a>
 80021b4:	2001      	movs	r0, #1
 80021b6:	4240      	negs	r0, r0
 80021b8:	e017      	b.n	80021ea <__gedf2+0x8a>
 80021ba:	4311      	orrs	r1, r2
 80021bc:	d13b      	bne.n	8002236 <__gedf2+0xd6>
 80021be:	2e00      	cmp	r6, #0
 80021c0:	d102      	bne.n	80021c8 <__gedf2+0x68>
 80021c2:	9f01      	ldr	r7, [sp, #4]
 80021c4:	4327      	orrs	r7, r4
 80021c6:	d0f3      	beq.n	80021b0 <__gedf2+0x50>
 80021c8:	4584      	cmp	ip, r0
 80021ca:	d109      	bne.n	80021e0 <__gedf2+0x80>
 80021cc:	4663      	mov	r3, ip
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <__gedf2+0x54>
 80021d2:	4660      	mov	r0, ip
 80021d4:	e009      	b.n	80021ea <__gedf2+0x8a>
 80021d6:	9f01      	ldr	r7, [sp, #4]
 80021d8:	4327      	orrs	r7, r4
 80021da:	d12c      	bne.n	8002236 <__gedf2+0xd6>
 80021dc:	45b2      	cmp	sl, r6
 80021de:	d024      	beq.n	800222a <__gedf2+0xca>
 80021e0:	4663      	mov	r3, ip
 80021e2:	2002      	movs	r0, #2
 80021e4:	3b01      	subs	r3, #1
 80021e6:	4018      	ands	r0, r3
 80021e8:	3801      	subs	r0, #1
 80021ea:	b003      	add	sp, #12
 80021ec:	bcf0      	pop	{r4, r5, r6, r7}
 80021ee:	46bb      	mov	fp, r7
 80021f0:	46b2      	mov	sl, r6
 80021f2:	46a9      	mov	r9, r5
 80021f4:	46a0      	mov	r8, r4
 80021f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021f8:	2c00      	cmp	r4, #0
 80021fa:	d0d9      	beq.n	80021b0 <__gedf2+0x50>
 80021fc:	e7e4      	b.n	80021c8 <__gedf2+0x68>
 80021fe:	4654      	mov	r4, sl
 8002200:	2c00      	cmp	r4, #0
 8002202:	d0ed      	beq.n	80021e0 <__gedf2+0x80>
 8002204:	4584      	cmp	ip, r0
 8002206:	d1eb      	bne.n	80021e0 <__gedf2+0x80>
 8002208:	4556      	cmp	r6, sl
 800220a:	dce9      	bgt.n	80021e0 <__gedf2+0x80>
 800220c:	dbde      	blt.n	80021cc <__gedf2+0x6c>
 800220e:	9b01      	ldr	r3, [sp, #4]
 8002210:	428b      	cmp	r3, r1
 8002212:	d8e5      	bhi.n	80021e0 <__gedf2+0x80>
 8002214:	d1da      	bne.n	80021cc <__gedf2+0x6c>
 8002216:	45c8      	cmp	r8, r9
 8002218:	d8e2      	bhi.n	80021e0 <__gedf2+0x80>
 800221a:	2000      	movs	r0, #0
 800221c:	45c8      	cmp	r8, r9
 800221e:	d2e4      	bcs.n	80021ea <__gedf2+0x8a>
 8002220:	e7d4      	b.n	80021cc <__gedf2+0x6c>
 8002222:	2000      	movs	r0, #0
 8002224:	2c00      	cmp	r4, #0
 8002226:	d0e0      	beq.n	80021ea <__gedf2+0x8a>
 8002228:	e7da      	b.n	80021e0 <__gedf2+0x80>
 800222a:	4311      	orrs	r1, r2
 800222c:	d103      	bne.n	8002236 <__gedf2+0xd6>
 800222e:	4584      	cmp	ip, r0
 8002230:	d1d6      	bne.n	80021e0 <__gedf2+0x80>
 8002232:	2000      	movs	r0, #0
 8002234:	e7d9      	b.n	80021ea <__gedf2+0x8a>
 8002236:	2002      	movs	r0, #2
 8002238:	4240      	negs	r0, r0
 800223a:	e7d6      	b.n	80021ea <__gedf2+0x8a>
 800223c:	4584      	cmp	ip, r0
 800223e:	d0e6      	beq.n	800220e <__gedf2+0xae>
 8002240:	e7ce      	b.n	80021e0 <__gedf2+0x80>
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	000007ff 	.word	0x000007ff

08002248 <__ledf2>:
 8002248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224a:	4657      	mov	r7, sl
 800224c:	464e      	mov	r6, r9
 800224e:	4645      	mov	r5, r8
 8002250:	46de      	mov	lr, fp
 8002252:	b5e0      	push	{r5, r6, r7, lr}
 8002254:	000d      	movs	r5, r1
 8002256:	030f      	lsls	r7, r1, #12
 8002258:	0004      	movs	r4, r0
 800225a:	4680      	mov	r8, r0
 800225c:	0fe8      	lsrs	r0, r5, #31
 800225e:	0b39      	lsrs	r1, r7, #12
 8002260:	4684      	mov	ip, r0
 8002262:	b083      	sub	sp, #12
 8002264:	0058      	lsls	r0, r3, #1
 8002266:	4f30      	ldr	r7, [pc, #192]	@ (8002328 <__ledf2+0xe0>)
 8002268:	0d40      	lsrs	r0, r0, #21
 800226a:	9101      	str	r1, [sp, #4]
 800226c:	031e      	lsls	r6, r3, #12
 800226e:	0069      	lsls	r1, r5, #1
 8002270:	4682      	mov	sl, r0
 8002272:	4691      	mov	r9, r2
 8002274:	0d49      	lsrs	r1, r1, #21
 8002276:	0b36      	lsrs	r6, r6, #12
 8002278:	0fd8      	lsrs	r0, r3, #31
 800227a:	42b9      	cmp	r1, r7
 800227c:	d020      	beq.n	80022c0 <__ledf2+0x78>
 800227e:	45ba      	cmp	sl, r7
 8002280:	d00f      	beq.n	80022a2 <__ledf2+0x5a>
 8002282:	2900      	cmp	r1, #0
 8002284:	d12b      	bne.n	80022de <__ledf2+0x96>
 8002286:	9901      	ldr	r1, [sp, #4]
 8002288:	430c      	orrs	r4, r1
 800228a:	4651      	mov	r1, sl
 800228c:	2900      	cmp	r1, #0
 800228e:	d137      	bne.n	8002300 <__ledf2+0xb8>
 8002290:	4332      	orrs	r2, r6
 8002292:	d038      	beq.n	8002306 <__ledf2+0xbe>
 8002294:	2c00      	cmp	r4, #0
 8002296:	d144      	bne.n	8002322 <__ledf2+0xda>
 8002298:	2800      	cmp	r0, #0
 800229a:	d119      	bne.n	80022d0 <__ledf2+0x88>
 800229c:	2001      	movs	r0, #1
 800229e:	4240      	negs	r0, r0
 80022a0:	e016      	b.n	80022d0 <__ledf2+0x88>
 80022a2:	4316      	orrs	r6, r2
 80022a4:	d113      	bne.n	80022ce <__ledf2+0x86>
 80022a6:	2900      	cmp	r1, #0
 80022a8:	d102      	bne.n	80022b0 <__ledf2+0x68>
 80022aa:	9f01      	ldr	r7, [sp, #4]
 80022ac:	4327      	orrs	r7, r4
 80022ae:	d0f3      	beq.n	8002298 <__ledf2+0x50>
 80022b0:	4584      	cmp	ip, r0
 80022b2:	d020      	beq.n	80022f6 <__ledf2+0xae>
 80022b4:	4663      	mov	r3, ip
 80022b6:	2002      	movs	r0, #2
 80022b8:	3b01      	subs	r3, #1
 80022ba:	4018      	ands	r0, r3
 80022bc:	3801      	subs	r0, #1
 80022be:	e007      	b.n	80022d0 <__ledf2+0x88>
 80022c0:	9f01      	ldr	r7, [sp, #4]
 80022c2:	4327      	orrs	r7, r4
 80022c4:	d103      	bne.n	80022ce <__ledf2+0x86>
 80022c6:	458a      	cmp	sl, r1
 80022c8:	d1f4      	bne.n	80022b4 <__ledf2+0x6c>
 80022ca:	4316      	orrs	r6, r2
 80022cc:	d01f      	beq.n	800230e <__ledf2+0xc6>
 80022ce:	2002      	movs	r0, #2
 80022d0:	b003      	add	sp, #12
 80022d2:	bcf0      	pop	{r4, r5, r6, r7}
 80022d4:	46bb      	mov	fp, r7
 80022d6:	46b2      	mov	sl, r6
 80022d8:	46a9      	mov	r9, r5
 80022da:	46a0      	mov	r8, r4
 80022dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022de:	4654      	mov	r4, sl
 80022e0:	2c00      	cmp	r4, #0
 80022e2:	d0e7      	beq.n	80022b4 <__ledf2+0x6c>
 80022e4:	4584      	cmp	ip, r0
 80022e6:	d1e5      	bne.n	80022b4 <__ledf2+0x6c>
 80022e8:	4551      	cmp	r1, sl
 80022ea:	dce3      	bgt.n	80022b4 <__ledf2+0x6c>
 80022ec:	db03      	blt.n	80022f6 <__ledf2+0xae>
 80022ee:	9b01      	ldr	r3, [sp, #4]
 80022f0:	42b3      	cmp	r3, r6
 80022f2:	d8df      	bhi.n	80022b4 <__ledf2+0x6c>
 80022f4:	d00f      	beq.n	8002316 <__ledf2+0xce>
 80022f6:	4663      	mov	r3, ip
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0cf      	beq.n	800229c <__ledf2+0x54>
 80022fc:	4660      	mov	r0, ip
 80022fe:	e7e7      	b.n	80022d0 <__ledf2+0x88>
 8002300:	2c00      	cmp	r4, #0
 8002302:	d0c9      	beq.n	8002298 <__ledf2+0x50>
 8002304:	e7d4      	b.n	80022b0 <__ledf2+0x68>
 8002306:	2000      	movs	r0, #0
 8002308:	2c00      	cmp	r4, #0
 800230a:	d0e1      	beq.n	80022d0 <__ledf2+0x88>
 800230c:	e7d2      	b.n	80022b4 <__ledf2+0x6c>
 800230e:	4584      	cmp	ip, r0
 8002310:	d1d0      	bne.n	80022b4 <__ledf2+0x6c>
 8002312:	2000      	movs	r0, #0
 8002314:	e7dc      	b.n	80022d0 <__ledf2+0x88>
 8002316:	45c8      	cmp	r8, r9
 8002318:	d8cc      	bhi.n	80022b4 <__ledf2+0x6c>
 800231a:	2000      	movs	r0, #0
 800231c:	45c8      	cmp	r8, r9
 800231e:	d2d7      	bcs.n	80022d0 <__ledf2+0x88>
 8002320:	e7e9      	b.n	80022f6 <__ledf2+0xae>
 8002322:	4584      	cmp	ip, r0
 8002324:	d0e3      	beq.n	80022ee <__ledf2+0xa6>
 8002326:	e7c5      	b.n	80022b4 <__ledf2+0x6c>
 8002328:	000007ff 	.word	0x000007ff

0800232c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002330:	4b07      	ldr	r3, [pc, #28]	@ (8002350 <HAL_Init+0x24>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <HAL_Init+0x24>)
 8002336:	2110      	movs	r1, #16
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800233c:	2000      	movs	r0, #0
 800233e:	f000 f809 	bl	8002354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002342:	f00c fbf5 	bl	800eb30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			@ (mov r8, r8)
 8002350:	40022000 	.word	0x40022000

08002354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800235c:	4b14      	ldr	r3, [pc, #80]	@ (80023b0 <HAL_InitTick+0x5c>)
 800235e:	681c      	ldr	r4, [r3, #0]
 8002360:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <HAL_InitTick+0x60>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	0019      	movs	r1, r3
 8002366:	23fa      	movs	r3, #250	@ 0xfa
 8002368:	0098      	lsls	r0, r3, #2
 800236a:	f7fd fecd 	bl	8000108 <__udivsi3>
 800236e:	0003      	movs	r3, r0
 8002370:	0019      	movs	r1, r3
 8002372:	0020      	movs	r0, r4
 8002374:	f7fd fec8 	bl	8000108 <__udivsi3>
 8002378:	0003      	movs	r3, r0
 800237a:	0018      	movs	r0, r3
 800237c:	f000 f953 	bl	8002626 <HAL_SYSTICK_Config>
 8002380:	1e03      	subs	r3, r0, #0
 8002382:	d001      	beq.n	8002388 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e00f      	b.n	80023a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d80b      	bhi.n	80023a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	2301      	movs	r3, #1
 8002392:	425b      	negs	r3, r3
 8002394:	2200      	movs	r2, #0
 8002396:	0018      	movs	r0, r3
 8002398:	f000 f90c 	bl	80025b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_InitTick+0x64>)
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b003      	add	sp, #12
 80023ae:	bd90      	pop	{r4, r7, pc}
 80023b0:	20000008 	.word	0x20000008
 80023b4:	20000004 	.word	0x20000004
 80023b8:	20000000 	.word	0x20000000

080023bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_IncTick+0x1c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	001a      	movs	r2, r3
 80023c6:	4b05      	ldr	r3, [pc, #20]	@ (80023dc <HAL_IncTick+0x20>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	18d2      	adds	r2, r2, r3
 80023cc:	4b03      	ldr	r3, [pc, #12]	@ (80023dc <HAL_IncTick+0x20>)
 80023ce:	601a      	str	r2, [r3, #0]
}
 80023d0:	46c0      	nop			@ (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	20000004 	.word	0x20000004
 80023dc:	20000028 	.word	0x20000028

080023e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b02      	ldr	r3, [pc, #8]	@ (80023f0 <HAL_GetTick+0x10>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			@ (mov r8, r8)
 80023f0:	20000028 	.word	0x20000028

080023f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	0002      	movs	r2, r0
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002400:	1dfb      	adds	r3, r7, #7
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b7f      	cmp	r3, #127	@ 0x7f
 8002406:	d809      	bhi.n	800241c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	001a      	movs	r2, r3
 800240e:	231f      	movs	r3, #31
 8002410:	401a      	ands	r2, r3
 8002412:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <__NVIC_EnableIRQ+0x30>)
 8002414:	2101      	movs	r1, #1
 8002416:	4091      	lsls	r1, r2
 8002418:	000a      	movs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
  }
}
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b002      	add	sp, #8
 8002422:	bd80      	pop	{r7, pc}
 8002424:	e000e100 	.word	0xe000e100

08002428 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	0002      	movs	r2, r0
 8002430:	1dfb      	adds	r3, r7, #7
 8002432:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002434:	1dfb      	adds	r3, r7, #7
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b7f      	cmp	r3, #127	@ 0x7f
 800243a:	d810      	bhi.n	800245e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243c:	1dfb      	adds	r3, r7, #7
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	001a      	movs	r2, r3
 8002442:	231f      	movs	r3, #31
 8002444:	4013      	ands	r3, r2
 8002446:	4908      	ldr	r1, [pc, #32]	@ (8002468 <__NVIC_DisableIRQ+0x40>)
 8002448:	2201      	movs	r2, #1
 800244a:	409a      	lsls	r2, r3
 800244c:	0013      	movs	r3, r2
 800244e:	2280      	movs	r2, #128	@ 0x80
 8002450:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002452:	f3bf 8f4f 	dsb	sy
}
 8002456:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8002458:	f3bf 8f6f 	isb	sy
}
 800245c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	e000e100 	.word	0xe000e100

0800246c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	0002      	movs	r2, r0
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	1dfb      	adds	r3, r7, #7
 8002478:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002480:	d828      	bhi.n	80024d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002482:	4a2f      	ldr	r2, [pc, #188]	@ (8002540 <__NVIC_SetPriority+0xd4>)
 8002484:	1dfb      	adds	r3, r7, #7
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b25b      	sxtb	r3, r3
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	33c0      	adds	r3, #192	@ 0xc0
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	589b      	ldr	r3, [r3, r2]
 8002492:	1dfa      	adds	r2, r7, #7
 8002494:	7812      	ldrb	r2, [r2, #0]
 8002496:	0011      	movs	r1, r2
 8002498:	2203      	movs	r2, #3
 800249a:	400a      	ands	r2, r1
 800249c:	00d2      	lsls	r2, r2, #3
 800249e:	21ff      	movs	r1, #255	@ 0xff
 80024a0:	4091      	lsls	r1, r2
 80024a2:	000a      	movs	r2, r1
 80024a4:	43d2      	mvns	r2, r2
 80024a6:	401a      	ands	r2, r3
 80024a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	019b      	lsls	r3, r3, #6
 80024ae:	22ff      	movs	r2, #255	@ 0xff
 80024b0:	401a      	ands	r2, r3
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	0018      	movs	r0, r3
 80024b8:	2303      	movs	r3, #3
 80024ba:	4003      	ands	r3, r0
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024c0:	481f      	ldr	r0, [pc, #124]	@ (8002540 <__NVIC_SetPriority+0xd4>)
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	b25b      	sxtb	r3, r3
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	430a      	orrs	r2, r1
 80024cc:	33c0      	adds	r3, #192	@ 0xc0
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024d2:	e031      	b.n	8002538 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002544 <__NVIC_SetPriority+0xd8>)
 80024d6:	1dfb      	adds	r3, r7, #7
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	0019      	movs	r1, r3
 80024dc:	230f      	movs	r3, #15
 80024de:	400b      	ands	r3, r1
 80024e0:	3b08      	subs	r3, #8
 80024e2:	089b      	lsrs	r3, r3, #2
 80024e4:	3306      	adds	r3, #6
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	18d3      	adds	r3, r2, r3
 80024ea:	3304      	adds	r3, #4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	1dfa      	adds	r2, r7, #7
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	0011      	movs	r1, r2
 80024f4:	2203      	movs	r2, #3
 80024f6:	400a      	ands	r2, r1
 80024f8:	00d2      	lsls	r2, r2, #3
 80024fa:	21ff      	movs	r1, #255	@ 0xff
 80024fc:	4091      	lsls	r1, r2
 80024fe:	000a      	movs	r2, r1
 8002500:	43d2      	mvns	r2, r2
 8002502:	401a      	ands	r2, r3
 8002504:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	019b      	lsls	r3, r3, #6
 800250a:	22ff      	movs	r2, #255	@ 0xff
 800250c:	401a      	ands	r2, r3
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	0018      	movs	r0, r3
 8002514:	2303      	movs	r3, #3
 8002516:	4003      	ands	r3, r0
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800251c:	4809      	ldr	r0, [pc, #36]	@ (8002544 <__NVIC_SetPriority+0xd8>)
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	001c      	movs	r4, r3
 8002524:	230f      	movs	r3, #15
 8002526:	4023      	ands	r3, r4
 8002528:	3b08      	subs	r3, #8
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	430a      	orrs	r2, r1
 800252e:	3306      	adds	r3, #6
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	18c3      	adds	r3, r0, r3
 8002534:	3304      	adds	r3, #4
 8002536:	601a      	str	r2, [r3, #0]
}
 8002538:	46c0      	nop			@ (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b003      	add	sp, #12
 800253e:	bd90      	pop	{r4, r7, pc}
 8002540:	e000e100 	.word	0xe000e100
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800254c:	f3bf 8f4f 	dsb	sy
}
 8002550:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002552:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <__NVIC_SystemReset+0x1c>)
 8002554:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <__NVIC_SystemReset+0x20>)
 8002556:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002558:	f3bf 8f4f 	dsb	sy
}
 800255c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	e7fd      	b.n	800255e <__NVIC_SystemReset+0x16>
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	e000ed00 	.word	0xe000ed00
 8002568:	05fa0004 	.word	0x05fa0004

0800256c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	1e5a      	subs	r2, r3, #1
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	045b      	lsls	r3, r3, #17
 800257c:	429a      	cmp	r2, r3
 800257e:	d301      	bcc.n	8002584 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002580:	2301      	movs	r3, #1
 8002582:	e010      	b.n	80025a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002584:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <SysTick_Config+0x44>)
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	3a01      	subs	r2, #1
 800258a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258c:	2301      	movs	r3, #1
 800258e:	425b      	negs	r3, r3
 8002590:	2103      	movs	r1, #3
 8002592:	0018      	movs	r0, r3
 8002594:	f7ff ff6a 	bl	800246c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002598:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <SysTick_Config+0x44>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259e:	4b04      	ldr	r3, [pc, #16]	@ (80025b0 <SysTick_Config+0x44>)
 80025a0:	2207      	movs	r2, #7
 80025a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	0018      	movs	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b002      	add	sp, #8
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	e000e010 	.word	0xe000e010

080025b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	210f      	movs	r1, #15
 80025c0:	187b      	adds	r3, r7, r1
 80025c2:	1c02      	adds	r2, r0, #0
 80025c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	0011      	movs	r1, r2
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff ff4b 	bl	800246c <__NVIC_SetPriority>
}
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b004      	add	sp, #16
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	0002      	movs	r2, r0
 80025e6:	1dfb      	adds	r3, r7, #7
 80025e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ea:	1dfb      	adds	r3, r7, #7
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	b25b      	sxtb	r3, r3
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff feff 	bl	80023f4 <__NVIC_EnableIRQ>
}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b002      	add	sp, #8
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	0002      	movs	r2, r0
 8002606:	1dfb      	adds	r3, r7, #7
 8002608:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800260a:	1dfb      	adds	r3, r7, #7
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	b25b      	sxtb	r3, r3
 8002610:	0018      	movs	r0, r3
 8002612:	f7ff ff09 	bl	8002428 <__NVIC_DisableIRQ>
}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b002      	add	sp, #8
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002622:	f7ff ff91 	bl	8002548 <__NVIC_SystemReset>

08002626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	0018      	movs	r0, r3
 8002632:	f7ff ff9b 	bl	800256c <SysTick_Config>
 8002636:	0003      	movs	r3, r0
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b002      	add	sp, #8
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e036      	b.n	80026c4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2221      	movs	r2, #33	@ 0x21
 800265a:	2102      	movs	r1, #2
 800265c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a18      	ldr	r2, [pc, #96]	@ (80026cc <HAL_DMA_Init+0x8c>)
 800266a:	4013      	ands	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002676:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 f9c4 	bl	8002a34 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2221      	movs	r2, #33	@ 0x21
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	2100      	movs	r1, #0
 80026c0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}  
 80026c4:	0018      	movs	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b004      	add	sp, #16
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	ffffc00f 	.word	0xffffc00f

080026d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80026de:	2317      	movs	r3, #23
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	5c9b      	ldrb	r3, [r3, r2]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Start_IT+0x24>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e04f      	b.n	8002794 <HAL_DMA_Start_IT+0xc4>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	2101      	movs	r1, #1
 80026fa:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2221      	movs	r2, #33	@ 0x21
 8002700:	5c9b      	ldrb	r3, [r3, r2]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d13a      	bne.n	800277e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2221      	movs	r2, #33	@ 0x21
 800270c:	2102      	movs	r1, #2
 800270e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	438a      	bics	r2, r1
 8002724:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f954 	bl	80029da <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	210e      	movs	r1, #14
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e00f      	b.n	800276c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	210a      	movs	r1, #10
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2104      	movs	r1, #4
 8002768:	438a      	bics	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2101      	movs	r1, #1
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e007      	b.n	800278e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2220      	movs	r2, #32
 8002782:	2100      	movs	r1, #0
 8002784:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002786:	2317      	movs	r3, #23
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	2202      	movs	r2, #2
 800278c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800278e:	2317      	movs	r3, #23
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	781b      	ldrb	r3, [r3, #0]
} 
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	b006      	add	sp, #24
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2221      	movs	r2, #33	@ 0x21
 80027a8:	5c9b      	ldrb	r3, [r3, r2]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d008      	beq.n	80027c2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2204      	movs	r2, #4
 80027b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	2100      	movs	r1, #0
 80027bc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e020      	b.n	8002804 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	210e      	movs	r1, #14
 80027ce:	438a      	bics	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2101      	movs	r1, #1
 80027de:	438a      	bics	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ea:	2101      	movs	r1, #1
 80027ec:	4091      	lsls	r1, r2
 80027ee:	000a      	movs	r2, r1
 80027f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2221      	movs	r2, #33	@ 0x21
 80027f6:	2101      	movs	r1, #1
 80027f8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	2100      	movs	r1, #0
 8002800:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b002      	add	sp, #8
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002814:	210f      	movs	r1, #15
 8002816:	187b      	adds	r3, r7, r1
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2221      	movs	r2, #33	@ 0x21
 8002820:	5c9b      	ldrb	r3, [r3, r2]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d006      	beq.n	8002836 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2204      	movs	r2, #4
 800282c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800282e:	187b      	adds	r3, r7, r1
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e028      	b.n	8002888 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	210e      	movs	r1, #14
 8002842:	438a      	bics	r2, r1
 8002844:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2101      	movs	r1, #1
 8002852:	438a      	bics	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285e:	2101      	movs	r1, #1
 8002860:	4091      	lsls	r1, r2
 8002862:	000a      	movs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2221      	movs	r2, #33	@ 0x21
 800286a:	2101      	movs	r1, #1
 800286c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	2100      	movs	r1, #0
 8002874:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800287a:	2b00      	cmp	r3, #0
 800287c:	d004      	beq.n	8002888 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	0010      	movs	r0, r2
 8002886:	4798      	blx	r3
    } 
  }
  return status;
 8002888:	230f      	movs	r3, #15
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	781b      	ldrb	r3, [r3, #0]
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b004      	add	sp, #16
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	2204      	movs	r2, #4
 80028b4:	409a      	lsls	r2, r3
 80028b6:	0013      	movs	r3, r2
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4013      	ands	r3, r2
 80028bc:	d024      	beq.n	8002908 <HAL_DMA_IRQHandler+0x72>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2204      	movs	r2, #4
 80028c2:	4013      	ands	r3, r2
 80028c4:	d020      	beq.n	8002908 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2220      	movs	r2, #32
 80028ce:	4013      	ands	r3, r2
 80028d0:	d107      	bne.n	80028e2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2104      	movs	r1, #4
 80028de:	438a      	bics	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ea:	2104      	movs	r1, #4
 80028ec:	4091      	lsls	r1, r2
 80028ee:	000a      	movs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d100      	bne.n	80028fc <HAL_DMA_IRQHandler+0x66>
 80028fa:	e06a      	b.n	80029d2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	0010      	movs	r0, r2
 8002904:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002906:	e064      	b.n	80029d2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	2202      	movs	r2, #2
 800290e:	409a      	lsls	r2, r3
 8002910:	0013      	movs	r3, r2
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	d02b      	beq.n	8002970 <HAL_DMA_IRQHandler+0xda>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2202      	movs	r2, #2
 800291c:	4013      	ands	r3, r2
 800291e:	d027      	beq.n	8002970 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2220      	movs	r2, #32
 8002928:	4013      	ands	r3, r2
 800292a:	d10b      	bne.n	8002944 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	210a      	movs	r1, #10
 8002938:	438a      	bics	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2221      	movs	r2, #33	@ 0x21
 8002940:	2101      	movs	r1, #1
 8002942:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294c:	2102      	movs	r1, #2
 800294e:	4091      	lsls	r1, r2
 8002950:	000a      	movs	r2, r1
 8002952:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	2100      	movs	r1, #0
 800295a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d036      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	0010      	movs	r0, r2
 800296c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800296e:	e030      	b.n	80029d2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	2208      	movs	r2, #8
 8002976:	409a      	lsls	r2, r3
 8002978:	0013      	movs	r3, r2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4013      	ands	r3, r2
 800297e:	d028      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x13c>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2208      	movs	r2, #8
 8002984:	4013      	ands	r3, r2
 8002986:	d024      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	210e      	movs	r1, #14
 8002994:	438a      	bics	r2, r1
 8002996:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a0:	2101      	movs	r1, #1
 80029a2:	4091      	lsls	r1, r2
 80029a4:	000a      	movs	r2, r1
 80029a6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2221      	movs	r2, #33	@ 0x21
 80029b2:	2101      	movs	r1, #1
 80029b4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	2100      	movs	r1, #0
 80029bc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	0010      	movs	r0, r2
 80029ce:	4798      	blx	r3
    }
   }
}  
 80029d0:	e7ff      	b.n	80029d2 <HAL_DMA_IRQHandler+0x13c>
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b004      	add	sp, #16
 80029d8:	bd80      	pop	{r7, pc}

080029da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f0:	2101      	movs	r1, #1
 80029f2:	4091      	lsls	r1, r2
 80029f4:	000a      	movs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d108      	bne.n	8002a1a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a18:	e007      	b.n	8002a2a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	60da      	str	r2, [r3, #12]
}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b004      	add	sp, #16
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a08      	ldr	r2, [pc, #32]	@ (8002a64 <DMA_CalcBaseAndBitshift+0x30>)
 8002a42:	4694      	mov	ip, r2
 8002a44:	4463      	add	r3, ip
 8002a46:	2114      	movs	r1, #20
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f7fd fb5d 	bl	8000108 <__udivsi3>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	009a      	lsls	r2, r3, #2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a03      	ldr	r2, [pc, #12]	@ (8002a68 <DMA_CalcBaseAndBitshift+0x34>)
 8002a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002a5c:	46c0      	nop			@ (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b002      	add	sp, #8
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	bffdfff8 	.word	0xbffdfff8
 8002a68:	40020000 	.word	0x40020000

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7a:	e14f      	b.n	8002d1c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4091      	lsls	r1, r2
 8002a86:	000a      	movs	r2, r1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d100      	bne.n	8002a94 <HAL_GPIO_Init+0x28>
 8002a92:	e140      	b.n	8002d16 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2203      	movs	r2, #3
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d005      	beq.n	8002aac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d130      	bne.n	8002b0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	0013      	movs	r3, r2
 8002abc:	43da      	mvns	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	409a      	lsls	r2, r3
 8002ace:	0013      	movs	r3, r2
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	0013      	movs	r3, r2
 8002aea:	43da      	mvns	r2, r3
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	2201      	movs	r2, #1
 8002afa:	401a      	ands	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	409a      	lsls	r2, r3
 8002b00:	0013      	movs	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2203      	movs	r2, #3
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d017      	beq.n	8002b4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	409a      	lsls	r2, r3
 8002b28:	0013      	movs	r3, r2
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	0013      	movs	r3, r2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d123      	bne.n	8002b9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	0092      	lsls	r2, r2, #2
 8002b60:	58d3      	ldr	r3, [r2, r3]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2207      	movs	r2, #7
 8002b68:	4013      	ands	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	0013      	movs	r3, r2
 8002b72:	43da      	mvns	r2, r3
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2107      	movs	r1, #7
 8002b82:	400b      	ands	r3, r1
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	409a      	lsls	r2, r3
 8002b88:	0013      	movs	r3, r2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	08da      	lsrs	r2, r3, #3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3208      	adds	r2, #8
 8002b98:	0092      	lsls	r2, r2, #2
 8002b9a:	6939      	ldr	r1, [r7, #16]
 8002b9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	409a      	lsls	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	23c0      	movs	r3, #192	@ 0xc0
 8002bd8:	029b      	lsls	r3, r3, #10
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d100      	bne.n	8002be0 <HAL_GPIO_Init+0x174>
 8002bde:	e09a      	b.n	8002d16 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be0:	4b54      	ldr	r3, [pc, #336]	@ (8002d34 <HAL_GPIO_Init+0x2c8>)
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	4b53      	ldr	r3, [pc, #332]	@ (8002d34 <HAL_GPIO_Init+0x2c8>)
 8002be6:	2101      	movs	r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	619a      	str	r2, [r3, #24]
 8002bec:	4b51      	ldr	r3, [pc, #324]	@ (8002d34 <HAL_GPIO_Init+0x2c8>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8002d38 <HAL_GPIO_Init+0x2cc>)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	3302      	adds	r3, #2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	589b      	ldr	r3, [r3, r2]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2203      	movs	r2, #3
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	409a      	lsls	r2, r3
 8002c12:	0013      	movs	r3, r2
 8002c14:	43da      	mvns	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	2390      	movs	r3, #144	@ 0x90
 8002c20:	05db      	lsls	r3, r3, #23
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d013      	beq.n	8002c4e <HAL_GPIO_Init+0x1e2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a44      	ldr	r2, [pc, #272]	@ (8002d3c <HAL_GPIO_Init+0x2d0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00d      	beq.n	8002c4a <HAL_GPIO_Init+0x1de>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a43      	ldr	r2, [pc, #268]	@ (8002d40 <HAL_GPIO_Init+0x2d4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d007      	beq.n	8002c46 <HAL_GPIO_Init+0x1da>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a42      	ldr	r2, [pc, #264]	@ (8002d44 <HAL_GPIO_Init+0x2d8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_GPIO_Init+0x1d6>
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x1e4>
 8002c42:	2305      	movs	r3, #5
 8002c44:	e004      	b.n	8002c50 <HAL_GPIO_Init+0x1e4>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_Init+0x1e4>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_GPIO_Init+0x1e4>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	2103      	movs	r1, #3
 8002c54:	400a      	ands	r2, r1
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	4093      	lsls	r3, r2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c60:	4935      	ldr	r1, [pc, #212]	@ (8002d38 <HAL_GPIO_Init+0x2cc>)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c6e:	4b36      	ldr	r3, [pc, #216]	@ (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	2380      	movs	r3, #128	@ 0x80
 8002c84:	025b      	lsls	r3, r3, #9
 8002c86:	4013      	ands	r3, r2
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c92:	4b2d      	ldr	r3, [pc, #180]	@ (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002c98:	4b2b      	ldr	r3, [pc, #172]	@ (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	2380      	movs	r3, #128	@ 0x80
 8002cae:	029b      	lsls	r3, r3, #10
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cbc:	4b22      	ldr	r3, [pc, #136]	@ (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc2:	4b21      	ldr	r3, [pc, #132]	@ (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	035b      	lsls	r3, r3, #13
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ce6:	4b18      	ldr	r3, [pc, #96]	@ (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002cec:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	039b      	lsls	r3, r3, #14
 8002d04:	4013      	ands	r3, r2
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d10:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	40da      	lsrs	r2, r3
 8002d24:	1e13      	subs	r3, r2, #0
 8002d26:	d000      	beq.n	8002d2a <HAL_GPIO_Init+0x2be>
 8002d28:	e6a8      	b.n	8002a7c <HAL_GPIO_Init+0x10>
  } 
}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b006      	add	sp, #24
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	48000400 	.word	0x48000400
 8002d40:	48000800 	.word	0x48000800
 8002d44:	48000c00 	.word	0x48000c00
 8002d48:	40010400 	.word	0x40010400

08002d4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002d5a:	e0b1      	b.n	8002ec0 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	409a      	lsls	r2, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d100      	bne.n	8002d70 <HAL_GPIO_DeInit+0x24>
 8002d6e:	e0a4      	b.n	8002eba <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d70:	4a59      	ldr	r2, [pc, #356]	@ (8002ed8 <HAL_GPIO_DeInit+0x18c>)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	3302      	adds	r3, #2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	589b      	ldr	r3, [r3, r2]
 8002d7c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2203      	movs	r2, #3
 8002d82:	4013      	ands	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	220f      	movs	r2, #15
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	2390      	movs	r3, #144	@ 0x90
 8002d94:	05db      	lsls	r3, r3, #23
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d013      	beq.n	8002dc2 <HAL_GPIO_DeInit+0x76>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002edc <HAL_GPIO_DeInit+0x190>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00d      	beq.n	8002dbe <HAL_GPIO_DeInit+0x72>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee0 <HAL_GPIO_DeInit+0x194>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <HAL_GPIO_DeInit+0x6e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee4 <HAL_GPIO_DeInit+0x198>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_GPIO_DeInit+0x6a>
 8002db2:	2303      	movs	r3, #3
 8002db4:	e006      	b.n	8002dc4 <HAL_GPIO_DeInit+0x78>
 8002db6:	2305      	movs	r3, #5
 8002db8:	e004      	b.n	8002dc4 <HAL_GPIO_DeInit+0x78>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e002      	b.n	8002dc4 <HAL_GPIO_DeInit+0x78>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_GPIO_DeInit+0x78>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	2103      	movs	r1, #3
 8002dc8:	400a      	ands	r2, r1
 8002dca:	0092      	lsls	r2, r2, #2
 8002dcc:	4093      	lsls	r3, r2
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d132      	bne.n	8002e3a <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002dd4:	4b44      	ldr	r3, [pc, #272]	@ (8002ee8 <HAL_GPIO_DeInit+0x19c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	4b42      	ldr	r3, [pc, #264]	@ (8002ee8 <HAL_GPIO_DeInit+0x19c>)
 8002dde:	400a      	ands	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002de2:	4b41      	ldr	r3, [pc, #260]	@ (8002ee8 <HAL_GPIO_DeInit+0x19c>)
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	43d9      	mvns	r1, r3
 8002dea:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee8 <HAL_GPIO_DeInit+0x19c>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002df0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee8 <HAL_GPIO_DeInit+0x19c>)
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43d9      	mvns	r1, r3
 8002df8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee8 <HAL_GPIO_DeInit+0x19c>)
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee8 <HAL_GPIO_DeInit+0x19c>)
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43d9      	mvns	r1, r3
 8002e06:	4b38      	ldr	r3, [pc, #224]	@ (8002ee8 <HAL_GPIO_DeInit+0x19c>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2203      	movs	r2, #3
 8002e10:	4013      	ands	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	220f      	movs	r2, #15
 8002e16:	409a      	lsls	r2, r3
 8002e18:	0013      	movs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ed8 <HAL_GPIO_DeInit+0x18c>)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	589a      	ldr	r2, [r3, r2]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	43d9      	mvns	r1, r3
 8002e2c:	482a      	ldr	r0, [pc, #168]	@ (8002ed8 <HAL_GPIO_DeInit+0x18c>)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	089b      	lsrs	r3, r3, #2
 8002e32:	400a      	ands	r2, r1
 8002e34:	3302      	adds	r3, #2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	0052      	lsls	r2, r2, #1
 8002e42:	2103      	movs	r1, #3
 8002e44:	4091      	lsls	r1, r2
 8002e46:	000a      	movs	r2, r1
 8002e48:	43d2      	mvns	r2, r2
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	08da      	lsrs	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3208      	adds	r2, #8
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	58d3      	ldr	r3, [r2, r3]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	2107      	movs	r1, #7
 8002e60:	400a      	ands	r2, r1
 8002e62:	0092      	lsls	r2, r2, #2
 8002e64:	210f      	movs	r1, #15
 8002e66:	4091      	lsls	r1, r2
 8002e68:	000a      	movs	r2, r1
 8002e6a:	43d1      	mvns	r1, r2
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	08d2      	lsrs	r2, r2, #3
 8002e70:	4019      	ands	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	0092      	lsls	r2, r2, #2
 8002e78:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	0052      	lsls	r2, r2, #1
 8002e82:	2103      	movs	r1, #3
 8002e84:	4091      	lsls	r1, r2
 8002e86:	000a      	movs	r2, r1
 8002e88:	43d2      	mvns	r2, r2
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2101      	movs	r1, #1
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4091      	lsls	r1, r2
 8002e9a:	000a      	movs	r2, r1
 8002e9c:	43d2      	mvns	r2, r2
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	0052      	lsls	r2, r2, #1
 8002eac:	2103      	movs	r1, #3
 8002eae:	4091      	lsls	r1, r2
 8002eb0:	000a      	movs	r2, r1
 8002eb2:	43d2      	mvns	r2, r2
 8002eb4:	401a      	ands	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	609a      	str	r2, [r3, #8]

    }

    position++;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	40da      	lsrs	r2, r3
 8002ec6:	1e13      	subs	r3, r2, #0
 8002ec8:	d000      	beq.n	8002ecc <HAL_GPIO_DeInit+0x180>
 8002eca:	e747      	b.n	8002d5c <HAL_GPIO_DeInit+0x10>
  }
}
 8002ecc:	46c0      	nop			@ (mov r8, r8)
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b006      	add	sp, #24
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			@ (mov r8, r8)
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	48000400 	.word	0x48000400
 8002ee0:	48000800 	.word	0x48000800
 8002ee4:	48000c00 	.word	0x48000c00
 8002ee8:	40010400 	.word	0x40010400

08002eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	000a      	movs	r2, r1
 8002ef6:	1cbb      	adds	r3, r7, #2
 8002ef8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	1cba      	adds	r2, r7, #2
 8002f00:	8812      	ldrh	r2, [r2, #0]
 8002f02:	4013      	ands	r3, r2
 8002f04:	d004      	beq.n	8002f10 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002f06:	230f      	movs	r3, #15
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	e003      	b.n	8002f18 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f10:	230f      	movs	r3, #15
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002f18:	230f      	movs	r3, #15
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
  }
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b004      	add	sp, #16
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	0002      	movs	r2, r0
 8002f30:	1dbb      	adds	r3, r7, #6
 8002f32:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f34:	4b09      	ldr	r3, [pc, #36]	@ (8002f5c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	1dba      	adds	r2, r7, #6
 8002f3a:	8812      	ldrh	r2, [r2, #0]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d008      	beq.n	8002f52 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f40:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002f42:	1dba      	adds	r2, r7, #6
 8002f44:	8812      	ldrh	r2, [r2, #0]
 8002f46:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f48:	1dbb      	adds	r3, r7, #6
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f007 fa0b 	bl	800a368 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	40010400 	.word	0x40010400

08002f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e301      	b.n	8003576 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2201      	movs	r2, #1
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <HAL_RCC_OscConfig+0x1e>
 8002f7c:	e08d      	b.n	800309a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f7e:	4bc3      	ldr	r3, [pc, #780]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	220c      	movs	r2, #12
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d00e      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f8a:	4bc0      	ldr	r3, [pc, #768]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	220c      	movs	r2, #12
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d116      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x64>
 8002f96:	4bbd      	ldr	r3, [pc, #756]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	025b      	lsls	r3, r3, #9
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	2380      	movs	r3, #128	@ 0x80
 8002fa2:	025b      	lsls	r3, r3, #9
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	4bb8      	ldr	r3, [pc, #736]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	029b      	lsls	r3, r3, #10
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d100      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x56>
 8002fb4:	e070      	b.n	8003098 <HAL_RCC_OscConfig+0x138>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d000      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x60>
 8002fbe:	e06b      	b.n	8003098 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e2d8      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <HAL_RCC_OscConfig+0x7c>
 8002fcc:	4baf      	ldr	r3, [pc, #700]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4bae      	ldr	r3, [pc, #696]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8002fd2:	2180      	movs	r1, #128	@ 0x80
 8002fd4:	0249      	lsls	r1, r1, #9
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e02f      	b.n	800303c <HAL_RCC_OscConfig+0xdc>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10c      	bne.n	8002ffe <HAL_RCC_OscConfig+0x9e>
 8002fe4:	4ba9      	ldr	r3, [pc, #676]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4ba8      	ldr	r3, [pc, #672]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8002fea:	49a9      	ldr	r1, [pc, #676]	@ (8003290 <HAL_RCC_OscConfig+0x330>)
 8002fec:	400a      	ands	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	4ba6      	ldr	r3, [pc, #664]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4ba5      	ldr	r3, [pc, #660]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8002ff6:	49a7      	ldr	r1, [pc, #668]	@ (8003294 <HAL_RCC_OscConfig+0x334>)
 8002ff8:	400a      	ands	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e01e      	b.n	800303c <HAL_RCC_OscConfig+0xdc>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b05      	cmp	r3, #5
 8003004:	d10e      	bne.n	8003024 <HAL_RCC_OscConfig+0xc4>
 8003006:	4ba1      	ldr	r3, [pc, #644]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4ba0      	ldr	r3, [pc, #640]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 800300c:	2180      	movs	r1, #128	@ 0x80
 800300e:	02c9      	lsls	r1, r1, #11
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	4b9d      	ldr	r3, [pc, #628]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b9c      	ldr	r3, [pc, #624]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 800301a:	2180      	movs	r1, #128	@ 0x80
 800301c:	0249      	lsls	r1, r1, #9
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xdc>
 8003024:	4b99      	ldr	r3, [pc, #612]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	4b98      	ldr	r3, [pc, #608]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 800302a:	4999      	ldr	r1, [pc, #612]	@ (8003290 <HAL_RCC_OscConfig+0x330>)
 800302c:	400a      	ands	r2, r1
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	4b96      	ldr	r3, [pc, #600]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b95      	ldr	r3, [pc, #596]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003036:	4997      	ldr	r1, [pc, #604]	@ (8003294 <HAL_RCC_OscConfig+0x334>)
 8003038:	400a      	ands	r2, r1
 800303a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d014      	beq.n	800306e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7ff f9cc 	bl	80023e0 <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304e:	f7ff f9c7 	bl	80023e0 <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b64      	cmp	r3, #100	@ 0x64
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e28a      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003060:	4b8a      	ldr	r3, [pc, #552]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2380      	movs	r3, #128	@ 0x80
 8003066:	029b      	lsls	r3, r3, #10
 8003068:	4013      	ands	r3, r2
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0xee>
 800306c:	e015      	b.n	800309a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7ff f9b7 	bl	80023e0 <HAL_GetTick>
 8003072:	0003      	movs	r3, r0
 8003074:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003078:	f7ff f9b2 	bl	80023e0 <HAL_GetTick>
 800307c:	0002      	movs	r2, r0
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	@ 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e275      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308a:	4b80      	ldr	r3, [pc, #512]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	2380      	movs	r3, #128	@ 0x80
 8003090:	029b      	lsls	r3, r3, #10
 8003092:	4013      	ands	r3, r2
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x118>
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003098:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2202      	movs	r2, #2
 80030a0:	4013      	ands	r3, r2
 80030a2:	d100      	bne.n	80030a6 <HAL_RCC_OscConfig+0x146>
 80030a4:	e069      	b.n	800317a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030a6:	4b79      	ldr	r3, [pc, #484]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	220c      	movs	r2, #12
 80030ac:	4013      	ands	r3, r2
 80030ae:	d00b      	beq.n	80030c8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030b0:	4b76      	ldr	r3, [pc, #472]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	220c      	movs	r2, #12
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d11c      	bne.n	80030f6 <HAL_RCC_OscConfig+0x196>
 80030bc:	4b73      	ldr	r3, [pc, #460]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	2380      	movs	r3, #128	@ 0x80
 80030c2:	025b      	lsls	r3, r3, #9
 80030c4:	4013      	ands	r3, r2
 80030c6:	d116      	bne.n	80030f6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c8:	4b70      	ldr	r3, [pc, #448]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2202      	movs	r2, #2
 80030ce:	4013      	ands	r3, r2
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x17e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e24b      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b6b      	ldr	r3, [pc, #428]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	22f8      	movs	r2, #248	@ 0xf8
 80030e4:	4393      	bics	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	00da      	lsls	r2, r3, #3
 80030ee:	4b67      	ldr	r3, [pc, #412]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f4:	e041      	b.n	800317a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d024      	beq.n	8003148 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fe:	4b63      	ldr	r3, [pc, #396]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4b62      	ldr	r3, [pc, #392]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003104:	2101      	movs	r1, #1
 8003106:	430a      	orrs	r2, r1
 8003108:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310a:	f7ff f969 	bl	80023e0 <HAL_GetTick>
 800310e:	0003      	movs	r3, r0
 8003110:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003114:	f7ff f964 	bl	80023e0 <HAL_GetTick>
 8003118:	0002      	movs	r2, r0
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e227      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003126:	4b59      	ldr	r3, [pc, #356]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2202      	movs	r2, #2
 800312c:	4013      	ands	r3, r2
 800312e:	d0f1      	beq.n	8003114 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003130:	4b56      	ldr	r3, [pc, #344]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	22f8      	movs	r2, #248	@ 0xf8
 8003136:	4393      	bics	r3, r2
 8003138:	0019      	movs	r1, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00da      	lsls	r2, r3, #3
 8003140:	4b52      	ldr	r3, [pc, #328]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e018      	b.n	800317a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003148:	4b50      	ldr	r3, [pc, #320]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b4f      	ldr	r3, [pc, #316]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 800314e:	2101      	movs	r1, #1
 8003150:	438a      	bics	r2, r1
 8003152:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7ff f944 	bl	80023e0 <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315e:	f7ff f93f 	bl	80023e0 <HAL_GetTick>
 8003162:	0002      	movs	r2, r0
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e202      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003170:	4b46      	ldr	r3, [pc, #280]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2202      	movs	r2, #2
 8003176:	4013      	ands	r3, r2
 8003178:	d1f1      	bne.n	800315e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2208      	movs	r2, #8
 8003180:	4013      	ands	r3, r2
 8003182:	d036      	beq.n	80031f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d019      	beq.n	80031c0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800318c:	4b3f      	ldr	r3, [pc, #252]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 800318e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003190:	4b3e      	ldr	r3, [pc, #248]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003192:	2101      	movs	r1, #1
 8003194:	430a      	orrs	r2, r1
 8003196:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003198:	f7ff f922 	bl	80023e0 <HAL_GetTick>
 800319c:	0003      	movs	r3, r0
 800319e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a2:	f7ff f91d 	bl	80023e0 <HAL_GetTick>
 80031a6:	0002      	movs	r2, r0
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e1e0      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b4:	4b35      	ldr	r3, [pc, #212]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	2202      	movs	r2, #2
 80031ba:	4013      	ands	r3, r2
 80031bc:	d0f1      	beq.n	80031a2 <HAL_RCC_OscConfig+0x242>
 80031be:	e018      	b.n	80031f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c0:	4b32      	ldr	r3, [pc, #200]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 80031c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031c4:	4b31      	ldr	r3, [pc, #196]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 80031c6:	2101      	movs	r1, #1
 80031c8:	438a      	bics	r2, r1
 80031ca:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031cc:	f7ff f908 	bl	80023e0 <HAL_GetTick>
 80031d0:	0003      	movs	r3, r0
 80031d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d6:	f7ff f903 	bl	80023e0 <HAL_GetTick>
 80031da:	0002      	movs	r2, r0
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e1c6      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e8:	4b28      	ldr	r3, [pc, #160]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	2202      	movs	r2, #2
 80031ee:	4013      	ands	r3, r2
 80031f0:	d1f1      	bne.n	80031d6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2204      	movs	r2, #4
 80031f8:	4013      	ands	r3, r2
 80031fa:	d100      	bne.n	80031fe <HAL_RCC_OscConfig+0x29e>
 80031fc:	e0b4      	b.n	8003368 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fe:	201f      	movs	r0, #31
 8003200:	183b      	adds	r3, r7, r0
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003206:	4b21      	ldr	r3, [pc, #132]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	2380      	movs	r3, #128	@ 0x80
 800320c:	055b      	lsls	r3, r3, #21
 800320e:	4013      	ands	r3, r2
 8003210:	d110      	bne.n	8003234 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	4b1e      	ldr	r3, [pc, #120]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	4b1d      	ldr	r3, [pc, #116]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003218:	2180      	movs	r1, #128	@ 0x80
 800321a:	0549      	lsls	r1, r1, #21
 800321c:	430a      	orrs	r2, r1
 800321e:	61da      	str	r2, [r3, #28]
 8003220:	4b1a      	ldr	r3, [pc, #104]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	2380      	movs	r3, #128	@ 0x80
 8003226:	055b      	lsls	r3, r3, #21
 8003228:	4013      	ands	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800322e:	183b      	adds	r3, r7, r0
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <HAL_RCC_OscConfig+0x338>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	2380      	movs	r3, #128	@ 0x80
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	4013      	ands	r3, r2
 800323e:	d11a      	bne.n	8003276 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003240:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <HAL_RCC_OscConfig+0x338>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b14      	ldr	r3, [pc, #80]	@ (8003298 <HAL_RCC_OscConfig+0x338>)
 8003246:	2180      	movs	r1, #128	@ 0x80
 8003248:	0049      	lsls	r1, r1, #1
 800324a:	430a      	orrs	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800324e:	f7ff f8c7 	bl	80023e0 <HAL_GetTick>
 8003252:	0003      	movs	r3, r0
 8003254:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003258:	f7ff f8c2 	bl	80023e0 <HAL_GetTick>
 800325c:	0002      	movs	r2, r0
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	@ 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e185      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b0b      	ldr	r3, [pc, #44]	@ (8003298 <HAL_RCC_OscConfig+0x338>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	2380      	movs	r3, #128	@ 0x80
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4013      	ands	r3, r2
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d10e      	bne.n	800329c <HAL_RCC_OscConfig+0x33c>
 800327e:	4b03      	ldr	r3, [pc, #12]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003280:	6a1a      	ldr	r2, [r3, #32]
 8003282:	4b02      	ldr	r3, [pc, #8]	@ (800328c <HAL_RCC_OscConfig+0x32c>)
 8003284:	2101      	movs	r1, #1
 8003286:	430a      	orrs	r2, r1
 8003288:	621a      	str	r2, [r3, #32]
 800328a:	e035      	b.n	80032f8 <HAL_RCC_OscConfig+0x398>
 800328c:	40021000 	.word	0x40021000
 8003290:	fffeffff 	.word	0xfffeffff
 8003294:	fffbffff 	.word	0xfffbffff
 8003298:	40007000 	.word	0x40007000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10c      	bne.n	80032be <HAL_RCC_OscConfig+0x35e>
 80032a4:	4bb6      	ldr	r3, [pc, #728]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	4bb5      	ldr	r3, [pc, #724]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	438a      	bics	r2, r1
 80032ae:	621a      	str	r2, [r3, #32]
 80032b0:	4bb3      	ldr	r3, [pc, #716]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80032b2:	6a1a      	ldr	r2, [r3, #32]
 80032b4:	4bb2      	ldr	r3, [pc, #712]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80032b6:	2104      	movs	r1, #4
 80032b8:	438a      	bics	r2, r1
 80032ba:	621a      	str	r2, [r3, #32]
 80032bc:	e01c      	b.n	80032f8 <HAL_RCC_OscConfig+0x398>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x380>
 80032c6:	4bae      	ldr	r3, [pc, #696]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	4bad      	ldr	r3, [pc, #692]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80032cc:	2104      	movs	r1, #4
 80032ce:	430a      	orrs	r2, r1
 80032d0:	621a      	str	r2, [r3, #32]
 80032d2:	4bab      	ldr	r3, [pc, #684]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80032d4:	6a1a      	ldr	r2, [r3, #32]
 80032d6:	4baa      	ldr	r3, [pc, #680]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80032d8:	2101      	movs	r1, #1
 80032da:	430a      	orrs	r2, r1
 80032dc:	621a      	str	r2, [r3, #32]
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0x398>
 80032e0:	4ba7      	ldr	r3, [pc, #668]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80032e2:	6a1a      	ldr	r2, [r3, #32]
 80032e4:	4ba6      	ldr	r3, [pc, #664]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80032e6:	2101      	movs	r1, #1
 80032e8:	438a      	bics	r2, r1
 80032ea:	621a      	str	r2, [r3, #32]
 80032ec:	4ba4      	ldr	r3, [pc, #656]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80032ee:	6a1a      	ldr	r2, [r3, #32]
 80032f0:	4ba3      	ldr	r3, [pc, #652]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80032f2:	2104      	movs	r1, #4
 80032f4:	438a      	bics	r2, r1
 80032f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d014      	beq.n	800332a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003300:	f7ff f86e 	bl	80023e0 <HAL_GetTick>
 8003304:	0003      	movs	r3, r0
 8003306:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003308:	e009      	b.n	800331e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7ff f869 	bl	80023e0 <HAL_GetTick>
 800330e:	0002      	movs	r2, r0
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	4a9b      	ldr	r2, [pc, #620]	@ (8003584 <HAL_RCC_OscConfig+0x624>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e12b      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	4b98      	ldr	r3, [pc, #608]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	2202      	movs	r2, #2
 8003324:	4013      	ands	r3, r2
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x3aa>
 8003328:	e013      	b.n	8003352 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332a:	f7ff f859 	bl	80023e0 <HAL_GetTick>
 800332e:	0003      	movs	r3, r0
 8003330:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003332:	e009      	b.n	8003348 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7ff f854 	bl	80023e0 <HAL_GetTick>
 8003338:	0002      	movs	r2, r0
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	4a91      	ldr	r2, [pc, #580]	@ (8003584 <HAL_RCC_OscConfig+0x624>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e116      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003348:	4b8d      	ldr	r3, [pc, #564]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	2202      	movs	r2, #2
 800334e:	4013      	ands	r3, r2
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003352:	231f      	movs	r3, #31
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4b88      	ldr	r3, [pc, #544]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	4b87      	ldr	r3, [pc, #540]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 8003362:	4989      	ldr	r1, [pc, #548]	@ (8003588 <HAL_RCC_OscConfig+0x628>)
 8003364:	400a      	ands	r2, r1
 8003366:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2210      	movs	r2, #16
 800336e:	4013      	ands	r3, r2
 8003370:	d063      	beq.n	800343a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d12a      	bne.n	80033d0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800337a:	4b81      	ldr	r3, [pc, #516]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 800337c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800337e:	4b80      	ldr	r3, [pc, #512]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 8003380:	2104      	movs	r1, #4
 8003382:	430a      	orrs	r2, r1
 8003384:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003386:	4b7e      	ldr	r3, [pc, #504]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 8003388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800338a:	4b7d      	ldr	r3, [pc, #500]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 800338c:	2101      	movs	r1, #1
 800338e:	430a      	orrs	r2, r1
 8003390:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003392:	f7ff f825 	bl	80023e0 <HAL_GetTick>
 8003396:	0003      	movs	r3, r0
 8003398:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800339c:	f7ff f820 	bl	80023e0 <HAL_GetTick>
 80033a0:	0002      	movs	r2, r0
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e0e3      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80033ae:	4b74      	ldr	r3, [pc, #464]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80033b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b2:	2202      	movs	r2, #2
 80033b4:	4013      	ands	r3, r2
 80033b6:	d0f1      	beq.n	800339c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033b8:	4b71      	ldr	r3, [pc, #452]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80033ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033bc:	22f8      	movs	r2, #248	@ 0xf8
 80033be:	4393      	bics	r3, r2
 80033c0:	0019      	movs	r1, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	00da      	lsls	r2, r3, #3
 80033c8:	4b6d      	ldr	r3, [pc, #436]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80033ca:	430a      	orrs	r2, r1
 80033cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80033ce:	e034      	b.n	800343a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	3305      	adds	r3, #5
 80033d6:	d111      	bne.n	80033fc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80033d8:	4b69      	ldr	r3, [pc, #420]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80033da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033dc:	4b68      	ldr	r3, [pc, #416]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80033de:	2104      	movs	r1, #4
 80033e0:	438a      	bics	r2, r1
 80033e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80033e4:	4b66      	ldr	r3, [pc, #408]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80033e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e8:	22f8      	movs	r2, #248	@ 0xf8
 80033ea:	4393      	bics	r3, r2
 80033ec:	0019      	movs	r1, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	00da      	lsls	r2, r3, #3
 80033f4:	4b62      	ldr	r3, [pc, #392]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80033f6:	430a      	orrs	r2, r1
 80033f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033fa:	e01e      	b.n	800343a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80033fc:	4b60      	ldr	r3, [pc, #384]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80033fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003400:	4b5f      	ldr	r3, [pc, #380]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 8003402:	2104      	movs	r1, #4
 8003404:	430a      	orrs	r2, r1
 8003406:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003408:	4b5d      	ldr	r3, [pc, #372]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 800340a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800340c:	4b5c      	ldr	r3, [pc, #368]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 800340e:	2101      	movs	r1, #1
 8003410:	438a      	bics	r2, r1
 8003412:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003414:	f7fe ffe4 	bl	80023e0 <HAL_GetTick>
 8003418:	0003      	movs	r3, r0
 800341a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800341e:	f7fe ffdf 	bl	80023e0 <HAL_GetTick>
 8003422:	0002      	movs	r2, r0
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0a2      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003430:	4b53      	ldr	r3, [pc, #332]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 8003432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003434:	2202      	movs	r2, #2
 8003436:	4013      	ands	r3, r2
 8003438:	d1f1      	bne.n	800341e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d100      	bne.n	8003444 <HAL_RCC_OscConfig+0x4e4>
 8003442:	e097      	b.n	8003574 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003444:	4b4e      	ldr	r3, [pc, #312]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	220c      	movs	r2, #12
 800344a:	4013      	ands	r3, r2
 800344c:	2b08      	cmp	r3, #8
 800344e:	d100      	bne.n	8003452 <HAL_RCC_OscConfig+0x4f2>
 8003450:	e06b      	b.n	800352a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d14c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345a:	4b49      	ldr	r3, [pc, #292]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b48      	ldr	r3, [pc, #288]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 8003460:	494a      	ldr	r1, [pc, #296]	@ (800358c <HAL_RCC_OscConfig+0x62c>)
 8003462:	400a      	ands	r2, r1
 8003464:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7fe ffbb 	bl	80023e0 <HAL_GetTick>
 800346a:	0003      	movs	r3, r0
 800346c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003470:	f7fe ffb6 	bl	80023e0 <HAL_GetTick>
 8003474:	0002      	movs	r2, r0
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e079      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003482:	4b3f      	ldr	r3, [pc, #252]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	2380      	movs	r3, #128	@ 0x80
 8003488:	049b      	lsls	r3, r3, #18
 800348a:	4013      	ands	r3, r2
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800348e:	4b3c      	ldr	r3, [pc, #240]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	220f      	movs	r2, #15
 8003494:	4393      	bics	r3, r2
 8003496:	0019      	movs	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349c:	4b38      	ldr	r3, [pc, #224]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 800349e:	430a      	orrs	r2, r1
 80034a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80034a2:	4b37      	ldr	r3, [pc, #220]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003590 <HAL_RCC_OscConfig+0x630>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	431a      	orrs	r2, r3
 80034b6:	4b32      	ldr	r3, [pc, #200]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80034b8:	430a      	orrs	r2, r1
 80034ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034bc:	4b30      	ldr	r3, [pc, #192]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80034c2:	2180      	movs	r1, #128	@ 0x80
 80034c4:	0449      	lsls	r1, r1, #17
 80034c6:	430a      	orrs	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7fe ff89 	bl	80023e0 <HAL_GetTick>
 80034ce:	0003      	movs	r3, r0
 80034d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe ff84 	bl	80023e0 <HAL_GetTick>
 80034d8:	0002      	movs	r2, r0
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e047      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e6:	4b26      	ldr	r3, [pc, #152]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	2380      	movs	r3, #128	@ 0x80
 80034ec:	049b      	lsls	r3, r3, #18
 80034ee:	4013      	ands	r3, r2
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x574>
 80034f2:	e03f      	b.n	8003574 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f4:	4b22      	ldr	r3, [pc, #136]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b21      	ldr	r3, [pc, #132]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 80034fa:	4924      	ldr	r1, [pc, #144]	@ (800358c <HAL_RCC_OscConfig+0x62c>)
 80034fc:	400a      	ands	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7fe ff6e 	bl	80023e0 <HAL_GetTick>
 8003504:	0003      	movs	r3, r0
 8003506:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800350a:	f7fe ff69 	bl	80023e0 <HAL_GetTick>
 800350e:	0002      	movs	r2, r0
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e02c      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800351c:	4b18      	ldr	r3, [pc, #96]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	2380      	movs	r3, #128	@ 0x80
 8003522:	049b      	lsls	r3, r3, #18
 8003524:	4013      	ands	r3, r2
 8003526:	d1f0      	bne.n	800350a <HAL_RCC_OscConfig+0x5aa>
 8003528:	e024      	b.n	8003574 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e01f      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003536:	4b12      	ldr	r3, [pc, #72]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800353c:	4b10      	ldr	r3, [pc, #64]	@ (8003580 <HAL_RCC_OscConfig+0x620>)
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	2380      	movs	r3, #128	@ 0x80
 8003546:	025b      	lsls	r3, r3, #9
 8003548:	401a      	ands	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	429a      	cmp	r2, r3
 8003550:	d10e      	bne.n	8003570 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	220f      	movs	r2, #15
 8003556:	401a      	ands	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d107      	bne.n	8003570 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	23f0      	movs	r3, #240	@ 0xf0
 8003564:	039b      	lsls	r3, r3, #14
 8003566:	401a      	ands	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b008      	add	sp, #32
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	40021000 	.word	0x40021000
 8003584:	00001388 	.word	0x00001388
 8003588:	efffffff 	.word	0xefffffff
 800358c:	feffffff 	.word	0xfeffffff
 8003590:	ffc2ffff 	.word	0xffc2ffff

08003594 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0b3      	b.n	8003710 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b5b      	ldr	r3, [pc, #364]	@ (8003718 <HAL_RCC_ClockConfig+0x184>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4013      	ands	r3, r2
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d911      	bls.n	80035da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b58      	ldr	r3, [pc, #352]	@ (8003718 <HAL_RCC_ClockConfig+0x184>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2201      	movs	r2, #1
 80035bc:	4393      	bics	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	4b55      	ldr	r3, [pc, #340]	@ (8003718 <HAL_RCC_ClockConfig+0x184>)
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c8:	4b53      	ldr	r3, [pc, #332]	@ (8003718 <HAL_RCC_ClockConfig+0x184>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2201      	movs	r2, #1
 80035ce:	4013      	ands	r3, r2
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e09a      	b.n	8003710 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2202      	movs	r2, #2
 80035e0:	4013      	ands	r3, r2
 80035e2:	d015      	beq.n	8003610 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2204      	movs	r2, #4
 80035ea:	4013      	ands	r3, r2
 80035ec:	d006      	beq.n	80035fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035ee:	4b4b      	ldr	r3, [pc, #300]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	4b4a      	ldr	r3, [pc, #296]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 80035f4:	21e0      	movs	r1, #224	@ 0xe0
 80035f6:	00c9      	lsls	r1, r1, #3
 80035f8:	430a      	orrs	r2, r1
 80035fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4b47      	ldr	r3, [pc, #284]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	22f0      	movs	r2, #240	@ 0xf0
 8003602:	4393      	bics	r3, r2
 8003604:	0019      	movs	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	4b44      	ldr	r3, [pc, #272]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2201      	movs	r2, #1
 8003616:	4013      	ands	r3, r2
 8003618:	d040      	beq.n	800369c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b3e      	ldr	r3, [pc, #248]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	@ 0x80
 8003628:	029b      	lsls	r3, r3, #10
 800362a:	4013      	ands	r3, r2
 800362c:	d114      	bne.n	8003658 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e06e      	b.n	8003710 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d107      	bne.n	800364a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363a:	4b38      	ldr	r3, [pc, #224]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	2380      	movs	r3, #128	@ 0x80
 8003640:	049b      	lsls	r3, r3, #18
 8003642:	4013      	ands	r3, r2
 8003644:	d108      	bne.n	8003658 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e062      	b.n	8003710 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364a:	4b34      	ldr	r3, [pc, #208]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2202      	movs	r2, #2
 8003650:	4013      	ands	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e05b      	b.n	8003710 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003658:	4b30      	ldr	r3, [pc, #192]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2203      	movs	r2, #3
 800365e:	4393      	bics	r3, r2
 8003660:	0019      	movs	r1, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	4b2d      	ldr	r3, [pc, #180]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800366c:	f7fe feb8 	bl	80023e0 <HAL_GetTick>
 8003670:	0003      	movs	r3, r0
 8003672:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003674:	e009      	b.n	800368a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003676:	f7fe feb3 	bl	80023e0 <HAL_GetTick>
 800367a:	0002      	movs	r2, r0
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	4a27      	ldr	r2, [pc, #156]	@ (8003720 <HAL_RCC_ClockConfig+0x18c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e042      	b.n	8003710 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	4b24      	ldr	r3, [pc, #144]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	220c      	movs	r2, #12
 8003690:	401a      	ands	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	429a      	cmp	r2, r3
 800369a:	d1ec      	bne.n	8003676 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800369c:	4b1e      	ldr	r3, [pc, #120]	@ (8003718 <HAL_RCC_ClockConfig+0x184>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2201      	movs	r2, #1
 80036a2:	4013      	ands	r3, r2
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d211      	bcs.n	80036ce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <HAL_RCC_ClockConfig+0x184>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2201      	movs	r2, #1
 80036b0:	4393      	bics	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	4b18      	ldr	r3, [pc, #96]	@ (8003718 <HAL_RCC_ClockConfig+0x184>)
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036bc:	4b16      	ldr	r3, [pc, #88]	@ (8003718 <HAL_RCC_ClockConfig+0x184>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2201      	movs	r2, #1
 80036c2:	4013      	ands	r3, r2
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e020      	b.n	8003710 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2204      	movs	r2, #4
 80036d4:	4013      	ands	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80036d8:	4b10      	ldr	r3, [pc, #64]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a11      	ldr	r2, [pc, #68]	@ (8003724 <HAL_RCC_ClockConfig+0x190>)
 80036de:	4013      	ands	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	4b0d      	ldr	r3, [pc, #52]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036ec:	f000 f820 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 80036f0:	0001      	movs	r1, r0
 80036f2:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	220f      	movs	r2, #15
 80036fa:	4013      	ands	r3, r2
 80036fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <HAL_RCC_ClockConfig+0x194>)
 80036fe:	5cd3      	ldrb	r3, [r2, r3]
 8003700:	000a      	movs	r2, r1
 8003702:	40da      	lsrs	r2, r3
 8003704:	4b09      	ldr	r3, [pc, #36]	@ (800372c <HAL_RCC_ClockConfig+0x198>)
 8003706:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003708:	2000      	movs	r0, #0
 800370a:	f7fe fe23 	bl	8002354 <HAL_InitTick>
  
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	0018      	movs	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	b004      	add	sp, #16
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40022000 	.word	0x40022000
 800371c:	40021000 	.word	0x40021000
 8003720:	00001388 	.word	0x00001388
 8003724:	fffff8ff 	.word	0xfffff8ff
 8003728:	0800ff78 	.word	0x0800ff78
 800372c:	20000008 	.word	0x20000008

08003730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b08f      	sub	sp, #60	@ 0x3c
 8003734:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003736:	2314      	movs	r3, #20
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	4a2b      	ldr	r2, [pc, #172]	@ (80037e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800373c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800373e:	c313      	stmia	r3!, {r0, r1, r4}
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	4a29      	ldr	r2, [pc, #164]	@ (80037ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003748:	ca13      	ldmia	r2!, {r0, r1, r4}
 800374a:	c313      	stmia	r3!, {r0, r1, r4}
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003754:	2300      	movs	r3, #0
 8003756:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003758:	2300      	movs	r3, #0
 800375a:	637b      	str	r3, [r7, #52]	@ 0x34
 800375c:	2300      	movs	r3, #0
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	633b      	str	r3, [r7, #48]	@ 0x30
  
  tmpreg = RCC->CFGR;
 8003764:	4b22      	ldr	r3, [pc, #136]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800376a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376c:	220c      	movs	r2, #12
 800376e:	4013      	ands	r3, r2
 8003770:	2b04      	cmp	r3, #4
 8003772:	d002      	beq.n	800377a <HAL_RCC_GetSysClockFreq+0x4a>
 8003774:	2b08      	cmp	r3, #8
 8003776:	d003      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x50>
 8003778:	e02d      	b.n	80037d6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800377a:	4b1e      	ldr	r3, [pc, #120]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800377c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800377e:	e02d      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003782:	0c9b      	lsrs	r3, r3, #18
 8003784:	220f      	movs	r2, #15
 8003786:	4013      	ands	r3, r2
 8003788:	2214      	movs	r2, #20
 800378a:	18ba      	adds	r2, r7, r2
 800378c:	5cd3      	ldrb	r3, [r2, r3]
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003790:	4b17      	ldr	r3, [pc, #92]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	220f      	movs	r2, #15
 8003796:	4013      	ands	r3, r2
 8003798:	1d3a      	adds	r2, r7, #4
 800379a:	5cd3      	ldrb	r3, [r2, r3]
 800379c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800379e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037a0:	2380      	movs	r3, #128	@ 0x80
 80037a2:	025b      	lsls	r3, r3, #9
 80037a4:	4013      	ands	r3, r2
 80037a6:	d009      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037aa:	4812      	ldr	r0, [pc, #72]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037ac:	f7fc fcac 	bl	8000108 <__udivsi3>
 80037b0:	0003      	movs	r3, r0
 80037b2:	001a      	movs	r2, r3
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	4353      	muls	r3, r2
 80037b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ba:	e009      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037be:	000a      	movs	r2, r1
 80037c0:	0152      	lsls	r2, r2, #5
 80037c2:	1a52      	subs	r2, r2, r1
 80037c4:	0193      	lsls	r3, r2, #6
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	185b      	adds	r3, r3, r1
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
      }
      sysclockfreq = pllclk;
 80037d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80037d4:	e002      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037d6:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80037d8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80037da:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80037dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b00f      	add	sp, #60	@ 0x3c
 80037e4:	bd90      	pop	{r4, r7, pc}
 80037e6:	46c0      	nop			@ (mov r8, r8)
 80037e8:	0800fcd8 	.word	0x0800fcd8
 80037ec:	0800fce8 	.word	0x0800fce8
 80037f0:	40021000 	.word	0x40021000
 80037f4:	007a1200 	.word	0x007a1200

080037f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037fc:	4b02      	ldr	r3, [pc, #8]	@ (8003808 <HAL_RCC_GetHCLKFreq+0x10>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	0018      	movs	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	20000008 	.word	0x20000008

0800380c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003810:	f7ff fff2 	bl	80037f8 <HAL_RCC_GetHCLKFreq>
 8003814:	0001      	movs	r1, r0
 8003816:	4b06      	ldr	r3, [pc, #24]	@ (8003830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	2207      	movs	r2, #7
 800381e:	4013      	ands	r3, r2
 8003820:	4a04      	ldr	r2, [pc, #16]	@ (8003834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003822:	5cd3      	ldrb	r3, [r2, r3]
 8003824:	40d9      	lsrs	r1, r3
 8003826:	000b      	movs	r3, r1
}    
 8003828:	0018      	movs	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	40021000 	.word	0x40021000
 8003834:	0800ff88 	.word	0x0800ff88

08003838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e042      	b.n	80038d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	223d      	movs	r2, #61	@ 0x3d
 800384e:	5c9b      	ldrb	r3, [r3, r2]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d107      	bne.n	8003866 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	223c      	movs	r2, #60	@ 0x3c
 800385a:	2100      	movs	r1, #0
 800385c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	0018      	movs	r0, r3
 8003862:	f00b f9f9 	bl	800ec58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	223d      	movs	r2, #61	@ 0x3d
 800386a:	2102      	movs	r1, #2
 800386c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	0019      	movs	r1, r3
 8003878:	0010      	movs	r0, r2
 800387a:	f000 fd3d 	bl	80042f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2246      	movs	r2, #70	@ 0x46
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	223e      	movs	r2, #62	@ 0x3e
 800388a:	2101      	movs	r1, #1
 800388c:	5499      	strb	r1, [r3, r2]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	223f      	movs	r2, #63	@ 0x3f
 8003892:	2101      	movs	r1, #1
 8003894:	5499      	strb	r1, [r3, r2]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2240      	movs	r2, #64	@ 0x40
 800389a:	2101      	movs	r1, #1
 800389c:	5499      	strb	r1, [r3, r2]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2241      	movs	r2, #65	@ 0x41
 80038a2:	2101      	movs	r1, #1
 80038a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2242      	movs	r2, #66	@ 0x42
 80038aa:	2101      	movs	r1, #1
 80038ac:	5499      	strb	r1, [r3, r2]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2243      	movs	r2, #67	@ 0x43
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2244      	movs	r2, #68	@ 0x44
 80038ba:	2101      	movs	r1, #1
 80038bc:	5499      	strb	r1, [r3, r2]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2245      	movs	r2, #69	@ 0x45
 80038c2:	2101      	movs	r1, #1
 80038c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	223d      	movs	r2, #61	@ 0x3d
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b002      	add	sp, #8
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	223d      	movs	r2, #61	@ 0x3d
 80038e4:	5c9b      	ldrb	r3, [r3, r2]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d001      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e035      	b.n	800395c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	223d      	movs	r2, #61	@ 0x3d
 80038f4:	2102      	movs	r1, #2
 80038f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2101      	movs	r1, #1
 8003904:	430a      	orrs	r2, r1
 8003906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a15      	ldr	r2, [pc, #84]	@ (8003964 <HAL_TIM_Base_Start_IT+0x8c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0x4e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a14      	ldr	r2, [pc, #80]	@ (8003968 <HAL_TIM_Base_Start_IT+0x90>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_TIM_Base_Start_IT+0x4e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a12      	ldr	r2, [pc, #72]	@ (800396c <HAL_TIM_Base_Start_IT+0x94>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d111      	bne.n	800394a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2207      	movs	r2, #7
 800392e:	4013      	ands	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b06      	cmp	r3, #6
 8003936:	d010      	beq.n	800395a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2101      	movs	r1, #1
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003948:	e007      	b.n	800395a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2101      	movs	r1, #1
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b004      	add	sp, #16
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40000400 	.word	0x40000400
 800396c:	40014000 	.word	0x40014000

08003970 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e042      	b.n	8003a08 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	223d      	movs	r2, #61	@ 0x3d
 8003986:	5c9b      	ldrb	r3, [r3, r2]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d107      	bne.n	800399e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	223c      	movs	r2, #60	@ 0x3c
 8003992:	2100      	movs	r1, #0
 8003994:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0018      	movs	r0, r3
 800399a:	f00b f8ed 	bl	800eb78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	223d      	movs	r2, #61	@ 0x3d
 80039a2:	2102      	movs	r1, #2
 80039a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3304      	adds	r3, #4
 80039ae:	0019      	movs	r1, r3
 80039b0:	0010      	movs	r0, r2
 80039b2:	f000 fca1 	bl	80042f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2246      	movs	r2, #70	@ 0x46
 80039ba:	2101      	movs	r1, #1
 80039bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	223e      	movs	r2, #62	@ 0x3e
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	223f      	movs	r2, #63	@ 0x3f
 80039ca:	2101      	movs	r1, #1
 80039cc:	5499      	strb	r1, [r3, r2]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2240      	movs	r2, #64	@ 0x40
 80039d2:	2101      	movs	r1, #1
 80039d4:	5499      	strb	r1, [r3, r2]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2241      	movs	r2, #65	@ 0x41
 80039da:	2101      	movs	r1, #1
 80039dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2242      	movs	r2, #66	@ 0x42
 80039e2:	2101      	movs	r1, #1
 80039e4:	5499      	strb	r1, [r3, r2]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2243      	movs	r2, #67	@ 0x43
 80039ea:	2101      	movs	r1, #1
 80039ec:	5499      	strb	r1, [r3, r2]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2244      	movs	r2, #68	@ 0x44
 80039f2:	2101      	movs	r1, #1
 80039f4:	5499      	strb	r1, [r3, r2]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2245      	movs	r2, #69	@ 0x45
 80039fa:	2101      	movs	r1, #1
 80039fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	223d      	movs	r2, #61	@ 0x3d
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	0018      	movs	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d108      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x22>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	223e      	movs	r2, #62	@ 0x3e
 8003a24:	5c9b      	ldrb	r3, [r3, r2]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	1e5a      	subs	r2, r3, #1
 8003a2c:	4193      	sbcs	r3, r2
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	e01f      	b.n	8003a72 <HAL_TIM_PWM_Start+0x62>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d108      	bne.n	8003a4a <HAL_TIM_PWM_Start+0x3a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	223f      	movs	r2, #63	@ 0x3f
 8003a3c:	5c9b      	ldrb	r3, [r3, r2]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	1e5a      	subs	r2, r3, #1
 8003a44:	4193      	sbcs	r3, r2
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	e013      	b.n	8003a72 <HAL_TIM_PWM_Start+0x62>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d108      	bne.n	8003a62 <HAL_TIM_PWM_Start+0x52>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2240      	movs	r2, #64	@ 0x40
 8003a54:	5c9b      	ldrb	r3, [r3, r2]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	1e5a      	subs	r2, r3, #1
 8003a5c:	4193      	sbcs	r3, r2
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	e007      	b.n	8003a72 <HAL_TIM_PWM_Start+0x62>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2241      	movs	r2, #65	@ 0x41
 8003a66:	5c9b      	ldrb	r3, [r3, r2]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	1e5a      	subs	r2, r3, #1
 8003a6e:	4193      	sbcs	r3, r2
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e06e      	b.n	8003b58 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d104      	bne.n	8003a8a <HAL_TIM_PWM_Start+0x7a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	223e      	movs	r2, #62	@ 0x3e
 8003a84:	2102      	movs	r1, #2
 8003a86:	5499      	strb	r1, [r3, r2]
 8003a88:	e013      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xa2>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d104      	bne.n	8003a9a <HAL_TIM_PWM_Start+0x8a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	223f      	movs	r2, #63	@ 0x3f
 8003a94:	2102      	movs	r1, #2
 8003a96:	5499      	strb	r1, [r3, r2]
 8003a98:	e00b      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xa2>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d104      	bne.n	8003aaa <HAL_TIM_PWM_Start+0x9a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2240      	movs	r2, #64	@ 0x40
 8003aa4:	2102      	movs	r1, #2
 8003aa6:	5499      	strb	r1, [r3, r2]
 8003aa8:	e003      	b.n	8003ab2 <HAL_TIM_PWM_Start+0xa2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2241      	movs	r2, #65	@ 0x41
 8003aae:	2102      	movs	r1, #2
 8003ab0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6839      	ldr	r1, [r7, #0]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 fe8e 	bl	80047dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a26      	ldr	r2, [pc, #152]	@ (8003b60 <HAL_TIM_PWM_Start+0x150>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00e      	beq.n	8003ae8 <HAL_TIM_PWM_Start+0xd8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a25      	ldr	r2, [pc, #148]	@ (8003b64 <HAL_TIM_PWM_Start+0x154>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <HAL_TIM_PWM_Start+0xd8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a23      	ldr	r2, [pc, #140]	@ (8003b68 <HAL_TIM_PWM_Start+0x158>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <HAL_TIM_PWM_Start+0xd8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a22      	ldr	r2, [pc, #136]	@ (8003b6c <HAL_TIM_PWM_Start+0x15c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d101      	bne.n	8003aec <HAL_TIM_PWM_Start+0xdc>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_TIM_PWM_Start+0xde>
 8003aec:	2300      	movs	r3, #0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2180      	movs	r1, #128	@ 0x80
 8003afe:	0209      	lsls	r1, r1, #8
 8003b00:	430a      	orrs	r2, r1
 8003b02:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a15      	ldr	r2, [pc, #84]	@ (8003b60 <HAL_TIM_PWM_Start+0x150>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x112>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a17      	ldr	r2, [pc, #92]	@ (8003b70 <HAL_TIM_PWM_Start+0x160>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x112>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a11      	ldr	r2, [pc, #68]	@ (8003b64 <HAL_TIM_PWM_Start+0x154>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d111      	bne.n	8003b46 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2207      	movs	r2, #7
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	d010      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2101      	movs	r1, #1
 8003b40:	430a      	orrs	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b44:	e007      	b.n	8003b56 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2101      	movs	r1, #1
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b004      	add	sp, #16
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800
 8003b70:	40000400 	.word	0x40000400

08003b74 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	230f      	movs	r3, #15
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <HAL_TIM_PWM_Start_IT+0x2a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	223e      	movs	r2, #62	@ 0x3e
 8003b90:	5c9b      	ldrb	r3, [r3, r2]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	1e5a      	subs	r2, r3, #1
 8003b98:	4193      	sbcs	r3, r2
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	e01f      	b.n	8003bde <HAL_TIM_PWM_Start_IT+0x6a>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d108      	bne.n	8003bb6 <HAL_TIM_PWM_Start_IT+0x42>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	223f      	movs	r2, #63	@ 0x3f
 8003ba8:	5c9b      	ldrb	r3, [r3, r2]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	1e5a      	subs	r2, r3, #1
 8003bb0:	4193      	sbcs	r3, r2
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	e013      	b.n	8003bde <HAL_TIM_PWM_Start_IT+0x6a>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d108      	bne.n	8003bce <HAL_TIM_PWM_Start_IT+0x5a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2240      	movs	r2, #64	@ 0x40
 8003bc0:	5c9b      	ldrb	r3, [r3, r2]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	e007      	b.n	8003bde <HAL_TIM_PWM_Start_IT+0x6a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2241      	movs	r2, #65	@ 0x41
 8003bd2:	5c9b      	ldrb	r3, [r3, r2]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	1e5a      	subs	r2, r3, #1
 8003bda:	4193      	sbcs	r3, r2
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e0b1      	b.n	8003d4a <HAL_TIM_PWM_Start_IT+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <HAL_TIM_PWM_Start_IT+0x82>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	223e      	movs	r2, #62	@ 0x3e
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	5499      	strb	r1, [r3, r2]
 8003bf4:	e013      	b.n	8003c1e <HAL_TIM_PWM_Start_IT+0xaa>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d104      	bne.n	8003c06 <HAL_TIM_PWM_Start_IT+0x92>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	223f      	movs	r2, #63	@ 0x3f
 8003c00:	2102      	movs	r1, #2
 8003c02:	5499      	strb	r1, [r3, r2]
 8003c04:	e00b      	b.n	8003c1e <HAL_TIM_PWM_Start_IT+0xaa>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d104      	bne.n	8003c16 <HAL_TIM_PWM_Start_IT+0xa2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2240      	movs	r2, #64	@ 0x40
 8003c10:	2102      	movs	r1, #2
 8003c12:	5499      	strb	r1, [r3, r2]
 8003c14:	e003      	b.n	8003c1e <HAL_TIM_PWM_Start_IT+0xaa>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2241      	movs	r2, #65	@ 0x41
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b0c      	cmp	r3, #12
 8003c22:	d02a      	beq.n	8003c7a <HAL_TIM_PWM_Start_IT+0x106>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b0c      	cmp	r3, #12
 8003c28:	d830      	bhi.n	8003c8c <HAL_TIM_PWM_Start_IT+0x118>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d01b      	beq.n	8003c68 <HAL_TIM_PWM_Start_IT+0xf4>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d82a      	bhi.n	8003c8c <HAL_TIM_PWM_Start_IT+0x118>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_TIM_PWM_Start_IT+0xd0>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d009      	beq.n	8003c56 <HAL_TIM_PWM_Start_IT+0xe2>
 8003c42:	e023      	b.n	8003c8c <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2102      	movs	r1, #2
 8003c50:	430a      	orrs	r2, r1
 8003c52:	60da      	str	r2, [r3, #12]
      break;
 8003c54:	e01f      	b.n	8003c96 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2104      	movs	r1, #4
 8003c62:	430a      	orrs	r2, r1
 8003c64:	60da      	str	r2, [r3, #12]
      break;
 8003c66:	e016      	b.n	8003c96 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2108      	movs	r1, #8
 8003c74:	430a      	orrs	r2, r1
 8003c76:	60da      	str	r2, [r3, #12]
      break;
 8003c78:	e00d      	b.n	8003c96 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2110      	movs	r1, #16
 8003c86:	430a      	orrs	r2, r1
 8003c88:	60da      	str	r2, [r3, #12]
      break;
 8003c8a:	e004      	b.n	8003c96 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8003c8c:	230f      	movs	r3, #15
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
      break;
 8003c94:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003c96:	230f      	movs	r3, #15
 8003c98:	18fb      	adds	r3, r7, r3
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d151      	bne.n	8003d44 <HAL_TIM_PWM_Start_IT+0x1d0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6839      	ldr	r1, [r7, #0]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f000 fd97 	bl	80047dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a28      	ldr	r2, [pc, #160]	@ (8003d54 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_TIM_PWM_Start_IT+0x162>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a26      	ldr	r2, [pc, #152]	@ (8003d58 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d009      	beq.n	8003cd6 <HAL_TIM_PWM_Start_IT+0x162>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a25      	ldr	r2, [pc, #148]	@ (8003d5c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_TIM_PWM_Start_IT+0x162>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a23      	ldr	r2, [pc, #140]	@ (8003d60 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_PWM_Start_IT+0x166>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_TIM_PWM_Start_IT+0x168>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2180      	movs	r1, #128	@ 0x80
 8003cec:	0209      	lsls	r1, r1, #8
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a17      	ldr	r2, [pc, #92]	@ (8003d54 <HAL_TIM_PWM_Start_IT+0x1e0>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d009      	beq.n	8003d10 <HAL_TIM_PWM_Start_IT+0x19c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a18      	ldr	r2, [pc, #96]	@ (8003d64 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d004      	beq.n	8003d10 <HAL_TIM_PWM_Start_IT+0x19c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a13      	ldr	r2, [pc, #76]	@ (8003d58 <HAL_TIM_PWM_Start_IT+0x1e4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d111      	bne.n	8003d34 <HAL_TIM_PWM_Start_IT+0x1c0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2207      	movs	r2, #7
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d010      	beq.n	8003d44 <HAL_TIM_PWM_Start_IT+0x1d0>
      {
        __HAL_TIM_ENABLE(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d32:	e007      	b.n	8003d44 <HAL_TIM_PWM_Start_IT+0x1d0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2101      	movs	r1, #1
 8003d40:	430a      	orrs	r2, r1
 8003d42:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003d44:	230f      	movs	r3, #15
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	781b      	ldrb	r3, [r3, #0]
}
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b004      	add	sp, #16
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40014400 	.word	0x40014400
 8003d60:	40014800 	.word	0x40014800
 8003d64:	40000400 	.word	0x40000400

08003d68 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d72:	230f      	movs	r3, #15
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b0c      	cmp	r3, #12
 8003d7e:	d02a      	beq.n	8003dd6 <HAL_TIM_PWM_Stop_IT+0x6e>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d830      	bhi.n	8003de8 <HAL_TIM_PWM_Stop_IT+0x80>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d01b      	beq.n	8003dc4 <HAL_TIM_PWM_Stop_IT+0x5c>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d82a      	bhi.n	8003de8 <HAL_TIM_PWM_Stop_IT+0x80>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_TIM_PWM_Stop_IT+0x38>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d009      	beq.n	8003db2 <HAL_TIM_PWM_Stop_IT+0x4a>
 8003d9e:	e023      	b.n	8003de8 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2102      	movs	r1, #2
 8003dac:	438a      	bics	r2, r1
 8003dae:	60da      	str	r2, [r3, #12]
      break;
 8003db0:	e01f      	b.n	8003df2 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2104      	movs	r1, #4
 8003dbe:	438a      	bics	r2, r1
 8003dc0:	60da      	str	r2, [r3, #12]
      break;
 8003dc2:	e016      	b.n	8003df2 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2108      	movs	r1, #8
 8003dd0:	438a      	bics	r2, r1
 8003dd2:	60da      	str	r2, [r3, #12]
      break;
 8003dd4:	e00d      	b.n	8003df2 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2110      	movs	r1, #16
 8003de2:	438a      	bics	r2, r1
 8003de4:	60da      	str	r2, [r3, #12]
      break;
 8003de6:	e004      	b.n	8003df2 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8003de8:	230f      	movs	r3, #15
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
      break;
 8003df0:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003df2:	230f      	movs	r3, #15
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d000      	beq.n	8003dfe <HAL_TIM_PWM_Stop_IT+0x96>
 8003dfc:	e063      	b.n	8003ec6 <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6839      	ldr	r1, [r7, #0]
 8003e04:	2200      	movs	r2, #0
 8003e06:	0018      	movs	r0, r3
 8003e08:	f000 fce8 	bl	80047dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a30      	ldr	r2, [pc, #192]	@ (8003ed4 <HAL_TIM_PWM_Stop_IT+0x16c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00e      	beq.n	8003e34 <HAL_TIM_PWM_Stop_IT+0xcc>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ed8 <HAL_TIM_PWM_Stop_IT+0x170>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d009      	beq.n	8003e34 <HAL_TIM_PWM_Stop_IT+0xcc>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a2d      	ldr	r2, [pc, #180]	@ (8003edc <HAL_TIM_PWM_Stop_IT+0x174>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d004      	beq.n	8003e34 <HAL_TIM_PWM_Stop_IT+0xcc>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee0 <HAL_TIM_PWM_Stop_IT+0x178>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_TIM_PWM_Stop_IT+0xd0>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <HAL_TIM_PWM_Stop_IT+0xd2>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d013      	beq.n	8003e66 <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4a27      	ldr	r2, [pc, #156]	@ (8003ee4 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	d10d      	bne.n	8003e66 <HAL_TIM_PWM_Stop_IT+0xfe>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	4a25      	ldr	r2, [pc, #148]	@ (8003ee8 <HAL_TIM_PWM_Stop_IT+0x180>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	d107      	bne.n	8003e66 <HAL_TIM_PWM_Stop_IT+0xfe>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4922      	ldr	r1, [pc, #136]	@ (8003eec <HAL_TIM_PWM_Stop_IT+0x184>)
 8003e62:	400a      	ands	r2, r1
 8003e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee4 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d10d      	bne.n	8003e8e <HAL_TIM_PWM_Stop_IT+0x126>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee8 <HAL_TIM_PWM_Stop_IT+0x180>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d107      	bne.n	8003e8e <HAL_TIM_PWM_Stop_IT+0x126>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2101      	movs	r1, #1
 8003e8a:	438a      	bics	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <HAL_TIM_PWM_Stop_IT+0x136>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	223e      	movs	r2, #62	@ 0x3e
 8003e98:	2101      	movs	r1, #1
 8003e9a:	5499      	strb	r1, [r3, r2]
 8003e9c:	e013      	b.n	8003ec6 <HAL_TIM_PWM_Stop_IT+0x15e>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Stop_IT+0x146>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	223f      	movs	r2, #63	@ 0x3f
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	5499      	strb	r1, [r3, r2]
 8003eac:	e00b      	b.n	8003ec6 <HAL_TIM_PWM_Stop_IT+0x15e>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d104      	bne.n	8003ebe <HAL_TIM_PWM_Stop_IT+0x156>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2240      	movs	r2, #64	@ 0x40
 8003eb8:	2101      	movs	r1, #1
 8003eba:	5499      	strb	r1, [r3, r2]
 8003ebc:	e003      	b.n	8003ec6 <HAL_TIM_PWM_Stop_IT+0x15e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2241      	movs	r2, #65	@ 0x41
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8003ec6:	230f      	movs	r3, #15
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	781b      	ldrb	r3, [r3, #0]
}
 8003ecc:	0018      	movs	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b004      	add	sp, #16
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40014400 	.word	0x40014400
 8003ee0:	40014800 	.word	0x40014800
 8003ee4:	00001111 	.word	0x00001111
 8003ee8:	00000444 	.word	0x00000444
 8003eec:	ffff7fff 	.word	0xffff7fff

08003ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2202      	movs	r2, #2
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d124      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d11d      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2203      	movs	r2, #3
 8003f1a:	4252      	negs	r2, r2
 8003f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	0018      	movs	r0, r3
 8003f34:	f000 f9c8 	bl	80042c8 <HAL_TIM_IC_CaptureCallback>
 8003f38:	e007      	b.n	8003f4a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f000 f9bb 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	0018      	movs	r0, r3
 8003f46:	f000 f9c7 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2204      	movs	r2, #4
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d125      	bne.n	8003faa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2204      	movs	r2, #4
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d11e      	bne.n	8003faa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2205      	movs	r2, #5
 8003f72:	4252      	negs	r2, r2
 8003f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2202      	movs	r2, #2
 8003f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	23c0      	movs	r3, #192	@ 0xc0
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4013      	ands	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 f99b 	bl	80042c8 <HAL_TIM_IC_CaptureCallback>
 8003f92:	e007      	b.n	8003fa4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f000 f98e 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f000 f99a 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d124      	bne.n	8004002 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2208      	movs	r2, #8
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d11d      	bne.n	8004002 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2209      	movs	r2, #9
 8003fcc:	4252      	negs	r2, r2
 8003fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	2203      	movs	r2, #3
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f000 f96f 	bl	80042c8 <HAL_TIM_IC_CaptureCallback>
 8003fea:	e007      	b.n	8003ffc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f000 f962 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f000 f96e 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2210      	movs	r2, #16
 800400a:	4013      	ands	r3, r2
 800400c:	2b10      	cmp	r3, #16
 800400e:	d125      	bne.n	800405c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	2210      	movs	r2, #16
 8004018:	4013      	ands	r3, r2
 800401a:	2b10      	cmp	r3, #16
 800401c:	d11e      	bne.n	800405c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2211      	movs	r2, #17
 8004024:	4252      	negs	r2, r2
 8004026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2208      	movs	r2, #8
 800402c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	23c0      	movs	r3, #192	@ 0xc0
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4013      	ands	r3, r2
 800403a:	d004      	beq.n	8004046 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	0018      	movs	r0, r3
 8004040:	f000 f942 	bl	80042c8 <HAL_TIM_IC_CaptureCallback>
 8004044:	e007      	b.n	8004056 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	0018      	movs	r0, r3
 800404a:	f000 f935 	bl	80042b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	0018      	movs	r0, r3
 8004052:	f000 f941 	bl	80042d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2201      	movs	r2, #1
 8004064:	4013      	ands	r3, r2
 8004066:	2b01      	cmp	r3, #1
 8004068:	d10f      	bne.n	800408a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	4013      	ands	r3, r2
 8004074:	2b01      	cmp	r3, #1
 8004076:	d108      	bne.n	800408a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2202      	movs	r2, #2
 800407e:	4252      	negs	r2, r2
 8004080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0018      	movs	r0, r3
 8004086:	f000 f90f 	bl	80042a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2280      	movs	r2, #128	@ 0x80
 8004092:	4013      	ands	r3, r2
 8004094:	2b80      	cmp	r3, #128	@ 0x80
 8004096:	d10f      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2280      	movs	r2, #128	@ 0x80
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b80      	cmp	r3, #128	@ 0x80
 80040a4:	d108      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2281      	movs	r2, #129	@ 0x81
 80040ac:	4252      	negs	r2, r2
 80040ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 fc74 	bl	80049a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2240      	movs	r2, #64	@ 0x40
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b40      	cmp	r3, #64	@ 0x40
 80040c4:	d10f      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2240      	movs	r2, #64	@ 0x40
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b40      	cmp	r3, #64	@ 0x40
 80040d2:	d108      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2241      	movs	r2, #65	@ 0x41
 80040da:	4252      	negs	r2, r2
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f000 f901 	bl	80042e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	2220      	movs	r2, #32
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d10f      	bne.n	8004114 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d108      	bne.n	8004114 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2221      	movs	r2, #33	@ 0x21
 8004108:	4252      	negs	r2, r2
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	0018      	movs	r0, r3
 8004110:	f000 fc3e 	bl	8004990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004114:	46c0      	nop			@ (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	b002      	add	sp, #8
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2317      	movs	r3, #23
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	223c      	movs	r2, #60	@ 0x3c
 8004134:	5c9b      	ldrb	r3, [r3, r2]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_TIM_PWM_ConfigChannel+0x22>
 800413a:	2302      	movs	r3, #2
 800413c:	e0ad      	b.n	800429a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	223c      	movs	r2, #60	@ 0x3c
 8004142:	2101      	movs	r1, #1
 8004144:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b0c      	cmp	r3, #12
 800414a:	d100      	bne.n	800414e <HAL_TIM_PWM_ConfigChannel+0x32>
 800414c:	e076      	b.n	800423c <HAL_TIM_PWM_ConfigChannel+0x120>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d900      	bls.n	8004156 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004154:	e095      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d04e      	beq.n	80041fa <HAL_TIM_PWM_ConfigChannel+0xde>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b08      	cmp	r3, #8
 8004160:	d900      	bls.n	8004164 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004162:	e08e      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_PWM_ConfigChannel+0x56>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b04      	cmp	r3, #4
 800416e:	d021      	beq.n	80041b4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004170:	e087      	b.n	8004282 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	0011      	movs	r1, r2
 800417a:	0018      	movs	r0, r3
 800417c:	f000 f932 	bl	80043e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2108      	movs	r1, #8
 800418c:	430a      	orrs	r2, r1
 800418e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2104      	movs	r1, #4
 800419c:	438a      	bics	r2, r1
 800419e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6999      	ldr	r1, [r3, #24]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691a      	ldr	r2, [r3, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	619a      	str	r2, [r3, #24]
      break;
 80041b2:	e06b      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	0011      	movs	r1, r2
 80041bc:	0018      	movs	r0, r3
 80041be:	f000 f999 	bl	80044f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2180      	movs	r1, #128	@ 0x80
 80041ce:	0109      	lsls	r1, r1, #4
 80041d0:	430a      	orrs	r2, r1
 80041d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4931      	ldr	r1, [pc, #196]	@ (80042a4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80041e0:	400a      	ands	r2, r1
 80041e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6999      	ldr	r1, [r3, #24]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	021a      	lsls	r2, r3, #8
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	619a      	str	r2, [r3, #24]
      break;
 80041f8:	e048      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	0011      	movs	r1, r2
 8004202:	0018      	movs	r0, r3
 8004204:	f000 f9fa 	bl	80045fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2108      	movs	r1, #8
 8004214:	430a      	orrs	r2, r1
 8004216:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69da      	ldr	r2, [r3, #28]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2104      	movs	r1, #4
 8004224:	438a      	bics	r2, r1
 8004226:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69d9      	ldr	r1, [r3, #28]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	61da      	str	r2, [r3, #28]
      break;
 800423a:	e027      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	0011      	movs	r1, r2
 8004244:	0018      	movs	r0, r3
 8004246:	f000 fa5f 	bl	8004708 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2180      	movs	r1, #128	@ 0x80
 8004256:	0109      	lsls	r1, r1, #4
 8004258:	430a      	orrs	r2, r1
 800425a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	490f      	ldr	r1, [pc, #60]	@ (80042a4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004268:	400a      	ands	r2, r1
 800426a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69d9      	ldr	r1, [r3, #28]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	021a      	lsls	r2, r3, #8
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	61da      	str	r2, [r3, #28]
      break;
 8004280:	e004      	b.n	800428c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004282:	2317      	movs	r3, #23
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	2201      	movs	r2, #1
 8004288:	701a      	strb	r2, [r3, #0]
      break;
 800428a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	223c      	movs	r2, #60	@ 0x3c
 8004290:	2100      	movs	r1, #0
 8004292:	5499      	strb	r1, [r3, r2]

  return status;
 8004294:	2317      	movs	r3, #23
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	781b      	ldrb	r3, [r3, #0]
}
 800429a:	0018      	movs	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	b006      	add	sp, #24
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			@ (mov r8, r8)
 80042a4:	fffffbff 	.word	0xfffffbff

080042a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042b0:	46c0      	nop			@ (mov r8, r8)
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b002      	add	sp, #8
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042c0:	46c0      	nop			@ (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b002      	add	sp, #8
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042d0:	46c0      	nop			@ (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b002      	add	sp, #8
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042e0:	46c0      	nop			@ (mov r8, r8)
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b002      	add	sp, #8
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042f0:	46c0      	nop			@ (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b002      	add	sp, #8
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a2f      	ldr	r2, [pc, #188]	@ (80043c8 <TIM_Base_SetConfig+0xd0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d003      	beq.n	8004318 <TIM_Base_SetConfig+0x20>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a2e      	ldr	r2, [pc, #184]	@ (80043cc <TIM_Base_SetConfig+0xd4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d108      	bne.n	800432a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2270      	movs	r2, #112	@ 0x70
 800431c:	4393      	bics	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a26      	ldr	r2, [pc, #152]	@ (80043c8 <TIM_Base_SetConfig+0xd0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <TIM_Base_SetConfig+0x62>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a25      	ldr	r2, [pc, #148]	@ (80043cc <TIM_Base_SetConfig+0xd4>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00f      	beq.n	800435a <TIM_Base_SetConfig+0x62>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a24      	ldr	r2, [pc, #144]	@ (80043d0 <TIM_Base_SetConfig+0xd8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00b      	beq.n	800435a <TIM_Base_SetConfig+0x62>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a23      	ldr	r2, [pc, #140]	@ (80043d4 <TIM_Base_SetConfig+0xdc>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d007      	beq.n	800435a <TIM_Base_SetConfig+0x62>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a22      	ldr	r2, [pc, #136]	@ (80043d8 <TIM_Base_SetConfig+0xe0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d003      	beq.n	800435a <TIM_Base_SetConfig+0x62>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a21      	ldr	r2, [pc, #132]	@ (80043dc <TIM_Base_SetConfig+0xe4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d108      	bne.n	800436c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4a20      	ldr	r2, [pc, #128]	@ (80043e0 <TIM_Base_SetConfig+0xe8>)
 800435e:	4013      	ands	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2280      	movs	r2, #128	@ 0x80
 8004370:	4393      	bics	r3, r2
 8004372:	001a      	movs	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a0c      	ldr	r2, [pc, #48]	@ (80043c8 <TIM_Base_SetConfig+0xd0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_Base_SetConfig+0xba>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a0d      	ldr	r2, [pc, #52]	@ (80043d4 <TIM_Base_SetConfig+0xdc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <TIM_Base_SetConfig+0xba>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a0c      	ldr	r2, [pc, #48]	@ (80043d8 <TIM_Base_SetConfig+0xe0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_Base_SetConfig+0xba>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a0b      	ldr	r2, [pc, #44]	@ (80043dc <TIM_Base_SetConfig+0xe4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d103      	bne.n	80043ba <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	615a      	str	r2, [r3, #20]
}
 80043c0:	46c0      	nop			@ (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b004      	add	sp, #16
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40002000 	.word	0x40002000
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40014400 	.word	0x40014400
 80043dc:	40014800 	.word	0x40014800
 80043e0:	fffffcff 	.word	0xfffffcff

080043e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	2201      	movs	r2, #1
 80043f4:	4393      	bics	r3, r2
 80043f6:	001a      	movs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2270      	movs	r2, #112	@ 0x70
 8004412:	4393      	bics	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2203      	movs	r2, #3
 800441a:	4393      	bics	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2202      	movs	r2, #2
 800442c:	4393      	bics	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a27      	ldr	r2, [pc, #156]	@ (80044dc <TIM_OC1_SetConfig+0xf8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00b      	beq.n	800445a <TIM_OC1_SetConfig+0x76>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a26      	ldr	r2, [pc, #152]	@ (80044e0 <TIM_OC1_SetConfig+0xfc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <TIM_OC1_SetConfig+0x76>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a25      	ldr	r2, [pc, #148]	@ (80044e4 <TIM_OC1_SetConfig+0x100>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_OC1_SetConfig+0x76>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a24      	ldr	r2, [pc, #144]	@ (80044e8 <TIM_OC1_SetConfig+0x104>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10c      	bne.n	8004474 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2208      	movs	r2, #8
 800445e:	4393      	bics	r3, r2
 8004460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2204      	movs	r2, #4
 8004470:	4393      	bics	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a19      	ldr	r2, [pc, #100]	@ (80044dc <TIM_OC1_SetConfig+0xf8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00b      	beq.n	8004494 <TIM_OC1_SetConfig+0xb0>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a18      	ldr	r2, [pc, #96]	@ (80044e0 <TIM_OC1_SetConfig+0xfc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d007      	beq.n	8004494 <TIM_OC1_SetConfig+0xb0>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a17      	ldr	r2, [pc, #92]	@ (80044e4 <TIM_OC1_SetConfig+0x100>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d003      	beq.n	8004494 <TIM_OC1_SetConfig+0xb0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a16      	ldr	r2, [pc, #88]	@ (80044e8 <TIM_OC1_SetConfig+0x104>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d111      	bne.n	80044b8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4a15      	ldr	r2, [pc, #84]	@ (80044ec <TIM_OC1_SetConfig+0x108>)
 8004498:	4013      	ands	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4a14      	ldr	r2, [pc, #80]	@ (80044f0 <TIM_OC1_SetConfig+0x10c>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b006      	add	sp, #24
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	46c0      	nop			@ (mov r8, r8)
 80044dc:	40012c00 	.word	0x40012c00
 80044e0:	40014000 	.word	0x40014000
 80044e4:	40014400 	.word	0x40014400
 80044e8:	40014800 	.word	0x40014800
 80044ec:	fffffeff 	.word	0xfffffeff
 80044f0:	fffffdff 	.word	0xfffffdff

080044f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	2210      	movs	r2, #16
 8004504:	4393      	bics	r3, r2
 8004506:	001a      	movs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a2e      	ldr	r2, [pc, #184]	@ (80045dc <TIM_OC2_SetConfig+0xe8>)
 8004522:	4013      	ands	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a2d      	ldr	r2, [pc, #180]	@ (80045e0 <TIM_OC2_SetConfig+0xec>)
 800452a:	4013      	ands	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2220      	movs	r2, #32
 800453e:	4393      	bics	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a24      	ldr	r2, [pc, #144]	@ (80045e4 <TIM_OC2_SetConfig+0xf0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d10d      	bne.n	8004572 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2280      	movs	r2, #128	@ 0x80
 800455a:	4393      	bics	r3, r2
 800455c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2240      	movs	r2, #64	@ 0x40
 800456e:	4393      	bics	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a1b      	ldr	r2, [pc, #108]	@ (80045e4 <TIM_OC2_SetConfig+0xf0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00b      	beq.n	8004592 <TIM_OC2_SetConfig+0x9e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a1a      	ldr	r2, [pc, #104]	@ (80045e8 <TIM_OC2_SetConfig+0xf4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d007      	beq.n	8004592 <TIM_OC2_SetConfig+0x9e>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a19      	ldr	r2, [pc, #100]	@ (80045ec <TIM_OC2_SetConfig+0xf8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d003      	beq.n	8004592 <TIM_OC2_SetConfig+0x9e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a18      	ldr	r2, [pc, #96]	@ (80045f0 <TIM_OC2_SetConfig+0xfc>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d113      	bne.n	80045ba <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	4a17      	ldr	r2, [pc, #92]	@ (80045f4 <TIM_OC2_SetConfig+0x100>)
 8004596:	4013      	ands	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4a16      	ldr	r2, [pc, #88]	@ (80045f8 <TIM_OC2_SetConfig+0x104>)
 800459e:	4013      	ands	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	621a      	str	r2, [r3, #32]
}
 80045d4:	46c0      	nop			@ (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b006      	add	sp, #24
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	ffff8fff 	.word	0xffff8fff
 80045e0:	fffffcff 	.word	0xfffffcff
 80045e4:	40012c00 	.word	0x40012c00
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40014400 	.word	0x40014400
 80045f0:	40014800 	.word	0x40014800
 80045f4:	fffffbff 	.word	0xfffffbff
 80045f8:	fffff7ff 	.word	0xfffff7ff

080045fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	4a35      	ldr	r2, [pc, #212]	@ (80046e0 <TIM_OC3_SetConfig+0xe4>)
 800460c:	401a      	ands	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2270      	movs	r2, #112	@ 0x70
 8004628:	4393      	bics	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2203      	movs	r2, #3
 8004630:	4393      	bics	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	4a28      	ldr	r2, [pc, #160]	@ (80046e4 <TIM_OC3_SetConfig+0xe8>)
 8004642:	4013      	ands	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a24      	ldr	r2, [pc, #144]	@ (80046e8 <TIM_OC3_SetConfig+0xec>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d10d      	bne.n	8004676 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	4a23      	ldr	r2, [pc, #140]	@ (80046ec <TIM_OC3_SetConfig+0xf0>)
 800465e:	4013      	ands	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	4a1f      	ldr	r2, [pc, #124]	@ (80046f0 <TIM_OC3_SetConfig+0xf4>)
 8004672:	4013      	ands	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1b      	ldr	r2, [pc, #108]	@ (80046e8 <TIM_OC3_SetConfig+0xec>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00b      	beq.n	8004696 <TIM_OC3_SetConfig+0x9a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1c      	ldr	r2, [pc, #112]	@ (80046f4 <TIM_OC3_SetConfig+0xf8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d007      	beq.n	8004696 <TIM_OC3_SetConfig+0x9a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1b      	ldr	r2, [pc, #108]	@ (80046f8 <TIM_OC3_SetConfig+0xfc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d003      	beq.n	8004696 <TIM_OC3_SetConfig+0x9a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1a      	ldr	r2, [pc, #104]	@ (80046fc <TIM_OC3_SetConfig+0x100>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d113      	bne.n	80046be <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4a19      	ldr	r2, [pc, #100]	@ (8004700 <TIM_OC3_SetConfig+0x104>)
 800469a:	4013      	ands	r3, r2
 800469c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4a18      	ldr	r2, [pc, #96]	@ (8004704 <TIM_OC3_SetConfig+0x108>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	621a      	str	r2, [r3, #32]
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	b006      	add	sp, #24
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	fffffeff 	.word	0xfffffeff
 80046e4:	fffffdff 	.word	0xfffffdff
 80046e8:	40012c00 	.word	0x40012c00
 80046ec:	fffff7ff 	.word	0xfffff7ff
 80046f0:	fffffbff 	.word	0xfffffbff
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40014400 	.word	0x40014400
 80046fc:	40014800 	.word	0x40014800
 8004700:	ffffefff 	.word	0xffffefff
 8004704:	ffffdfff 	.word	0xffffdfff

08004708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	4a28      	ldr	r2, [pc, #160]	@ (80047b8 <TIM_OC4_SetConfig+0xb0>)
 8004718:	401a      	ands	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a22      	ldr	r2, [pc, #136]	@ (80047bc <TIM_OC4_SetConfig+0xb4>)
 8004734:	4013      	ands	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a21      	ldr	r2, [pc, #132]	@ (80047c0 <TIM_OC4_SetConfig+0xb8>)
 800473c:	4013      	ands	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4a1d      	ldr	r2, [pc, #116]	@ (80047c4 <TIM_OC4_SetConfig+0xbc>)
 8004750:	4013      	ands	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	031b      	lsls	r3, r3, #12
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <TIM_OC4_SetConfig+0xc0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00b      	beq.n	8004780 <TIM_OC4_SetConfig+0x78>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a18      	ldr	r2, [pc, #96]	@ (80047cc <TIM_OC4_SetConfig+0xc4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d007      	beq.n	8004780 <TIM_OC4_SetConfig+0x78>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a17      	ldr	r2, [pc, #92]	@ (80047d0 <TIM_OC4_SetConfig+0xc8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_OC4_SetConfig+0x78>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a16      	ldr	r2, [pc, #88]	@ (80047d4 <TIM_OC4_SetConfig+0xcc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d109      	bne.n	8004794 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	4a15      	ldr	r2, [pc, #84]	@ (80047d8 <TIM_OC4_SetConfig+0xd0>)
 8004784:	4013      	ands	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	019b      	lsls	r3, r3, #6
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b006      	add	sp, #24
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	ffffefff 	.word	0xffffefff
 80047bc:	ffff8fff 	.word	0xffff8fff
 80047c0:	fffffcff 	.word	0xfffffcff
 80047c4:	ffffdfff 	.word	0xffffdfff
 80047c8:	40012c00 	.word	0x40012c00
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40014400 	.word	0x40014400
 80047d4:	40014800 	.word	0x40014800
 80047d8:	ffffbfff 	.word	0xffffbfff

080047dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	221f      	movs	r2, #31
 80047ec:	4013      	ands	r3, r2
 80047ee:	2201      	movs	r2, #1
 80047f0:	409a      	lsls	r2, r3
 80047f2:	0013      	movs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	43d2      	mvns	r2, r2
 80047fe:	401a      	ands	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1a      	ldr	r2, [r3, #32]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	211f      	movs	r1, #31
 800480c:	400b      	ands	r3, r1
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4099      	lsls	r1, r3
 8004812:	000b      	movs	r3, r1
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	46bd      	mov	sp, r7
 800481e:	b006      	add	sp, #24
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	223c      	movs	r2, #60	@ 0x3c
 8004832:	5c9b      	ldrb	r3, [r3, r2]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004838:	2302      	movs	r3, #2
 800483a:	e041      	b.n	80048c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	223c      	movs	r2, #60	@ 0x3c
 8004840:	2101      	movs	r1, #1
 8004842:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	223d      	movs	r2, #61	@ 0x3d
 8004848:	2102      	movs	r1, #2
 800484a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2270      	movs	r2, #112	@ 0x70
 8004860:	4393      	bics	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a13      	ldr	r2, [pc, #76]	@ (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d009      	beq.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a11      	ldr	r2, [pc, #68]	@ (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a10      	ldr	r2, [pc, #64]	@ (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d10c      	bne.n	80048ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2280      	movs	r2, #128	@ 0x80
 8004898:	4393      	bics	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	223d      	movs	r2, #61	@ 0x3d
 80048b2:	2101      	movs	r1, #1
 80048b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	223c      	movs	r2, #60	@ 0x3c
 80048ba:	2100      	movs	r1, #0
 80048bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	0018      	movs	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b004      	add	sp, #16
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40014000 	.word	0x40014000

080048d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	223c      	movs	r2, #60	@ 0x3c
 80048e6:	5c9b      	ldrb	r3, [r3, r2]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e03e      	b.n	800496e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	223c      	movs	r2, #60	@ 0x3c
 80048f4:	2101      	movs	r1, #1
 80048f6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	22ff      	movs	r2, #255	@ 0xff
 80048fc:	4393      	bics	r3, r2
 80048fe:	001a      	movs	r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a1b      	ldr	r2, [pc, #108]	@ (8004978 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800490c:	401a      	ands	r2, r3
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a18      	ldr	r2, [pc, #96]	@ (800497c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800491a:	401a      	ands	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a16      	ldr	r2, [pc, #88]	@ (8004980 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004928:	401a      	ands	r2, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a13      	ldr	r2, [pc, #76]	@ (8004984 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004936:	401a      	ands	r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4a11      	ldr	r2, [pc, #68]	@ (8004988 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004944:	401a      	ands	r2, r3
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a0e      	ldr	r2, [pc, #56]	@ (800498c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004952:	401a      	ands	r2, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	223c      	movs	r2, #60	@ 0x3c
 8004968:	2100      	movs	r1, #0
 800496a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	0018      	movs	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	b004      	add	sp, #16
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	fffffcff 	.word	0xfffffcff
 800497c:	fffffbff 	.word	0xfffffbff
 8004980:	fffff7ff 	.word	0xfffff7ff
 8004984:	ffffefff 	.word	0xffffefff
 8004988:	ffffdfff 	.word	0xffffdfff
 800498c:	ffffbfff 	.word	0xffffbfff

08004990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004998:	46c0      	nop			@ (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	b002      	add	sp, #8
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049a8:	46c0      	nop			@ (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b002      	add	sp, #8
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e044      	b.n	8004a4c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2274      	movs	r2, #116	@ 0x74
 80049ce:	2100      	movs	r1, #0
 80049d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	0018      	movs	r0, r3
 80049d6:	f00b f887 	bl	800fae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2224      	movs	r2, #36	@ 0x24
 80049de:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2101      	movs	r1, #1
 80049ec:	438a      	bics	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	0018      	movs	r0, r3
 80049f4:	f000 fc18 	bl	8005228 <UART_SetConfig>
 80049f8:	0003      	movs	r3, r0
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e024      	b.n	8004a4c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f000 fd4b 	bl	80054a8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	490d      	ldr	r1, [pc, #52]	@ (8004a54 <HAL_UART_Init+0xa4>)
 8004a1e:	400a      	ands	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2108      	movs	r1, #8
 8004a2e:	438a      	bics	r2, r1
 8004a30:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	0018      	movs	r0, r3
 8004a46:	f000 fde3 	bl	8005610 <UART_CheckIdleState>
 8004a4a:	0003      	movs	r3, r0
}
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b002      	add	sp, #8
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	fffff7ff 	.word	0xfffff7ff

08004a58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	1dbb      	adds	r3, r7, #6
 8004a64:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d000      	beq.n	8004a70 <HAL_UART_Transmit_DMA+0x18>
 8004a6e:	e08a      	b.n	8004b86 <HAL_UART_Transmit_DMA+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_UART_Transmit_DMA+0x26>
 8004a76:	1dbb      	adds	r3, r7, #6
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e082      	b.n	8004b88 <HAL_UART_Transmit_DMA+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	015b      	lsls	r3, r3, #5
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d109      	bne.n	8004aa2 <HAL_UART_Transmit_DMA+0x4a>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d105      	bne.n	8004aa2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d001      	beq.n	8004aa2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e072      	b.n	8004b88 <HAL_UART_Transmit_DMA+0x130>
      }
    }

    __HAL_LOCK(huart);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2274      	movs	r2, #116	@ 0x74
 8004aa6:	5c9b      	ldrb	r3, [r3, r2]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d101      	bne.n	8004ab0 <HAL_UART_Transmit_DMA+0x58>
 8004aac:	2302      	movs	r3, #2
 8004aae:	e06b      	b.n	8004b88 <HAL_UART_Transmit_DMA+0x130>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2274      	movs	r2, #116	@ 0x74
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1dba      	adds	r2, r7, #6
 8004ac2:	2150      	movs	r1, #80	@ 0x50
 8004ac4:	8812      	ldrh	r2, [r2, #0]
 8004ac6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1dba      	adds	r2, r7, #6
 8004acc:	2152      	movs	r1, #82	@ 0x52
 8004ace:	8812      	ldrh	r2, [r2, #0]
 8004ad0:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2280      	movs	r2, #128	@ 0x80
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2221      	movs	r2, #33	@ 0x21
 8004ade:	679a      	str	r2, [r3, #120]	@ 0x78

    if (huart->hdmatx != NULL)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d02b      	beq.n	8004b40 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aec:	4a28      	ldr	r2, [pc, #160]	@ (8004b90 <HAL_UART_Transmit_DMA+0x138>)
 8004aee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004af4:	4a27      	ldr	r2, [pc, #156]	@ (8004b94 <HAL_UART_Transmit_DMA+0x13c>)
 8004af6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004afc:	4a26      	ldr	r2, [pc, #152]	@ (8004b98 <HAL_UART_Transmit_DMA+0x140>)
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b04:	2200      	movs	r2, #0
 8004b06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b10:	0019      	movs	r1, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3328      	adds	r3, #40	@ 0x28
 8004b18:	001a      	movs	r2, r3
 8004b1a:	1dbb      	adds	r3, r7, #6
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	f7fd fdd7 	bl	80026d0 <HAL_DMA_Start_IT>
 8004b22:	1e03      	subs	r3, r0, #0
 8004b24:	d00c      	beq.n	8004b40 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2280      	movs	r2, #128	@ 0x80
 8004b2a:	2110      	movs	r1, #16
 8004b2c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2274      	movs	r2, #116	@ 0x74
 8004b32:	2100      	movs	r1, #0
 8004b34:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	679a      	str	r2, [r3, #120]	@ 0x78

        return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e023      	b.n	8004b88 <HAL_UART_Transmit_DMA+0x130>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2240      	movs	r2, #64	@ 0x40
 8004b46:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2274      	movs	r2, #116	@ 0x74
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b50:	f3ef 8310 	mrs	r3, PRIMASK
 8004b54:	613b      	str	r3, [r7, #16]
  return(result);
 8004b56:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f383 8810 	msr	PRIMASK, r3
}
 8004b64:	46c0      	nop			@ (mov r8, r8)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2180      	movs	r1, #128	@ 0x80
 8004b72:	430a      	orrs	r2, r1
 8004b74:	609a      	str	r2, [r3, #8]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f383 8810 	msr	PRIMASK, r3
}
 8004b80:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e000      	b.n	8004b88 <HAL_UART_Transmit_DMA+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
  }
}
 8004b88:	0018      	movs	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b008      	add	sp, #32
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	08005a79 	.word	0x08005a79
 8004b94:	08005b0d 	.word	0x08005b0d
 8004b98:	08005c8d 	.word	0x08005c8d

08004b9c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	1dbb      	adds	r3, r7, #6
 8004ba8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d150      	bne.n	8004c54 <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_UART_Receive_DMA+0x24>
 8004bb8:	1dbb      	adds	r3, r7, #6
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e048      	b.n	8004c56 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	2380      	movs	r3, #128	@ 0x80
 8004bca:	015b      	lsls	r3, r3, #5
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d109      	bne.n	8004be4 <HAL_UART_Receive_DMA+0x48>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d105      	bne.n	8004be4 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d001      	beq.n	8004be4 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e038      	b.n	8004c56 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2274      	movs	r2, #116	@ 0x74
 8004be8:	5c9b      	ldrb	r3, [r3, r2]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_UART_Receive_DMA+0x56>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e031      	b.n	8004c56 <HAL_UART_Receive_DMA+0xba>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2274      	movs	r2, #116	@ 0x74
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	041b      	lsls	r3, r3, #16
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	d019      	beq.n	8004c42 <HAL_UART_Receive_DMA+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c12:	613b      	str	r3, [r7, #16]
  return(result);
 8004c14:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	2301      	movs	r3, #1
 8004c1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f383 8810 	msr	PRIMASK, r3
}
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2180      	movs	r1, #128	@ 0x80
 8004c30:	04c9      	lsls	r1, r1, #19
 8004c32:	430a      	orrs	r2, r1
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f383 8810 	msr	PRIMASK, r3
}
 8004c40:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c42:	1dbb      	adds	r3, r7, #6
 8004c44:	881a      	ldrh	r2, [r3, #0]
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f000 fdec 	bl	8005828 <UART_Start_Receive_DMA>
 8004c50:	0003      	movs	r3, r0
 8004c52:	e000      	b.n	8004c56 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004c54:	2302      	movs	r3, #2
  }
}
 8004c56:	0018      	movs	r0, r3
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b008      	add	sp, #32
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c60:	b590      	push	{r4, r7, lr}
 8004c62:	b0ab      	sub	sp, #172	@ 0xac
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	22a4      	movs	r2, #164	@ 0xa4
 8004c70:	18b9      	adds	r1, r7, r2
 8004c72:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	20a0      	movs	r0, #160	@ 0xa0
 8004c7c:	1839      	adds	r1, r7, r0
 8004c7e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	219c      	movs	r1, #156	@ 0x9c
 8004c88:	1879      	adds	r1, r7, r1
 8004c8a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c8c:	0011      	movs	r1, r2
 8004c8e:	18bb      	adds	r3, r7, r2
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a99      	ldr	r2, [pc, #612]	@ (8004ef8 <HAL_UART_IRQHandler+0x298>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	2298      	movs	r2, #152	@ 0x98
 8004c98:	18bc      	adds	r4, r7, r2
 8004c9a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004c9c:	18bb      	adds	r3, r7, r2
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d114      	bne.n	8004cce <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ca4:	187b      	adds	r3, r7, r1
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	4013      	ands	r3, r2
 8004cac:	d00f      	beq.n	8004cce <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cae:	183b      	adds	r3, r7, r0
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d00a      	beq.n	8004cce <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d100      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x62>
 8004cc0:	e27e      	b.n	80051c0 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	0010      	movs	r0, r2
 8004cca:	4798      	blx	r3
      }
      return;
 8004ccc:	e278      	b.n	80051c0 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004cce:	2398      	movs	r3, #152	@ 0x98
 8004cd0:	18fb      	adds	r3, r7, r3
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d100      	bne.n	8004cda <HAL_UART_IRQHandler+0x7a>
 8004cd8:	e114      	b.n	8004f04 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004cda:	239c      	movs	r3, #156	@ 0x9c
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d106      	bne.n	8004cf4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004ce6:	23a0      	movs	r3, #160	@ 0xa0
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a83      	ldr	r2, [pc, #524]	@ (8004efc <HAL_UART_IRQHandler+0x29c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d100      	bne.n	8004cf4 <HAL_UART_IRQHandler+0x94>
 8004cf2:	e107      	b.n	8004f04 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cf4:	23a4      	movs	r3, #164	@ 0xa4
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d012      	beq.n	8004d26 <HAL_UART_IRQHandler+0xc6>
 8004d00:	23a0      	movs	r3, #160	@ 0xa0
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	2380      	movs	r3, #128	@ 0x80
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d00b      	beq.n	8004d26 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2201      	movs	r2, #1
 8004d14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2280      	movs	r2, #128	@ 0x80
 8004d1a:	589b      	ldr	r3, [r3, r2]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2180      	movs	r1, #128	@ 0x80
 8004d24:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d26:	23a4      	movs	r3, #164	@ 0xa4
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d011      	beq.n	8004d56 <HAL_UART_IRQHandler+0xf6>
 8004d32:	239c      	movs	r3, #156	@ 0x9c
 8004d34:	18fb      	adds	r3, r7, r3
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	d00b      	beq.n	8004d56 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2202      	movs	r2, #2
 8004d44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2280      	movs	r2, #128	@ 0x80
 8004d4a:	589b      	ldr	r3, [r3, r2]
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2180      	movs	r1, #128	@ 0x80
 8004d54:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d56:	23a4      	movs	r3, #164	@ 0xa4
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d011      	beq.n	8004d86 <HAL_UART_IRQHandler+0x126>
 8004d62:	239c      	movs	r3, #156	@ 0x9c
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d00b      	beq.n	8004d86 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2204      	movs	r2, #4
 8004d74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2280      	movs	r2, #128	@ 0x80
 8004d7a:	589b      	ldr	r3, [r3, r2]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2180      	movs	r1, #128	@ 0x80
 8004d84:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d86:	23a4      	movs	r3, #164	@ 0xa4
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d017      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d92:	23a0      	movs	r3, #160	@ 0xa0
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d105      	bne.n	8004daa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d9e:	239c      	movs	r3, #156	@ 0x9c
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2201      	movs	r2, #1
 8004da6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004da8:	d00b      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2208      	movs	r2, #8
 8004db0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2280      	movs	r2, #128	@ 0x80
 8004db6:	589b      	ldr	r3, [r3, r2]
 8004db8:	2208      	movs	r2, #8
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2180      	movs	r1, #128	@ 0x80
 8004dc0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004dc2:	23a4      	movs	r3, #164	@ 0xa4
 8004dc4:	18fb      	adds	r3, r7, r3
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	2380      	movs	r3, #128	@ 0x80
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d013      	beq.n	8004df8 <HAL_UART_IRQHandler+0x198>
 8004dd0:	23a0      	movs	r3, #160	@ 0xa0
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	2380      	movs	r3, #128	@ 0x80
 8004dd8:	04db      	lsls	r3, r3, #19
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d00c      	beq.n	8004df8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2280      	movs	r2, #128	@ 0x80
 8004de4:	0112      	lsls	r2, r2, #4
 8004de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2280      	movs	r2, #128	@ 0x80
 8004dec:	589b      	ldr	r3, [r3, r2]
 8004dee:	2220      	movs	r2, #32
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2180      	movs	r1, #128	@ 0x80
 8004df6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2280      	movs	r2, #128	@ 0x80
 8004dfc:	589b      	ldr	r3, [r3, r2]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d100      	bne.n	8004e04 <HAL_UART_IRQHandler+0x1a4>
 8004e02:	e1df      	b.n	80051c4 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e04:	23a4      	movs	r3, #164	@ 0xa4
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e10:	23a0      	movs	r3, #160	@ 0xa0
 8004e12:	18fb      	adds	r3, r7, r3
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2220      	movs	r2, #32
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d008      	beq.n	8004e2e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d004      	beq.n	8004e2e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	0010      	movs	r0, r2
 8004e2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2280      	movs	r2, #128	@ 0x80
 8004e32:	589b      	ldr	r3, [r3, r2]
 8004e34:	2194      	movs	r1, #148	@ 0x94
 8004e36:	187a      	adds	r2, r7, r1
 8004e38:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2240      	movs	r2, #64	@ 0x40
 8004e42:	4013      	ands	r3, r2
 8004e44:	2b40      	cmp	r3, #64	@ 0x40
 8004e46:	d004      	beq.n	8004e52 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e48:	187b      	adds	r3, r7, r1
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2228      	movs	r2, #40	@ 0x28
 8004e4e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e50:	d047      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	0018      	movs	r0, r3
 8004e56:	f000 fdad 	bl	80059b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2240      	movs	r2, #64	@ 0x40
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b40      	cmp	r3, #64	@ 0x40
 8004e66:	d137      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e68:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004e6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e70:	2090      	movs	r0, #144	@ 0x90
 8004e72:	183a      	adds	r2, r7, r0
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	2301      	movs	r3, #1
 8004e78:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e7c:	f383 8810 	msr	PRIMASK, r3
}
 8004e80:	46c0      	nop			@ (mov r8, r8)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2140      	movs	r1, #64	@ 0x40
 8004e8e:	438a      	bics	r2, r1
 8004e90:	609a      	str	r2, [r3, #8]
 8004e92:	183b      	adds	r3, r7, r0
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e9a:	f383 8810 	msr	PRIMASK, r3
}
 8004e9e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d012      	beq.n	8004ece <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eac:	4a14      	ldr	r2, [pc, #80]	@ (8004f00 <HAL_UART_IRQHandler+0x2a0>)
 8004eae:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f7fd fca9 	bl	800280c <HAL_DMA_Abort_IT>
 8004eba:	1e03      	subs	r3, r0, #0
 8004ebc:	d01a      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec8:	0018      	movs	r0, r3
 8004eca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ecc:	e012      	b.n	8004ef4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f000 f995 	bl	8005200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed6:	e00d      	b.n	8004ef4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	0018      	movs	r0, r3
 8004edc:	f000 f990 	bl	8005200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	e008      	b.n	8004ef4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	f000 f98b 	bl	8005200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2280      	movs	r2, #128	@ 0x80
 8004eee:	2100      	movs	r1, #0
 8004ef0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004ef2:	e167      	b.n	80051c4 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef4:	46c0      	nop			@ (mov r8, r8)
    return;
 8004ef6:	e165      	b.n	80051c4 <HAL_UART_IRQHandler+0x564>
 8004ef8:	0000080f 	.word	0x0000080f
 8004efc:	04000120 	.word	0x04000120
 8004f00:	08005d0f 	.word	0x08005d0f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d000      	beq.n	8004f0e <HAL_UART_IRQHandler+0x2ae>
 8004f0c:	e131      	b.n	8005172 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f0e:	23a4      	movs	r3, #164	@ 0xa4
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2210      	movs	r2, #16
 8004f16:	4013      	ands	r3, r2
 8004f18:	d100      	bne.n	8004f1c <HAL_UART_IRQHandler+0x2bc>
 8004f1a:	e12a      	b.n	8005172 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f1c:	23a0      	movs	r3, #160	@ 0xa0
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2210      	movs	r2, #16
 8004f24:	4013      	ands	r3, r2
 8004f26:	d100      	bne.n	8004f2a <HAL_UART_IRQHandler+0x2ca>
 8004f28:	e123      	b.n	8005172 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2210      	movs	r2, #16
 8004f30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2240      	movs	r2, #64	@ 0x40
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b40      	cmp	r3, #64	@ 0x40
 8004f3e:	d000      	beq.n	8004f42 <HAL_UART_IRQHandler+0x2e2>
 8004f40:	e09b      	b.n	800507a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	217e      	movs	r1, #126	@ 0x7e
 8004f4c:	187b      	adds	r3, r7, r1
 8004f4e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004f50:	187b      	adds	r3, r7, r1
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d100      	bne.n	8004f5a <HAL_UART_IRQHandler+0x2fa>
 8004f58:	e136      	b.n	80051c8 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2258      	movs	r2, #88	@ 0x58
 8004f5e:	5a9b      	ldrh	r3, [r3, r2]
 8004f60:	187a      	adds	r2, r7, r1
 8004f62:	8812      	ldrh	r2, [r2, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d300      	bcc.n	8004f6a <HAL_UART_IRQHandler+0x30a>
 8004f68:	e12e      	b.n	80051c8 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	187a      	adds	r2, r7, r1
 8004f6e:	215a      	movs	r1, #90	@ 0x5a
 8004f70:	8812      	ldrh	r2, [r2, #0]
 8004f72:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d06e      	beq.n	800505c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f82:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f88:	2301      	movs	r3, #1
 8004f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8e:	f383 8810 	msr	PRIMASK, r3
}
 8004f92:	46c0      	nop			@ (mov r8, r8)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	498e      	ldr	r1, [pc, #568]	@ (80051d8 <HAL_UART_IRQHandler+0x578>)
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004faa:	f383 8810 	msr	PRIMASK, r3
}
 8004fae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb8:	677b      	str	r3, [r7, #116]	@ 0x74
 8004fba:	2301      	movs	r3, #1
 8004fbc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fc0:	f383 8810 	msr	PRIMASK, r3
}
 8004fc4:	46c0      	nop			@ (mov r8, r8)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	438a      	bics	r2, r1
 8004fd4:	609a      	str	r2, [r3, #8]
 8004fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fd8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fdc:	f383 8810 	msr	PRIMASK, r3
}
 8004fe0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fea:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fec:	2301      	movs	r3, #1
 8004fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ff2:	f383 8810 	msr	PRIMASK, r3
}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2140      	movs	r1, #64	@ 0x40
 8005004:	438a      	bics	r2, r1
 8005006:	609a      	str	r2, [r3, #8]
 8005008:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800500a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800500e:	f383 8810 	msr	PRIMASK, r3
}
 8005012:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005020:	f3ef 8310 	mrs	r3, PRIMASK
 8005024:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005028:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800502a:	2301      	movs	r3, #1
 800502c:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005030:	f383 8810 	msr	PRIMASK, r3
}
 8005034:	46c0      	nop			@ (mov r8, r8)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2110      	movs	r1, #16
 8005042:	438a      	bics	r2, r1
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005048:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800504c:	f383 8810 	msr	PRIMASK, r3
}
 8005050:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005056:	0018      	movs	r0, r3
 8005058:	f7fd fba0 	bl	800279c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2258      	movs	r2, #88	@ 0x58
 8005060:	5a9a      	ldrh	r2, [r3, r2]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	215a      	movs	r1, #90	@ 0x5a
 8005066:	5a5b      	ldrh	r3, [r3, r1]
 8005068:	b29b      	uxth	r3, r3
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	b29a      	uxth	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0011      	movs	r1, r2
 8005072:	0018      	movs	r0, r3
 8005074:	f000 f8cc 	bl	8005210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005078:	e0a6      	b.n	80051c8 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2258      	movs	r2, #88	@ 0x58
 800507e:	5a99      	ldrh	r1, [r3, r2]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	225a      	movs	r2, #90	@ 0x5a
 8005084:	5a9b      	ldrh	r3, [r3, r2]
 8005086:	b29a      	uxth	r2, r3
 8005088:	208e      	movs	r0, #142	@ 0x8e
 800508a:	183b      	adds	r3, r7, r0
 800508c:	1a8a      	subs	r2, r1, r2
 800508e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	225a      	movs	r2, #90	@ 0x5a
 8005094:	5a9b      	ldrh	r3, [r3, r2]
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d100      	bne.n	800509e <HAL_UART_IRQHandler+0x43e>
 800509c:	e096      	b.n	80051cc <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 800509e:	183b      	adds	r3, r7, r0
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d100      	bne.n	80050a8 <HAL_UART_IRQHandler+0x448>
 80050a6:	e091      	b.n	80051cc <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a8:	f3ef 8310 	mrs	r3, PRIMASK
 80050ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80050ae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b0:	2488      	movs	r4, #136	@ 0x88
 80050b2:	193a      	adds	r2, r7, r4
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	2301      	movs	r3, #1
 80050b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f383 8810 	msr	PRIMASK, r3
}
 80050c0:	46c0      	nop			@ (mov r8, r8)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4943      	ldr	r1, [pc, #268]	@ (80051dc <HAL_UART_IRQHandler+0x57c>)
 80050ce:	400a      	ands	r2, r1
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	193b      	adds	r3, r7, r4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f383 8810 	msr	PRIMASK, r3
}
 80050de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e0:	f3ef 8310 	mrs	r3, PRIMASK
 80050e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80050e6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e8:	2484      	movs	r4, #132	@ 0x84
 80050ea:	193a      	adds	r2, r7, r4
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	2301      	movs	r3, #1
 80050f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	f383 8810 	msr	PRIMASK, r3
}
 80050f8:	46c0      	nop			@ (mov r8, r8)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2101      	movs	r1, #1
 8005106:	438a      	bics	r2, r1
 8005108:	609a      	str	r2, [r3, #8]
 800510a:	193b      	adds	r3, r7, r4
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	f383 8810 	msr	PRIMASK, r3
}
 8005116:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	665a      	str	r2, [r3, #100]	@ 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800512a:	f3ef 8310 	mrs	r3, PRIMASK
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005132:	2480      	movs	r4, #128	@ 0x80
 8005134:	193a      	adds	r2, r7, r4
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	2301      	movs	r3, #1
 800513a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	f383 8810 	msr	PRIMASK, r3
}
 8005142:	46c0      	nop			@ (mov r8, r8)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2110      	movs	r1, #16
 8005150:	438a      	bics	r2, r1
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	193b      	adds	r3, r7, r4
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800515a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515c:	f383 8810 	msr	PRIMASK, r3
}
 8005160:	46c0      	nop			@ (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005162:	183b      	adds	r3, r7, r0
 8005164:	881a      	ldrh	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	0011      	movs	r1, r2
 800516a:	0018      	movs	r0, r3
 800516c:	f000 f850 	bl	8005210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005170:	e02c      	b.n	80051cc <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005172:	23a4      	movs	r3, #164	@ 0xa4
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2280      	movs	r2, #128	@ 0x80
 800517a:	4013      	ands	r3, r2
 800517c:	d00f      	beq.n	800519e <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800517e:	23a0      	movs	r3, #160	@ 0xa0
 8005180:	18fb      	adds	r3, r7, r3
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2280      	movs	r2, #128	@ 0x80
 8005186:	4013      	ands	r3, r2
 8005188:	d009      	beq.n	800519e <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01e      	beq.n	80051d0 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	0010      	movs	r0, r2
 800519a:	4798      	blx	r3
    }
    return;
 800519c:	e018      	b.n	80051d0 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800519e:	23a4      	movs	r3, #164	@ 0xa4
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2240      	movs	r2, #64	@ 0x40
 80051a6:	4013      	ands	r3, r2
 80051a8:	d013      	beq.n	80051d2 <HAL_UART_IRQHandler+0x572>
 80051aa:	23a0      	movs	r3, #160	@ 0xa0
 80051ac:	18fb      	adds	r3, r7, r3
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2240      	movs	r2, #64	@ 0x40
 80051b2:	4013      	ands	r3, r2
 80051b4:	d00d      	beq.n	80051d2 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	0018      	movs	r0, r3
 80051ba:	f000 fdbf 	bl	8005d3c <UART_EndTransmit_IT>
    return;
 80051be:	e008      	b.n	80051d2 <HAL_UART_IRQHandler+0x572>
      return;
 80051c0:	46c0      	nop			@ (mov r8, r8)
 80051c2:	e006      	b.n	80051d2 <HAL_UART_IRQHandler+0x572>
    return;
 80051c4:	46c0      	nop			@ (mov r8, r8)
 80051c6:	e004      	b.n	80051d2 <HAL_UART_IRQHandler+0x572>
      return;
 80051c8:	46c0      	nop			@ (mov r8, r8)
 80051ca:	e002      	b.n	80051d2 <HAL_UART_IRQHandler+0x572>
      return;
 80051cc:	46c0      	nop			@ (mov r8, r8)
 80051ce:	e000      	b.n	80051d2 <HAL_UART_IRQHandler+0x572>
    return;
 80051d0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b02b      	add	sp, #172	@ 0xac
 80051d6:	bd90      	pop	{r4, r7, pc}
 80051d8:	fffffeff 	.word	0xfffffeff
 80051dc:	fffffedf 	.word	0xfffffedf

080051e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80051e8:	46c0      	nop			@ (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b002      	add	sp, #8
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80051f8:	46c0      	nop			@ (mov r8, r8)
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b002      	add	sp, #8
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005208:	46c0      	nop			@ (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	000a      	movs	r2, r1
 800521a:	1cbb      	adds	r3, r7, #2
 800521c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800521e:	46c0      	nop			@ (mov r8, r8)
 8005220:	46bd      	mov	sp, r7
 8005222:	b002      	add	sp, #8
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005230:	231e      	movs	r3, #30
 8005232:	18fb      	adds	r3, r7, r3
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a8d      	ldr	r2, [pc, #564]	@ (800548c <UART_SetConfig+0x264>)
 8005258:	4013      	ands	r3, r2
 800525a:	0019      	movs	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	430a      	orrs	r2, r1
 8005264:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4a88      	ldr	r2, [pc, #544]	@ (8005490 <UART_SetConfig+0x268>)
 800526e:	4013      	ands	r3, r2
 8005270:	0019      	movs	r1, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4a7f      	ldr	r2, [pc, #508]	@ (8005494 <UART_SetConfig+0x26c>)
 8005296:	4013      	ands	r3, r2
 8005298:	0019      	movs	r1, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a7b      	ldr	r2, [pc, #492]	@ (8005498 <UART_SetConfig+0x270>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d127      	bne.n	80052fe <UART_SetConfig+0xd6>
 80052ae:	4b7b      	ldr	r3, [pc, #492]	@ (800549c <UART_SetConfig+0x274>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b2:	2203      	movs	r2, #3
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d00d      	beq.n	80052d6 <UART_SetConfig+0xae>
 80052ba:	d81b      	bhi.n	80052f4 <UART_SetConfig+0xcc>
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d014      	beq.n	80052ea <UART_SetConfig+0xc2>
 80052c0:	d818      	bhi.n	80052f4 <UART_SetConfig+0xcc>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <UART_SetConfig+0xa4>
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d00a      	beq.n	80052e0 <UART_SetConfig+0xb8>
 80052ca:	e013      	b.n	80052f4 <UART_SetConfig+0xcc>
 80052cc:	231f      	movs	r3, #31
 80052ce:	18fb      	adds	r3, r7, r3
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	e021      	b.n	800531a <UART_SetConfig+0xf2>
 80052d6:	231f      	movs	r3, #31
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	2202      	movs	r2, #2
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	e01c      	b.n	800531a <UART_SetConfig+0xf2>
 80052e0:	231f      	movs	r3, #31
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	2204      	movs	r2, #4
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e017      	b.n	800531a <UART_SetConfig+0xf2>
 80052ea:	231f      	movs	r3, #31
 80052ec:	18fb      	adds	r3, r7, r3
 80052ee:	2208      	movs	r2, #8
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e012      	b.n	800531a <UART_SetConfig+0xf2>
 80052f4:	231f      	movs	r3, #31
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	2210      	movs	r2, #16
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	e00d      	b.n	800531a <UART_SetConfig+0xf2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a67      	ldr	r2, [pc, #412]	@ (80054a0 <UART_SetConfig+0x278>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d104      	bne.n	8005312 <UART_SetConfig+0xea>
 8005308:	231f      	movs	r3, #31
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	2200      	movs	r2, #0
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	e003      	b.n	800531a <UART_SetConfig+0xf2>
 8005312:	231f      	movs	r3, #31
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	2210      	movs	r2, #16
 8005318:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69da      	ldr	r2, [r3, #28]
 800531e:	2380      	movs	r3, #128	@ 0x80
 8005320:	021b      	lsls	r3, r3, #8
 8005322:	429a      	cmp	r2, r3
 8005324:	d15d      	bne.n	80053e2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005326:	231f      	movs	r3, #31
 8005328:	18fb      	adds	r3, r7, r3
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d015      	beq.n	800535c <UART_SetConfig+0x134>
 8005330:	dc18      	bgt.n	8005364 <UART_SetConfig+0x13c>
 8005332:	2b04      	cmp	r3, #4
 8005334:	d00d      	beq.n	8005352 <UART_SetConfig+0x12a>
 8005336:	dc15      	bgt.n	8005364 <UART_SetConfig+0x13c>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <UART_SetConfig+0x11a>
 800533c:	2b02      	cmp	r3, #2
 800533e:	d005      	beq.n	800534c <UART_SetConfig+0x124>
 8005340:	e010      	b.n	8005364 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005342:	f7fe fa63 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 8005346:	0003      	movs	r3, r0
 8005348:	61bb      	str	r3, [r7, #24]
        break;
 800534a:	e012      	b.n	8005372 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800534c:	4b55      	ldr	r3, [pc, #340]	@ (80054a4 <UART_SetConfig+0x27c>)
 800534e:	61bb      	str	r3, [r7, #24]
        break;
 8005350:	e00f      	b.n	8005372 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005352:	f7fe f9ed 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 8005356:	0003      	movs	r3, r0
 8005358:	61bb      	str	r3, [r7, #24]
        break;
 800535a:	e00a      	b.n	8005372 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535c:	2380      	movs	r3, #128	@ 0x80
 800535e:	021b      	lsls	r3, r3, #8
 8005360:	61bb      	str	r3, [r7, #24]
        break;
 8005362:	e006      	b.n	8005372 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005368:	231e      	movs	r3, #30
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	2201      	movs	r2, #1
 800536e:	701a      	strb	r2, [r3, #0]
        break;
 8005370:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d100      	bne.n	800537a <UART_SetConfig+0x152>
 8005378:	e07b      	b.n	8005472 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	005a      	lsls	r2, r3, #1
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	085b      	lsrs	r3, r3, #1
 8005384:	18d2      	adds	r2, r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	0019      	movs	r1, r3
 800538c:	0010      	movs	r0, r2
 800538e:	f7fa febb 	bl	8000108 <__udivsi3>
 8005392:	0003      	movs	r3, r0
 8005394:	b29b      	uxth	r3, r3
 8005396:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	2b0f      	cmp	r3, #15
 800539c:	d91c      	bls.n	80053d8 <UART_SetConfig+0x1b0>
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	2380      	movs	r3, #128	@ 0x80
 80053a2:	025b      	lsls	r3, r3, #9
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d217      	bcs.n	80053d8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	200e      	movs	r0, #14
 80053ae:	183b      	adds	r3, r7, r0
 80053b0:	210f      	movs	r1, #15
 80053b2:	438a      	bics	r2, r1
 80053b4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	085b      	lsrs	r3, r3, #1
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2207      	movs	r2, #7
 80053be:	4013      	ands	r3, r2
 80053c0:	b299      	uxth	r1, r3
 80053c2:	183b      	adds	r3, r7, r0
 80053c4:	183a      	adds	r2, r7, r0
 80053c6:	8812      	ldrh	r2, [r2, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	183a      	adds	r2, r7, r0
 80053d2:	8812      	ldrh	r2, [r2, #0]
 80053d4:	60da      	str	r2, [r3, #12]
 80053d6:	e04c      	b.n	8005472 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80053d8:	231e      	movs	r3, #30
 80053da:	18fb      	adds	r3, r7, r3
 80053dc:	2201      	movs	r2, #1
 80053de:	701a      	strb	r2, [r3, #0]
 80053e0:	e047      	b.n	8005472 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053e2:	231f      	movs	r3, #31
 80053e4:	18fb      	adds	r3, r7, r3
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d015      	beq.n	8005418 <UART_SetConfig+0x1f0>
 80053ec:	dc18      	bgt.n	8005420 <UART_SetConfig+0x1f8>
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d00d      	beq.n	800540e <UART_SetConfig+0x1e6>
 80053f2:	dc15      	bgt.n	8005420 <UART_SetConfig+0x1f8>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <UART_SetConfig+0x1d6>
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d005      	beq.n	8005408 <UART_SetConfig+0x1e0>
 80053fc:	e010      	b.n	8005420 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053fe:	f7fe fa05 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 8005402:	0003      	movs	r3, r0
 8005404:	61bb      	str	r3, [r7, #24]
        break;
 8005406:	e012      	b.n	800542e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005408:	4b26      	ldr	r3, [pc, #152]	@ (80054a4 <UART_SetConfig+0x27c>)
 800540a:	61bb      	str	r3, [r7, #24]
        break;
 800540c:	e00f      	b.n	800542e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800540e:	f7fe f98f 	bl	8003730 <HAL_RCC_GetSysClockFreq>
 8005412:	0003      	movs	r3, r0
 8005414:	61bb      	str	r3, [r7, #24]
        break;
 8005416:	e00a      	b.n	800542e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005418:	2380      	movs	r3, #128	@ 0x80
 800541a:	021b      	lsls	r3, r3, #8
 800541c:	61bb      	str	r3, [r7, #24]
        break;
 800541e:	e006      	b.n	800542e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005424:	231e      	movs	r3, #30
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	2201      	movs	r2, #1
 800542a:	701a      	strb	r2, [r3, #0]
        break;
 800542c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01e      	beq.n	8005472 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	085a      	lsrs	r2, r3, #1
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	18d2      	adds	r2, r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	0019      	movs	r1, r3
 8005444:	0010      	movs	r0, r2
 8005446:	f7fa fe5f 	bl	8000108 <__udivsi3>
 800544a:	0003      	movs	r3, r0
 800544c:	b29b      	uxth	r3, r3
 800544e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b0f      	cmp	r3, #15
 8005454:	d909      	bls.n	800546a <UART_SetConfig+0x242>
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	2380      	movs	r3, #128	@ 0x80
 800545a:	025b      	lsls	r3, r3, #9
 800545c:	429a      	cmp	r2, r3
 800545e:	d204      	bcs.n	800546a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	60da      	str	r2, [r3, #12]
 8005468:	e003      	b.n	8005472 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800546a:	231e      	movs	r3, #30
 800546c:	18fb      	adds	r3, r7, r3
 800546e:	2201      	movs	r2, #1
 8005470:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 800547e:	231e      	movs	r3, #30
 8005480:	18fb      	adds	r3, r7, r3
 8005482:	781b      	ldrb	r3, [r3, #0]
}
 8005484:	0018      	movs	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	b008      	add	sp, #32
 800548a:	bd80      	pop	{r7, pc}
 800548c:	ffff69f3 	.word	0xffff69f3
 8005490:	ffffcfff 	.word	0xffffcfff
 8005494:	fffff4ff 	.word	0xfffff4ff
 8005498:	40013800 	.word	0x40013800
 800549c:	40021000 	.word	0x40021000
 80054a0:	40004400 	.word	0x40004400
 80054a4:	007a1200 	.word	0x007a1200

080054a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	2201      	movs	r2, #1
 80054b6:	4013      	ands	r3, r2
 80054b8:	d00b      	beq.n	80054d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a4a      	ldr	r2, [pc, #296]	@ (80055ec <UART_AdvFeatureConfig+0x144>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	0019      	movs	r1, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d6:	2202      	movs	r2, #2
 80054d8:	4013      	ands	r3, r2
 80054da:	d00b      	beq.n	80054f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	4a43      	ldr	r2, [pc, #268]	@ (80055f0 <UART_AdvFeatureConfig+0x148>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	0019      	movs	r1, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f8:	2204      	movs	r2, #4
 80054fa:	4013      	ands	r3, r2
 80054fc:	d00b      	beq.n	8005516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4a3b      	ldr	r2, [pc, #236]	@ (80055f4 <UART_AdvFeatureConfig+0x14c>)
 8005506:	4013      	ands	r3, r2
 8005508:	0019      	movs	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	2208      	movs	r2, #8
 800551c:	4013      	ands	r3, r2
 800551e:	d00b      	beq.n	8005538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	4a34      	ldr	r2, [pc, #208]	@ (80055f8 <UART_AdvFeatureConfig+0x150>)
 8005528:	4013      	ands	r3, r2
 800552a:	0019      	movs	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	2210      	movs	r2, #16
 800553e:	4013      	ands	r3, r2
 8005540:	d00b      	beq.n	800555a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	4a2c      	ldr	r2, [pc, #176]	@ (80055fc <UART_AdvFeatureConfig+0x154>)
 800554a:	4013      	ands	r3, r2
 800554c:	0019      	movs	r1, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	2220      	movs	r2, #32
 8005560:	4013      	ands	r3, r2
 8005562:	d00b      	beq.n	800557c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	4a25      	ldr	r2, [pc, #148]	@ (8005600 <UART_AdvFeatureConfig+0x158>)
 800556c:	4013      	ands	r3, r2
 800556e:	0019      	movs	r1, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	2240      	movs	r2, #64	@ 0x40
 8005582:	4013      	ands	r3, r2
 8005584:	d01d      	beq.n	80055c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	4a1d      	ldr	r2, [pc, #116]	@ (8005604 <UART_AdvFeatureConfig+0x15c>)
 800558e:	4013      	ands	r3, r2
 8005590:	0019      	movs	r1, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055a2:	2380      	movs	r3, #128	@ 0x80
 80055a4:	035b      	lsls	r3, r3, #13
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d10b      	bne.n	80055c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4a15      	ldr	r2, [pc, #84]	@ (8005608 <UART_AdvFeatureConfig+0x160>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	0019      	movs	r1, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c6:	2280      	movs	r2, #128	@ 0x80
 80055c8:	4013      	ands	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	4a0e      	ldr	r2, [pc, #56]	@ (800560c <UART_AdvFeatureConfig+0x164>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	0019      	movs	r1, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }
}
 80055e4:	46c0      	nop			@ (mov r8, r8)
 80055e6:	46bd      	mov	sp, r7
 80055e8:	b002      	add	sp, #8
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	fffdffff 	.word	0xfffdffff
 80055f0:	fffeffff 	.word	0xfffeffff
 80055f4:	fffbffff 	.word	0xfffbffff
 80055f8:	ffff7fff 	.word	0xffff7fff
 80055fc:	ffffefff 	.word	0xffffefff
 8005600:	ffffdfff 	.word	0xffffdfff
 8005604:	ffefffff 	.word	0xffefffff
 8005608:	ff9fffff 	.word	0xff9fffff
 800560c:	fff7ffff 	.word	0xfff7ffff

08005610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af02      	add	r7, sp, #8
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2280      	movs	r2, #128	@ 0x80
 800561c:	2100      	movs	r1, #0
 800561e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005620:	f7fc fede 	bl	80023e0 <HAL_GetTick>
 8005624:	0003      	movs	r3, r0
 8005626:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2208      	movs	r2, #8
 8005630:	4013      	ands	r3, r2
 8005632:	2b08      	cmp	r3, #8
 8005634:	d10c      	bne.n	8005650 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2280      	movs	r2, #128	@ 0x80
 800563a:	0391      	lsls	r1, r2, #14
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4a17      	ldr	r2, [pc, #92]	@ (800569c <UART_CheckIdleState+0x8c>)
 8005640:	9200      	str	r2, [sp, #0]
 8005642:	2200      	movs	r2, #0
 8005644:	f000 f82c 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8005648:	1e03      	subs	r3, r0, #0
 800564a:	d001      	beq.n	8005650 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e021      	b.n	8005694 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2204      	movs	r2, #4
 8005658:	4013      	ands	r3, r2
 800565a:	2b04      	cmp	r3, #4
 800565c:	d10c      	bne.n	8005678 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2280      	movs	r2, #128	@ 0x80
 8005662:	03d1      	lsls	r1, r2, #15
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4a0d      	ldr	r2, [pc, #52]	@ (800569c <UART_CheckIdleState+0x8c>)
 8005668:	9200      	str	r2, [sp, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	f000 f818 	bl	80056a0 <UART_WaitOnFlagUntilTimeout>
 8005670:	1e03      	subs	r3, r0, #0
 8005672:	d001      	beq.n	8005678 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e00d      	b.n	8005694 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2274      	movs	r2, #116	@ 0x74
 800568e:	2100      	movs	r1, #0
 8005690:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	0018      	movs	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	b004      	add	sp, #16
 800569a:	bd80      	pop	{r7, pc}
 800569c:	01ffffff 	.word	0x01ffffff

080056a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b094      	sub	sp, #80	@ 0x50
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	1dfb      	adds	r3, r7, #7
 80056ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b0:	e0a3      	b.n	80057fa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056b4:	3301      	adds	r3, #1
 80056b6:	d100      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0x1a>
 80056b8:	e09f      	b.n	80057fa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ba:	f7fc fe91 	bl	80023e0 <HAL_GetTick>
 80056be:	0002      	movs	r2, r0
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80056ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d13d      	bne.n	800574c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d0:	f3ef 8310 	mrs	r3, PRIMASK
 80056d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80056d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80056da:	2301      	movs	r3, #1
 80056dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e0:	f383 8810 	msr	PRIMASK, r3
}
 80056e4:	46c0      	nop			@ (mov r8, r8)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	494c      	ldr	r1, [pc, #304]	@ (8005824 <UART_WaitOnFlagUntilTimeout+0x184>)
 80056f2:	400a      	ands	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056f8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056fc:	f383 8810 	msr	PRIMASK, r3
}
 8005700:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005702:	f3ef 8310 	mrs	r3, PRIMASK
 8005706:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8005708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800570a:	643b      	str	r3, [r7, #64]	@ 0x40
 800570c:	2301      	movs	r3, #1
 800570e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	f383 8810 	msr	PRIMASK, r3
}
 8005716:	46c0      	nop			@ (mov r8, r8)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2101      	movs	r1, #1
 8005724:	438a      	bics	r2, r1
 8005726:	609a      	str	r2, [r3, #8]
 8005728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800572a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800572e:	f383 8810 	msr	PRIMASK, r3
}
 8005732:	46c0      	nop			@ (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2274      	movs	r2, #116	@ 0x74
 8005744:	2100      	movs	r1, #0
 8005746:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e067      	b.n	800581c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2204      	movs	r2, #4
 8005754:	4013      	ands	r3, r2
 8005756:	d050      	beq.n	80057fa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69da      	ldr	r2, [r3, #28]
 800575e:	2380      	movs	r3, #128	@ 0x80
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	401a      	ands	r2, r3
 8005764:	2380      	movs	r3, #128	@ 0x80
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	429a      	cmp	r2, r3
 800576a:	d146      	bne.n	80057fa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2280      	movs	r2, #128	@ 0x80
 8005772:	0112      	lsls	r2, r2, #4
 8005774:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005776:	f3ef 8310 	mrs	r3, PRIMASK
 800577a:	613b      	str	r3, [r7, #16]
  return(result);
 800577c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800577e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005780:	2301      	movs	r3, #1
 8005782:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f383 8810 	msr	PRIMASK, r3
}
 800578a:	46c0      	nop			@ (mov r8, r8)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4923      	ldr	r1, [pc, #140]	@ (8005824 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005798:	400a      	ands	r2, r1
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800579e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f383 8810 	msr	PRIMASK, r3
}
 80057a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a8:	f3ef 8310 	mrs	r3, PRIMASK
 80057ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80057ae:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057b2:	2301      	movs	r3, #1
 80057b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	f383 8810 	msr	PRIMASK, r3
}
 80057bc:	46c0      	nop			@ (mov r8, r8)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2101      	movs	r1, #1
 80057ca:	438a      	bics	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
 80057ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	f383 8810 	msr	PRIMASK, r3
}
 80057d8:	46c0      	nop			@ (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2280      	movs	r2, #128	@ 0x80
 80057ea:	2120      	movs	r1, #32
 80057ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2274      	movs	r2, #116	@ 0x74
 80057f2:	2100      	movs	r1, #0
 80057f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e010      	b.n	800581c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	4013      	ands	r3, r2
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	425a      	negs	r2, r3
 800580a:	4153      	adcs	r3, r2
 800580c:	b2db      	uxtb	r3, r3
 800580e:	001a      	movs	r2, r3
 8005810:	1dfb      	adds	r3, r7, #7
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d100      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0x17a>
 8005818:	e74b      	b.n	80056b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	0018      	movs	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	b014      	add	sp, #80	@ 0x50
 8005822:	bd80      	pop	{r7, pc}
 8005824:	fffffe5f 	.word	0xfffffe5f

08005828 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b090      	sub	sp, #64	@ 0x40
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	1dbb      	adds	r3, r7, #6
 8005834:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	1dba      	adds	r2, r7, #6
 8005840:	2158      	movs	r1, #88	@ 0x58
 8005842:	8812      	ldrh	r2, [r2, #0]
 8005844:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2280      	movs	r2, #128	@ 0x80
 800584a:	2100      	movs	r1, #0
 800584c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2222      	movs	r2, #34	@ 0x22
 8005852:	67da      	str	r2, [r3, #124]	@ 0x7c

  if (huart->hdmarx != NULL)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005858:	2b00      	cmp	r3, #0
 800585a:	d02b      	beq.n	80058b4 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005860:	4a3f      	ldr	r2, [pc, #252]	@ (8005960 <UART_Start_Receive_DMA+0x138>)
 8005862:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005868:	4a3e      	ldr	r2, [pc, #248]	@ (8005964 <UART_Start_Receive_DMA+0x13c>)
 800586a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005870:	4a3d      	ldr	r2, [pc, #244]	@ (8005968 <UART_Start_Receive_DMA+0x140>)
 8005872:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005878:	2200      	movs	r2, #0
 800587a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3324      	adds	r3, #36	@ 0x24
 8005886:	0019      	movs	r1, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800588c:	001a      	movs	r2, r3
 800588e:	1dbb      	adds	r3, r7, #6
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	f7fc ff1d 	bl	80026d0 <HAL_DMA_Start_IT>
 8005896:	1e03      	subs	r3, r0, #0
 8005898:	d00c      	beq.n	80058b4 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2280      	movs	r2, #128	@ 0x80
 800589e:	2110      	movs	r1, #16
 80058a0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2274      	movs	r2, #116	@ 0x74
 80058a6:	2100      	movs	r1, #0
 80058a8:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e050      	b.n	8005956 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2274      	movs	r2, #116	@ 0x74
 80058b8:	2100      	movs	r1, #0
 80058ba:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058bc:	f3ef 8310 	mrs	r3, PRIMASK
 80058c0:	613b      	str	r3, [r7, #16]
  return(result);
 80058c2:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058c6:	2301      	movs	r3, #1
 80058c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f383 8810 	msr	PRIMASK, r3
}
 80058d0:	46c0      	nop			@ (mov r8, r8)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2180      	movs	r1, #128	@ 0x80
 80058de:	0049      	lsls	r1, r1, #1
 80058e0:	430a      	orrs	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	f383 8810 	msr	PRIMASK, r3
}
 80058ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f0:	f3ef 8310 	mrs	r3, PRIMASK
 80058f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80058f6:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058fa:	2301      	movs	r3, #1
 80058fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	f383 8810 	msr	PRIMASK, r3
}
 8005904:	46c0      	nop			@ (mov r8, r8)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2101      	movs	r1, #1
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]
 8005916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591c:	f383 8810 	msr	PRIMASK, r3
}
 8005920:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005922:	f3ef 8310 	mrs	r3, PRIMASK
 8005926:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005928:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800592a:	637b      	str	r3, [r7, #52]	@ 0x34
 800592c:	2301      	movs	r3, #1
 800592e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005932:	f383 8810 	msr	PRIMASK, r3
}
 8005936:	46c0      	nop			@ (mov r8, r8)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2140      	movs	r1, #64	@ 0x40
 8005944:	430a      	orrs	r2, r1
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594e:	f383 8810 	msr	PRIMASK, r3
}
 8005952:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	0018      	movs	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	b010      	add	sp, #64	@ 0x40
 800595c:	bd80      	pop	{r7, pc}
 800595e:	46c0      	nop			@ (mov r8, r8)
 8005960:	08005b2d 	.word	0x08005b2d
 8005964:	08005c51 	.word	0x08005c51
 8005968:	08005c8d 	.word	0x08005c8d

0800596c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005974:	f3ef 8310 	mrs	r3, PRIMASK
 8005978:	60bb      	str	r3, [r7, #8]
  return(result);
 800597a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	2301      	movs	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f383 8810 	msr	PRIMASK, r3
}
 8005988:	46c0      	nop			@ (mov r8, r8)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	21c0      	movs	r1, #192	@ 0xc0
 8005996:	438a      	bics	r2, r1
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f383 8810 	msr	PRIMASK, r3
}
 80059a4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	679a      	str	r2, [r3, #120]	@ 0x78
}
 80059ac:	46c0      	nop			@ (mov r8, r8)
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b006      	add	sp, #24
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08e      	sub	sp, #56	@ 0x38
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059bc:	f3ef 8310 	mrs	r3, PRIMASK
 80059c0:	617b      	str	r3, [r7, #20]
  return(result);
 80059c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80059c6:	2301      	movs	r3, #1
 80059c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	f383 8810 	msr	PRIMASK, r3
}
 80059d0:	46c0      	nop			@ (mov r8, r8)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4925      	ldr	r1, [pc, #148]	@ (8005a74 <UART_EndRxTransfer+0xc0>)
 80059de:	400a      	ands	r2, r1
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	f383 8810 	msr	PRIMASK, r3
}
 80059ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ee:	f3ef 8310 	mrs	r3, PRIMASK
 80059f2:	623b      	str	r3, [r7, #32]
  return(result);
 80059f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80059f8:	2301      	movs	r3, #1
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	f383 8810 	msr	PRIMASK, r3
}
 8005a02:	46c0      	nop			@ (mov r8, r8)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2101      	movs	r1, #1
 8005a10:	438a      	bics	r2, r1
 8005a12:	609a      	str	r2, [r3, #8]
 8005a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1a:	f383 8810 	msr	PRIMASK, r3
}
 8005a1e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d118      	bne.n	8005a5a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a28:	f3ef 8310 	mrs	r3, PRIMASK
 8005a2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a32:	2301      	movs	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f383 8810 	msr	PRIMASK, r3
}
 8005a3c:	46c0      	nop			@ (mov r8, r8)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2110      	movs	r1, #16
 8005a4a:	438a      	bics	r2, r1
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f383 8810 	msr	PRIMASK, r3
}
 8005a58:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8005a6c:	46c0      	nop			@ (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b00e      	add	sp, #56	@ 0x38
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	fffffedf 	.word	0xfffffedf

08005a78 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08c      	sub	sp, #48	@ 0x30
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b20      	cmp	r3, #32
 8005a8c:	d035      	beq.n	8005afa <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8005a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a90:	2252      	movs	r2, #82	@ 0x52
 8005a92:	2100      	movs	r1, #0
 8005a94:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a96:	f3ef 8310 	mrs	r3, PRIMASK
 8005a9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a9c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f383 8810 	msr	PRIMASK, r3
}
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2180      	movs	r1, #128	@ 0x80
 8005ab8:	438a      	bics	r2, r1
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f383 8810 	msr	PRIMASK, r3
}
 8005ac6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8005acc:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ace:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f383 8810 	msr	PRIMASK, r3
}
 8005adc:	46c0      	nop			@ (mov r8, r8)
 8005ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2140      	movs	r1, #64	@ 0x40
 8005aea:	430a      	orrs	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	f383 8810 	msr	PRIMASK, r3
}
 8005af8:	e004      	b.n	8005b04 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8005afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afc:	0018      	movs	r0, r3
 8005afe:	f009 ff81 	bl	800fa04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b02:	46c0      	nop			@ (mov r8, r8)
 8005b04:	46c0      	nop			@ (mov r8, r8)
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b00c      	add	sp, #48	@ 0x30
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b18:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	f7ff fb5f 	bl	80051e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b22:	46c0      	nop			@ (mov r8, r8)
 8005b24:	46bd      	mov	sp, r7
 8005b26:	b004      	add	sp, #16
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b094      	sub	sp, #80	@ 0x50
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2b20      	cmp	r3, #32
 8005b40:	d06e      	beq.n	8005c20 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8005b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b44:	225a      	movs	r2, #90	@ 0x5a
 8005b46:	2100      	movs	r1, #0
 8005b48:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b50:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b54:	2301      	movs	r3, #1
 8005b56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f383 8810 	msr	PRIMASK, r3
}
 8005b5e:	46c0      	nop			@ (mov r8, r8)
 8005b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4938      	ldr	r1, [pc, #224]	@ (8005c4c <UART_DMAReceiveCplt+0x120>)
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	f383 8810 	msr	PRIMASK, r3
}
 8005b7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b86:	2301      	movs	r3, #1
 8005b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8c:	f383 8810 	msr	PRIMASK, r3
}
 8005b90:	46c0      	nop			@ (mov r8, r8)
 8005b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	438a      	bics	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]
 8005ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba8:	f383 8810 	msr	PRIMASK, r3
}
 8005bac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bae:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bb8:	2301      	movs	r3, #1
 8005bba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bbe:	f383 8810 	msr	PRIMASK, r3
}
 8005bc2:	46c0      	nop			@ (mov r8, r8)
 8005bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2140      	movs	r1, #64	@ 0x40
 8005bd0:	438a      	bics	r2, r1
 8005bd2:	609a      	str	r2, [r3, #8]
 8005bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bda:	f383 8810 	msr	PRIMASK, r3
}
 8005bde:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be2:	2220      	movs	r2, #32
 8005be4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d118      	bne.n	8005c20 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bee:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f383 8810 	msr	PRIMASK, r3
}
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2110      	movs	r1, #16
 8005c10:	438a      	bics	r2, r1
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f383 8810 	msr	PRIMASK, r3
}
 8005c1e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d108      	bne.n	8005c3a <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c2a:	2258      	movs	r2, #88	@ 0x58
 8005c2c:	5a9a      	ldrh	r2, [r3, r2]
 8005c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c30:	0011      	movs	r1, r2
 8005c32:	0018      	movs	r0, r3
 8005c34:	f7ff faec 	bl	8005210 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c38:	e003      	b.n	8005c42 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8005c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f009 feb5 	bl	800f9ac <HAL_UART_RxCpltCallback>
}
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	46bd      	mov	sp, r7
 8005c46:	b014      	add	sp, #80	@ 0x50
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	46c0      	nop			@ (mov r8, r8)
 8005c4c:	fffffeff 	.word	0xfffffeff

08005c50 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10a      	bne.n	8005c7c <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2258      	movs	r2, #88	@ 0x58
 8005c6a:	5a9b      	ldrh	r3, [r3, r2]
 8005c6c:	085b      	lsrs	r3, r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	0011      	movs	r1, r2
 8005c74:	0018      	movs	r0, r3
 8005c76:	f7ff facb 	bl	8005210 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c7a:	e003      	b.n	8005c84 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f7ff fab6 	bl	80051f0 <HAL_UART_RxHalfCpltCallback>
}
 8005c84:	46c0      	nop			@ (mov r8, r8)
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b004      	add	sp, #16
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c9e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2280      	movs	r2, #128	@ 0x80
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b80      	cmp	r3, #128	@ 0x80
 8005cb2:	d10a      	bne.n	8005cca <UART_DMAError+0x3e>
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b21      	cmp	r3, #33	@ 0x21
 8005cb8:	d107      	bne.n	8005cca <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2252      	movs	r2, #82	@ 0x52
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	f7ff fe51 	bl	800596c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2240      	movs	r2, #64	@ 0x40
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b40      	cmp	r3, #64	@ 0x40
 8005cd6:	d10a      	bne.n	8005cee <UART_DMAError+0x62>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b22      	cmp	r3, #34	@ 0x22
 8005cdc:	d107      	bne.n	8005cee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	225a      	movs	r2, #90	@ 0x5a
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f7ff fe63 	bl	80059b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2280      	movs	r2, #128	@ 0x80
 8005cf2:	589b      	ldr	r3, [r3, r2]
 8005cf4:	2210      	movs	r2, #16
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2180      	movs	r1, #128	@ 0x80
 8005cfc:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	0018      	movs	r0, r3
 8005d02:	f7ff fa7d 	bl	8005200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d06:	46c0      	nop			@ (mov r8, r8)
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b006      	add	sp, #24
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	225a      	movs	r2, #90	@ 0x5a
 8005d20:	2100      	movs	r1, #0
 8005d22:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2252      	movs	r2, #82	@ 0x52
 8005d28:	2100      	movs	r1, #0
 8005d2a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	0018      	movs	r0, r3
 8005d30:	f7ff fa66 	bl	8005200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d34:	46c0      	nop			@ (mov r8, r8)
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b004      	add	sp, #16
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d44:	f3ef 8310 	mrs	r3, PRIMASK
 8005d48:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	2301      	movs	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f383 8810 	msr	PRIMASK, r3
}
 8005d58:	46c0      	nop			@ (mov r8, r8)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2140      	movs	r1, #64	@ 0x40
 8005d66:	438a      	bics	r2, r1
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f383 8810 	msr	PRIMASK, r3
}
 8005d74:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	669a      	str	r2, [r3, #104]	@ 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f009 fe3d 	bl	800fa04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d8a:	46c0      	nop			@ (mov r8, r8)
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	b006      	add	sp, #24
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <setBurlaArmisHc>:
uint8_t u8BufferCircPosic[SW_MOTOR_QTY][APISW_BUFFER_CIRC_SIZE] = {0};

bool flagBurlaArmisHc = false;

void setBurlaArmisHc(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
	flagBurlaArmisHc = true;
 8005d98:	4b02      	ldr	r3, [pc, #8]	@ (8005da4 <setBurlaArmisHc+0x10>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	701a      	strb	r2, [r3, #0]
}
 8005d9e:	46c0      	nop			@ (mov r8, r8)
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20000064 	.word	0x20000064

08005da8 <clrBurlaArmisHc>:

void clrBurlaArmisHc(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
	flagBurlaArmisHc = false;
 8005dac:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <clrBurlaArmisHc+0x18>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
	Outputs_Com_Cheat( _e_OutCom_Cheat_None );
 8005db2:	2000      	movs	r0, #0
 8005db4:	f005 fccc 	bl	800b750 <Outputs_Com_Cheat>
}
 8005db8:	46c0      	nop			@ (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	46c0      	nop			@ (mov r8, r8)
 8005dc0:	20000064 	.word	0x20000064

08005dc4 <getBurlaArmisHc>:

bool getBurlaArmisHc(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
	return flagBurlaArmisHc;
 8005dc8:	4b02      	ldr	r3, [pc, #8]	@ (8005dd4 <getBurlaArmisHc+0x10>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
}
 8005dcc:	0018      	movs	r0, r3
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	46c0      	nop			@ (mov r8, r8)
 8005dd4:	20000064 	.word	0x20000064

08005dd8 <Api_Swing_Rx_CallBack>:

tApiSwUartFlag Protocolo_Flag_Get(void) ;

/* Private user code ---------------------------------------------------------*/

void Api_Swing_Rx_CallBack( uint8_t * p_pu8Buffer) {
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
	if(Package_Dismount(p_pu8Buffer, PACKET_SIZE, &sApiSwingCmdInfo.sInfo) == 0) {
 8005de0:	4a09      	ldr	r2, [pc, #36]	@ (8005e08 <Api_Swing_Rx_CallBack+0x30>)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	210c      	movs	r1, #12
 8005de6:	0018      	movs	r0, r3
 8005de8:	f006 faba 	bl	800c360 <Package_Dismount>
 8005dec:	1e03      	subs	r3, r0, #0
 8005dee:	d103      	bne.n	8005df8 <Api_Swing_Rx_CallBack+0x20>
		u8ReceiveRx = _e_ApiSwUartFlag_PackOk;
 8005df0:	4b06      	ldr	r3, [pc, #24]	@ (8005e0c <Api_Swing_Rx_CallBack+0x34>)
 8005df2:	2201      	movs	r2, #1
 8005df4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		u8ReceiveRx = _e_ApiSwUartFlag_PackNok;
	}
}
 8005df6:	e002      	b.n	8005dfe <Api_Swing_Rx_CallBack+0x26>
		u8ReceiveRx = _e_ApiSwUartFlag_PackNok;
 8005df8:	4b04      	ldr	r3, [pc, #16]	@ (8005e0c <Api_Swing_Rx_CallBack+0x34>)
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	701a      	strb	r2, [r3, #0]
}
 8005dfe:	46c0      	nop			@ (mov r8, r8)
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b002      	add	sp, #8
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	46c0      	nop			@ (mov r8, r8)
 8005e08:	2000003d 	.word	0x2000003d
 8005e0c:	2000002e 	.word	0x2000002e

08005e10 <Protocolo_Flag_Get>:

tApiSwUartFlag Protocolo_Flag_Get(void) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
	tApiSwUartFlag u8Mem = u8ReceiveRx;
 8005e16:	1dfb      	adds	r3, r7, #7
 8005e18:	4a05      	ldr	r2, [pc, #20]	@ (8005e30 <Protocolo_Flag_Get+0x20>)
 8005e1a:	7812      	ldrb	r2, [r2, #0]
 8005e1c:	701a      	strb	r2, [r3, #0]
	u8ReceiveRx = _e_ApiSwUartFlag_None;
 8005e1e:	4b04      	ldr	r3, [pc, #16]	@ (8005e30 <Protocolo_Flag_Get+0x20>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	701a      	strb	r2, [r3, #0]
	return(u8Mem);
 8005e24:	1dfb      	adds	r3, r7, #7
 8005e26:	781b      	ldrb	r3, [r3, #0]
}
 8005e28:	0018      	movs	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	2000002e 	.word	0x2000002e

08005e34 <_Api_Swing_RenewTimeoutCamera>:


static void _Api_Swing_RenewTimeoutCamera(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
	sApiSwingVar.m_u32TimeoutPolling = HAL_GetTick() + TIMEOUT_POOLING_CAMERA;
 8005e38:	f7fc fad2 	bl	80023e0 <HAL_GetTick>
 8005e3c:	0003      	movs	r3, r0
 8005e3e:	4a03      	ldr	r2, [pc, #12]	@ (8005e4c <_Api_Swing_RenewTimeoutCamera+0x18>)
 8005e40:	189a      	adds	r2, r3, r2
 8005e42:	4b03      	ldr	r3, [pc, #12]	@ (8005e50 <_Api_Swing_RenewTimeoutCamera+0x1c>)
 8005e44:	605a      	str	r2, [r3, #4]
}
 8005e46:	46c0      	nop			@ (mov r8, r8)
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	00001388 	.word	0x00001388
 8005e50:	20000058 	.word	0x20000058

08005e54 <_api_swing_task_searchHome>:

#endif


static void _api_swing_task_searchHome(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0

	TaskManager_Set( API_SWING , _e_api_swuing_task_searchHome );
 8005e58:	2100      	movs	r1, #0
 8005e5a:	200d      	movs	r0, #13
 8005e5c:	f007 fc98 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( API_SWING ) == false )
 8005e60:	200d      	movs	r0, #13
 8005e62:	f007 fcfb 	bl	800d85c <TaskManager_First_Get>
 8005e66:	1e03      	subs	r3, r0, #0
 8005e68:	d114      	bne.n	8005e94 <_api_swing_task_searchHome+0x40>
	{
		TaskManager_First_Set( API_SWING );
 8005e6a:	200d      	movs	r0, #13
 8005e6c:	f007 fcac 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( API_SWING, 0 );
 8005e70:	2100      	movs	r1, #0
 8005e72:	200d      	movs	r0, #13
 8005e74:	f007 fd14 	bl	800d8a0 <TaskManager_Step_Set>
		Timing_Set( _e_Timing_Swing_AlarmDeb , 500 );
 8005e78:	23fa      	movs	r3, #250	@ 0xfa
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	0019      	movs	r1, r3
 8005e7e:	200a      	movs	r0, #10
 8005e80:	f009 fd30 	bl	800f8e4 <Timing_Set>
		//Outputs_Buzz_Set( _e_OutBuzz_Off );

		_Api_Swing_RenewTimeoutCamera();
 8005e84:	f7ff ffd6 	bl	8005e34 <_Api_Swing_RenewTimeoutCamera>

		SWING_ENABLE_CONFIG;
 8005e88:	4b6e      	ldr	r3, [pc, #440]	@ (8006044 <_api_swing_task_searchHome+0x1f0>)
 8005e8a:	2280      	movs	r2, #128	@ 0x80
 8005e8c:	619a      	str	r2, [r3, #24]

		sApiSwingVar.u8ErrorCalibration = 0;
 8005e8e:	4b6e      	ldr	r3, [pc, #440]	@ (8006048 <_api_swing_task_searchHome+0x1f4>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	701a      	strb	r2, [r3, #0]
	}

	if( Api_Swing_alarm() == false )
 8005e94:	f001 fc36 	bl	8007704 <Api_Swing_alarm>
 8005e98:	1e03      	subs	r3, r0, #0
 8005e9a:	d105      	bne.n	8005ea8 <_api_swing_task_searchHome+0x54>
	{
#if(SW_PICTOGRAMA_MODE == SW_PICTOGRAMA_FITA_LED)
		Outputs_RGB_Set ( _e_OutPic_Both, _e_OutPicMode_Static, _e_OutPicColor_Yellow, _e_OutPicSpeed_Fast );
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	2203      	movs	r2, #3
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	2002      	movs	r0, #2
 8005ea4:	f005 fb60 	bl	800b568 <Outputs_RGB_Set>
#else
		Outputs_RGB_Set(_e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Green, _e_OutPicSpeed_Slow);
#endif
	}

	switch( TaskManager_Step_Get( API_SWING ) )
 8005ea8:	200d      	movs	r0, #13
 8005eaa:	f007 fd23 	bl	800d8f4 <TaskManager_Step_Get>
 8005eae:	0003      	movs	r3, r0
 8005eb0:	2b07      	cmp	r3, #7
 8005eb2:	d900      	bls.n	8005eb6 <_api_swing_task_searchHome+0x62>
 8005eb4:	e0bb      	b.n	800602e <_api_swing_task_searchHome+0x1da>
 8005eb6:	009a      	lsls	r2, r3, #2
 8005eb8:	4b64      	ldr	r3, [pc, #400]	@ (800604c <_api_swing_task_searchHome+0x1f8>)
 8005eba:	18d3      	adds	r3, r2, r3
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	469f      	mov	pc, r3
	{

	case _e_Api_Swing_Task_SerchHome_init:
		Outputs_Buzz_Set( _e_OutBuzz_Siren );
 8005ec0:	2004      	movs	r0, #4
 8005ec2:	f005 fb0b 	bl	800b4dc <Outputs_Buzz_Set>
		if( Api_Swing_alarm() != false ) {
 8005ec6:	f001 fc1d 	bl	8007704 <Api_Swing_alarm>
 8005eca:	1e03      	subs	r3, r0, #0
 8005ecc:	d00a      	beq.n	8005ee4 <_api_swing_task_searchHome+0x90>
			Outputs_RGB_Set ( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8005ece:	2300      	movs	r3, #0
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2102      	movs	r1, #2
 8005ed4:	2002      	movs	r0, #2
 8005ed6:	f005 fb47 	bl	800b568 <Outputs_RGB_Set>
			TaskManager_Step_Set( API_SWING, _e_Api_Swing_Task_SerchHome_sensor_ativado );
 8005eda:	2107      	movs	r1, #7
 8005edc:	200d      	movs	r0, #13
 8005ede:	f007 fcdf 	bl	800d8a0 <TaskManager_Step_Set>
		}
		else {

			TaskManager_Step_Inc( API_SWING );
		}
		break;
 8005ee2:	e0ab      	b.n	800603c <_api_swing_task_searchHome+0x1e8>
			TaskManager_Step_Inc( API_SWING );
 8005ee4:	200d      	movs	r0, #13
 8005ee6:	f007 fd29 	bl	800d93c <TaskManager_Step_Inc>
		break;
 8005eea:	e0a7      	b.n	800603c <_api_swing_task_searchHome+0x1e8>

	case _e_Api_Swing_Task_SerchHome_calib:

		Timing_Set( _e_Timing_Swing_AlarmDeb , 500 );
 8005eec:	23fa      	movs	r3, #250	@ 0xfa
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	200a      	movs	r0, #10
 8005ef4:	f009 fcf6 	bl	800f8e4 <Timing_Set>
		if( Api_Swing_alarm() != false )
 8005ef8:	f001 fc04 	bl	8007704 <Api_Swing_alarm>
 8005efc:	1e03      	subs	r3, r0, #0
 8005efe:	d00d      	beq.n	8005f1c <_api_swing_task_searchHome+0xc8>
		{
			Outputs_RGB_Set ( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8005f00:	2300      	movs	r3, #0
 8005f02:	2200      	movs	r2, #0
 8005f04:	2102      	movs	r1, #2
 8005f06:	2002      	movs	r0, #2
 8005f08:	f005 fb2e 	bl	800b568 <Outputs_RGB_Set>
			Outputs_Buzz_Set( _e_OutBuzz_Siren );
 8005f0c:	2004      	movs	r0, #4
 8005f0e:	f005 fae5 	bl	800b4dc <Outputs_Buzz_Set>
			TaskManager_Step_Set( API_SWING, _e_Api_Swing_Task_SerchHome_sensor_ativado );
 8005f12:	2107      	movs	r1, #7
 8005f14:	200d      	movs	r0, #13
 8005f16:	f007 fcc3 	bl	800d8a0 <TaskManager_Step_Set>
			return;
#endif


		}
		break;
 8005f1a:	e08f      	b.n	800603c <_api_swing_task_searchHome+0x1e8>
			Position_Config_Motor(_e_SwMtQty_Dual);
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	f006 f83f 	bl	800bfa0 <Position_Config_Motor>
			TaskManager_Step_Inc( API_SWING );
 8005f22:	200d      	movs	r0, #13
 8005f24:	f007 fd0a 	bl	800d93c <TaskManager_Step_Inc>
		break;
 8005f28:	e088      	b.n	800603c <_api_swing_task_searchHome+0x1e8>

	case _e_Api_Swing_Task_SerchHome_resp_calib:
		Timing_Set( _e_Timing_Swing_AlarmDeb , 500 );
 8005f2a:	23fa      	movs	r3, #250	@ 0xfa
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	0019      	movs	r1, r3
 8005f30:	200a      	movs	r0, #10
 8005f32:	f009 fcd7 	bl	800f8e4 <Timing_Set>

		if ( Position_Status() == _e_PosSts_WaitCfgMode)
 8005f36:	f006 f8a5 	bl	800c084 <Position_Status>
 8005f3a:	0003      	movs	r3, r0
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d000      	beq.n	8005f42 <_api_swing_task_searchHome+0xee>
 8005f40:	e077      	b.n	8006032 <_api_swing_task_searchHome+0x1de>
		{
			//TaskManager_Step_Set( API_SWING, _e_Api_Swing_Task_SerchHome_mode_operation );
			TaskManager_Step_Inc( API_SWING );
 8005f42:	200d      	movs	r0, #13
 8005f44:	f007 fcfa 	bl	800d93c <TaskManager_Step_Inc>
		}
		break;
 8005f48:	e073      	b.n	8006032 <_api_swing_task_searchHome+0x1de>
			else {
				TaskManager_Step_Set( API_SWING, _e_Api_Swing_Task_SerchHome_calib );
			}
		}
#elif (SW_OPERATION_MODE == SW_OPERATION_MODE_NF)
		if ( Position_Config_Mode(_e_PosModCfg_NF) == _e_PosRet_Ok)
 8005f4a:	2002      	movs	r0, #2
 8005f4c:	f006 f84a 	bl	800bfe4 <Position_Config_Mode>
 8005f50:	1e03      	subs	r3, r0, #0
 8005f52:	d108      	bne.n	8005f66 <_api_swing_task_searchHome+0x112>
		{
			Outputs_Buzz_Set( _e_OutBuzz_Off );
 8005f54:	2001      	movs	r0, #1
 8005f56:	f005 fac1 	bl	800b4dc <Outputs_Buzz_Set>
			TaskManager_Go(API_SWING, _api_swing_task_mode_nf);
 8005f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8006050 <_api_swing_task_searchHome+0x1fc>)
 8005f5c:	0019      	movs	r1, r3
 8005f5e:	200d      	movs	r0, #13
 8005f60:	f007 fbc8 	bl	800d6f4 <TaskManager_Go>
			{
				TaskManager_Step_Set( API_SWING, _e_Api_Swing_Task_SerchHome_calib );
			}
		}
#endif
		break;
 8005f64:	e06a      	b.n	800603c <_api_swing_task_searchHome+0x1e8>
			sApiSwingVar.u8ErrorCalibration++;
 8005f66:	4b38      	ldr	r3, [pc, #224]	@ (8006048 <_api_swing_task_searchHome+0x1f4>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	4b36      	ldr	r3, [pc, #216]	@ (8006048 <_api_swing_task_searchHome+0x1f4>)
 8005f70:	701a      	strb	r2, [r3, #0]
			if ( sApiSwingVar.u8ErrorCalibration >= APISW_ERROR_CALIB_QTY )
 8005f72:	4b35      	ldr	r3, [pc, #212]	@ (8006048 <_api_swing_task_searchHome+0x1f4>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d904      	bls.n	8005f84 <_api_swing_task_searchHome+0x130>
				TaskManager_Step_Set( API_SWING, _e_Api_Swing_Task_SerchHome_calib_qty_error );
 8005f7a:	2104      	movs	r1, #4
 8005f7c:	200d      	movs	r0, #13
 8005f7e:	f007 fc8f 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8005f82:	e05b      	b.n	800603c <_api_swing_task_searchHome+0x1e8>
				TaskManager_Step_Set( API_SWING, _e_Api_Swing_Task_SerchHome_calib );
 8005f84:	2101      	movs	r1, #1
 8005f86:	200d      	movs	r0, #13
 8005f88:	f007 fc8a 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8005f8c:	e056      	b.n	800603c <_api_swing_task_searchHome+0x1e8>

	case _e_Api_Swing_Task_SerchHome_task_home:

		Outputs_RGB_Set ( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_TSIgr, _e_OutPicSpeed_Fast );
 8005f8e:	2300      	movs	r3, #0
 8005f90:	2206      	movs	r2, #6
 8005f92:	2102      	movs	r1, #2
 8005f94:	2002      	movs	r0, #2
 8005f96:	f005 fae7 	bl	800b568 <Outputs_RGB_Set>
		Outputs_Buzz_Set( _e_OutBuzz_Off );
 8005f9a:	2001      	movs	r0, #1
 8005f9c:	f005 fa9e 	bl	800b4dc <Outputs_Buzz_Set>
		_Api_Swing_RenewTimeoutCamera();
 8005fa0:	f7ff ff48 	bl	8005e34 <_Api_Swing_RenewTimeoutCamera>
		TaskManager_Go( API_SWING , _Api_Swing_task_Home );
 8005fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8006054 <_api_swing_task_searchHome+0x200>)
 8005fa6:	0019      	movs	r1, r3
 8005fa8:	200d      	movs	r0, #13
 8005faa:	f007 fba3 	bl	800d6f4 <TaskManager_Go>
		break;
 8005fae:	e045      	b.n	800603c <_api_swing_task_searchHome+0x1e8>

	case _e_Api_Swing_Task_SerchHome_calib_qty_error:
		Outputs_Buzz_Set( _e_OutBuzz_Off );
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	f005 fa93 	bl	800b4dc <Outputs_Buzz_Set>
		Timing_Set( _e_Timing_Swing_AlarmDeb , 500 );
 8005fb6:	23fa      	movs	r3, #250	@ 0xfa
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	0019      	movs	r1, r3
 8005fbc:	200a      	movs	r0, #10
 8005fbe:	f009 fc91 	bl	800f8e4 <Timing_Set>
		Timing_Set( _e_Timing_Motor_calibration, 50000 );
 8005fc2:	4b25      	ldr	r3, [pc, #148]	@ (8006058 <_api_swing_task_searchHome+0x204>)
 8005fc4:	0019      	movs	r1, r3
 8005fc6:	2011      	movs	r0, #17
 8005fc8:	f009 fc8c 	bl	800f8e4 <Timing_Set>
		Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Slow );
 8005fcc:	2305      	movs	r3, #5
 8005fce:	2200      	movs	r2, #0
 8005fd0:	2102      	movs	r1, #2
 8005fd2:	2002      	movs	r0, #2
 8005fd4:	f005 fac8 	bl	800b568 <Outputs_RGB_Set>
		TaskManager_Step_Set( API_SWING, _e_Api_Swing_Task_SerchHome_error_calibration );
 8005fd8:	2106      	movs	r1, #6
 8005fda:	200d      	movs	r0, #13
 8005fdc:	f007 fc60 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8005fe0:	e02c      	b.n	800603c <_api_swing_task_searchHome+0x1e8>

	case _e_Api_Swing_Task_SerchHome_error_calibration:
		if( Timing_Get_Bool( _e_Timing_Motor_calibration ) == true )
 8005fe2:	2011      	movs	r0, #17
 8005fe4:	f009 fc94 	bl	800f910 <Timing_Get_Bool>
 8005fe8:	0003      	movs	r3, r0
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d123      	bne.n	8006036 <_api_swing_task_searchHome+0x1e2>
		{
			sApiSwingVar.u8ErrorCalibration = 0;
 8005fee:	4b16      	ldr	r3, [pc, #88]	@ (8006048 <_api_swing_task_searchHome+0x1f4>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	701a      	strb	r2, [r3, #0]
			Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Yellow, _e_OutPicSpeed_Fast );
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	2203      	movs	r2, #3
 8005ff8:	2102      	movs	r1, #2
 8005ffa:	2002      	movs	r0, #2
 8005ffc:	f005 fab4 	bl	800b568 <Outputs_RGB_Set>
			TaskManager_Step_Set( API_SWING, _e_Api_Swing_Task_SerchHome_init );
 8006000:	2100      	movs	r1, #0
 8006002:	200d      	movs	r0, #13
 8006004:	f007 fc4c 	bl	800d8a0 <TaskManager_Step_Set>
		}
		break;
 8006008:	e015      	b.n	8006036 <_api_swing_task_searchHome+0x1e2>

	case _e_Api_Swing_Task_SerchHome_sensor_ativado:

		if( Api_Swing_alarm() == false )
 800600a:	f001 fb7b 	bl	8007704 <Api_Swing_alarm>
 800600e:	1e03      	subs	r3, r0, #0
 8006010:	d113      	bne.n	800603a <_api_swing_task_searchHome+0x1e6>
		{
			Outputs_RGB_Set ( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Yellow, _e_OutPicSpeed_Fast );
 8006012:	2300      	movs	r3, #0
 8006014:	2203      	movs	r2, #3
 8006016:	2102      	movs	r1, #2
 8006018:	2002      	movs	r0, #2
 800601a:	f005 faa5 	bl	800b568 <Outputs_RGB_Set>
			Outputs_Buzz_Set( _e_OutBuzz_Off );
 800601e:	2001      	movs	r0, #1
 8006020:	f005 fa5c 	bl	800b4dc <Outputs_Buzz_Set>
			TaskManager_Step_Set( API_SWING, _e_Api_Swing_Task_SerchHome_init );
 8006024:	2100      	movs	r1, #0
 8006026:	200d      	movs	r0, #13
 8006028:	f007 fc3a 	bl	800d8a0 <TaskManager_Step_Set>
		}
	break;
 800602c:	e005      	b.n	800603a <_api_swing_task_searchHome+0x1e6>

	default:
		break;
 800602e:	46c0      	nop			@ (mov r8, r8)
 8006030:	e004      	b.n	800603c <_api_swing_task_searchHome+0x1e8>
		break;
 8006032:	46c0      	nop			@ (mov r8, r8)
 8006034:	e002      	b.n	800603c <_api_swing_task_searchHome+0x1e8>
		break;
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	e000      	b.n	800603c <_api_swing_task_searchHome+0x1e8>
	break;
 800603a:	46c0      	nop			@ (mov r8, r8)
	}
}
 800603c:	46c0      	nop			@ (mov r8, r8)
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	46c0      	nop			@ (mov r8, r8)
 8006044:	48001400 	.word	0x48001400
 8006048:	20000058 	.word	0x20000058
 800604c:	0800fd74 	.word	0x0800fd74
 8006050:	0800704d 	.word	0x0800704d
 8006054:	0800605d 	.word	0x0800605d
 8006058:	0000c350 	.word	0x0000c350

0800605c <_Api_Swing_task_Home>:

static void _Api_Swing_task_Home(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
	TaskManager_Set( API_SWING, _e_Api_Swuing_task_Home );
 8006060:	2101      	movs	r1, #1
 8006062:	200d      	movs	r0, #13
 8006064:	f007 fb94 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( API_SWING ) == false )
 8006068:	200d      	movs	r0, #13
 800606a:	f007 fbf7 	bl	800d85c <TaskManager_First_Get>
 800606e:	1e03      	subs	r3, r0, #0
 8006070:	d106      	bne.n	8006080 <_Api_Swing_task_Home+0x24>
	{
		TaskManager_First_Set ( API_SWING );
 8006072:	200d      	movs	r0, #13
 8006074:	f007 fba8 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set ( API_SWING, 0 );
 8006078:	2100      	movs	r1, #0
 800607a:	200d      	movs	r0, #13
 800607c:	f007 fc10 	bl	800d8a0 <TaskManager_Step_Set>
	}

	switch( (uint8_t)TaskManager_Step_Get( API_SWING ) )
 8006080:	200d      	movs	r0, #13
 8006082:	f007 fc37 	bl	800d8f4 <TaskManager_Step_Get>
 8006086:	0003      	movs	r3, r0
 8006088:	2b06      	cmp	r3, #6
 800608a:	d900      	bls.n	800608e <_Api_Swing_task_Home+0x32>
 800608c:	e094      	b.n	80061b8 <_Api_Swing_task_Home+0x15c>
 800608e:	009a      	lsls	r2, r3, #2
 8006090:	4b4e      	ldr	r3, [pc, #312]	@ (80061cc <_Api_Swing_task_Home+0x170>)
 8006092:	18d3      	adds	r3, r2, r3
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	469f      	mov	pc, r3
	{
		case 0:
		{
			if ( sApiSwingCmdInfo.bComandoRecebido == true ) // Se chegou msg do pc
 8006098:	4b4d      	ldr	r3, [pc, #308]	@ (80061d0 <_Api_Swing_task_Home+0x174>)
 800609a:	7d9b      	ldrb	r3, [r3, #22]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d108      	bne.n	80060b2 <_Api_Swing_task_Home+0x56>
			{
				_Api_Swing_RenewTimeoutCamera();
 80060a0:	f7ff fec8 	bl	8005e34 <_Api_Swing_RenewTimeoutCamera>
				sApiSwingCmdInfo.bComandoRecebido = false;
 80060a4:	4b4a      	ldr	r3, [pc, #296]	@ (80061d0 <_Api_Swing_task_Home+0x174>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	759a      	strb	r2, [r3, #22]
				TaskManager_Step_Set( API_SWING, 3 );
 80060aa:	2103      	movs	r1, #3
 80060ac:	200d      	movs	r0, #13
 80060ae:	f007 fbf7 	bl	800d8a0 <TaskManager_Step_Set>
			}

			// Verificar timeout e mudar estado caso tempo tenha estourado
			if(HAL_GetTick() > sApiSwingVar.m_u32TimeoutPolling)
 80060b2:	f7fc f995 	bl	80023e0 <HAL_GetTick>
 80060b6:	0002      	movs	r2, r0
 80060b8:	4b46      	ldr	r3, [pc, #280]	@ (80061d4 <_Api_Swing_task_Home+0x178>)
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d800      	bhi.n	80060c2 <_Api_Swing_task_Home+0x66>
 80060c0:	e07f      	b.n	80061c2 <_Api_Swing_task_Home+0x166>
			{
				TaskManager_Step_Set( API_SWING, 1 );
 80060c2:	2101      	movs	r1, #1
 80060c4:	200d      	movs	r0, #13
 80060c6:	f007 fbeb 	bl	800d8a0 <TaskManager_Step_Set>
			}
			break;
 80060ca:	e07a      	b.n	80061c2 <_Api_Swing_task_Home+0x166>
		}

		case 1:
		{

			if ( sApiSwingCmdInfo.bComandoRecebido == true )
 80060cc:	4b40      	ldr	r3, [pc, #256]	@ (80061d0 <_Api_Swing_task_Home+0x174>)
 80060ce:	7d9b      	ldrb	r3, [r3, #22]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d115      	bne.n	8006100 <_Api_Swing_task_Home+0xa4>
			{
				_Api_Swing_RenewTimeoutCamera();
 80060d4:	f7ff feae 	bl	8005e34 <_Api_Swing_RenewTimeoutCamera>
				if ( Position_Config_Mode(_e_PosModCfg_PC) == _e_PosRet_Ok) {
 80060d8:	2000      	movs	r0, #0
 80060da:	f005 ff83 	bl	800bfe4 <Position_Config_Mode>
 80060de:	1e03      	subs	r3, r0, #0
 80060e0:	d109      	bne.n	80060f6 <_Api_Swing_task_Home+0x9a>
					TaskManager_Go(API_SWING, _api_swing_task_mode_pc);
 80060e2:	4b3d      	ldr	r3, [pc, #244]	@ (80061d8 <_Api_Swing_task_Home+0x17c>)
 80060e4:	0019      	movs	r1, r3
 80060e6:	200d      	movs	r0, #13
 80060e8:	f007 fb04 	bl	800d6f4 <TaskManager_Go>
					TaskManager_Step_Set( API_SWING, 0 );
 80060ec:	2100      	movs	r1, #0
 80060ee:	200d      	movs	r0, #13
 80060f0:	f007 fbd6 	bl	800d8a0 <TaskManager_Step_Set>
			}
			else {
				TaskManager_Step_Set( API_SWING, 4 );
			}

			break;
 80060f4:	e068      	b.n	80061c8 <_Api_Swing_task_Home+0x16c>
					TaskManager_Step_Set( API_SWING, 6 );
 80060f6:	2106      	movs	r1, #6
 80060f8:	200d      	movs	r0, #13
 80060fa:	f007 fbd1 	bl	800d8a0 <TaskManager_Step_Set>
					return;
 80060fe:	e063      	b.n	80061c8 <_Api_Swing_task_Home+0x16c>
				TaskManager_Step_Set( API_SWING, 4 );
 8006100:	2104      	movs	r1, #4
 8006102:	200d      	movs	r0, #13
 8006104:	f007 fbcc 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 8006108:	e05e      	b.n	80061c8 <_Api_Swing_task_Home+0x16c>
		}

		case 2: // Idle
		{

			if( Api_Swing_alarm() == false ){
 800610a:	f001 fafb 	bl	8007704 <Api_Swing_alarm>
 800610e:	1e03      	subs	r3, r0, #0
 8006110:	d118      	bne.n	8006144 <_Api_Swing_task_Home+0xe8>
				if( Inputs_Urn_CardDet(_e_UrnCardDet_Get) == true ) {
 8006112:	2000      	movs	r0, #0
 8006114:	f004 fbaa 	bl	800a86c <Inputs_Urn_CardDet>
 8006118:	0003      	movs	r3, r0
 800611a:	2b01      	cmp	r3, #1
 800611c:	d106      	bne.n	800612c <_Api_Swing_task_Home+0xd0>
					Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Blue, _e_OutPicSpeed_Slow );
 800611e:	2305      	movs	r3, #5
 8006120:	2202      	movs	r2, #2
 8006122:	2102      	movs	r1, #2
 8006124:	2002      	movs	r0, #2
 8006126:	f005 fa1f 	bl	800b568 <Outputs_RGB_Set>
 800612a:	e00b      	b.n	8006144 <_Api_Swing_task_Home+0xe8>
				}
				else {
					if( Timing_Get_Bool( _e_Timing_Swing_Picto_RGB ) == true)
 800612c:	2012      	movs	r0, #18
 800612e:	f009 fbef 	bl	800f910 <Timing_Get_Bool>
 8006132:	0003      	movs	r3, r0
 8006134:	2b01      	cmp	r3, #1
 8006136:	d105      	bne.n	8006144 <_Api_Swing_task_Home+0xe8>
					{
						Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Static, _e_OutPicColor_TSIgr, _e_OutPicSpeed_Slow );
 8006138:	2305      	movs	r3, #5
 800613a:	2206      	movs	r2, #6
 800613c:	2101      	movs	r1, #1
 800613e:	2002      	movs	r0, #2
 8006140:	f005 fa12 	bl	800b568 <Outputs_RGB_Set>
					}
				}
			}

			TaskManager_Step_Set( API_SWING, 1 );
 8006144:	2101      	movs	r1, #1
 8006146:	200d      	movs	r0, #13
 8006148:	f007 fbaa 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 800614c:	e03c      	b.n	80061c8 <_Api_Swing_task_Home+0x16c>
		}

		case 3: //Comando recebido
		{
			TaskManager_Go( API_SWING , _api_swing_task_mode_pc );
 800614e:	4b22      	ldr	r3, [pc, #136]	@ (80061d8 <_Api_Swing_task_Home+0x17c>)
 8006150:	0019      	movs	r1, r3
 8006152:	200d      	movs	r0, #13
 8006154:	f007 face 	bl	800d6f4 <TaskManager_Go>
			TaskManager_Step_Set( API_SWING, 0 );
 8006158:	2100      	movs	r1, #0
 800615a:	200d      	movs	r0, #13
 800615c:	f007 fba0 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 8006160:	e032      	b.n	80061c8 <_Api_Swing_task_Home+0x16c>
		}

		case 4: //mode NA
		{
			if ( Position_Config_Mode(_e_PosModCfg_NA) == _e_PosRet_Ok) {
 8006162:	2001      	movs	r0, #1
 8006164:	f005 ff3e 	bl	800bfe4 <Position_Config_Mode>
 8006168:	1e03      	subs	r3, r0, #0
 800616a:	d105      	bne.n	8006178 <_Api_Swing_task_Home+0x11c>
				TaskManager_Go(API_SWING, _api_swing_task_mode_na);
 800616c:	4b1b      	ldr	r3, [pc, #108]	@ (80061dc <_Api_Swing_task_Home+0x180>)
 800616e:	0019      	movs	r1, r3
 8006170:	200d      	movs	r0, #13
 8006172:	f007 fabf 	bl	800d6f4 <TaskManager_Go>
			}
			else {
				TaskManager_Step_Set( API_SWING, 5 );
			}
			break;
 8006176:	e027      	b.n	80061c8 <_Api_Swing_task_Home+0x16c>
				TaskManager_Step_Set( API_SWING, 5 );
 8006178:	2105      	movs	r1, #5
 800617a:	200d      	movs	r0, #13
 800617c:	f007 fb90 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 8006180:	e022      	b.n	80061c8 <_Api_Swing_task_Home+0x16c>
		{
#if (SW_SWING_TESTE == SW_SWING_TESTE_ENABLE )
			TaskManager_Go(API_SWING, _api_swing_task_mode_na);
			return;
#endif
			if ( Position_Status() == _e_PosSts_ModeNaRunning ) {
 8006182:	f005 ff7f 	bl	800c084 <Position_Status>
 8006186:	0003      	movs	r3, r0
 8006188:	2b05      	cmp	r3, #5
 800618a:	d11c      	bne.n	80061c6 <_Api_Swing_task_Home+0x16a>
				TaskManager_Go(API_SWING, _api_swing_task_mode_na);
 800618c:	4b13      	ldr	r3, [pc, #76]	@ (80061dc <_Api_Swing_task_Home+0x180>)
 800618e:	0019      	movs	r1, r3
 8006190:	200d      	movs	r0, #13
 8006192:	f007 faaf 	bl	800d6f4 <TaskManager_Go>
			}
			break;
 8006196:	e016      	b.n	80061c6 <_Api_Swing_task_Home+0x16a>
		{
#if (SW_SWING_TESTE == SW_SWING_TESTE_ENABLE )
			TaskManager_Go(API_SWING, _api_swing_task_mode_pc);
			return;
#endif
			if ( Position_Status() == _e_PosSts_ModePcRunning ) {
 8006198:	f005 ff74 	bl	800c084 <Position_Status>
 800619c:	0003      	movs	r3, r0
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d105      	bne.n	80061ae <_Api_Swing_task_Home+0x152>
				TaskManager_Go(API_SWING, _api_swing_task_mode_pc);
 80061a2:	4b0d      	ldr	r3, [pc, #52]	@ (80061d8 <_Api_Swing_task_Home+0x17c>)
 80061a4:	0019      	movs	r1, r3
 80061a6:	200d      	movs	r0, #13
 80061a8:	f007 faa4 	bl	800d6f4 <TaskManager_Go>
			}
			else {
				TaskManager_Step_Set( API_SWING, 0 );
			}
			break;
 80061ac:	e00c      	b.n	80061c8 <_Api_Swing_task_Home+0x16c>
				TaskManager_Step_Set( API_SWING, 0 );
 80061ae:	2100      	movs	r1, #0
 80061b0:	200d      	movs	r0, #13
 80061b2:	f007 fb75 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 80061b6:	e007      	b.n	80061c8 <_Api_Swing_task_Home+0x16c>
		}

		default:
			TaskManager_Step_Set( API_SWING, 0 );
 80061b8:	2100      	movs	r1, #0
 80061ba:	200d      	movs	r0, #13
 80061bc:	f007 fb70 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 80061c0:	e002      	b.n	80061c8 <_Api_Swing_task_Home+0x16c>
			break;
 80061c2:	46c0      	nop			@ (mov r8, r8)
 80061c4:	e000      	b.n	80061c8 <_Api_Swing_task_Home+0x16c>
			break;
 80061c6:	46c0      	nop			@ (mov r8, r8)
	}

}
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	0800fd94 	.word	0x0800fd94
 80061d0:	20000030 	.word	0x20000030
 80061d4:	20000058 	.word	0x20000058
 80061d8:	0800663d 	.word	0x0800663d
 80061dc:	08006b59 	.word	0x08006b59

080061e0 <_Api_Swing_task_Trata_Packet>:
	_e_Api_Swuing_task_Trata_Packet,

}t_ApiSwing_Packet_PC_task;

static void _Api_Swing_task_Trata_Packet(void)
{
 80061e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af02      	add	r7, sp, #8
	static eStatusAcesso_t eAcessoEntrada;
	static eStatusAcesso_t eAcessoSaida;

	tApiSwUartFlag packet;

	TaskManager_Set( TRATA_PACKET, _e_Api_Swuing_task_Trata_Packet );
 80061e6:	2100      	movs	r1, #0
 80061e8:	200f      	movs	r0, #15
 80061ea:	f007 fad1 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( TRATA_PACKET ) == false )
 80061ee:	200f      	movs	r0, #15
 80061f0:	f007 fb34 	bl	800d85c <TaskManager_First_Get>
 80061f4:	1e03      	subs	r3, r0, #0
 80061f6:	d115      	bne.n	8006224 <_Api_Swing_task_Trata_Packet+0x44>
	{
		TaskManager_First_Set ( TRATA_PACKET );
 80061f8:	200f      	movs	r0, #15
 80061fa:	f007 fae5 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set ( TRATA_PACKET, 0 );
 80061fe:	2100      	movs	r1, #0
 8006200:	200f      	movs	r0, #15
 8006202:	f007 fb4d 	bl	800d8a0 <TaskManager_Step_Set>

		sApiSwingCmdInfo.u16QtdePacket   = 0;
 8006206:	4bd3      	ldr	r3, [pc, #844]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 8006208:	2200      	movs	r2, #0
 800620a:	831a      	strh	r2, [r3, #24]
		sApiSwingCmdInfo.u32SomaPosicao1 = 0;
 800620c:	4bd1      	ldr	r3, [pc, #836]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 800620e:	2200      	movs	r2, #0
 8006210:	61da      	str	r2, [r3, #28]
		sApiSwingCmdInfo.u32SomaPosicao2 = 0;
 8006212:	4bd0      	ldr	r3, [pc, #832]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 8006214:	2200      	movs	r2, #0
 8006216:	621a      	str	r2, [r3, #32]
		eAcessoEntrada = _e_Sem_Acesso;
 8006218:	4bcf      	ldr	r3, [pc, #828]	@ (8006558 <_Api_Swing_task_Trata_Packet+0x378>)
 800621a:	2200      	movs	r2, #0
 800621c:	701a      	strb	r2, [r3, #0]
		eAcessoSaida = _e_Sem_Acesso;
 800621e:	4bcf      	ldr	r3, [pc, #828]	@ (800655c <_Api_Swing_task_Trata_Packet+0x37c>)
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
	}
	switch( (uint8_t)TaskManager_Step_Get( TRATA_PACKET ) ) {
 8006224:	200f      	movs	r0, #15
 8006226:	f007 fb65 	bl	800d8f4 <TaskManager_Step_Get>
 800622a:	0003      	movs	r3, r0
 800622c:	2b03      	cmp	r3, #3
 800622e:	d100      	bne.n	8006232 <_Api_Swing_task_Trata_Packet+0x52>
 8006230:	e1f2      	b.n	8006618 <_Api_Swing_task_Trata_Packet+0x438>
 8006232:	dd00      	ble.n	8006236 <_Api_Swing_task_Trata_Packet+0x56>
 8006234:	e1f5      	b.n	8006622 <_Api_Swing_task_Trata_Packet+0x442>
 8006236:	2b02      	cmp	r3, #2
 8006238:	d100      	bne.n	800623c <_Api_Swing_task_Trata_Packet+0x5c>
 800623a:	e0fc      	b.n	8006436 <_Api_Swing_task_Trata_Packet+0x256>
 800623c:	dd00      	ble.n	8006240 <_Api_Swing_task_Trata_Packet+0x60>
 800623e:	e1f0      	b.n	8006622 <_Api_Swing_task_Trata_Packet+0x442>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <_Api_Swing_task_Trata_Packet+0x6a>
 8006244:	2b01      	cmp	r3, #1
 8006246:	d030      	beq.n	80062aa <_Api_Swing_task_Trata_Packet+0xca>
			TaskManager_Step_Set ( TRATA_PACKET, 0 );
			break;

		default:

			break;
 8006248:	e1eb      	b.n	8006622 <_Api_Swing_task_Trata_Packet+0x442>
			switch((uint8_t)Inputs_Com_Get())
 800624a:	f004 fad9 	bl	800a800 <Inputs_Com_Get>
 800624e:	0003      	movs	r3, r0
 8006250:	2b01      	cmp	r3, #1
 8006252:	d002      	beq.n	800625a <_Api_Swing_task_Trata_Packet+0x7a>
 8006254:	2b02      	cmp	r3, #2
 8006256:	d008      	beq.n	800626a <_Api_Swing_task_Trata_Packet+0x8a>
 8006258:	e00f      	b.n	800627a <_Api_Swing_task_Trata_Packet+0x9a>
					if(eAcessoEntrada == _e_Sem_Acesso)
 800625a:	4bbf      	ldr	r3, [pc, #764]	@ (8006558 <_Api_Swing_task_Trata_Packet+0x378>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d11a      	bne.n	8006298 <_Api_Swing_task_Trata_Packet+0xb8>
						eAcessoEntrada = _e_Acesso_Valido_Pendente;
 8006262:	4bbd      	ldr	r3, [pc, #756]	@ (8006558 <_Api_Swing_task_Trata_Packet+0x378>)
 8006264:	2201      	movs	r2, #1
 8006266:	701a      	strb	r2, [r3, #0]
					break;
 8006268:	e016      	b.n	8006298 <_Api_Swing_task_Trata_Packet+0xb8>
					if(eAcessoSaida == _e_Sem_Acesso)
 800626a:	4bbc      	ldr	r3, [pc, #752]	@ (800655c <_Api_Swing_task_Trata_Packet+0x37c>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d114      	bne.n	800629c <_Api_Swing_task_Trata_Packet+0xbc>
						eAcessoSaida = _e_Acesso_Valido_Pendente;
 8006272:	4bba      	ldr	r3, [pc, #744]	@ (800655c <_Api_Swing_task_Trata_Packet+0x37c>)
 8006274:	2201      	movs	r2, #1
 8006276:	701a      	strb	r2, [r3, #0]
					break;
 8006278:	e010      	b.n	800629c <_Api_Swing_task_Trata_Packet+0xbc>
					if ( eAcessoEntrada == _e_Acesso_Valido_Enviado ) {
 800627a:	4bb7      	ldr	r3, [pc, #732]	@ (8006558 <_Api_Swing_task_Trata_Packet+0x378>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d102      	bne.n	8006288 <_Api_Swing_task_Trata_Packet+0xa8>
						eAcessoEntrada = _e_Sem_Acesso;
 8006282:	4bb5      	ldr	r3, [pc, #724]	@ (8006558 <_Api_Swing_task_Trata_Packet+0x378>)
 8006284:	2200      	movs	r2, #0
 8006286:	701a      	strb	r2, [r3, #0]
					if ( eAcessoSaida == _e_Acesso_Valido_Enviado ) {
 8006288:	4bb4      	ldr	r3, [pc, #720]	@ (800655c <_Api_Swing_task_Trata_Packet+0x37c>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d107      	bne.n	80062a0 <_Api_Swing_task_Trata_Packet+0xc0>
						eAcessoSaida = _e_Sem_Acesso;
 8006290:	4bb2      	ldr	r3, [pc, #712]	@ (800655c <_Api_Swing_task_Trata_Packet+0x37c>)
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]
					break;
 8006296:	e003      	b.n	80062a0 <_Api_Swing_task_Trata_Packet+0xc0>
					break;
 8006298:	46c0      	nop			@ (mov r8, r8)
 800629a:	e002      	b.n	80062a2 <_Api_Swing_task_Trata_Packet+0xc2>
					break;
 800629c:	46c0      	nop			@ (mov r8, r8)
 800629e:	e000      	b.n	80062a2 <_Api_Swing_task_Trata_Packet+0xc2>
					break;
 80062a0:	46c0      	nop			@ (mov r8, r8)
			TaskManager_Step_Inc(TRATA_PACKET);
 80062a2:	200f      	movs	r0, #15
 80062a4:	f007 fb4a 	bl	800d93c <TaskManager_Step_Inc>
			break;
 80062a8:	e1c0      	b.n	800662c <_Api_Swing_task_Trata_Packet+0x44c>
				packet = Protocolo_Flag_Get() ;
 80062aa:	1dfc      	adds	r4, r7, #7
 80062ac:	f7ff fdb0 	bl	8005e10 <Protocolo_Flag_Get>
 80062b0:	0003      	movs	r3, r0
 80062b2:	7023      	strb	r3, [r4, #0]
				if(packet == _e_ApiSwUartFlag_PackOk )
 80062b4:	1dfb      	adds	r3, r7, #7
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d161      	bne.n	8006380 <_Api_Swing_task_Trata_Packet+0x1a0>
					sApiSwPcdbg.OK++;
 80062bc:	4ba8      	ldr	r3, [pc, #672]	@ (8006560 <_Api_Swing_task_Trata_Packet+0x380>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	4ba7      	ldr	r3, [pc, #668]	@ (8006560 <_Api_Swing_task_Trata_Packet+0x380>)
 80062c4:	601a      	str	r2, [r3, #0]
					if(eAcessoEntrada == _e_Acesso_Valido_Pendente)
 80062c6:	4ba4      	ldr	r3, [pc, #656]	@ (8006558 <_Api_Swing_task_Trata_Packet+0x378>)
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d102      	bne.n	80062d4 <_Api_Swing_task_Trata_Packet+0xf4>
						sApiSwingCmdInfo.sInfo.u8AcessoIn = 1;
 80062ce:	4ba1      	ldr	r3, [pc, #644]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	751a      	strb	r2, [r3, #20]
					if(eAcessoSaida == _e_Acesso_Valido_Pendente)
 80062d4:	4ba1      	ldr	r3, [pc, #644]	@ (800655c <_Api_Swing_task_Trata_Packet+0x37c>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d102      	bne.n	80062e2 <_Api_Swing_task_Trata_Packet+0x102>
						sApiSwingCmdInfo.sInfo.u8AcessoOut = 1;
 80062dc:	4b9d      	ldr	r3, [pc, #628]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80062de:	2201      	movs	r2, #1
 80062e0:	755a      	strb	r2, [r3, #21]
					sApiSwingCmdInfo.u8Quantidade = Package_Mount(sApiSwingCmdInfo.u8Buffer, sizeof(sApiSwingCmdInfo.u8Buffer), sApiSwingCmdInfo.sInfo);
 80062e2:	4b9c      	ldr	r3, [pc, #624]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80062e4:	220d      	movs	r2, #13
 80062e6:	4d9b      	ldr	r5, [pc, #620]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80062e8:	5c99      	ldrb	r1, [r3, r2]
 80062ea:	1898      	adds	r0, r3, r2
 80062ec:	7840      	ldrb	r0, [r0, #1]
 80062ee:	0200      	lsls	r0, r0, #8
 80062f0:	4301      	orrs	r1, r0
 80062f2:	1898      	adds	r0, r3, r2
 80062f4:	7880      	ldrb	r0, [r0, #2]
 80062f6:	0400      	lsls	r0, r0, #16
 80062f8:	4301      	orrs	r1, r0
 80062fa:	1898      	adds	r0, r3, r2
 80062fc:	78c0      	ldrb	r0, [r0, #3]
 80062fe:	0600      	lsls	r0, r0, #24
 8006300:	4301      	orrs	r1, r0
 8006302:	000e      	movs	r6, r1
 8006304:	1899      	adds	r1, r3, r2
 8006306:	7908      	ldrb	r0, [r1, #4]
 8006308:	794c      	ldrb	r4, [r1, #5]
 800630a:	0224      	lsls	r4, r4, #8
 800630c:	4320      	orrs	r0, r4
 800630e:	798c      	ldrb	r4, [r1, #6]
 8006310:	0424      	lsls	r4, r4, #16
 8006312:	4320      	orrs	r0, r4
 8006314:	79c9      	ldrb	r1, [r1, #7]
 8006316:	0609      	lsls	r1, r1, #24
 8006318:	4301      	orrs	r1, r0
 800631a:	0008      	movs	r0, r1
 800631c:	2108      	movs	r1, #8
 800631e:	189b      	adds	r3, r3, r2
 8006320:	185a      	adds	r2, r3, r1
 8006322:	466b      	mov	r3, sp
 8006324:	7812      	ldrb	r2, [r2, #0]
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	0032      	movs	r2, r6
 800632a:	0003      	movs	r3, r0
 800632c:	210c      	movs	r1, #12
 800632e:	0028      	movs	r0, r5
 8006330:	f006 f87e 	bl	800c430 <Package_Mount>
 8006334:	0003      	movs	r3, r0
 8006336:	001a      	movs	r2, r3
 8006338:	4b86      	ldr	r3, [pc, #536]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 800633a:	731a      	strb	r2, [r3, #12]
					sApiSwingCmdInfo.bComandoRecebido = true;
 800633c:	4b85      	ldr	r3, [pc, #532]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 800633e:	2201      	movs	r2, #1
 8006340:	759a      	strb	r2, [r3, #22]
					if ( (eAcessoEntrada == _e_Sem_Acesso) && (eAcessoSaida == _e_Sem_Acesso) ) {
 8006342:	4b85      	ldr	r3, [pc, #532]	@ (8006558 <_Api_Swing_task_Trata_Packet+0x378>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10e      	bne.n	8006368 <_Api_Swing_task_Trata_Packet+0x188>
 800634a:	4b84      	ldr	r3, [pc, #528]	@ (800655c <_Api_Swing_task_Trata_Packet+0x37c>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <_Api_Swing_task_Trata_Packet+0x188>
						sApiSwingCmdInfo.sInfo.u8AcessoIn  = 0;
 8006352:	4b80      	ldr	r3, [pc, #512]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 8006354:	2200      	movs	r2, #0
 8006356:	751a      	strb	r2, [r3, #20]
						sApiSwingCmdInfo.sInfo.u8AcessoOut = 0;
 8006358:	4b7e      	ldr	r3, [pc, #504]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 800635a:	2200      	movs	r2, #0
 800635c:	755a      	strb	r2, [r3, #21]
						TaskManager_Step_Set ( TRATA_PACKET, 3 );
 800635e:	2103      	movs	r1, #3
 8006360:	200f      	movs	r0, #15
 8006362:	f007 fa9d 	bl	800d8a0 <TaskManager_Step_Set>
 8006366:	e003      	b.n	8006370 <_Api_Swing_task_Trata_Packet+0x190>
						TaskManager_Step_Set ( TRATA_PACKET, 2 );
 8006368:	2102      	movs	r1, #2
 800636a:	200f      	movs	r0, #15
 800636c:	f007 fa98 	bl	800d8a0 <TaskManager_Step_Set>
					Usart_Set_Tx_Buff(sApiSwingCmdInfo.u8Buffer, sApiSwingCmdInfo.u8Quantidade);
 8006370:	4b78      	ldr	r3, [pc, #480]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 8006372:	7b1a      	ldrb	r2, [r3, #12]
 8006374:	4b77      	ldr	r3, [pc, #476]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 8006376:	0011      	movs	r1, r2
 8006378:	0018      	movs	r0, r3
 800637a:	f009 faed 	bl	800f958 <Usart_Set_Tx_Buff>
			break;
 800637e:	e152      	b.n	8006626 <_Api_Swing_task_Trata_Packet+0x446>
				else if(packet == _e_ApiSwUartFlag_PackNok )
 8006380:	1dfb      	adds	r3, r7, #7
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d000      	beq.n	800638a <_Api_Swing_task_Trata_Packet+0x1aa>
 8006388:	e14d      	b.n	8006626 <_Api_Swing_task_Trata_Packet+0x446>
					sApiSwPcdbg.ERR++;
 800638a:	4b75      	ldr	r3, [pc, #468]	@ (8006560 <_Api_Swing_task_Trata_Packet+0x380>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	4b73      	ldr	r3, [pc, #460]	@ (8006560 <_Api_Swing_task_Trata_Packet+0x380>)
 8006392:	605a      	str	r2, [r3, #4]
					sApiSwingCmdInfo.sInfo.u8Posicao_1 = sApiSwingCmdInfo.sInfo.u8Sentido_1 = sApiSwingCmdInfo.sInfo.u8Velocidade_1 = 0xFF;
 8006394:	4b6f      	ldr	r3, [pc, #444]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 8006396:	22ff      	movs	r2, #255	@ 0xff
 8006398:	741a      	strb	r2, [r3, #16]
 800639a:	4b6e      	ldr	r3, [pc, #440]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 800639c:	7c1a      	ldrb	r2, [r3, #16]
 800639e:	4b6d      	ldr	r3, [pc, #436]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80063a0:	739a      	strb	r2, [r3, #14]
 80063a2:	4b6c      	ldr	r3, [pc, #432]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80063a4:	7b9a      	ldrb	r2, [r3, #14]
 80063a6:	4b6b      	ldr	r3, [pc, #428]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80063a8:	73da      	strb	r2, [r3, #15]
					sApiSwingCmdInfo.sInfo.u8Posicao_2 = sApiSwingCmdInfo.sInfo.u8Sentido_2 = sApiSwingCmdInfo.sInfo.u8Velocidade_2 = 0xFF;
 80063aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80063ac:	22ff      	movs	r2, #255	@ 0xff
 80063ae:	74da      	strb	r2, [r3, #19]
 80063b0:	4b68      	ldr	r3, [pc, #416]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80063b2:	7cda      	ldrb	r2, [r3, #19]
 80063b4:	4b67      	ldr	r3, [pc, #412]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80063b6:	745a      	strb	r2, [r3, #17]
 80063b8:	4b66      	ldr	r3, [pc, #408]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80063ba:	7c5a      	ldrb	r2, [r3, #17]
 80063bc:	4b65      	ldr	r3, [pc, #404]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80063be:	749a      	strb	r2, [r3, #18]
					sApiSwingCmdInfo.sInfo.u8AcessoIn = 0;
 80063c0:	4b64      	ldr	r3, [pc, #400]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	751a      	strb	r2, [r3, #20]
					sApiSwingCmdInfo.sInfo.u8AcessoOut = 0;
 80063c6:	4b63      	ldr	r3, [pc, #396]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	755a      	strb	r2, [r3, #21]
					sApiSwingCmdInfo.u8Quantidade = Package_Mount(sApiSwingCmdInfo.u8Buffer, sizeof(sApiSwingCmdInfo.u8Buffer), sApiSwingCmdInfo.sInfo);
 80063cc:	4b61      	ldr	r3, [pc, #388]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80063ce:	220d      	movs	r2, #13
 80063d0:	4d60      	ldr	r5, [pc, #384]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80063d2:	5c99      	ldrb	r1, [r3, r2]
 80063d4:	1898      	adds	r0, r3, r2
 80063d6:	7840      	ldrb	r0, [r0, #1]
 80063d8:	0200      	lsls	r0, r0, #8
 80063da:	4301      	orrs	r1, r0
 80063dc:	1898      	adds	r0, r3, r2
 80063de:	7880      	ldrb	r0, [r0, #2]
 80063e0:	0400      	lsls	r0, r0, #16
 80063e2:	4301      	orrs	r1, r0
 80063e4:	1898      	adds	r0, r3, r2
 80063e6:	78c0      	ldrb	r0, [r0, #3]
 80063e8:	0600      	lsls	r0, r0, #24
 80063ea:	4301      	orrs	r1, r0
 80063ec:	000e      	movs	r6, r1
 80063ee:	1899      	adds	r1, r3, r2
 80063f0:	7908      	ldrb	r0, [r1, #4]
 80063f2:	794c      	ldrb	r4, [r1, #5]
 80063f4:	0224      	lsls	r4, r4, #8
 80063f6:	4320      	orrs	r0, r4
 80063f8:	798c      	ldrb	r4, [r1, #6]
 80063fa:	0424      	lsls	r4, r4, #16
 80063fc:	4320      	orrs	r0, r4
 80063fe:	79c9      	ldrb	r1, [r1, #7]
 8006400:	0609      	lsls	r1, r1, #24
 8006402:	4301      	orrs	r1, r0
 8006404:	0008      	movs	r0, r1
 8006406:	2108      	movs	r1, #8
 8006408:	189b      	adds	r3, r3, r2
 800640a:	185a      	adds	r2, r3, r1
 800640c:	466b      	mov	r3, sp
 800640e:	7812      	ldrb	r2, [r2, #0]
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	0032      	movs	r2, r6
 8006414:	0003      	movs	r3, r0
 8006416:	210c      	movs	r1, #12
 8006418:	0028      	movs	r0, r5
 800641a:	f006 f809 	bl	800c430 <Package_Mount>
 800641e:	0003      	movs	r3, r0
 8006420:	001a      	movs	r2, r3
 8006422:	4b4c      	ldr	r3, [pc, #304]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 8006424:	731a      	strb	r2, [r3, #12]
					Usart_Set_Tx_Buff(sApiSwingCmdInfo.u8Buffer, sApiSwingCmdInfo.u8Quantidade);
 8006426:	4b4b      	ldr	r3, [pc, #300]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 8006428:	7b1a      	ldrb	r2, [r3, #12]
 800642a:	4b4a      	ldr	r3, [pc, #296]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 800642c:	0011      	movs	r1, r2
 800642e:	0018      	movs	r0, r3
 8006430:	f009 fa92 	bl	800f958 <Usart_Set_Tx_Buff>
			break;
 8006434:	e0f7      	b.n	8006626 <_Api_Swing_task_Trata_Packet+0x446>
				packet = Protocolo_Flag_Get() ;
 8006436:	1dfc      	adds	r4, r7, #7
 8006438:	f7ff fcea 	bl	8005e10 <Protocolo_Flag_Get>
 800643c:	0003      	movs	r3, r0
 800643e:	7023      	strb	r3, [r4, #0]
				if(packet == _e_ApiSwUartFlag_PackOk )
 8006440:	1dfb      	adds	r3, r7, #7
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d000      	beq.n	800644a <_Api_Swing_task_Trata_Packet+0x26a>
 8006448:	e08c      	b.n	8006564 <_Api_Swing_task_Trata_Packet+0x384>
					sApiSwPcdbg.OK++;
 800644a:	4b45      	ldr	r3, [pc, #276]	@ (8006560 <_Api_Swing_task_Trata_Packet+0x380>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	4b43      	ldr	r3, [pc, #268]	@ (8006560 <_Api_Swing_task_Trata_Packet+0x380>)
 8006452:	601a      	str	r2, [r3, #0]
					if(eAcessoEntrada == _e_Acesso_Valido_Pendente)
 8006454:	4b40      	ldr	r3, [pc, #256]	@ (8006558 <_Api_Swing_task_Trata_Packet+0x378>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d115      	bne.n	8006488 <_Api_Swing_task_Trata_Packet+0x2a8>
						if(sApiSwingCmdInfo.u8Buffer[INDEX_ACESSO_IN] == 0) {
 800645c:	4b3d      	ldr	r3, [pc, #244]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 800645e:	7a1b      	ldrb	r3, [r3, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d106      	bne.n	8006472 <_Api_Swing_task_Trata_Packet+0x292>
							sApiSwingCmdInfo.sInfo.u8AcessoIn = 1;
 8006464:	4b3b      	ldr	r3, [pc, #236]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 8006466:	2201      	movs	r2, #1
 8006468:	751a      	strb	r2, [r3, #20]
							eAcessoEntrada = _e_Acesso_Valido_Pendente;
 800646a:	4b3b      	ldr	r3, [pc, #236]	@ (8006558 <_Api_Swing_task_Trata_Packet+0x378>)
 800646c:	2201      	movs	r2, #1
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	e014      	b.n	800649c <_Api_Swing_task_Trata_Packet+0x2bc>
							sApiSwingCmdInfo.sInfo.u8AcessoIn = 0;
 8006472:	4b38      	ldr	r3, [pc, #224]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 8006474:	2200      	movs	r2, #0
 8006476:	751a      	strb	r2, [r3, #20]
							eAcessoEntrada = _e_Acesso_Valido_Enviado;
 8006478:	4b37      	ldr	r3, [pc, #220]	@ (8006558 <_Api_Swing_task_Trata_Packet+0x378>)
 800647a:	2202      	movs	r2, #2
 800647c:	701a      	strb	r2, [r3, #0]
							TaskManager_Step_Set ( TRATA_PACKET, 3 );
 800647e:	2103      	movs	r1, #3
 8006480:	200f      	movs	r0, #15
 8006482:	f007 fa0d 	bl	800d8a0 <TaskManager_Step_Set>
 8006486:	e009      	b.n	800649c <_Api_Swing_task_Trata_Packet+0x2bc>
							sApiSwingCmdInfo.sInfo.u8AcessoIn = 0;
 8006488:	4b32      	ldr	r3, [pc, #200]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 800648a:	2200      	movs	r2, #0
 800648c:	751a      	strb	r2, [r3, #20]
							eAcessoEntrada = _e_Acesso_Valido_Enviado;
 800648e:	4b32      	ldr	r3, [pc, #200]	@ (8006558 <_Api_Swing_task_Trata_Packet+0x378>)
 8006490:	2202      	movs	r2, #2
 8006492:	701a      	strb	r2, [r3, #0]
							TaskManager_Step_Set ( TRATA_PACKET, 3 );
 8006494:	2103      	movs	r1, #3
 8006496:	200f      	movs	r0, #15
 8006498:	f007 fa02 	bl	800d8a0 <TaskManager_Step_Set>
					if(eAcessoSaida == _e_Acesso_Valido_Pendente)
 800649c:	4b2f      	ldr	r3, [pc, #188]	@ (800655c <_Api_Swing_task_Trata_Packet+0x37c>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d115      	bne.n	80064d0 <_Api_Swing_task_Trata_Packet+0x2f0>
						if(sApiSwingCmdInfo.u8Buffer[INDEX_ACESSO_OUT] == 0) {
 80064a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80064a6:	7a5b      	ldrb	r3, [r3, #9]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d106      	bne.n	80064ba <_Api_Swing_task_Trata_Packet+0x2da>
							sApiSwingCmdInfo.sInfo.u8AcessoOut = 1;
 80064ac:	4b29      	ldr	r3, [pc, #164]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80064ae:	2201      	movs	r2, #1
 80064b0:	755a      	strb	r2, [r3, #21]
							eAcessoSaida = _e_Acesso_Valido_Pendente;
 80064b2:	4b2a      	ldr	r3, [pc, #168]	@ (800655c <_Api_Swing_task_Trata_Packet+0x37c>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	e014      	b.n	80064e4 <_Api_Swing_task_Trata_Packet+0x304>
							sApiSwingCmdInfo.sInfo.u8AcessoOut = 0;
 80064ba:	4b26      	ldr	r3, [pc, #152]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80064bc:	2200      	movs	r2, #0
 80064be:	755a      	strb	r2, [r3, #21]
							eAcessoSaida = _e_Acesso_Valido_Enviado;
 80064c0:	4b26      	ldr	r3, [pc, #152]	@ (800655c <_Api_Swing_task_Trata_Packet+0x37c>)
 80064c2:	2202      	movs	r2, #2
 80064c4:	701a      	strb	r2, [r3, #0]
							TaskManager_Step_Set ( TRATA_PACKET, 3 );
 80064c6:	2103      	movs	r1, #3
 80064c8:	200f      	movs	r0, #15
 80064ca:	f007 f9e9 	bl	800d8a0 <TaskManager_Step_Set>
 80064ce:	e009      	b.n	80064e4 <_Api_Swing_task_Trata_Packet+0x304>
							sApiSwingCmdInfo.sInfo.u8AcessoOut = 0;
 80064d0:	4b20      	ldr	r3, [pc, #128]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	755a      	strb	r2, [r3, #21]
							eAcessoSaida = _e_Acesso_Valido_Enviado;
 80064d6:	4b21      	ldr	r3, [pc, #132]	@ (800655c <_Api_Swing_task_Trata_Packet+0x37c>)
 80064d8:	2202      	movs	r2, #2
 80064da:	701a      	strb	r2, [r3, #0]
							TaskManager_Step_Set ( TRATA_PACKET, 3 );
 80064dc:	2103      	movs	r1, #3
 80064de:	200f      	movs	r0, #15
 80064e0:	f007 f9de 	bl	800d8a0 <TaskManager_Step_Set>
					sApiSwingCmdInfo.u8Quantidade = Package_Mount(sApiSwingCmdInfo.u8Buffer, sizeof(sApiSwingCmdInfo.u8Buffer), sApiSwingCmdInfo.sInfo);
 80064e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80064e6:	220d      	movs	r2, #13
 80064e8:	4d1a      	ldr	r5, [pc, #104]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 80064ea:	5c99      	ldrb	r1, [r3, r2]
 80064ec:	1898      	adds	r0, r3, r2
 80064ee:	7840      	ldrb	r0, [r0, #1]
 80064f0:	0200      	lsls	r0, r0, #8
 80064f2:	4301      	orrs	r1, r0
 80064f4:	1898      	adds	r0, r3, r2
 80064f6:	7880      	ldrb	r0, [r0, #2]
 80064f8:	0400      	lsls	r0, r0, #16
 80064fa:	4301      	orrs	r1, r0
 80064fc:	1898      	adds	r0, r3, r2
 80064fe:	78c0      	ldrb	r0, [r0, #3]
 8006500:	0600      	lsls	r0, r0, #24
 8006502:	4301      	orrs	r1, r0
 8006504:	000e      	movs	r6, r1
 8006506:	1899      	adds	r1, r3, r2
 8006508:	7908      	ldrb	r0, [r1, #4]
 800650a:	794c      	ldrb	r4, [r1, #5]
 800650c:	0224      	lsls	r4, r4, #8
 800650e:	4320      	orrs	r0, r4
 8006510:	798c      	ldrb	r4, [r1, #6]
 8006512:	0424      	lsls	r4, r4, #16
 8006514:	4320      	orrs	r0, r4
 8006516:	79c9      	ldrb	r1, [r1, #7]
 8006518:	0609      	lsls	r1, r1, #24
 800651a:	4301      	orrs	r1, r0
 800651c:	0008      	movs	r0, r1
 800651e:	2108      	movs	r1, #8
 8006520:	189b      	adds	r3, r3, r2
 8006522:	185a      	adds	r2, r3, r1
 8006524:	466b      	mov	r3, sp
 8006526:	7812      	ldrb	r2, [r2, #0]
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	0032      	movs	r2, r6
 800652c:	0003      	movs	r3, r0
 800652e:	210c      	movs	r1, #12
 8006530:	0028      	movs	r0, r5
 8006532:	f005 ff7d 	bl	800c430 <Package_Mount>
 8006536:	0003      	movs	r3, r0
 8006538:	001a      	movs	r2, r3
 800653a:	4b06      	ldr	r3, [pc, #24]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 800653c:	731a      	strb	r2, [r3, #12]
					sApiSwingCmdInfo.bComandoRecebido = true;
 800653e:	4b05      	ldr	r3, [pc, #20]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 8006540:	2201      	movs	r2, #1
 8006542:	759a      	strb	r2, [r3, #22]
					Usart_Set_Tx_Buff(sApiSwingCmdInfo.u8Buffer, sApiSwingCmdInfo.u8Quantidade);
 8006544:	4b03      	ldr	r3, [pc, #12]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 8006546:	7b1a      	ldrb	r2, [r3, #12]
 8006548:	4b02      	ldr	r3, [pc, #8]	@ (8006554 <_Api_Swing_task_Trata_Packet+0x374>)
 800654a:	0011      	movs	r1, r2
 800654c:	0018      	movs	r0, r3
 800654e:	f009 fa03 	bl	800f958 <Usart_Set_Tx_Buff>
			break;
 8006552:	e06a      	b.n	800662a <_Api_Swing_task_Trata_Packet+0x44a>
 8006554:	20000030 	.word	0x20000030
 8006558:	20000070 	.word	0x20000070
 800655c:	20000071 	.word	0x20000071
 8006560:	20000068 	.word	0x20000068
				else if(packet == _e_ApiSwUartFlag_PackNok )
 8006564:	1dfb      	adds	r3, r7, #7
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d15e      	bne.n	800662a <_Api_Swing_task_Trata_Packet+0x44a>
					sApiSwPcdbg.ERR++;
 800656c:	4b31      	ldr	r3, [pc, #196]	@ (8006634 <_Api_Swing_task_Trata_Packet+0x454>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	4b30      	ldr	r3, [pc, #192]	@ (8006634 <_Api_Swing_task_Trata_Packet+0x454>)
 8006574:	605a      	str	r2, [r3, #4]
					sApiSwingCmdInfo.sInfo.u8Posicao_1 = sApiSwingCmdInfo.sInfo.u8Sentido_1 = sApiSwingCmdInfo.sInfo.u8Velocidade_1 = 0xFF;
 8006576:	4b30      	ldr	r3, [pc, #192]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 8006578:	22ff      	movs	r2, #255	@ 0xff
 800657a:	741a      	strb	r2, [r3, #16]
 800657c:	4b2e      	ldr	r3, [pc, #184]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 800657e:	7c1a      	ldrb	r2, [r3, #16]
 8006580:	4b2d      	ldr	r3, [pc, #180]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 8006582:	739a      	strb	r2, [r3, #14]
 8006584:	4b2c      	ldr	r3, [pc, #176]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 8006586:	7b9a      	ldrb	r2, [r3, #14]
 8006588:	4b2b      	ldr	r3, [pc, #172]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 800658a:	73da      	strb	r2, [r3, #15]
					sApiSwingCmdInfo.sInfo.u8Posicao_2 = sApiSwingCmdInfo.sInfo.u8Sentido_2 = sApiSwingCmdInfo.sInfo.u8Velocidade_2 = 0xFF;
 800658c:	4b2a      	ldr	r3, [pc, #168]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 800658e:	22ff      	movs	r2, #255	@ 0xff
 8006590:	74da      	strb	r2, [r3, #19]
 8006592:	4b29      	ldr	r3, [pc, #164]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 8006594:	7cda      	ldrb	r2, [r3, #19]
 8006596:	4b28      	ldr	r3, [pc, #160]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 8006598:	745a      	strb	r2, [r3, #17]
 800659a:	4b27      	ldr	r3, [pc, #156]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 800659c:	7c5a      	ldrb	r2, [r3, #17]
 800659e:	4b26      	ldr	r3, [pc, #152]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 80065a0:	749a      	strb	r2, [r3, #18]
					sApiSwingCmdInfo.sInfo.u8AcessoIn = 0;
 80065a2:	4b25      	ldr	r3, [pc, #148]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	751a      	strb	r2, [r3, #20]
					sApiSwingCmdInfo.sInfo.u8AcessoOut = 0;
 80065a8:	4b23      	ldr	r3, [pc, #140]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	755a      	strb	r2, [r3, #21]
					sApiSwingCmdInfo.u8Quantidade = Package_Mount(sApiSwingCmdInfo.u8Buffer, sizeof(sApiSwingCmdInfo.u8Buffer), sApiSwingCmdInfo.sInfo);
 80065ae:	4b22      	ldr	r3, [pc, #136]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 80065b0:	220d      	movs	r2, #13
 80065b2:	4d21      	ldr	r5, [pc, #132]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 80065b4:	5c99      	ldrb	r1, [r3, r2]
 80065b6:	1898      	adds	r0, r3, r2
 80065b8:	7840      	ldrb	r0, [r0, #1]
 80065ba:	0200      	lsls	r0, r0, #8
 80065bc:	4301      	orrs	r1, r0
 80065be:	1898      	adds	r0, r3, r2
 80065c0:	7880      	ldrb	r0, [r0, #2]
 80065c2:	0400      	lsls	r0, r0, #16
 80065c4:	4301      	orrs	r1, r0
 80065c6:	1898      	adds	r0, r3, r2
 80065c8:	78c0      	ldrb	r0, [r0, #3]
 80065ca:	0600      	lsls	r0, r0, #24
 80065cc:	4301      	orrs	r1, r0
 80065ce:	000e      	movs	r6, r1
 80065d0:	1899      	adds	r1, r3, r2
 80065d2:	7908      	ldrb	r0, [r1, #4]
 80065d4:	794c      	ldrb	r4, [r1, #5]
 80065d6:	0224      	lsls	r4, r4, #8
 80065d8:	4320      	orrs	r0, r4
 80065da:	798c      	ldrb	r4, [r1, #6]
 80065dc:	0424      	lsls	r4, r4, #16
 80065de:	4320      	orrs	r0, r4
 80065e0:	79c9      	ldrb	r1, [r1, #7]
 80065e2:	0609      	lsls	r1, r1, #24
 80065e4:	4301      	orrs	r1, r0
 80065e6:	0008      	movs	r0, r1
 80065e8:	2108      	movs	r1, #8
 80065ea:	189b      	adds	r3, r3, r2
 80065ec:	185a      	adds	r2, r3, r1
 80065ee:	466b      	mov	r3, sp
 80065f0:	7812      	ldrb	r2, [r2, #0]
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	0032      	movs	r2, r6
 80065f6:	0003      	movs	r3, r0
 80065f8:	210c      	movs	r1, #12
 80065fa:	0028      	movs	r0, r5
 80065fc:	f005 ff18 	bl	800c430 <Package_Mount>
 8006600:	0003      	movs	r3, r0
 8006602:	001a      	movs	r2, r3
 8006604:	4b0c      	ldr	r3, [pc, #48]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 8006606:	731a      	strb	r2, [r3, #12]
					Usart_Set_Tx_Buff(sApiSwingCmdInfo.u8Buffer, sApiSwingCmdInfo.u8Quantidade);
 8006608:	4b0b      	ldr	r3, [pc, #44]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 800660a:	7b1a      	ldrb	r2, [r3, #12]
 800660c:	4b0a      	ldr	r3, [pc, #40]	@ (8006638 <_Api_Swing_task_Trata_Packet+0x458>)
 800660e:	0011      	movs	r1, r2
 8006610:	0018      	movs	r0, r3
 8006612:	f009 f9a1 	bl	800f958 <Usart_Set_Tx_Buff>
			break;
 8006616:	e008      	b.n	800662a <_Api_Swing_task_Trata_Packet+0x44a>
			TaskManager_Step_Set ( TRATA_PACKET, 0 );
 8006618:	2100      	movs	r1, #0
 800661a:	200f      	movs	r0, #15
 800661c:	f007 f940 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 8006620:	e004      	b.n	800662c <_Api_Swing_task_Trata_Packet+0x44c>
			break;
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	e002      	b.n	800662c <_Api_Swing_task_Trata_Packet+0x44c>
			break;
 8006626:	46c0      	nop			@ (mov r8, r8)
 8006628:	e000      	b.n	800662c <_Api_Swing_task_Trata_Packet+0x44c>
			break;
 800662a:	46c0      	nop			@ (mov r8, r8)
	}

}
 800662c:	46c0      	nop			@ (mov r8, r8)
 800662e:	46bd      	mov	sp, r7
 8006630:	b003      	add	sp, #12
 8006632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006634:	20000068 	.word	0x20000068
 8006638:	20000030 	.word	0x20000030

0800663c <_api_swing_task_mode_pc>:
	_e_api_swing_task_mode_pc_buzzer_beep,
	_e_api_swing_task_mode_pc_buzzer_sirene,
}eApiSwStepModoPc_t;

static void _api_swing_task_mode_pc(void)
{
 800663c:	b590      	push	{r4, r7, lr}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
	tSensorSts SensorSts = _e_SensorSts_None;
 8006642:	1dfb      	adds	r3, r7, #7
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
	tSensorSts SensorStsPass = _e_SensorSts_PassWait;
 8006648:	1dbb      	adds	r3, r7, #6
 800664a:	2206      	movs	r2, #6
 800664c:	701a      	strb	r2, [r3, #0]

	TaskManager_Set( API_SWING, _e_api_swuing_task_mode_pc );
 800664e:	2102      	movs	r1, #2
 8006650:	200d      	movs	r0, #13
 8006652:	f007 f89d 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( API_SWING ) == false )
 8006656:	200d      	movs	r0, #13
 8006658:	f007 f900 	bl	800d85c <TaskManager_First_Get>
 800665c:	1e03      	subs	r3, r0, #0
 800665e:	d109      	bne.n	8006674 <_api_swing_task_mode_pc+0x38>
	{
		TaskManager_First_Set( API_SWING );
 8006660:	200d      	movs	r0, #13
 8006662:	f007 f8b1 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_pc_idle );
 8006666:	2100      	movs	r1, #0
 8006668:	200d      	movs	r0, #13
 800666a:	f007 f919 	bl	800d8a0 <TaskManager_Step_Set>

		Sensor_Set( _e_SensorMode_Alarm );
 800666e:	2001      	movs	r0, #1
 8006670:	f006 f920 	bl	800c8b4 <Sensor_Set>
	}

	switch( (uint8_t)TaskManager_Step_Get( API_SWING ) )
 8006674:	200d      	movs	r0, #13
 8006676:	f007 f93d 	bl	800d8f4 <TaskManager_Step_Get>
 800667a:	0003      	movs	r3, r0
 800667c:	2b08      	cmp	r3, #8
 800667e:	d900      	bls.n	8006682 <_api_swing_task_mode_pc+0x46>
 8006680:	e1de      	b.n	8006a40 <_api_swing_task_mode_pc+0x404>
 8006682:	009a      	lsls	r2, r3, #2
 8006684:	4bd3      	ldr	r3, [pc, #844]	@ (80069d4 <_api_swing_task_mode_pc+0x398>)
 8006686:	18d3      	adds	r3, r2, r3
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	469f      	mov	pc, r3
	{
		case _e_api_swing_task_mode_pc_idle:

			Sensor_Set( _e_SensorMode_Alarm );
 800668c:	2001      	movs	r0, #1
 800668e:	f006 f911 	bl	800c8b4 <Sensor_Set>
			SensorSts = Sensor_Get();
 8006692:	1dfc      	adds	r4, r7, #7
 8006694:	f006 f904 	bl	800c8a0 <Sensor_Get>
 8006698:	0003      	movs	r3, r0
 800669a:	7023      	strb	r3, [r4, #0]

			if( Inputs_Com_Get() == _e_InCom_OpenIn  ) {
 800669c:	f004 f8b0 	bl	800a800 <Inputs_Com_Get>
 80066a0:	0003      	movs	r3, r0
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d103      	bne.n	80066ae <_api_swing_task_mode_pc+0x72>
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_pc_entrance);
 80066a6:	2102      	movs	r1, #2
 80066a8:	200d      	movs	r0, #13
 80066aa:	f007 f8f9 	bl	800d8a0 <TaskManager_Step_Set>
			}
			if( Inputs_Com_Get() == _e_InCom_OpenOut ) {
 80066ae:	f004 f8a7 	bl	800a800 <Inputs_Com_Get>
 80066b2:	0003      	movs	r3, r0
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d103      	bne.n	80066c0 <_api_swing_task_mode_pc+0x84>
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_pc_exit );
 80066b8:	2104      	movs	r1, #4
 80066ba:	200d      	movs	r0, #13
 80066bc:	f007 f8f0 	bl	800d8a0 <TaskManager_Step_Set>
			}

			switch(SensorSts)
 80066c0:	1dfb      	adds	r3, r7, #7
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d01b      	beq.n	8006700 <_api_swing_task_mode_pc+0xc4>
 80066c8:	dc31      	bgt.n	800672e <_api_swing_task_mode_pc+0xf2>
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d002      	beq.n	80066d4 <_api_swing_task_mode_pc+0x98>
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d00b      	beq.n	80066ea <_api_swing_task_mode_pc+0xae>
 80066d2:	e02c      	b.n	800672e <_api_swing_task_mode_pc+0xf2>
			{
				case _e_SensorSts_AlarmEntrance:
					Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 80066d4:	2300      	movs	r3, #0
 80066d6:	2200      	movs	r2, #0
 80066d8:	2102      	movs	r1, #2
 80066da:	2000      	movs	r0, #0
 80066dc:	f004 ff44 	bl	800b568 <Outputs_RGB_Set>
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_pc_close);
 80066e0:	2101      	movs	r1, #1
 80066e2:	200d      	movs	r0, #13
 80066e4:	f007 f8dc 	bl	800d8a0 <TaskManager_Step_Set>

					break;
 80066e8:	e060      	b.n	80067ac <_api_swing_task_mode_pc+0x170>
				case _e_SensorSts_AlarmExit:
					Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 80066ea:	2300      	movs	r3, #0
 80066ec:	2200      	movs	r2, #0
 80066ee:	2102      	movs	r1, #2
 80066f0:	2001      	movs	r0, #1
 80066f2:	f004 ff39 	bl	800b568 <Outputs_RGB_Set>
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_pc_close);
 80066f6:	2101      	movs	r1, #1
 80066f8:	200d      	movs	r0, #13
 80066fa:	f007 f8d1 	bl	800d8a0 <TaskManager_Step_Set>
					break;
 80066fe:	e055      	b.n	80067ac <_api_swing_task_mode_pc+0x170>
				case _E_SensorSts_AlarmMid:
					Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006700:	2300      	movs	r3, #0
 8006702:	2200      	movs	r2, #0
 8006704:	2102      	movs	r1, #2
 8006706:	2002      	movs	r0, #2
 8006708:	f004 ff2e 	bl	800b568 <Outputs_RGB_Set>
					Outputs_Buzz_Set( _e_OutBuzz_Siren );
 800670c:	2004      	movs	r0, #4
 800670e:	f004 fee5 	bl	800b4dc <Outputs_Buzz_Set>
					Timing_Set(_e_Timing_Swing_Beep, 500);
 8006712:	23fa      	movs	r3, #250	@ 0xfa
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	0019      	movs	r1, r3
 8006718:	200b      	movs	r0, #11
 800671a:	f009 f8e3 	bl	800f8e4 <Timing_Set>

					sApiSwTask.stepBack = _e_api_swing_task_mode_pc_idle;
 800671e:	4bae      	ldr	r3, [pc, #696]	@ (80069d8 <_api_swing_task_mode_pc+0x39c>)
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_pc_buzzer_sirene );
 8006724:	2108      	movs	r1, #8
 8006726:	200d      	movs	r0, #13
 8006728:	f007 f8ba 	bl	800d8a0 <TaskManager_Step_Set>
					break;
 800672c:	e03e      	b.n	80067ac <_api_swing_task_mode_pc+0x170>

				default:
					if (  sApiSwingCmdInfo.sInfo.u8Posicao_1 >= APISW_POSIC_ANG_BURLA ) {
 800672e:	4bab      	ldr	r3, [pc, #684]	@ (80069dc <_api_swing_task_mode_pc+0x3a0>)
 8006730:	7bdb      	ldrb	r3, [r3, #15]
 8006732:	2b04      	cmp	r3, #4
 8006734:	d905      	bls.n	8006742 <_api_swing_task_mode_pc+0x106>
						Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006736:	2300      	movs	r3, #0
 8006738:	2200      	movs	r2, #0
 800673a:	2102      	movs	r1, #2
 800673c:	2001      	movs	r0, #1
 800673e:	f004 ff13 	bl	800b568 <Outputs_RGB_Set>
					}
					if (sApiSwingCmdInfo.sInfo.u8Posicao_2 >= APISW_POSIC_ANG_BURLA ) {
 8006742:	4ba6      	ldr	r3, [pc, #664]	@ (80069dc <_api_swing_task_mode_pc+0x3a0>)
 8006744:	7c9b      	ldrb	r3, [r3, #18]
 8006746:	2b04      	cmp	r3, #4
 8006748:	d906      	bls.n	8006758 <_api_swing_task_mode_pc+0x11c>
						Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 800674a:	2300      	movs	r3, #0
 800674c:	2200      	movs	r2, #0
 800674e:	2102      	movs	r1, #2
 8006750:	2000      	movs	r0, #0
 8006752:	f004 ff09 	bl	800b568 <Outputs_RGB_Set>
							Outputs_Buzz_Set( _e_OutBuzz_Off );
							Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Static, _e_OutPicColor_TSIgr, _e_OutPicSpeed_Fast );
							TaskManager_Go( API_SWING , _Api_Swing_task_Home );
						}
					}
					break;
 8006756:	e028      	b.n	80067aa <_api_swing_task_mode_pc+0x16e>
					else if ( (sApiSwingCmdInfo.sInfo.u8Posicao_1 < APISW_POSIC_ANG_BURLA ) && (sApiSwingCmdInfo.sInfo.u8Posicao_2 < APISW_POSIC_ANG_BURLA )) {
 8006758:	4ba0      	ldr	r3, [pc, #640]	@ (80069dc <_api_swing_task_mode_pc+0x3a0>)
 800675a:	7bdb      	ldrb	r3, [r3, #15]
 800675c:	2b04      	cmp	r3, #4
 800675e:	d824      	bhi.n	80067aa <_api_swing_task_mode_pc+0x16e>
 8006760:	4b9e      	ldr	r3, [pc, #632]	@ (80069dc <_api_swing_task_mode_pc+0x3a0>)
 8006762:	7c9b      	ldrb	r3, [r3, #18]
 8006764:	2b04      	cmp	r3, #4
 8006766:	d820      	bhi.n	80067aa <_api_swing_task_mode_pc+0x16e>
						Outputs_Buzz_Set( _e_OutBuzz_Off);
 8006768:	2001      	movs	r0, #1
 800676a:	f004 feb7 	bl	800b4dc <Outputs_Buzz_Set>
						Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Static, _e_OutPicColor_TSIgr, _e_OutPicSpeed_Fast );
 800676e:	2300      	movs	r3, #0
 8006770:	2206      	movs	r2, #6
 8006772:	2101      	movs	r1, #1
 8006774:	2002      	movs	r0, #2
 8006776:	f004 fef7 	bl	800b568 <Outputs_RGB_Set>
						if ( ( Inputs_Com_Get() != _e_InCom_OpenIn  ) && (Inputs_Com_Get() != _e_InCom_OpenOut ) ) {
 800677a:	f004 f841 	bl	800a800 <Inputs_Com_Get>
 800677e:	0003      	movs	r3, r0
 8006780:	2b01      	cmp	r3, #1
 8006782:	d012      	beq.n	80067aa <_api_swing_task_mode_pc+0x16e>
 8006784:	f004 f83c 	bl	800a800 <Inputs_Com_Get>
 8006788:	0003      	movs	r3, r0
 800678a:	2b02      	cmp	r3, #2
 800678c:	d00d      	beq.n	80067aa <_api_swing_task_mode_pc+0x16e>
							Outputs_Buzz_Set( _e_OutBuzz_Off );
 800678e:	2001      	movs	r0, #1
 8006790:	f004 fea4 	bl	800b4dc <Outputs_Buzz_Set>
							Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Static, _e_OutPicColor_TSIgr, _e_OutPicSpeed_Fast );
 8006794:	2300      	movs	r3, #0
 8006796:	2206      	movs	r2, #6
 8006798:	2101      	movs	r1, #1
 800679a:	2002      	movs	r0, #2
 800679c:	f004 fee4 	bl	800b568 <Outputs_RGB_Set>
							TaskManager_Go( API_SWING , _Api_Swing_task_Home );
 80067a0:	4b8f      	ldr	r3, [pc, #572]	@ (80069e0 <_api_swing_task_mode_pc+0x3a4>)
 80067a2:	0019      	movs	r1, r3
 80067a4:	200d      	movs	r0, #13
 80067a6:	f006 ffa5 	bl	800d6f4 <TaskManager_Go>
					break;
 80067aa:	46c0      	nop			@ (mov r8, r8)
			}

			break;
 80067ac:	e14f      	b.n	8006a4e <_api_swing_task_mode_pc+0x412>

		case _e_api_swing_task_mode_pc_close:
			Outputs_Com_Cheat( _e_OutCom_Cheat_Shit );
 80067ae:	2001      	movs	r0, #1
 80067b0:	f004 ffce 	bl	800b750 <Outputs_Com_Cheat>
			Outputs_Buzz_Set( _e_OutBuzz_Off );
 80067b4:	2001      	movs	r0, #1
 80067b6:	f004 fe91 	bl	800b4dc <Outputs_Buzz_Set>
			TaskManager_Go( API_SWING , _Api_Swing_task_Home );
 80067ba:	4b89      	ldr	r3, [pc, #548]	@ (80069e0 <_api_swing_task_mode_pc+0x3a4>)
 80067bc:	0019      	movs	r1, r3
 80067be:	200d      	movs	r0, #13
 80067c0:	f006 ff98 	bl	800d6f4 <TaskManager_Go>

			break;
 80067c4:	e143      	b.n	8006a4e <_api_swing_task_mode_pc+0x412>

		case _e_api_swing_task_mode_pc_entrance:

			Sensor_Set( _e_SensorMode_Entrance );
 80067c6:	2002      	movs	r0, #2
 80067c8:	f006 f874 	bl	800c8b4 <Sensor_Set>

			Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Green, _e_OutPicSpeed_Fast );
 80067cc:	2300      	movs	r3, #0
 80067ce:	2201      	movs	r2, #1
 80067d0:	2102      	movs	r1, #2
 80067d2:	2000      	movs	r0, #0
 80067d4:	f004 fec8 	bl	800b568 <Outputs_RGB_Set>
			Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 80067d8:	2300      	movs	r3, #0
 80067da:	2200      	movs	r2, #0
 80067dc:	2102      	movs	r1, #2
 80067de:	2001      	movs	r0, #1
 80067e0:	f004 fec2 	bl	800b568 <Outputs_RGB_Set>
			Outputs_Com_Cheat( _e_OutCom_Cheat_None );
 80067e4:	2000      	movs	r0, #0
 80067e6:	f004 ffb3 	bl	800b750 <Outputs_Com_Cheat>
			Timing_Set( _e_Timing_Swing_CloseDelay, APISWING_TIMEOUT_WAIT_ACCESS );
 80067ea:	4b7e      	ldr	r3, [pc, #504]	@ (80069e4 <_api_swing_task_mode_pc+0x3a8>)
 80067ec:	0019      	movs	r1, r3
 80067ee:	200c      	movs	r0, #12
 80067f0:	f009 f878 	bl	800f8e4 <Timing_Set>

			sApiSwTask.stepBack = _e_api_swing_task_mode_pc_waint_entrance;
 80067f4:	4b78      	ldr	r3, [pc, #480]	@ (80069d8 <_api_swing_task_mode_pc+0x39c>)
 80067f6:	2203      	movs	r2, #3
 80067f8:	701a      	strb	r2, [r3, #0]
			TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_pc_buzzer_beep );
 80067fa:	2107      	movs	r1, #7
 80067fc:	200d      	movs	r0, #13
 80067fe:	f007 f84f 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 8006802:	e124      	b.n	8006a4e <_api_swing_task_mode_pc+0x412>

		case _e_api_swing_task_mode_pc_waint_entrance:

			SensorStsPass = Sensor_Get();
 8006804:	1dbc      	adds	r4, r7, #6
 8006806:	f006 f84b 	bl	800c8a0 <Sensor_Get>
 800680a:	0003      	movs	r3, r0
 800680c:	7023      	strb	r3, [r4, #0]

			if( Inputs_Com_Get() != _e_InCom_OpenIn  	&&
 800680e:	f003 fff7 	bl	800a800 <Inputs_Com_Get>
 8006812:	0003      	movs	r3, r0
 8006814:	2b01      	cmp	r3, #1
 8006816:	d016      	beq.n	8006846 <_api_swing_task_mode_pc+0x20a>
				Inputs_Com_Get() != _e_InCom_OpenOut 	&&
 8006818:	f003 fff2 	bl	800a800 <Inputs_Com_Get>
 800681c:	0003      	movs	r3, r0
			if( Inputs_Com_Get() != _e_InCom_OpenIn  	&&
 800681e:	2b02      	cmp	r3, #2
 8006820:	d011      	beq.n	8006846 <_api_swing_task_mode_pc+0x20a>
				Timing_Get_Bool( _e_Timing_Swing_CloseDelay ) == true )
 8006822:	200c      	movs	r0, #12
 8006824:	f009 f874 	bl	800f910 <Timing_Get_Bool>
 8006828:	0003      	movs	r3, r0
				Inputs_Com_Get() != _e_InCom_OpenOut 	&&
 800682a:	2b01      	cmp	r3, #1
 800682c:	d10b      	bne.n	8006846 <_api_swing_task_mode_pc+0x20a>
			{
				Outputs_Com_Pass( _e_OutCom_Pass_Nop );
 800682e:	2000      	movs	r0, #0
 8006830:	f004 ff70 	bl	800b714 <Outputs_Com_Pass>
				Outputs_Buzz_Set( _e_OutBuzz_Off );
 8006834:	2001      	movs	r0, #1
 8006836:	f004 fe51 	bl	800b4dc <Outputs_Buzz_Set>
				TaskManager_Go( API_SWING , _Api_Swing_task_Home );
 800683a:	4b69      	ldr	r3, [pc, #420]	@ (80069e0 <_api_swing_task_mode_pc+0x3a4>)
 800683c:	0019      	movs	r1, r3
 800683e:	200d      	movs	r0, #13
 8006840:	f006 ff58 	bl	800d6f4 <TaskManager_Go>
				return;
 8006844:	e17f      	b.n	8006b46 <_api_swing_task_mode_pc+0x50a>
			}

			switch( SensorStsPass )
 8006846:	1dbb      	adds	r3, r7, #6
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b05      	cmp	r3, #5
 800684c:	d005      	beq.n	800685a <_api_swing_task_mode_pc+0x21e>
 800684e:	dc2c      	bgt.n	80068aa <_api_swing_task_mode_pc+0x26e>
 8006850:	2b02      	cmp	r3, #2
 8006852:	d016      	beq.n	8006882 <_api_swing_task_mode_pc+0x246>
 8006854:	2b04      	cmp	r3, #4
 8006856:	d01e      	beq.n	8006896 <_api_swing_task_mode_pc+0x25a>
					Outputs_Buzz_Set( _e_OutBuzz_Siren );
					break;

				default:

				break;
 8006858:	e027      	b.n	80068aa <_api_swing_task_mode_pc+0x26e>
					Outputs_RGB_Set( _e_OutPic_Both,  _e_OutPicMode_Blink, _e_OutPicColor_Pink, _e_OutPicSpeed_Fast );
 800685a:	2300      	movs	r3, #0
 800685c:	2204      	movs	r2, #4
 800685e:	2102      	movs	r1, #2
 8006860:	2002      	movs	r0, #2
 8006862:	f004 fe81 	bl	800b568 <Outputs_RGB_Set>
					Timing_Set( _e_Timing_Swing_Picto_RGB , 1000 );
 8006866:	23fa      	movs	r3, #250	@ 0xfa
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	0019      	movs	r1, r3
 800686c:	2012      	movs	r0, #18
 800686e:	f009 f839 	bl	800f8e4 <Timing_Set>
					Outputs_Com_Pass( _e_OutCom_Pass_OK );
 8006872:	2001      	movs	r0, #1
 8006874:	f004 ff4e 	bl	800b714 <Outputs_Com_Pass>
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_pc_access_ok );
 8006878:	2106      	movs	r1, #6
 800687a:	200d      	movs	r0, #13
 800687c:	f007 f810 	bl	800d8a0 <TaskManager_Step_Set>
					break;
 8006880:	e014      	b.n	80068ac <_api_swing_task_mode_pc+0x270>
					Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006882:	2300      	movs	r3, #0
 8006884:	2200      	movs	r2, #0
 8006886:	2102      	movs	r1, #2
 8006888:	2001      	movs	r0, #1
 800688a:	f004 fe6d 	bl	800b568 <Outputs_RGB_Set>
					Outputs_Buzz_Set( _e_OutBuzz_Siren );
 800688e:	2004      	movs	r0, #4
 8006890:	f004 fe24 	bl	800b4dc <Outputs_Buzz_Set>
					break;
 8006894:	e00a      	b.n	80068ac <_api_swing_task_mode_pc+0x270>
					Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006896:	2300      	movs	r3, #0
 8006898:	2200      	movs	r2, #0
 800689a:	2102      	movs	r1, #2
 800689c:	2002      	movs	r0, #2
 800689e:	f004 fe63 	bl	800b568 <Outputs_RGB_Set>
					Outputs_Buzz_Set( _e_OutBuzz_Siren );
 80068a2:	2004      	movs	r0, #4
 80068a4:	f004 fe1a 	bl	800b4dc <Outputs_Buzz_Set>
					break;
 80068a8:	e000      	b.n	80068ac <_api_swing_task_mode_pc+0x270>
				break;
 80068aa:	46c0      	nop			@ (mov r8, r8)
			}

			break;
 80068ac:	e0cf      	b.n	8006a4e <_api_swing_task_mode_pc+0x412>

		case _e_api_swing_task_mode_pc_exit:
			Sensor_Set( _e_SensorMode_Exit );
 80068ae:	2003      	movs	r0, #3
 80068b0:	f006 f800 	bl	800c8b4 <Sensor_Set>

			Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Green, _e_OutPicSpeed_Fast );
 80068b4:	2300      	movs	r3, #0
 80068b6:	2201      	movs	r2, #1
 80068b8:	2102      	movs	r1, #2
 80068ba:	2001      	movs	r0, #1
 80068bc:	f004 fe54 	bl	800b568 <Outputs_RGB_Set>
			Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 80068c0:	2300      	movs	r3, #0
 80068c2:	2200      	movs	r2, #0
 80068c4:	2102      	movs	r1, #2
 80068c6:	2000      	movs	r0, #0
 80068c8:	f004 fe4e 	bl	800b568 <Outputs_RGB_Set>
			Outputs_Com_Cheat( _e_OutCom_Cheat_None );
 80068cc:	2000      	movs	r0, #0
 80068ce:	f004 ff3f 	bl	800b750 <Outputs_Com_Cheat>
			Timing_Set( _e_Timing_Swing_CloseDelay, APISWING_TIMEOUT_WAIT_ACCESS );
 80068d2:	4b44      	ldr	r3, [pc, #272]	@ (80069e4 <_api_swing_task_mode_pc+0x3a8>)
 80068d4:	0019      	movs	r1, r3
 80068d6:	200c      	movs	r0, #12
 80068d8:	f009 f804 	bl	800f8e4 <Timing_Set>
			Outputs_Buzz_Set( _e_OutBuzz_Beep );
 80068dc:	2003      	movs	r0, #3
 80068de:	f004 fdfd 	bl	800b4dc <Outputs_Buzz_Set>
			Timing_Set(_e_Timing_Swing_Beep, 500);
 80068e2:	23fa      	movs	r3, #250	@ 0xfa
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	0019      	movs	r1, r3
 80068e8:	200b      	movs	r0, #11
 80068ea:	f008 fffb 	bl	800f8e4 <Timing_Set>
			TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_pc_buzzer_beep );
 80068ee:	2107      	movs	r1, #7
 80068f0:	200d      	movs	r0, #13
 80068f2:	f006 ffd5 	bl	800d8a0 <TaskManager_Step_Set>
			sApiSwTask.stepBack = _e_api_swing_task_mode_pc_waint_exit;
 80068f6:	4b38      	ldr	r3, [pc, #224]	@ (80069d8 <_api_swing_task_mode_pc+0x39c>)
 80068f8:	2205      	movs	r2, #5
 80068fa:	701a      	strb	r2, [r3, #0]

			break;
 80068fc:	e0a7      	b.n	8006a4e <_api_swing_task_mode_pc+0x412>

		case _e_api_swing_task_mode_pc_waint_exit:
			if( Inputs_Com_Get() != _e_InCom_OpenIn  	&&
 80068fe:	f003 ff7f 	bl	800a800 <Inputs_Com_Get>
 8006902:	0003      	movs	r3, r0
 8006904:	2b01      	cmp	r3, #1
 8006906:	d016      	beq.n	8006936 <_api_swing_task_mode_pc+0x2fa>
				Inputs_Com_Get() != _e_InCom_OpenOut 	&&
 8006908:	f003 ff7a 	bl	800a800 <Inputs_Com_Get>
 800690c:	0003      	movs	r3, r0
			if( Inputs_Com_Get() != _e_InCom_OpenIn  	&&
 800690e:	2b02      	cmp	r3, #2
 8006910:	d011      	beq.n	8006936 <_api_swing_task_mode_pc+0x2fa>
				Timing_Get_Bool( _e_Timing_Swing_CloseDelay ) == true )
 8006912:	200c      	movs	r0, #12
 8006914:	f008 fffc 	bl	800f910 <Timing_Get_Bool>
 8006918:	0003      	movs	r3, r0
				Inputs_Com_Get() != _e_InCom_OpenOut 	&&
 800691a:	2b01      	cmp	r3, #1
 800691c:	d10b      	bne.n	8006936 <_api_swing_task_mode_pc+0x2fa>
			{
				Outputs_Com_Pass( _e_OutCom_Pass_Nop );
 800691e:	2000      	movs	r0, #0
 8006920:	f004 fef8 	bl	800b714 <Outputs_Com_Pass>
				Outputs_Buzz_Set( _e_OutBuzz_Off );
 8006924:	2001      	movs	r0, #1
 8006926:	f004 fdd9 	bl	800b4dc <Outputs_Buzz_Set>
				TaskManager_Go( API_SWING , _Api_Swing_task_Home );
 800692a:	4b2d      	ldr	r3, [pc, #180]	@ (80069e0 <_api_swing_task_mode_pc+0x3a4>)
 800692c:	0019      	movs	r1, r3
 800692e:	200d      	movs	r0, #13
 8006930:	f006 fee0 	bl	800d6f4 <TaskManager_Go>
				return;
 8006934:	e107      	b.n	8006b46 <_api_swing_task_mode_pc+0x50a>
			}

			SensorStsPass = Sensor_Get();
 8006936:	1dbc      	adds	r4, r7, #6
 8006938:	f005 ffb2 	bl	800c8a0 <Sensor_Get>
 800693c:	0003      	movs	r3, r0
 800693e:	7023      	strb	r3, [r4, #0]
			switch( SensorStsPass )
 8006940:	1dbb      	adds	r3, r7, #6
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b05      	cmp	r3, #5
 8006946:	d005      	beq.n	8006954 <_api_swing_task_mode_pc+0x318>
 8006948:	dc2c      	bgt.n	80069a4 <_api_swing_task_mode_pc+0x368>
 800694a:	2b01      	cmp	r3, #1
 800694c:	d016      	beq.n	800697c <_api_swing_task_mode_pc+0x340>
 800694e:	2b04      	cmp	r3, #4
 8006950:	d01e      	beq.n	8006990 <_api_swing_task_mode_pc+0x354>
					Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
					break;

				default:

				break;
 8006952:	e027      	b.n	80069a4 <_api_swing_task_mode_pc+0x368>
					Outputs_RGB_Set( _e_OutPic_Both,  _e_OutPicMode_Blink, _e_OutPicColor_Pink, _e_OutPicSpeed_Fast );
 8006954:	2300      	movs	r3, #0
 8006956:	2204      	movs	r2, #4
 8006958:	2102      	movs	r1, #2
 800695a:	2002      	movs	r0, #2
 800695c:	f004 fe04 	bl	800b568 <Outputs_RGB_Set>
					Timing_Set( _e_Timing_Swing_Picto_RGB , 1000 );
 8006960:	23fa      	movs	r3, #250	@ 0xfa
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	0019      	movs	r1, r3
 8006966:	2012      	movs	r0, #18
 8006968:	f008 ffbc 	bl	800f8e4 <Timing_Set>
					Outputs_Com_Pass( _e_OutCom_Pass_OK );
 800696c:	2001      	movs	r0, #1
 800696e:	f004 fed1 	bl	800b714 <Outputs_Com_Pass>
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_pc_access_ok );
 8006972:	2106      	movs	r1, #6
 8006974:	200d      	movs	r0, #13
 8006976:	f006 ff93 	bl	800d8a0 <TaskManager_Step_Set>
					break;
 800697a:	e014      	b.n	80069a6 <_api_swing_task_mode_pc+0x36a>
					Outputs_Buzz_Set( _e_OutBuzz_Siren );
 800697c:	2004      	movs	r0, #4
 800697e:	f004 fdad 	bl	800b4dc <Outputs_Buzz_Set>
					Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006982:	2300      	movs	r3, #0
 8006984:	2200      	movs	r2, #0
 8006986:	2102      	movs	r1, #2
 8006988:	2000      	movs	r0, #0
 800698a:	f004 fded 	bl	800b568 <Outputs_RGB_Set>
					break;
 800698e:	e00a      	b.n	80069a6 <_api_swing_task_mode_pc+0x36a>
					Outputs_Buzz_Set( _e_OutBuzz_Siren );
 8006990:	2004      	movs	r0, #4
 8006992:	f004 fda3 	bl	800b4dc <Outputs_Buzz_Set>
					Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006996:	2300      	movs	r3, #0
 8006998:	2200      	movs	r2, #0
 800699a:	2102      	movs	r1, #2
 800699c:	2002      	movs	r0, #2
 800699e:	f004 fde3 	bl	800b568 <Outputs_RGB_Set>
					break;
 80069a2:	e000      	b.n	80069a6 <_api_swing_task_mode_pc+0x36a>
				break;
 80069a4:	46c0      	nop			@ (mov r8, r8)
			}

			break;
 80069a6:	e052      	b.n	8006a4e <_api_swing_task_mode_pc+0x412>

			case _e_api_swing_task_mode_pc_access_ok:
				if( Inputs_Com_Get() != _e_InCom_OpenIn &&
 80069a8:	f003 ff2a 	bl	800a800 <Inputs_Com_Get>
 80069ac:	0003      	movs	r3, r0
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d04c      	beq.n	8006a4c <_api_swing_task_mode_pc+0x410>
					Inputs_Com_Get() != _e_InCom_OpenOut ) {
 80069b2:	f003 ff25 	bl	800a800 <Inputs_Com_Get>
 80069b6:	0003      	movs	r3, r0
				if( Inputs_Com_Get() != _e_InCom_OpenIn &&
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d047      	beq.n	8006a4c <_api_swing_task_mode_pc+0x410>
					Outputs_Com_Pass( _e_OutCom_Pass_Nop );
 80069bc:	2000      	movs	r0, #0
 80069be:	f004 fea9 	bl	800b714 <Outputs_Com_Pass>
					Outputs_Buzz_Set( _e_OutBuzz_Off );
 80069c2:	2001      	movs	r0, #1
 80069c4:	f004 fd8a 	bl	800b4dc <Outputs_Buzz_Set>
					TaskManager_Go( API_SWING , _Api_Swing_task_Home );
 80069c8:	4b05      	ldr	r3, [pc, #20]	@ (80069e0 <_api_swing_task_mode_pc+0x3a4>)
 80069ca:	0019      	movs	r1, r3
 80069cc:	200d      	movs	r0, #13
 80069ce:	f006 fe91 	bl	800d6f4 <TaskManager_Go>
				}
				break;
 80069d2:	e03b      	b.n	8006a4c <_api_swing_task_mode_pc+0x410>
 80069d4:	0800fdb0 	.word	0x0800fdb0
 80069d8:	2000002c 	.word	0x2000002c
 80069dc:	20000030 	.word	0x20000030
 80069e0:	0800605d 	.word	0x0800605d
 80069e4:	00003a98 	.word	0x00003a98


			case _e_api_swing_task_mode_pc_buzzer_beep:
				if( Timing_Get_Bool(_e_Timing_Swing_Beep) == true)
 80069e8:	200b      	movs	r0, #11
 80069ea:	f008 ff91 	bl	800f910 <Timing_Get_Bool>
 80069ee:	0003      	movs	r3, r0
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d108      	bne.n	8006a06 <_api_swing_task_mode_pc+0x3ca>
				{
					Outputs_Buzz_Set( _e_OutBuzz_Beep );
 80069f4:	2003      	movs	r0, #3
 80069f6:	f004 fd71 	bl	800b4dc <Outputs_Buzz_Set>
					Timing_Set(_e_Timing_Swing_Beep, 500);
 80069fa:	23fa      	movs	r3, #250	@ 0xfa
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	0019      	movs	r1, r3
 8006a00:	200b      	movs	r0, #11
 8006a02:	f008 ff6f 	bl	800f8e4 <Timing_Set>
				}
				TaskManager_Step_Set( API_SWING, sApiSwTask.stepBack );
 8006a06:	4b51      	ldr	r3, [pc, #324]	@ (8006b4c <_api_swing_task_mode_pc+0x510>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	0019      	movs	r1, r3
 8006a0c:	200d      	movs	r0, #13
 8006a0e:	f006 ff47 	bl	800d8a0 <TaskManager_Step_Set>
				break;
 8006a12:	e01c      	b.n	8006a4e <_api_swing_task_mode_pc+0x412>

			case _e_api_swing_task_mode_pc_buzzer_sirene:
				if( Timing_Get_Bool(_e_Timing_Swing_Beep) == true)
 8006a14:	200b      	movs	r0, #11
 8006a16:	f008 ff7b 	bl	800f910 <Timing_Get_Bool>
 8006a1a:	0003      	movs	r3, r0
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d108      	bne.n	8006a32 <_api_swing_task_mode_pc+0x3f6>
				{
					Outputs_Buzz_Set( _e_OutBuzz_Siren );
 8006a20:	2004      	movs	r0, #4
 8006a22:	f004 fd5b 	bl	800b4dc <Outputs_Buzz_Set>
					Timing_Set(_e_Timing_Swing_Beep, 500);
 8006a26:	23fa      	movs	r3, #250	@ 0xfa
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	0019      	movs	r1, r3
 8006a2c:	200b      	movs	r0, #11
 8006a2e:	f008 ff59 	bl	800f8e4 <Timing_Set>
				}
				TaskManager_Step_Set( API_SWING, sApiSwTask.stepBack );
 8006a32:	4b46      	ldr	r3, [pc, #280]	@ (8006b4c <_api_swing_task_mode_pc+0x510>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	0019      	movs	r1, r3
 8006a38:	200d      	movs	r0, #13
 8006a3a:	f006 ff31 	bl	800d8a0 <TaskManager_Step_Set>
				break;
 8006a3e:	e006      	b.n	8006a4e <_api_swing_task_mode_pc+0x412>

		default:
			TaskManager_Go( API_SWING , _Api_Swing_task_Home );
 8006a40:	4b43      	ldr	r3, [pc, #268]	@ (8006b50 <_api_swing_task_mode_pc+0x514>)
 8006a42:	0019      	movs	r1, r3
 8006a44:	200d      	movs	r0, #13
 8006a46:	f006 fe55 	bl	800d6f4 <TaskManager_Go>
			break;
 8006a4a:	e000      	b.n	8006a4e <_api_swing_task_mode_pc+0x412>
				break;
 8006a4c:	46c0      	nop			@ (mov r8, r8)
	}

	if ( ( sApiSwingCmdInfo.sInfo.u8Posicao_1 == sApiSwingCmdInfo.u8Posicao_1_Mem ) &&
 8006a4e:	4b41      	ldr	r3, [pc, #260]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006a50:	7bda      	ldrb	r2, [r3, #15]
 8006a52:	4b40      	ldr	r3, [pc, #256]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006a54:	2124      	movs	r1, #36	@ 0x24
 8006a56:	5c5b      	ldrb	r3, [r3, r1]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d107      	bne.n	8006a6c <_api_swing_task_mode_pc+0x430>
	     ( sApiSwingCmdInfo.sInfo.u8Posicao_2 == sApiSwingCmdInfo.u8Posicao_2_Mem ) ) {
 8006a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006a5e:	7c9a      	ldrb	r2, [r3, #18]
 8006a60:	4b3c      	ldr	r3, [pc, #240]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006a62:	2125      	movs	r1, #37	@ 0x25
 8006a64:	5c5b      	ldrb	r3, [r3, r1]
	if ( ( sApiSwingCmdInfo.sInfo.u8Posicao_1 == sApiSwingCmdInfo.u8Posicao_1_Mem ) &&
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d100      	bne.n	8006a6c <_api_swing_task_mode_pc+0x430>
 8006a6a:	e06b      	b.n	8006b44 <_api_swing_task_mode_pc+0x508>
		return;
	}

	// Controle das bandeiras para não fechar as duas ao mesmo tempo.
	if( ( sApiSwingCmdInfo.sInfo.u8Posicao_1 >=  SW_CLOSE_POSIC ) ||
 8006a6c:	4b39      	ldr	r3, [pc, #228]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006a6e:	7bdb      	ldrb	r3, [r3, #15]
 8006a70:	2b4a      	cmp	r3, #74	@ 0x4a
 8006a72:	d804      	bhi.n	8006a7e <_api_swing_task_mode_pc+0x442>
		( sApiSwingCmdInfo.u8Posicao_1_Mem >= SW_CLOSE_POSIC ) ) {
 8006a74:	4b37      	ldr	r3, [pc, #220]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006a76:	2224      	movs	r2, #36	@ 0x24
 8006a78:	5c9b      	ldrb	r3, [r3, r2]
	if( ( sApiSwingCmdInfo.sInfo.u8Posicao_1 >=  SW_CLOSE_POSIC ) ||
 8006a7a:	2b4a      	cmp	r3, #74	@ 0x4a
 8006a7c:	d910      	bls.n	8006aa0 <_api_swing_task_mode_pc+0x464>

		if(sApiSwingCmdInfo.u8Posicao_2_Mem >= SW_CLOSE_POSIC ) {
 8006a7e:	4b35      	ldr	r3, [pc, #212]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006a80:	2225      	movs	r2, #37	@ 0x25
 8006a82:	5c9b      	ldrb	r3, [r3, r2]
 8006a84:	2b4a      	cmp	r3, #74	@ 0x4a
 8006a86:	d905      	bls.n	8006a94 <_api_swing_task_mode_pc+0x458>
			sApiSwingCmdInfo.sInfo.u8Posicao_1 = sApiSwingCmdInfo.u8Posicao_1_Mem;
 8006a88:	4b32      	ldr	r3, [pc, #200]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006a8a:	2224      	movs	r2, #36	@ 0x24
 8006a8c:	5c9a      	ldrb	r2, [r3, r2]
 8006a8e:	4b31      	ldr	r3, [pc, #196]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006a90:	73da      	strb	r2, [r3, #15]
		if(sApiSwingCmdInfo.u8Posicao_2_Mem >= SW_CLOSE_POSIC ) {
 8006a92:	e01e      	b.n	8006ad2 <_api_swing_task_mode_pc+0x496>
		}
		else {
			sApiSwingCmdInfo.sInfo.u8Posicao_2 = sApiSwingCmdInfo.u8Posicao_2_Mem;
 8006a94:	4b2f      	ldr	r3, [pc, #188]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006a96:	2225      	movs	r2, #37	@ 0x25
 8006a98:	5c9a      	ldrb	r2, [r3, r2]
 8006a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006a9c:	749a      	strb	r2, [r3, #18]
		if(sApiSwingCmdInfo.u8Posicao_2_Mem >= SW_CLOSE_POSIC ) {
 8006a9e:	e018      	b.n	8006ad2 <_api_swing_task_mode_pc+0x496>
		}
	}
	else if ( ( sApiSwingCmdInfo.sInfo.u8Posicao_2 >=  SW_CLOSE_POSIC ) ||
 8006aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006aa2:	7c9b      	ldrb	r3, [r3, #18]
 8006aa4:	2b4a      	cmp	r3, #74	@ 0x4a
 8006aa6:	d804      	bhi.n	8006ab2 <_api_swing_task_mode_pc+0x476>
		( sApiSwingCmdInfo.u8Posicao_2_Mem >= SW_CLOSE_POSIC ) ) {
 8006aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006aaa:	2225      	movs	r2, #37	@ 0x25
 8006aac:	5c9b      	ldrb	r3, [r3, r2]
	else if ( ( sApiSwingCmdInfo.sInfo.u8Posicao_2 >=  SW_CLOSE_POSIC ) ||
 8006aae:	2b4a      	cmp	r3, #74	@ 0x4a
 8006ab0:	d90f      	bls.n	8006ad2 <_api_swing_task_mode_pc+0x496>

		if(sApiSwingCmdInfo.u8Posicao_1_Mem >= SW_CLOSE_POSIC ) {
 8006ab2:	4b28      	ldr	r3, [pc, #160]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006ab4:	2224      	movs	r2, #36	@ 0x24
 8006ab6:	5c9b      	ldrb	r3, [r3, r2]
 8006ab8:	2b4a      	cmp	r3, #74	@ 0x4a
 8006aba:	d905      	bls.n	8006ac8 <_api_swing_task_mode_pc+0x48c>
			sApiSwingCmdInfo.sInfo.u8Posicao_2 = sApiSwingCmdInfo.u8Posicao_2_Mem;
 8006abc:	4b25      	ldr	r3, [pc, #148]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006abe:	2225      	movs	r2, #37	@ 0x25
 8006ac0:	5c9a      	ldrb	r2, [r3, r2]
 8006ac2:	4b24      	ldr	r3, [pc, #144]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006ac4:	749a      	strb	r2, [r3, #18]
 8006ac6:	e004      	b.n	8006ad2 <_api_swing_task_mode_pc+0x496>
		}
		else {
			sApiSwingCmdInfo.sInfo.u8Posicao_1 = sApiSwingCmdInfo.u8Posicao_1_Mem;
 8006ac8:	4b22      	ldr	r3, [pc, #136]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006aca:	2224      	movs	r2, #36	@ 0x24
 8006acc:	5c9a      	ldrb	r2, [r3, r2]
 8006ace:	4b21      	ldr	r3, [pc, #132]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006ad0:	73da      	strb	r2, [r3, #15]
		}
	}

	if( ( sApiSwingCmdInfo.sInfo.u8Posicao_1 < sApiSwingCmdInfo.u8Posicao_1_Mem ) &&
 8006ad2:	4b20      	ldr	r3, [pc, #128]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006ad4:	7bda      	ldrb	r2, [r3, #15]
 8006ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006ad8:	2124      	movs	r1, #36	@ 0x24
 8006ada:	5c5b      	ldrb	r3, [r3, r1]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d20b      	bcs.n	8006af8 <_api_swing_task_mode_pc+0x4bc>
		( ( Sensor_Get() == _e_SensorSts_AlarmEntrance ) || ( Sensor_Get() == _e_SensorSts_Both ) ) ) {
 8006ae0:	f005 fede 	bl	800c8a0 <Sensor_Get>
 8006ae4:	0003      	movs	r3, r0
	if( ( sApiSwingCmdInfo.sInfo.u8Posicao_1 < sApiSwingCmdInfo.u8Posicao_1_Mem ) &&
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d004      	beq.n	8006af4 <_api_swing_task_mode_pc+0x4b8>
		( ( Sensor_Get() == _e_SensorSts_AlarmEntrance ) || ( Sensor_Get() == _e_SensorSts_Both ) ) ) {
 8006aea:	f005 fed9 	bl	800c8a0 <Sensor_Get>
 8006aee:	0003      	movs	r3, r0
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d101      	bne.n	8006af8 <_api_swing_task_mode_pc+0x4bc>
		__NOP();
 8006af4:	46c0      	nop			@ (mov r8, r8)
		return;
 8006af6:	e026      	b.n	8006b46 <_api_swing_task_mode_pc+0x50a>
	}

	if( ( sApiSwingCmdInfo.sInfo.u8Posicao_2 < sApiSwingCmdInfo.u8Posicao_2_Mem) &&
 8006af8:	4b16      	ldr	r3, [pc, #88]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006afa:	7c9a      	ldrb	r2, [r3, #18]
 8006afc:	4b15      	ldr	r3, [pc, #84]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006afe:	2125      	movs	r1, #37	@ 0x25
 8006b00:	5c5b      	ldrb	r3, [r3, r1]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d20b      	bcs.n	8006b1e <_api_swing_task_mode_pc+0x4e2>
		( ( Sensor_Get() == _e_SensorSts_AlarmExit ) || ( Sensor_Get() == _e_SensorSts_Both ) ) ) {
 8006b06:	f005 fecb 	bl	800c8a0 <Sensor_Get>
 8006b0a:	0003      	movs	r3, r0
	if( ( sApiSwingCmdInfo.sInfo.u8Posicao_2 < sApiSwingCmdInfo.u8Posicao_2_Mem) &&
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d004      	beq.n	8006b1a <_api_swing_task_mode_pc+0x4de>
		( ( Sensor_Get() == _e_SensorSts_AlarmExit ) || ( Sensor_Get() == _e_SensorSts_Both ) ) ) {
 8006b10:	f005 fec6 	bl	800c8a0 <Sensor_Get>
 8006b14:	0003      	movs	r3, r0
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d101      	bne.n	8006b1e <_api_swing_task_mode_pc+0x4e2>
		__NOP();
 8006b1a:	46c0      	nop			@ (mov r8, r8)
		return;
 8006b1c:	e013      	b.n	8006b46 <_api_swing_task_mode_pc+0x50a>
	}

	// Salva as posições na variavel Mem.
	sApiSwingCmdInfo.u8Posicao_1_Mem = sApiSwingCmdInfo.sInfo.u8Posicao_1;
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006b20:	7bd9      	ldrb	r1, [r3, #15]
 8006b22:	4b0c      	ldr	r3, [pc, #48]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006b24:	2224      	movs	r2, #36	@ 0x24
 8006b26:	5499      	strb	r1, [r3, r2]
	sApiSwingCmdInfo.u8Posicao_2_Mem = sApiSwingCmdInfo.sInfo.u8Posicao_2;
 8006b28:	4b0a      	ldr	r3, [pc, #40]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006b2a:	7c99      	ldrb	r1, [r3, #18]
 8006b2c:	4b09      	ldr	r3, [pc, #36]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006b2e:	2225      	movs	r2, #37	@ 0x25
 8006b30:	5499      	strb	r1, [r3, r2]

	// Envia o comando para os motores se moverem.
	Position_PC_Set(sApiSwingCmdInfo.sInfo.u8Posicao_1, sApiSwingCmdInfo.sInfo.u8Posicao_2);
 8006b32:	4b08      	ldr	r3, [pc, #32]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006b34:	7bda      	ldrb	r2, [r3, #15]
 8006b36:	4b07      	ldr	r3, [pc, #28]	@ (8006b54 <_api_swing_task_mode_pc+0x518>)
 8006b38:	7c9b      	ldrb	r3, [r3, #18]
 8006b3a:	0019      	movs	r1, r3
 8006b3c:	0010      	movs	r0, r2
 8006b3e:	f005 faab 	bl	800c098 <Position_PC_Set>
 8006b42:	e000      	b.n	8006b46 <_api_swing_task_mode_pc+0x50a>
		return;
 8006b44:	46c0      	nop			@ (mov r8, r8)
}
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b003      	add	sp, #12
 8006b4a:	bd90      	pop	{r4, r7, pc}
 8006b4c:	2000002c 	.word	0x2000002c
 8006b50:	0800605d 	.word	0x0800605d
 8006b54:	20000030 	.word	0x20000030

08006b58 <_api_swing_task_mode_na>:


#define TIME_CLOSE     1000

static void _api_swing_task_mode_na(void)
{
 8006b58:	b590      	push	{r4, r7, lr}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
	tSensorSts SensorSts = _e_SensorSts_None;
 8006b5e:	1dfb      	adds	r3, r7, #7
 8006b60:	2200      	movs	r2, #0
 8006b62:	701a      	strb	r2, [r3, #0]
	tSensorSts SensorStsPass = _e_SensorSts_PassWait;
 8006b64:	1dbb      	adds	r3, r7, #6
 8006b66:	2206      	movs	r2, #6
 8006b68:	701a      	strb	r2, [r3, #0]

	TaskManager_Set( API_SWING, _e_api_swuing_task_mode_na );
 8006b6a:	2103      	movs	r1, #3
 8006b6c:	200d      	movs	r0, #13
 8006b6e:	f006 fe0f 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( API_SWING ) == false )
 8006b72:	200d      	movs	r0, #13
 8006b74:	f006 fe72 	bl	800d85c <TaskManager_First_Get>
 8006b78:	1e03      	subs	r3, r0, #0
 8006b7a:	d109      	bne.n	8006b90 <_api_swing_task_mode_na+0x38>
	{
		TaskManager_First_Set( API_SWING );
 8006b7c:	200d      	movs	r0, #13
 8006b7e:	f006 fe23 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_idle );
 8006b82:	2100      	movs	r1, #0
 8006b84:	200d      	movs	r0, #13
 8006b86:	f006 fe8b 	bl	800d8a0 <TaskManager_Step_Set>

		Sensor_Set( _e_SensorMode_Alarm );
 8006b8a:	2001      	movs	r0, #1
 8006b8c:	f005 fe92 	bl	800c8b4 <Sensor_Set>
	}

	switch( (uint8_t)TaskManager_Step_Get( API_SWING ) )
 8006b90:	200d      	movs	r0, #13
 8006b92:	f006 feaf 	bl	800d8f4 <TaskManager_Step_Get>
 8006b96:	0003      	movs	r3, r0
 8006b98:	2b0a      	cmp	r3, #10
 8006b9a:	d900      	bls.n	8006b9e <_api_swing_task_mode_na+0x46>
 8006b9c:	e22d      	b.n	8006ffa <_api_swing_task_mode_na+0x4a2>
 8006b9e:	009a      	lsls	r2, r3, #2
 8006ba0:	4bd6      	ldr	r3, [pc, #856]	@ (8006efc <_api_swing_task_mode_na+0x3a4>)
 8006ba2:	18d3      	adds	r3, r2, r3
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	469f      	mov	pc, r3
	{
		case _e_api_swing_task_mode_na_idle:

			Sensor_Set( _e_SensorMode_Alarm );
 8006ba8:	2001      	movs	r0, #1
 8006baa:	f005 fe83 	bl	800c8b4 <Sensor_Set>
			SensorSts = Sensor_Get();
 8006bae:	1dfc      	adds	r4, r7, #7
 8006bb0:	f005 fe76 	bl	800c8a0 <Sensor_Get>
 8006bb4:	0003      	movs	r3, r0
 8006bb6:	7023      	strb	r3, [r4, #0]

			if( Inputs_Com_Get() == _e_InCom_OpenIn  ) {
 8006bb8:	f003 fe22 	bl	800a800 <Inputs_Com_Get>
 8006bbc:	0003      	movs	r3, r0
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d103      	bne.n	8006bca <_api_swing_task_mode_na+0x72>
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_entrance);
 8006bc2:	2103      	movs	r1, #3
 8006bc4:	200d      	movs	r0, #13
 8006bc6:	f006 fe6b 	bl	800d8a0 <TaskManager_Step_Set>
			}
			if( Inputs_Com_Get() == _e_InCom_OpenOut ) {
 8006bca:	f003 fe19 	bl	800a800 <Inputs_Com_Get>
 8006bce:	0003      	movs	r3, r0
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d103      	bne.n	8006bdc <_api_swing_task_mode_na+0x84>
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_exit );
 8006bd4:	2105      	movs	r1, #5
 8006bd6:	200d      	movs	r0, #13
 8006bd8:	f006 fe62 	bl	800d8a0 <TaskManager_Step_Set>
			}


			if ( SensorSts == _e_SensorSts_Both ) {
 8006bdc:	1dfb      	adds	r3, r7, #7
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d113      	bne.n	8006c0c <_api_swing_task_mode_na+0xb4>
				Timing_Set( _e_Timing_Swing_CloseDelayEntrance, TIME_CLOSE );
 8006be4:	23fa      	movs	r3, #250	@ 0xfa
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	0019      	movs	r1, r3
 8006bea:	200d      	movs	r0, #13
 8006bec:	f008 fe7a 	bl	800f8e4 <Timing_Set>
				Timing_Set( _e_Timing_Swing_CloseDelayExit, TIME_CLOSE );
 8006bf0:	23fa      	movs	r3, #250	@ 0xfa
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	0019      	movs	r1, r3
 8006bf6:	200e      	movs	r0, #14
 8006bf8:	f008 fe74 	bl	800f8e4 <Timing_Set>
				sApiSwTask.stepBack = _e_api_swing_task_mode_na_close;
 8006bfc:	4bc0      	ldr	r3, [pc, #768]	@ (8006f00 <_api_swing_task_mode_na+0x3a8>)
 8006bfe:	2201      	movs	r2, #1
 8006c00:	701a      	strb	r2, [r3, #0]
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_alarm_sts_user );
 8006c02:	2108      	movs	r1, #8
 8006c04:	200d      	movs	r0, #13
 8006c06:	f006 fe4b 	bl	800d8a0 <TaskManager_Step_Set>
					if ( ( Inputs_Com_Get() != _e_InCom_OpenIn  ) && (  Inputs_Com_Get() != _e_InCom_OpenOut  ) ) {
						TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_open );
					}
				}
			}
			break;
 8006c0a:	e1fc      	b.n	8007006 <_api_swing_task_mode_na+0x4ae>
				if ( SensorSts == _e_SensorSts_AlarmEntrance ) {
 8006c0c:	1dfb      	adds	r3, r7, #7
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d10c      	bne.n	8006c2e <_api_swing_task_mode_na+0xd6>
					Timing_Set( _e_Timing_Swing_CloseDelayEntrance, TIME_CLOSE );
 8006c14:	23fa      	movs	r3, #250	@ 0xfa
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	0019      	movs	r1, r3
 8006c1a:	200d      	movs	r0, #13
 8006c1c:	f008 fe62 	bl	800f8e4 <Timing_Set>
					sApiSwTask.stepBack = _e_api_swing_task_mode_na_close;
 8006c20:	4bb7      	ldr	r3, [pc, #732]	@ (8006f00 <_api_swing_task_mode_na+0x3a8>)
 8006c22:	2201      	movs	r2, #1
 8006c24:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_alarm_sts_user );
 8006c26:	2108      	movs	r1, #8
 8006c28:	200d      	movs	r0, #13
 8006c2a:	f006 fe39 	bl	800d8a0 <TaskManager_Step_Set>
				if ( SensorSts == _e_SensorSts_AlarmExit ) {
 8006c2e:	1dfb      	adds	r3, r7, #7
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d10c      	bne.n	8006c50 <_api_swing_task_mode_na+0xf8>
					Timing_Set( _e_Timing_Swing_CloseDelayExit, TIME_CLOSE );
 8006c36:	23fa      	movs	r3, #250	@ 0xfa
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	0019      	movs	r1, r3
 8006c3c:	200e      	movs	r0, #14
 8006c3e:	f008 fe51 	bl	800f8e4 <Timing_Set>
					sApiSwTask.stepBack = _e_api_swing_task_mode_na_close;
 8006c42:	4baf      	ldr	r3, [pc, #700]	@ (8006f00 <_api_swing_task_mode_na+0x3a8>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_alarm_sts_user );
 8006c48:	2108      	movs	r1, #8
 8006c4a:	200d      	movs	r0, #13
 8006c4c:	f006 fe28 	bl	800d8a0 <TaskManager_Step_Set>
				if ( SensorSts == _E_SensorSts_AlarmMid ) {
 8006c50:	1dfb      	adds	r3, r7, #7
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d106      	bne.n	8006c66 <_api_swing_task_mode_na+0x10e>
					sApiSwTask.stepBack = _e_api_swing_task_mode_na_idle;
 8006c58:	4ba9      	ldr	r3, [pc, #676]	@ (8006f00 <_api_swing_task_mode_na+0x3a8>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_alarm_sts_user );
 8006c5e:	2108      	movs	r1, #8
 8006c60:	200d      	movs	r0, #13
 8006c62:	f006 fe1d 	bl	800d8a0 <TaskManager_Step_Set>
				if ( SensorSts == _e_SensorSts_None ) {
 8006c66:	1dfb      	adds	r3, r7, #7
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d000      	beq.n	8006c70 <_api_swing_task_mode_na+0x118>
 8006c6e:	e1ca      	b.n	8007006 <_api_swing_task_mode_na+0x4ae>
					if ( ( Inputs_Com_Get() != _e_InCom_OpenIn  ) && (  Inputs_Com_Get() != _e_InCom_OpenOut  ) ) {
 8006c70:	f003 fdc6 	bl	800a800 <Inputs_Com_Get>
 8006c74:	0003      	movs	r3, r0
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d100      	bne.n	8006c7c <_api_swing_task_mode_na+0x124>
 8006c7a:	e1c4      	b.n	8007006 <_api_swing_task_mode_na+0x4ae>
 8006c7c:	f003 fdc0 	bl	800a800 <Inputs_Com_Get>
 8006c80:	0003      	movs	r3, r0
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d100      	bne.n	8006c88 <_api_swing_task_mode_na+0x130>
 8006c86:	e1be      	b.n	8007006 <_api_swing_task_mode_na+0x4ae>
						TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_open );
 8006c88:	2102      	movs	r1, #2
 8006c8a:	200d      	movs	r0, #13
 8006c8c:	f006 fe08 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 8006c90:	e1b9      	b.n	8007006 <_api_swing_task_mode_na+0x4ae>

		case _e_api_swing_task_mode_na_close:
			Outputs_Com_Cheat( _e_OutCom_Cheat_Shit );
 8006c92:	2001      	movs	r0, #1
 8006c94:	f004 fd5c 	bl	800b750 <Outputs_Com_Cheat>
			TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_idle );
 8006c98:	2100      	movs	r1, #0
 8006c9a:	200d      	movs	r0, #13
 8006c9c:	f006 fe00 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 8006ca0:	e1b4      	b.n	800700c <_api_swing_task_mode_na+0x4b4>

		case _e_api_swing_task_mode_na_open:
			Outputs_Com_Cheat( _e_OutCom_Cheat_None );
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	f004 fd54 	bl	800b750 <Outputs_Com_Cheat>

			if (  Inputs_Com_Get() != _e_InCom_OpenIn ) {
 8006ca8:	f003 fdaa 	bl	800a800 <Inputs_Com_Get>
 8006cac:	0003      	movs	r3, r0
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d008      	beq.n	8006cc4 <_api_swing_task_mode_na+0x16c>
				Outputs_Buzz_Set( _e_OutBuzz_Off );
 8006cb2:	2001      	movs	r0, #1
 8006cb4:	f004 fc12 	bl	800b4dc <Outputs_Buzz_Set>
				Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Static, _e_OutPicColor_TSIgr, _e_OutPicSpeed_Slow );
 8006cb8:	2305      	movs	r3, #5
 8006cba:	2206      	movs	r2, #6
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	f004 fc52 	bl	800b568 <Outputs_RGB_Set>
			}
			if (  Inputs_Com_Get() != _e_InCom_OpenOut ) {
 8006cc4:	f003 fd9c 	bl	800a800 <Inputs_Com_Get>
 8006cc8:	0003      	movs	r3, r0
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d008      	beq.n	8006ce0 <_api_swing_task_mode_na+0x188>
				Outputs_Buzz_Set( _e_OutBuzz_Off );
 8006cce:	2001      	movs	r0, #1
 8006cd0:	f004 fc04 	bl	800b4dc <Outputs_Buzz_Set>
				Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Static, _e_OutPicColor_TSIgr, _e_OutPicSpeed_Slow );
 8006cd4:	2305      	movs	r3, #5
 8006cd6:	2206      	movs	r2, #6
 8006cd8:	2101      	movs	r1, #1
 8006cda:	2001      	movs	r0, #1
 8006cdc:	f004 fc44 	bl	800b568 <Outputs_RGB_Set>
			}
			if ( ( Inputs_Com_Get() != _e_InCom_OpenIn  ) && (  Inputs_Com_Get() != _e_InCom_OpenOut  ) ) {
 8006ce0:	f003 fd8e 	bl	800a800 <Inputs_Com_Get>
 8006ce4:	0003      	movs	r3, r0
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d00a      	beq.n	8006d00 <_api_swing_task_mode_na+0x1a8>
 8006cea:	f003 fd89 	bl	800a800 <Inputs_Com_Get>
 8006cee:	0003      	movs	r3, r0
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d005      	beq.n	8006d00 <_api_swing_task_mode_na+0x1a8>
				TaskManager_Go( API_SWING , _Api_Swing_task_Home );
 8006cf4:	4b83      	ldr	r3, [pc, #524]	@ (8006f04 <_api_swing_task_mode_na+0x3ac>)
 8006cf6:	0019      	movs	r1, r3
 8006cf8:	200d      	movs	r0, #13
 8006cfa:	f006 fcfb 	bl	800d6f4 <TaskManager_Go>
			}
			else {
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_idle );
			}

			break;
 8006cfe:	e185      	b.n	800700c <_api_swing_task_mode_na+0x4b4>
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_idle );
 8006d00:	2100      	movs	r1, #0
 8006d02:	200d      	movs	r0, #13
 8006d04:	f006 fdcc 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 8006d08:	e180      	b.n	800700c <_api_swing_task_mode_na+0x4b4>
		case _e_api_swing_task_mode_na_entrance:

			Sensor_Set( _e_SensorMode_Entrance );
 8006d0a:	2002      	movs	r0, #2
 8006d0c:	f005 fdd2 	bl	800c8b4 <Sensor_Set>

			Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Green, _e_OutPicSpeed_Slow );
 8006d10:	2305      	movs	r3, #5
 8006d12:	2201      	movs	r2, #1
 8006d14:	2102      	movs	r1, #2
 8006d16:	2000      	movs	r0, #0
 8006d18:	f004 fc26 	bl	800b568 <Outputs_RGB_Set>
			Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2102      	movs	r1, #2
 8006d22:	2001      	movs	r0, #1
 8006d24:	f004 fc20 	bl	800b568 <Outputs_RGB_Set>
			Outputs_Com_Cheat( _e_OutCom_Cheat_None );
 8006d28:	2000      	movs	r0, #0
 8006d2a:	f004 fd11 	bl	800b750 <Outputs_Com_Cheat>
			Outputs_Buzz_Set( _e_OutBuzz_Beep );
 8006d2e:	2003      	movs	r0, #3
 8006d30:	f004 fbd4 	bl	800b4dc <Outputs_Buzz_Set>
			Timing_Set( _e_Timing_Swing_CloseDelay, APISWING_TIMEOUT_WAIT_ACCESS );
 8006d34:	4b74      	ldr	r3, [pc, #464]	@ (8006f08 <_api_swing_task_mode_na+0x3b0>)
 8006d36:	0019      	movs	r1, r3
 8006d38:	200c      	movs	r0, #12
 8006d3a:	f008 fdd3 	bl	800f8e4 <Timing_Set>
			TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_waint_entrance );
 8006d3e:	2104      	movs	r1, #4
 8006d40:	200d      	movs	r0, #13
 8006d42:	f006 fdad 	bl	800d8a0 <TaskManager_Step_Set>

			break;
 8006d46:	e161      	b.n	800700c <_api_swing_task_mode_na+0x4b4>

		case _e_api_swing_task_mode_na_waint_entrance:

			SensorStsPass = Sensor_Get();
 8006d48:	1dbc      	adds	r4, r7, #6
 8006d4a:	f005 fda9 	bl	800c8a0 <Sensor_Get>
 8006d4e:	0003      	movs	r3, r0
 8006d50:	7023      	strb	r3, [r4, #0]

			if( Inputs_Com_Get() != _e_InCom_OpenIn  	&&
 8006d52:	f003 fd55 	bl	800a800 <Inputs_Com_Get>
 8006d56:	0003      	movs	r3, r0
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d016      	beq.n	8006d8a <_api_swing_task_mode_na+0x232>
				Inputs_Com_Get() != _e_InCom_OpenOut 	&&
 8006d5c:	f003 fd50 	bl	800a800 <Inputs_Com_Get>
 8006d60:	0003      	movs	r3, r0
			if( Inputs_Com_Get() != _e_InCom_OpenIn  	&&
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d011      	beq.n	8006d8a <_api_swing_task_mode_na+0x232>
				Timing_Get_Bool( _e_Timing_Swing_CloseDelay ) == true )
 8006d66:	200c      	movs	r0, #12
 8006d68:	f008 fdd2 	bl	800f910 <Timing_Get_Bool>
 8006d6c:	0003      	movs	r3, r0
				Inputs_Com_Get() != _e_InCom_OpenOut 	&&
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d10b      	bne.n	8006d8a <_api_swing_task_mode_na+0x232>
			{
				Outputs_Com_Pass( _e_OutCom_Pass_Nop );
 8006d72:	2000      	movs	r0, #0
 8006d74:	f004 fcce 	bl	800b714 <Outputs_Com_Pass>
				Outputs_Buzz_Set( _e_OutBuzz_Off );
 8006d78:	2001      	movs	r0, #1
 8006d7a:	f004 fbaf 	bl	800b4dc <Outputs_Buzz_Set>
				TaskManager_Go( API_SWING , _Api_Swing_task_Home );
 8006d7e:	4b61      	ldr	r3, [pc, #388]	@ (8006f04 <_api_swing_task_mode_na+0x3ac>)
 8006d80:	0019      	movs	r1, r3
 8006d82:	200d      	movs	r0, #13
 8006d84:	f006 fcb6 	bl	800d6f4 <TaskManager_Go>
				return;
 8006d88:	e158      	b.n	800703c <_api_swing_task_mode_na+0x4e4>
			}

			switch( SensorStsPass )
 8006d8a:	1dbb      	adds	r3, r7, #6
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	2b05      	cmp	r3, #5
 8006d90:	d005      	beq.n	8006d9e <_api_swing_task_mode_na+0x246>
 8006d92:	dc34      	bgt.n	8006dfe <_api_swing_task_mode_na+0x2a6>
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d016      	beq.n	8006dc6 <_api_swing_task_mode_na+0x26e>
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d022      	beq.n	8006de2 <_api_swing_task_mode_na+0x28a>
					sApiSwTask.stepBack = _e_api_swing_task_mode_na_waint_entrance;
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_buzzer_sirene );
					break;

				default:
					break;
 8006d9c:	e02f      	b.n	8006dfe <_api_swing_task_mode_na+0x2a6>
					Outputs_RGB_Set( _e_OutPic_Both,  _e_OutPicMode_Blink, _e_OutPicColor_Pink, _e_OutPicSpeed_Fast );
 8006d9e:	2300      	movs	r3, #0
 8006da0:	2204      	movs	r2, #4
 8006da2:	2102      	movs	r1, #2
 8006da4:	2002      	movs	r0, #2
 8006da6:	f004 fbdf 	bl	800b568 <Outputs_RGB_Set>
					Timing_Set( _e_Timing_Swing_Picto_RGB , 1000 );
 8006daa:	23fa      	movs	r3, #250	@ 0xfa
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	0019      	movs	r1, r3
 8006db0:	2012      	movs	r0, #18
 8006db2:	f008 fd97 	bl	800f8e4 <Timing_Set>
					Outputs_Com_Pass( _e_OutCom_Pass_OK );
 8006db6:	2001      	movs	r0, #1
 8006db8:	f004 fcac 	bl	800b714 <Outputs_Com_Pass>
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_access_ok );
 8006dbc:	2107      	movs	r1, #7
 8006dbe:	200d      	movs	r0, #13
 8006dc0:	f006 fd6e 	bl	800d8a0 <TaskManager_Step_Set>
					break;
 8006dc4:	e01c      	b.n	8006e00 <_api_swing_task_mode_na+0x2a8>
					Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2102      	movs	r1, #2
 8006dcc:	2001      	movs	r0, #1
 8006dce:	f004 fbcb 	bl	800b568 <Outputs_RGB_Set>
					sApiSwTask.stepBack = _e_api_swing_task_mode_na_waint_entrance;
 8006dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8006f00 <_api_swing_task_mode_na+0x3a8>)
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_buzzer_sirene );
 8006dd8:	210a      	movs	r1, #10
 8006dda:	200d      	movs	r0, #13
 8006ddc:	f006 fd60 	bl	800d8a0 <TaskManager_Step_Set>
					break;
 8006de0:	e00e      	b.n	8006e00 <_api_swing_task_mode_na+0x2a8>
					Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006de2:	2300      	movs	r3, #0
 8006de4:	2200      	movs	r2, #0
 8006de6:	2102      	movs	r1, #2
 8006de8:	2002      	movs	r0, #2
 8006dea:	f004 fbbd 	bl	800b568 <Outputs_RGB_Set>
					sApiSwTask.stepBack = _e_api_swing_task_mode_na_waint_entrance;
 8006dee:	4b44      	ldr	r3, [pc, #272]	@ (8006f00 <_api_swing_task_mode_na+0x3a8>)
 8006df0:	2204      	movs	r2, #4
 8006df2:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_buzzer_sirene );
 8006df4:	210a      	movs	r1, #10
 8006df6:	200d      	movs	r0, #13
 8006df8:	f006 fd52 	bl	800d8a0 <TaskManager_Step_Set>
					break;
 8006dfc:	e000      	b.n	8006e00 <_api_swing_task_mode_na+0x2a8>
					break;
 8006dfe:	46c0      	nop			@ (mov r8, r8)
			}
			break;
 8006e00:	e104      	b.n	800700c <_api_swing_task_mode_na+0x4b4>

		case _e_api_swing_task_mode_na_exit:
			Sensor_Set( _e_SensorMode_Exit );
 8006e02:	2003      	movs	r0, #3
 8006e04:	f005 fd56 	bl	800c8b4 <Sensor_Set>

			Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Green, _e_OutPicSpeed_Slow );
 8006e08:	2305      	movs	r3, #5
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	2102      	movs	r1, #2
 8006e0e:	2001      	movs	r0, #1
 8006e10:	f004 fbaa 	bl	800b568 <Outputs_RGB_Set>
			Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006e14:	2300      	movs	r3, #0
 8006e16:	2200      	movs	r2, #0
 8006e18:	2102      	movs	r1, #2
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	f004 fba4 	bl	800b568 <Outputs_RGB_Set>
			Outputs_Com_Cheat( _e_OutCom_Cheat_None );
 8006e20:	2000      	movs	r0, #0
 8006e22:	f004 fc95 	bl	800b750 <Outputs_Com_Cheat>
			Timing_Set( _e_Timing_Swing_CloseDelay, APISWING_TIMEOUT_WAIT_ACCESS );
 8006e26:	4b38      	ldr	r3, [pc, #224]	@ (8006f08 <_api_swing_task_mode_na+0x3b0>)
 8006e28:	0019      	movs	r1, r3
 8006e2a:	200c      	movs	r0, #12
 8006e2c:	f008 fd5a 	bl	800f8e4 <Timing_Set>
			Outputs_Buzz_Set( _e_OutBuzz_Beep );
 8006e30:	2003      	movs	r0, #3
 8006e32:	f004 fb53 	bl	800b4dc <Outputs_Buzz_Set>
			TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_waint_exit );
 8006e36:	2106      	movs	r1, #6
 8006e38:	200d      	movs	r0, #13
 8006e3a:	f006 fd31 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 8006e3e:	e0e5      	b.n	800700c <_api_swing_task_mode_na+0x4b4>

		case _e_api_swing_task_mode_na_waint_exit:
			if( Inputs_Com_Get() != _e_InCom_OpenIn  	&&
 8006e40:	f003 fcde 	bl	800a800 <Inputs_Com_Get>
 8006e44:	0003      	movs	r3, r0
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d016      	beq.n	8006e78 <_api_swing_task_mode_na+0x320>
				Inputs_Com_Get() != _e_InCom_OpenOut 	&&
 8006e4a:	f003 fcd9 	bl	800a800 <Inputs_Com_Get>
 8006e4e:	0003      	movs	r3, r0
			if( Inputs_Com_Get() != _e_InCom_OpenIn  	&&
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d011      	beq.n	8006e78 <_api_swing_task_mode_na+0x320>
				Timing_Get_Bool( _e_Timing_Swing_CloseDelay ) == true )
 8006e54:	200c      	movs	r0, #12
 8006e56:	f008 fd5b 	bl	800f910 <Timing_Get_Bool>
 8006e5a:	0003      	movs	r3, r0
				Inputs_Com_Get() != _e_InCom_OpenOut 	&&
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d10b      	bne.n	8006e78 <_api_swing_task_mode_na+0x320>
			{
				Outputs_Com_Pass( _e_OutCom_Pass_Nop );
 8006e60:	2000      	movs	r0, #0
 8006e62:	f004 fc57 	bl	800b714 <Outputs_Com_Pass>
				Outputs_Buzz_Set( _e_OutBuzz_Off );
 8006e66:	2001      	movs	r0, #1
 8006e68:	f004 fb38 	bl	800b4dc <Outputs_Buzz_Set>
				TaskManager_Go( API_SWING , _Api_Swing_task_Home );
 8006e6c:	4b25      	ldr	r3, [pc, #148]	@ (8006f04 <_api_swing_task_mode_na+0x3ac>)
 8006e6e:	0019      	movs	r1, r3
 8006e70:	200d      	movs	r0, #13
 8006e72:	f006 fc3f 	bl	800d6f4 <TaskManager_Go>
				return;
 8006e76:	e0e1      	b.n	800703c <_api_swing_task_mode_na+0x4e4>
			}

			SensorStsPass = Sensor_Get();
 8006e78:	1dbc      	adds	r4, r7, #6
 8006e7a:	f005 fd11 	bl	800c8a0 <Sensor_Get>
 8006e7e:	0003      	movs	r3, r0
 8006e80:	7023      	strb	r3, [r4, #0]
			switch( SensorStsPass )
 8006e82:	1dbb      	adds	r3, r7, #6
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b05      	cmp	r3, #5
 8006e88:	d005      	beq.n	8006e96 <_api_swing_task_mode_na+0x33e>
 8006e8a:	dc34      	bgt.n	8006ef6 <_api_swing_task_mode_na+0x39e>
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d016      	beq.n	8006ebe <_api_swing_task_mode_na+0x366>
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	d022      	beq.n	8006eda <_api_swing_task_mode_na+0x382>
					sApiSwTask.stepBack = _e_api_swing_task_mode_na_waint_exit;
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_buzzer_sirene );
					break;

				default:
					break;
 8006e94:	e02f      	b.n	8006ef6 <_api_swing_task_mode_na+0x39e>
					Outputs_RGB_Set( _e_OutPic_Both,  _e_OutPicMode_Blink, _e_OutPicColor_Pink, _e_OutPicSpeed_Fast );
 8006e96:	2300      	movs	r3, #0
 8006e98:	2204      	movs	r2, #4
 8006e9a:	2102      	movs	r1, #2
 8006e9c:	2002      	movs	r0, #2
 8006e9e:	f004 fb63 	bl	800b568 <Outputs_RGB_Set>
					Timing_Set( _e_Timing_Swing_Picto_RGB , 1000 );
 8006ea2:	23fa      	movs	r3, #250	@ 0xfa
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	0019      	movs	r1, r3
 8006ea8:	2012      	movs	r0, #18
 8006eaa:	f008 fd1b 	bl	800f8e4 <Timing_Set>
					Outputs_Com_Pass( _e_OutCom_Pass_OK );
 8006eae:	2001      	movs	r0, #1
 8006eb0:	f004 fc30 	bl	800b714 <Outputs_Com_Pass>
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_access_ok );
 8006eb4:	2107      	movs	r1, #7
 8006eb6:	200d      	movs	r0, #13
 8006eb8:	f006 fcf2 	bl	800d8a0 <TaskManager_Step_Set>
					break;
 8006ebc:	e01c      	b.n	8006ef8 <_api_swing_task_mode_na+0x3a0>
					Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2102      	movs	r1, #2
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	f004 fb4f 	bl	800b568 <Outputs_RGB_Set>
					sApiSwTask.stepBack = _e_api_swing_task_mode_na_waint_exit;
 8006eca:	4b0d      	ldr	r3, [pc, #52]	@ (8006f00 <_api_swing_task_mode_na+0x3a8>)
 8006ecc:	2206      	movs	r2, #6
 8006ece:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_buzzer_sirene );
 8006ed0:	210a      	movs	r1, #10
 8006ed2:	200d      	movs	r0, #13
 8006ed4:	f006 fce4 	bl	800d8a0 <TaskManager_Step_Set>
					break;
 8006ed8:	e00e      	b.n	8006ef8 <_api_swing_task_mode_na+0x3a0>
					Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006eda:	2300      	movs	r3, #0
 8006edc:	2200      	movs	r2, #0
 8006ede:	2102      	movs	r1, #2
 8006ee0:	2002      	movs	r0, #2
 8006ee2:	f004 fb41 	bl	800b568 <Outputs_RGB_Set>
					sApiSwTask.stepBack = _e_api_swing_task_mode_na_waint_exit;
 8006ee6:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <_api_swing_task_mode_na+0x3a8>)
 8006ee8:	2206      	movs	r2, #6
 8006eea:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_na_buzzer_sirene );
 8006eec:	210a      	movs	r1, #10
 8006eee:	200d      	movs	r0, #13
 8006ef0:	f006 fcd6 	bl	800d8a0 <TaskManager_Step_Set>
					break;
 8006ef4:	e000      	b.n	8006ef8 <_api_swing_task_mode_na+0x3a0>
					break;
 8006ef6:	46c0      	nop			@ (mov r8, r8)
			}

			break;
 8006ef8:	e088      	b.n	800700c <_api_swing_task_mode_na+0x4b4>
 8006efa:	46c0      	nop			@ (mov r8, r8)
 8006efc:	0800fdd4 	.word	0x0800fdd4
 8006f00:	2000002c 	.word	0x2000002c
 8006f04:	0800605d 	.word	0x0800605d
 8006f08:	00003a98 	.word	0x00003a98

			case _e_api_swing_task_mode_na_access_ok:
				if( Inputs_Com_Get() != _e_InCom_OpenIn &&
 8006f0c:	f003 fc78 	bl	800a800 <Inputs_Com_Get>
 8006f10:	0003      	movs	r3, r0
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d100      	bne.n	8006f18 <_api_swing_task_mode_na+0x3c0>
 8006f16:	e078      	b.n	800700a <_api_swing_task_mode_na+0x4b2>
					Inputs_Com_Get() != _e_InCom_OpenOut )
 8006f18:	f003 fc72 	bl	800a800 <Inputs_Com_Get>
 8006f1c:	0003      	movs	r3, r0
				if( Inputs_Com_Get() != _e_InCom_OpenIn &&
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d100      	bne.n	8006f24 <_api_swing_task_mode_na+0x3cc>
 8006f22:	e072      	b.n	800700a <_api_swing_task_mode_na+0x4b2>
				{
					Outputs_Com_Pass( _e_OutCom_Pass_Nop );
 8006f24:	2000      	movs	r0, #0
 8006f26:	f004 fbf5 	bl	800b714 <Outputs_Com_Pass>
					Outputs_Buzz_Set( _e_OutBuzz_Off );
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	f004 fad6 	bl	800b4dc <Outputs_Buzz_Set>
					Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Static, _e_OutPicColor_TSIgr, _e_OutPicSpeed_Slow );
 8006f30:	2305      	movs	r3, #5
 8006f32:	2206      	movs	r2, #6
 8006f34:	2101      	movs	r1, #1
 8006f36:	2002      	movs	r0, #2
 8006f38:	f004 fb16 	bl	800b568 <Outputs_RGB_Set>
					TaskManager_Go( API_SWING , _Api_Swing_task_Home );
 8006f3c:	4b41      	ldr	r3, [pc, #260]	@ (8007044 <_api_swing_task_mode_na+0x4ec>)
 8006f3e:	0019      	movs	r1, r3
 8006f40:	200d      	movs	r0, #13
 8006f42:	f006 fbd7 	bl	800d6f4 <TaskManager_Go>
				}
				break;
 8006f46:	e060      	b.n	800700a <_api_swing_task_mode_na+0x4b2>

			case _e_api_swing_task_mode_na_alarm_sts_user:

				SensorSts = Sensor_Get();
 8006f48:	1dfc      	adds	r4, r7, #7
 8006f4a:	f005 fca9 	bl	800c8a0 <Sensor_Get>
 8006f4e:	0003      	movs	r3, r0
 8006f50:	7023      	strb	r3, [r4, #0]

				if ( SensorSts == _e_SensorSts_Both ) {
 8006f52:	1dfb      	adds	r3, r7, #7
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d10c      	bne.n	8006f74 <_api_swing_task_mode_na+0x41c>
					Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Slow );
 8006f5a:	2305      	movs	r3, #5
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2102      	movs	r1, #2
 8006f60:	2000      	movs	r0, #0
 8006f62:	f004 fb01 	bl	800b568 <Outputs_RGB_Set>
					Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006f66:	2300      	movs	r3, #0
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2102      	movs	r1, #2
 8006f6c:	2001      	movs	r0, #1
 8006f6e:	f004 fafb 	bl	800b568 <Outputs_RGB_Set>
 8006f72:	e022      	b.n	8006fba <_api_swing_task_mode_na+0x462>
				}
				else {
					if ( SensorSts == _e_SensorSts_AlarmEntrance ) {
 8006f74:	1dfb      	adds	r3, r7, #7
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d106      	bne.n	8006f8a <_api_swing_task_mode_na+0x432>
						Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2102      	movs	r1, #2
 8006f82:	2000      	movs	r0, #0
 8006f84:	f004 faf0 	bl	800b568 <Outputs_RGB_Set>
 8006f88:	e017      	b.n	8006fba <_api_swing_task_mode_na+0x462>
					}
					else if ( SensorSts == _e_SensorSts_AlarmExit ) {
 8006f8a:	1dfb      	adds	r3, r7, #7
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d106      	bne.n	8006fa0 <_api_swing_task_mode_na+0x448>
						Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006f92:	2300      	movs	r3, #0
 8006f94:	2200      	movs	r2, #0
 8006f96:	2102      	movs	r1, #2
 8006f98:	2001      	movs	r0, #1
 8006f9a:	f004 fae5 	bl	800b568 <Outputs_RGB_Set>
 8006f9e:	e00c      	b.n	8006fba <_api_swing_task_mode_na+0x462>
					}
					else if ( SensorSts == _E_SensorSts_AlarmMid ) {
 8006fa0:	1dfb      	adds	r3, r7, #7
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d108      	bne.n	8006fba <_api_swing_task_mode_na+0x462>
						Outputs_Buzz_Set( _e_OutBuzz_Siren );
 8006fa8:	2004      	movs	r0, #4
 8006faa:	f004 fa97 	bl	800b4dc <Outputs_Buzz_Set>
						Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2102      	movs	r1, #2
 8006fb4:	2002      	movs	r0, #2
 8006fb6:	f004 fad7 	bl	800b568 <Outputs_RGB_Set>
					}
				}

				Outputs_Buzz_Set( _e_OutBuzz_Siren );
 8006fba:	2004      	movs	r0, #4
 8006fbc:	f004 fa8e 	bl	800b4dc <Outputs_Buzz_Set>

				TaskManager_Step_Set( API_SWING, sApiSwTask.stepBack );
 8006fc0:	4b21      	ldr	r3, [pc, #132]	@ (8007048 <_api_swing_task_mode_na+0x4f0>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	0019      	movs	r1, r3
 8006fc6:	200d      	movs	r0, #13
 8006fc8:	f006 fc6a 	bl	800d8a0 <TaskManager_Step_Set>
				break;
 8006fcc:	e01e      	b.n	800700c <_api_swing_task_mode_na+0x4b4>

			case _e_api_swing_task_mode_na_buzzer_sirene:
				if( Timing_Get_Bool(_e_Timing_Swing_Beep) == true)
 8006fce:	200b      	movs	r0, #11
 8006fd0:	f008 fc9e 	bl	800f910 <Timing_Get_Bool>
 8006fd4:	0003      	movs	r3, r0
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d108      	bne.n	8006fec <_api_swing_task_mode_na+0x494>
				{
					Timing_Set(_e_Timing_Swing_Beep, 1000);
 8006fda:	23fa      	movs	r3, #250	@ 0xfa
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	0019      	movs	r1, r3
 8006fe0:	200b      	movs	r0, #11
 8006fe2:	f008 fc7f 	bl	800f8e4 <Timing_Set>
					Outputs_Buzz_Set( _e_OutBuzz_Siren );
 8006fe6:	2004      	movs	r0, #4
 8006fe8:	f004 fa78 	bl	800b4dc <Outputs_Buzz_Set>
				}
				TaskManager_Step_Set( API_SWING, sApiSwTask.stepBack );
 8006fec:	4b16      	ldr	r3, [pc, #88]	@ (8007048 <_api_swing_task_mode_na+0x4f0>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	0019      	movs	r1, r3
 8006ff2:	200d      	movs	r0, #13
 8006ff4:	f006 fc54 	bl	800d8a0 <TaskManager_Step_Set>
				break;
 8006ff8:	e008      	b.n	800700c <_api_swing_task_mode_na+0x4b4>

		default:
			TaskManager_Go( API_SWING , _Api_Swing_task_Home );
 8006ffa:	4b12      	ldr	r3, [pc, #72]	@ (8007044 <_api_swing_task_mode_na+0x4ec>)
 8006ffc:	0019      	movs	r1, r3
 8006ffe:	200d      	movs	r0, #13
 8007000:	f006 fb78 	bl	800d6f4 <TaskManager_Go>
			break;
 8007004:	e002      	b.n	800700c <_api_swing_task_mode_na+0x4b4>
			break;
 8007006:	46c0      	nop			@ (mov r8, r8)
 8007008:	e000      	b.n	800700c <_api_swing_task_mode_na+0x4b4>
				break;
 800700a:	46c0      	nop			@ (mov r8, r8)
	}

	if ( Timing_Get_Bool( _e_Timing_Swing_CloseDelayExit ) == false )
 800700c:	200e      	movs	r0, #14
 800700e:	f008 fc7f 	bl	800f910 <Timing_Get_Bool>
 8007012:	1e03      	subs	r3, r0, #0
 8007014:	d103      	bne.n	800701e <_api_swing_task_mode_na+0x4c6>
	{
		Position_NA_Entrance_Set(_e_PosModeNfSts_Block);
 8007016:	2001      	movs	r0, #1
 8007018:	f005 f8b6 	bl	800c188 <Position_NA_Entrance_Set>
 800701c:	e002      	b.n	8007024 <_api_swing_task_mode_na+0x4cc>
	}
	else {
		Position_NA_Entrance_Set(_e_PosModeNfSts_Free);
 800701e:	2000      	movs	r0, #0
 8007020:	f005 f8b2 	bl	800c188 <Position_NA_Entrance_Set>
	}

	if ( Timing_Get_Bool( _e_Timing_Swing_CloseDelayEntrance ) == false ) {
 8007024:	200d      	movs	r0, #13
 8007026:	f008 fc73 	bl	800f910 <Timing_Get_Bool>
 800702a:	1e03      	subs	r3, r0, #0
 800702c:	d103      	bne.n	8007036 <_api_swing_task_mode_na+0x4de>
		Position_NA_Exit_Set(_e_PosModeNfSts_Block);
 800702e:	2001      	movs	r0, #1
 8007030:	f005 f8ea 	bl	800c208 <Position_NA_Exit_Set>
 8007034:	e002      	b.n	800703c <_api_swing_task_mode_na+0x4e4>
	}
	else{
		Position_NA_Exit_Set(_e_PosModeNfSts_Free);
 8007036:	2000      	movs	r0, #0
 8007038:	f005 f8e6 	bl	800c208 <Position_NA_Exit_Set>
	}

}
 800703c:	46bd      	mov	sp, r7
 800703e:	b003      	add	sp, #12
 8007040:	bd90      	pop	{r4, r7, pc}
 8007042:	46c0      	nop			@ (mov r8, r8)
 8007044:	0800605d 	.word	0x0800605d
 8007048:	2000002c 	.word	0x2000002c

0800704c <_api_swing_task_mode_nf>:
	_e_api_swing_task_mode_nf_buzzer_sirene,

}eApiSwStepModoNf_t;

static void _api_swing_task_mode_nf(void)
{
 800704c:	b590      	push	{r4, r7, lr}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
	tSensorSts SensorSts = _e_SensorSts_None;
 8007052:	1dfb      	adds	r3, r7, #7
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
	tSensorSts SensorStsPass = _e_SensorSts_PassWait;
 8007058:	1dbb      	adds	r3, r7, #6
 800705a:	2206      	movs	r2, #6
 800705c:	701a      	strb	r2, [r3, #0]

	TaskManager_Set( API_SWING, _e_api_swuing_task_mode_nf );
 800705e:	2104      	movs	r1, #4
 8007060:	200d      	movs	r0, #13
 8007062:	f006 fb95 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( API_SWING ) == false )
 8007066:	200d      	movs	r0, #13
 8007068:	f006 fbf8 	bl	800d85c <TaskManager_First_Get>
 800706c:	1e03      	subs	r3, r0, #0
 800706e:	d11b      	bne.n	80070a8 <_api_swing_task_mode_nf+0x5c>
	{
		TaskManager_First_Set( API_SWING );
 8007070:	200d      	movs	r0, #13
 8007072:	f006 fba9 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_idle );
 8007076:	2100      	movs	r1, #0
 8007078:	200d      	movs	r0, #13
 800707a:	f006 fc11 	bl	800d8a0 <TaskManager_Step_Set>
		sApiSwTask.stepPrevious = _e_api_swing_task_mode_nf_idle;
 800707e:	4bca      	ldr	r3, [pc, #808]	@ (80073a8 <_api_swing_task_mode_nf+0x35c>)
 8007080:	2200      	movs	r2, #0
 8007082:	705a      	strb	r2, [r3, #1]

		Position_NF_Set(_e_PosModeNfSts_Close);
 8007084:	2000      	movs	r0, #0
 8007086:	f005 f8ff 	bl	800c288 <Position_NF_Set>
		Sensor_Set( _e_SensorMode_Alarm );
 800708a:	2001      	movs	r0, #1
 800708c:	f005 fc12 	bl	800c8b4 <Sensor_Set>
		Timing_Set(_e_Timing_Swing_Picto_RGB, 1000);
 8007090:	23fa      	movs	r3, #250	@ 0xfa
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	0019      	movs	r1, r3
 8007096:	2012      	movs	r0, #18
 8007098:	f008 fc24 	bl	800f8e4 <Timing_Set>
#if(SW_PICTOGRAMA_MODE == SW_PICTOGRAMA_FITA_LED)
		Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Static, _e_OutPicColor_TSIgr, _e_OutPicSpeed_Slow );
 800709c:	2305      	movs	r3, #5
 800709e:	2206      	movs	r2, #6
 80070a0:	2101      	movs	r1, #1
 80070a2:	2002      	movs	r0, #2
 80070a4:	f004 fa60 	bl	800b568 <Outputs_RGB_Set>
#else
		Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Static, _e_OutPicColor_Green, _e_OutPicSpeed_Fast );
#endif
	}

	switch( (uint8_t)TaskManager_Step_Get( API_SWING ) )
 80070a8:	200d      	movs	r0, #13
 80070aa:	f006 fc23 	bl	800d8f4 <TaskManager_Step_Get>
 80070ae:	0003      	movs	r3, r0
 80070b0:	2b0b      	cmp	r3, #11
 80070b2:	d900      	bls.n	80070b6 <_api_swing_task_mode_nf+0x6a>
 80070b4:	e2dd      	b.n	8007672 <_api_swing_task_mode_nf+0x626>
 80070b6:	009a      	lsls	r2, r3, #2
 80070b8:	4bbc      	ldr	r3, [pc, #752]	@ (80073ac <_api_swing_task_mode_nf+0x360>)
 80070ba:	18d3      	adds	r3, r2, r3
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	469f      	mov	pc, r3
	{
		case _e_api_swing_task_mode_nf_idle:

			Sensor_Set( _e_SensorMode_Alarm );
 80070c0:	2001      	movs	r0, #1
 80070c2:	f005 fbf7 	bl	800c8b4 <Sensor_Set>
			SensorSts = Sensor_Get();
 80070c6:	1dfc      	adds	r4, r7, #7
 80070c8:	f005 fbea 	bl	800c8a0 <Sensor_Get>
 80070cc:	0003      	movs	r3, r0
 80070ce:	7023      	strb	r3, [r4, #0]

			if( Inputs_Com_Get() == _e_InCom_OpenIn  )
 80070d0:	f003 fb96 	bl	800a800 <Inputs_Com_Get>
 80070d4:	0003      	movs	r3, r0
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d103      	bne.n	80070e2 <_api_swing_task_mode_nf+0x96>
			{
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_exit );
 80070da:	2104      	movs	r1, #4
 80070dc:	200d      	movs	r0, #13
 80070de:	f006 fbdf 	bl	800d8a0 <TaskManager_Step_Set>
			}
			if( Inputs_Com_Get() == _e_InCom_OpenOut )
 80070e2:	f003 fb8d 	bl	800a800 <Inputs_Com_Get>
 80070e6:	0003      	movs	r3, r0
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d103      	bne.n	80070f4 <_api_swing_task_mode_nf+0xa8>
			{
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_entrance);
 80070ec:	2102      	movs	r1, #2
 80070ee:	200d      	movs	r0, #13
 80070f0:	f006 fbd6 	bl	800d8a0 <TaskManager_Step_Set>
			}

			if ( SensorSts == _e_SensorSts_Both )
 80070f4:	1dfb      	adds	r3, r7, #7
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d109      	bne.n	8007110 <_api_swing_task_mode_nf+0xc4>
			{
				clrBurlaArmisHc();
 80070fc:	f7fe fe54 	bl	8005da8 <clrBurlaArmisHc>
				sApiSwTask.stepBack = _e_api_swing_task_mode_nf_idle;
 8007100:	4ba9      	ldr	r3, [pc, #676]	@ (80073a8 <_api_swing_task_mode_nf+0x35c>)
 8007102:	2200      	movs	r2, #0
 8007104:	701a      	strb	r2, [r3, #0]
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_alarm_sts_user );
 8007106:	2108      	movs	r1, #8
 8007108:	200d      	movs	r0, #13
 800710a:	f006 fbc9 	bl	800d8a0 <TaskManager_Step_Set>
					{
						TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_close );
					}
				}
			}
		break;
 800710e:	e2b5      	b.n	800767c <_api_swing_task_mode_nf+0x630>
				if ( (SensorSts == _e_SensorSts_AlarmEntrance ) && (Inputs_Com_Get() != _e_InCom_OpenOut))
 8007110:	1dfb      	adds	r3, r7, #7
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d10d      	bne.n	8007134 <_api_swing_task_mode_nf+0xe8>
 8007118:	f003 fb72 	bl	800a800 <Inputs_Com_Get>
 800711c:	0003      	movs	r3, r0
 800711e:	2b02      	cmp	r3, #2
 8007120:	d008      	beq.n	8007134 <_api_swing_task_mode_nf+0xe8>
					clrBurlaArmisHc();
 8007122:	f7fe fe41 	bl	8005da8 <clrBurlaArmisHc>
					sApiSwTask.stepBack = _e_api_swing_task_mode_nf_idle;
 8007126:	4ba0      	ldr	r3, [pc, #640]	@ (80073a8 <_api_swing_task_mode_nf+0x35c>)
 8007128:	2200      	movs	r2, #0
 800712a:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_alarm_sts_user );
 800712c:	2108      	movs	r1, #8
 800712e:	200d      	movs	r0, #13
 8007130:	f006 fbb6 	bl	800d8a0 <TaskManager_Step_Set>
				if ( (SensorSts == _e_SensorSts_AlarmExit ) && (Inputs_Com_Get() != _e_InCom_OpenIn))
 8007134:	1dfb      	adds	r3, r7, #7
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d10d      	bne.n	8007158 <_api_swing_task_mode_nf+0x10c>
 800713c:	f003 fb60 	bl	800a800 <Inputs_Com_Get>
 8007140:	0003      	movs	r3, r0
 8007142:	2b01      	cmp	r3, #1
 8007144:	d008      	beq.n	8007158 <_api_swing_task_mode_nf+0x10c>
					clrBurlaArmisHc();
 8007146:	f7fe fe2f 	bl	8005da8 <clrBurlaArmisHc>
					sApiSwTask.stepBack = _e_api_swing_task_mode_nf_idle;
 800714a:	4b97      	ldr	r3, [pc, #604]	@ (80073a8 <_api_swing_task_mode_nf+0x35c>)
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_alarm_sts_user );
 8007150:	2108      	movs	r1, #8
 8007152:	200d      	movs	r0, #13
 8007154:	f006 fba4 	bl	800d8a0 <TaskManager_Step_Set>
				if ( SensorSts == _E_SensorSts_AlarmMid )
 8007158:	1dfb      	adds	r3, r7, #7
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b04      	cmp	r3, #4
 800715e:	d108      	bne.n	8007172 <_api_swing_task_mode_nf+0x126>
					setBurlaArmisHc();
 8007160:	f7fe fe18 	bl	8005d94 <setBurlaArmisHc>
					sApiSwTask.stepBack = _e_api_swing_task_mode_nf_idle;
 8007164:	4b90      	ldr	r3, [pc, #576]	@ (80073a8 <_api_swing_task_mode_nf+0x35c>)
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_alarm_sts_user );
 800716a:	2108      	movs	r1, #8
 800716c:	200d      	movs	r0, #13
 800716e:	f006 fb97 	bl	800d8a0 <TaskManager_Step_Set>
				if ( SensorSts == _e_SensorSts_None )
 8007172:	1dfb      	adds	r3, r7, #7
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d000      	beq.n	800717c <_api_swing_task_mode_nf+0x130>
 800717a:	e27f      	b.n	800767c <_api_swing_task_mode_nf+0x630>
					clrBurlaArmisHc();
 800717c:	f7fe fe14 	bl	8005da8 <clrBurlaArmisHc>
					if ( ( Inputs_Com_Get() != _e_InCom_OpenIn  )	&&
 8007180:	f003 fb3e 	bl	800a800 <Inputs_Com_Get>
 8007184:	0003      	movs	r3, r0
 8007186:	2b01      	cmp	r3, #1
 8007188:	d100      	bne.n	800718c <_api_swing_task_mode_nf+0x140>
 800718a:	e277      	b.n	800767c <_api_swing_task_mode_nf+0x630>
						 ( Inputs_Com_Get() != _e_InCom_OpenOut ) )
 800718c:	f003 fb38 	bl	800a800 <Inputs_Com_Get>
 8007190:	0003      	movs	r3, r0
					if ( ( Inputs_Com_Get() != _e_InCom_OpenIn  )	&&
 8007192:	2b02      	cmp	r3, #2
 8007194:	d100      	bne.n	8007198 <_api_swing_task_mode_nf+0x14c>
 8007196:	e271      	b.n	800767c <_api_swing_task_mode_nf+0x630>
						TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_close );
 8007198:	2101      	movs	r1, #1
 800719a:	200d      	movs	r0, #13
 800719c:	f006 fb80 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 80071a0:	e26c      	b.n	800767c <_api_swing_task_mode_nf+0x630>

		case _e_api_swing_task_mode_nf_close:
			if ( ( Inputs_Com_Get() != _e_InCom_OpenIn  ) && (  Inputs_Com_Get() != _e_InCom_OpenOut  ) )
 80071a2:	f003 fb2d 	bl	800a800 <Inputs_Com_Get>
 80071a6:	0003      	movs	r3, r0
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d01b      	beq.n	80071e4 <_api_swing_task_mode_nf+0x198>
 80071ac:	f003 fb28 	bl	800a800 <Inputs_Com_Get>
 80071b0:	0003      	movs	r3, r0
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d016      	beq.n	80071e4 <_api_swing_task_mode_nf+0x198>
			{
				if ( Timing_Get_Bool( _e_Timing_Swing_CloseDelay ) == true )
 80071b6:	200c      	movs	r0, #12
 80071b8:	f008 fbaa 	bl	800f910 <Timing_Get_Bool>
 80071bc:	0003      	movs	r3, r0
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d108      	bne.n	80071d4 <_api_swing_task_mode_nf+0x188>
				{
					Timing_Set( _e_Timing_Swing_CloseDelay, APISWING_KEEP_CLOSE );
 80071c2:	23fa      	movs	r3, #250	@ 0xfa
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	0019      	movs	r1, r3
 80071c8:	200c      	movs	r0, #12
 80071ca:	f008 fb8b 	bl	800f8e4 <Timing_Set>
					Position_NF_Set(_e_PosModeNfSts_Close);
 80071ce:	2000      	movs	r0, #0
 80071d0:	f005 f85a 	bl	800c288 <Position_NF_Set>
				}
				sApiSwTask.stepBack = _e_api_swing_task_mode_nf_idle;
 80071d4:	4b74      	ldr	r3, [pc, #464]	@ (80073a8 <_api_swing_task_mode_nf+0x35c>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	701a      	strb	r2, [r3, #0]
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_idle_sts_User );
 80071da:	210a      	movs	r1, #10
 80071dc:	200d      	movs	r0, #13
 80071de:	f006 fb5f 	bl	800d8a0 <TaskManager_Step_Set>
			}
			else
			{
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_idle );
			}
		break;
 80071e2:	e250      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_idle );
 80071e4:	2100      	movs	r1, #0
 80071e6:	200d      	movs	r0, #13
 80071e8:	f006 fb5a 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 80071ec:	e24b      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>

		case _e_api_swing_task_mode_nf_entrance:
			Sensor_Set( _e_SensorMode_Entrance );
 80071ee:	2002      	movs	r0, #2
 80071f0:	f005 fb60 	bl	800c8b4 <Sensor_Set>
			Position_NF_Set(_e_PosModeNfSts_Exit);
 80071f4:	2002      	movs	r0, #2
 80071f6:	f005 f847 	bl	800c288 <Position_NF_Set>

#if(SW_PICTOGRAMA_MODE == SW_PICTOGRAMA_FITA_LED)
			Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Green, _e_OutPicSpeed_Slow );
 80071fa:	2305      	movs	r3, #5
 80071fc:	2201      	movs	r2, #1
 80071fe:	2102      	movs	r1, #2
 8007200:	2000      	movs	r0, #0
 8007202:	f004 f9b1 	bl	800b568 <Outputs_RGB_Set>
			Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8007206:	2300      	movs	r3, #0
 8007208:	2200      	movs	r2, #0
 800720a:	2102      	movs	r1, #2
 800720c:	2001      	movs	r0, #1
 800720e:	f004 f9ab 	bl	800b568 <Outputs_RGB_Set>
#else
			Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
#endif
			Outputs_Com_Cheat( _e_OutCom_Cheat_None );
 8007212:	2000      	movs	r0, #0
 8007214:	f004 fa9c 	bl	800b750 <Outputs_Com_Cheat>
			Outputs_Buzz_Set( _e_OutBuzz_Beep );
 8007218:	2003      	movs	r0, #3
 800721a:	f004 f95f 	bl	800b4dc <Outputs_Buzz_Set>
			Timing_Set( _e_Timing_Swing_CloseDelay, APISWING_TIMEOUT_WAIT_ACCESS );
 800721e:	4b64      	ldr	r3, [pc, #400]	@ (80073b0 <_api_swing_task_mode_nf+0x364>)
 8007220:	0019      	movs	r1, r3
 8007222:	200c      	movs	r0, #12
 8007224:	f008 fb5e 	bl	800f8e4 <Timing_Set>
			TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_waint_entrance );
 8007228:	2103      	movs	r1, #3
 800722a:	200d      	movs	r0, #13
 800722c:	f006 fb38 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8007230:	e229      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>

		case _e_api_swing_task_mode_nf_waint_entrance:
			SensorStsPass = Sensor_Get();
 8007232:	1dbc      	adds	r4, r7, #6
 8007234:	f005 fb34 	bl	800c8a0 <Sensor_Get>
 8007238:	0003      	movs	r3, r0
 800723a:	7023      	strb	r3, [r4, #0]

			if( Inputs_Com_Get() != _e_InCom_OpenIn  	&&
 800723c:	f003 fae0 	bl	800a800 <Inputs_Com_Get>
 8007240:	0003      	movs	r3, r0
 8007242:	2b01      	cmp	r3, #1
 8007244:	d015      	beq.n	8007272 <_api_swing_task_mode_nf+0x226>
				Inputs_Com_Get() != _e_InCom_OpenOut 	&&
 8007246:	f003 fadb 	bl	800a800 <Inputs_Com_Get>
 800724a:	0003      	movs	r3, r0
			if( Inputs_Com_Get() != _e_InCom_OpenIn  	&&
 800724c:	2b02      	cmp	r3, #2
 800724e:	d010      	beq.n	8007272 <_api_swing_task_mode_nf+0x226>
				Timing_Get_Bool( _e_Timing_Swing_CloseDelay ) == true )
 8007250:	200c      	movs	r0, #12
 8007252:	f008 fb5d 	bl	800f910 <Timing_Get_Bool>
 8007256:	0003      	movs	r3, r0
				Inputs_Com_Get() != _e_InCom_OpenOut 	&&
 8007258:	2b01      	cmp	r3, #1
 800725a:	d10a      	bne.n	8007272 <_api_swing_task_mode_nf+0x226>
			{
				Outputs_Com_Pass( _e_OutCom_Pass_Nop );
 800725c:	2000      	movs	r0, #0
 800725e:	f004 fa59 	bl	800b714 <Outputs_Com_Pass>
				Outputs_Buzz_Set( _e_OutBuzz_Off );
 8007262:	2001      	movs	r0, #1
 8007264:	f004 f93a 	bl	800b4dc <Outputs_Buzz_Set>
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_idle );
 8007268:	2100      	movs	r1, #0
 800726a:	200d      	movs	r0, #13
 800726c:	f006 fb18 	bl	800d8a0 <TaskManager_Step_Set>
				return;
 8007270:	e209      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>
			}

			switch( SensorStsPass )
 8007272:	1dbb      	adds	r3, r7, #6
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	2b05      	cmp	r3, #5
 8007278:	d005      	beq.n	8007286 <_api_swing_task_mode_nf+0x23a>
 800727a:	dc37      	bgt.n	80072ec <_api_swing_task_mode_nf+0x2a0>
 800727c:	2b02      	cmp	r3, #2
 800727e:	d01c      	beq.n	80072ba <_api_swing_task_mode_nf+0x26e>
 8007280:	2b04      	cmp	r3, #4
 8007282:	d025      	beq.n	80072d0 <_api_swing_task_mode_nf+0x284>
					sApiSwTask.stepBack = _e_api_swing_task_mode_nf_waint_entrance;
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_buzzer_sirene );
				break;

				default:
				break;
 8007284:	e032      	b.n	80072ec <_api_swing_task_mode_nf+0x2a0>
					Outputs_RGB_Set( _e_OutPic_Both,  _e_OutPicMode_Blink, _e_OutPicColor_Pink, _e_OutPicSpeed_Fast );
 8007286:	2300      	movs	r3, #0
 8007288:	2204      	movs	r2, #4
 800728a:	2102      	movs	r1, #2
 800728c:	2002      	movs	r0, #2
 800728e:	f004 f96b 	bl	800b568 <Outputs_RGB_Set>
					Timing_Set( _e_Timing_Swing_CloseDelay, APISWING_TIMEOUT_WAIT_ACCESS ); // Renova o tempo para indicar passOKAY
 8007292:	4b47      	ldr	r3, [pc, #284]	@ (80073b0 <_api_swing_task_mode_nf+0x364>)
 8007294:	0019      	movs	r1, r3
 8007296:	200c      	movs	r0, #12
 8007298:	f008 fb24 	bl	800f8e4 <Timing_Set>
					sApiSwTask.stepPrevious = _e_api_swing_task_mode_nf_waint_entrance;
 800729c:	4b42      	ldr	r3, [pc, #264]	@ (80073a8 <_api_swing_task_mode_nf+0x35c>)
 800729e:	2203      	movs	r2, #3
 80072a0:	705a      	strb	r2, [r3, #1]
					Outputs_Com_Pass( _e_OutCom_Pass_OK );
 80072a2:	2001      	movs	r0, #1
 80072a4:	f004 fa36 	bl	800b714 <Outputs_Com_Pass>
					Timing_Set( _e_Timing_PassOk, TIMEOUT_PASSOK );
 80072a8:	2164      	movs	r1, #100	@ 0x64
 80072aa:	2013      	movs	r0, #19
 80072ac:	f008 fb1a 	bl	800f8e4 <Timing_Set>
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_access_ok );
 80072b0:	2106      	movs	r1, #6
 80072b2:	200d      	movs	r0, #13
 80072b4:	f006 faf4 	bl	800d8a0 <TaskManager_Step_Set>
				break;
 80072b8:	e019      	b.n	80072ee <_api_swing_task_mode_nf+0x2a2>
					Sensor_Set( _e_SensorMode_Alarm );
 80072ba:	2001      	movs	r0, #1
 80072bc:	f005 fafa 	bl	800c8b4 <Sensor_Set>
					sApiSwTask.stepBack = _e_api_swing_task_mode_nf_waint_entrance;
 80072c0:	4b39      	ldr	r3, [pc, #228]	@ (80073a8 <_api_swing_task_mode_nf+0x35c>)
 80072c2:	2203      	movs	r2, #3
 80072c4:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_invasion );
 80072c6:	2107      	movs	r1, #7
 80072c8:	200d      	movs	r0, #13
 80072ca:	f006 fae9 	bl	800d8a0 <TaskManager_Step_Set>
				break;
 80072ce:	e00e      	b.n	80072ee <_api_swing_task_mode_nf+0x2a2>
					Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 80072d0:	2300      	movs	r3, #0
 80072d2:	2200      	movs	r2, #0
 80072d4:	2102      	movs	r1, #2
 80072d6:	2002      	movs	r0, #2
 80072d8:	f004 f946 	bl	800b568 <Outputs_RGB_Set>
					sApiSwTask.stepBack = _e_api_swing_task_mode_nf_waint_entrance;
 80072dc:	4b32      	ldr	r3, [pc, #200]	@ (80073a8 <_api_swing_task_mode_nf+0x35c>)
 80072de:	2203      	movs	r2, #3
 80072e0:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_buzzer_sirene );
 80072e2:	210b      	movs	r1, #11
 80072e4:	200d      	movs	r0, #13
 80072e6:	f006 fadb 	bl	800d8a0 <TaskManager_Step_Set>
				break;
 80072ea:	e000      	b.n	80072ee <_api_swing_task_mode_nf+0x2a2>
				break;
 80072ec:	46c0      	nop			@ (mov r8, r8)
			}
		break;
 80072ee:	e1ca      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>

		case _e_api_swing_task_mode_nf_invasion:  // DSB/LBM - 26/07/2024: Alguém burlando o acesso
			SensorSts = Sensor_Get();
 80072f0:	1dfc      	adds	r4, r7, #7
 80072f2:	f005 fad5 	bl	800c8a0 <Sensor_Get>
 80072f6:	0003      	movs	r3, r0
 80072f8:	7023      	strb	r3, [r4, #0]
			if ( SensorSts == _e_SensorSts_Both )
 80072fa:	1dfb      	adds	r3, r7, #7
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d10f      	bne.n	8007322 <_api_swing_task_mode_nf+0x2d6>
			{
				Outputs_RGB_Set( _e_OutPic_In,  _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8007302:	2300      	movs	r3, #0
 8007304:	2200      	movs	r2, #0
 8007306:	2102      	movs	r1, #2
 8007308:	2000      	movs	r0, #0
 800730a:	f004 f92d 	bl	800b568 <Outputs_RGB_Set>
				Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 800730e:	2300      	movs	r3, #0
 8007310:	2200      	movs	r2, #0
 8007312:	2102      	movs	r1, #2
 8007314:	2001      	movs	r0, #1
 8007316:	f004 f927 	bl	800b568 <Outputs_RGB_Set>
				Outputs_Buzz_Set( _e_OutBuzz_Siren );
 800731a:	2004      	movs	r0, #4
 800731c:	f004 f8de 	bl	800b4dc <Outputs_Buzz_Set>
 8007320:	e025      	b.n	800736e <_api_swing_task_mode_nf+0x322>
			}
			else
			{
				if ( SensorSts == _e_SensorSts_AlarmEntrance )
 8007322:	1dfb      	adds	r3, r7, #7
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d109      	bne.n	800733e <_api_swing_task_mode_nf+0x2f2>
				{
					Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 800732a:	2300      	movs	r3, #0
 800732c:	2200      	movs	r2, #0
 800732e:	2102      	movs	r1, #2
 8007330:	2000      	movs	r0, #0
 8007332:	f004 f919 	bl	800b568 <Outputs_RGB_Set>
					Outputs_Buzz_Set( _e_OutBuzz_Siren );
 8007336:	2004      	movs	r0, #4
 8007338:	f004 f8d0 	bl	800b4dc <Outputs_Buzz_Set>
 800733c:	e017      	b.n	800736e <_api_swing_task_mode_nf+0x322>
				}
				else if ( SensorSts == _e_SensorSts_AlarmExit )
 800733e:	1dfb      	adds	r3, r7, #7
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d109      	bne.n	800735a <_api_swing_task_mode_nf+0x30e>
				{
					Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8007346:	2300      	movs	r3, #0
 8007348:	2200      	movs	r2, #0
 800734a:	2102      	movs	r1, #2
 800734c:	2001      	movs	r0, #1
 800734e:	f004 f90b 	bl	800b568 <Outputs_RGB_Set>
					Outputs_Buzz_Set( _e_OutBuzz_Siren );
 8007352:	2004      	movs	r0, #4
 8007354:	f004 f8c2 	bl	800b4dc <Outputs_Buzz_Set>
 8007358:	e009      	b.n	800736e <_api_swing_task_mode_nf+0x322>
				}
				else if ( SensorSts == _E_SensorSts_AlarmMid )
 800735a:	1dfb      	adds	r3, r7, #7
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b04      	cmp	r3, #4
 8007360:	d105      	bne.n	800736e <_api_swing_task_mode_nf+0x322>
				{
					Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8007362:	2300      	movs	r3, #0
 8007364:	2200      	movs	r2, #0
 8007366:	2102      	movs	r1, #2
 8007368:	2002      	movs	r0, #2
 800736a:	f004 f8fd 	bl	800b568 <Outputs_RGB_Set>
				}
			}

			if ( SensorSts == _e_SensorSts_None )  // So volta para a lógica de acesso se não existir qualquer obstrução em sensor, senão fica aqui até o tempo de acesso acabar
 800736e:	1dfb      	adds	r3, r7, #7
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d13b      	bne.n	80073ee <_api_swing_task_mode_nf+0x3a2>
			{
				if(sApiSwTask.stepBack == _e_api_swing_task_mode_nf_waint_entrance)
 8007376:	4b0c      	ldr	r3, [pc, #48]	@ (80073a8 <_api_swing_task_mode_nf+0x35c>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b03      	cmp	r3, #3
 800737c:	d11a      	bne.n	80073b4 <_api_swing_task_mode_nf+0x368>
				{
					Sensor_Set(_e_SensorMode_Entrance);
 800737e:	2002      	movs	r0, #2
 8007380:	f005 fa98 	bl	800c8b4 <Sensor_Set>
					Outputs_RGB_Set(_e_OutPic_In , _e_OutPicMode_Blink, _e_OutPicColor_Green, _e_OutPicSpeed_Slow);
 8007384:	2305      	movs	r3, #5
 8007386:	2201      	movs	r2, #1
 8007388:	2102      	movs	r1, #2
 800738a:	2000      	movs	r0, #0
 800738c:	f004 f8ec 	bl	800b568 <Outputs_RGB_Set>
					Outputs_RGB_Set(_e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red  , _e_OutPicSpeed_Fast);
 8007390:	2300      	movs	r3, #0
 8007392:	2200      	movs	r2, #0
 8007394:	2102      	movs	r1, #2
 8007396:	2001      	movs	r0, #1
 8007398:	f004 f8e6 	bl	800b568 <Outputs_RGB_Set>
					TaskManager_Step_Set(API_SWING, _e_api_swing_task_mode_nf_waint_entrance);
 800739c:	2103      	movs	r1, #3
 800739e:	200d      	movs	r0, #13
 80073a0:	f006 fa7e 	bl	800d8a0 <TaskManager_Step_Set>
 80073a4:	e01d      	b.n	80073e2 <_api_swing_task_mode_nf+0x396>
 80073a6:	46c0      	nop			@ (mov r8, r8)
 80073a8:	2000002c 	.word	0x2000002c
 80073ac:	0800fe00 	.word	0x0800fe00
 80073b0:	00003a98 	.word	0x00003a98
				}
				else if(sApiSwTask.stepBack == _e_api_swing_task_mode_nf_waint_exit)
 80073b4:	4bb5      	ldr	r3, [pc, #724]	@ (800768c <_api_swing_task_mode_nf+0x640>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b05      	cmp	r3, #5
 80073ba:	d112      	bne.n	80073e2 <_api_swing_task_mode_nf+0x396>
				{
					Sensor_Set(_e_SensorMode_Exit);
 80073bc:	2003      	movs	r0, #3
 80073be:	f005 fa79 	bl	800c8b4 <Sensor_Set>
					Outputs_RGB_Set(_e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Green, _e_OutPicSpeed_Slow);
 80073c2:	2305      	movs	r3, #5
 80073c4:	2201      	movs	r2, #1
 80073c6:	2102      	movs	r1, #2
 80073c8:	2001      	movs	r0, #1
 80073ca:	f004 f8cd 	bl	800b568 <Outputs_RGB_Set>
					Outputs_RGB_Set(_e_OutPic_In , _e_OutPicMode_Blink, _e_OutPicColor_Red  , _e_OutPicSpeed_Fast);
 80073ce:	2300      	movs	r3, #0
 80073d0:	2200      	movs	r2, #0
 80073d2:	2102      	movs	r1, #2
 80073d4:	2000      	movs	r0, #0
 80073d6:	f004 f8c7 	bl	800b568 <Outputs_RGB_Set>
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_waint_exit );
 80073da:	2105      	movs	r1, #5
 80073dc:	200d      	movs	r0, #13
 80073de:	f006 fa5f 	bl	800d8a0 <TaskManager_Step_Set>

				}
				Outputs_Com_Cheat( _e_OutCom_Cheat_None );
 80073e2:	2000      	movs	r0, #0
 80073e4:	f004 f9b4 	bl	800b750 <Outputs_Com_Cheat>
				Outputs_Buzz_Set( _e_OutBuzz_Beep );
 80073e8:	2003      	movs	r0, #3
 80073ea:	f004 f877 	bl	800b4dc <Outputs_Buzz_Set>
			}

			if(Timing_Get_Bool( _e_Timing_Swing_CloseDelay ) == true)
 80073ee:	200c      	movs	r0, #12
 80073f0:	f008 fa8e 	bl	800f910 <Timing_Get_Bool>
 80073f4:	0003      	movs	r3, r0
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d000      	beq.n	80073fc <_api_swing_task_mode_nf+0x3b0>
 80073fa:	e141      	b.n	8007680 <_api_swing_task_mode_nf+0x634>
			{
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_idle ); // Se o tempo do acesso acabar durante a invasão, volta pra idle e finaliza o acesso
 80073fc:	2100      	movs	r1, #0
 80073fe:	200d      	movs	r0, #13
 8007400:	f006 fa4e 	bl	800d8a0 <TaskManager_Step_Set>
			}
		break;
 8007404:	e13c      	b.n	8007680 <_api_swing_task_mode_nf+0x634>

		case _e_api_swing_task_mode_nf_exit:
			Sensor_Set( _e_SensorMode_Exit );
 8007406:	2003      	movs	r0, #3
 8007408:	f005 fa54 	bl	800c8b4 <Sensor_Set>
			Position_NF_Set(_e_PosModeNfSts_Entrance);
 800740c:	2001      	movs	r0, #1
 800740e:	f004 ff3b 	bl	800c288 <Position_NF_Set>
#if(SW_PICTOGRAMA_MODE == SW_PICTOGRAMA_FITA_LED)
			Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Green, _e_OutPicSpeed_Slow );
 8007412:	2305      	movs	r3, #5
 8007414:	2201      	movs	r2, #1
 8007416:	2102      	movs	r1, #2
 8007418:	2001      	movs	r0, #1
 800741a:	f004 f8a5 	bl	800b568 <Outputs_RGB_Set>
			Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 800741e:	2300      	movs	r3, #0
 8007420:	2200      	movs	r2, #0
 8007422:	2102      	movs	r1, #2
 8007424:	2000      	movs	r0, #0
 8007426:	f004 f89f 	bl	800b568 <Outputs_RGB_Set>
#else
			Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
#endif
			Outputs_Com_Cheat( _e_OutCom_Cheat_None );
 800742a:	2000      	movs	r0, #0
 800742c:	f004 f990 	bl	800b750 <Outputs_Com_Cheat>
			Timing_Set( _e_Timing_Swing_CloseDelay, APISWING_TIMEOUT_WAIT_ACCESS );
 8007430:	4b97      	ldr	r3, [pc, #604]	@ (8007690 <_api_swing_task_mode_nf+0x644>)
 8007432:	0019      	movs	r1, r3
 8007434:	200c      	movs	r0, #12
 8007436:	f008 fa55 	bl	800f8e4 <Timing_Set>
			Outputs_Buzz_Set( _e_OutBuzz_Beep );
 800743a:	2003      	movs	r0, #3
 800743c:	f004 f84e 	bl	800b4dc <Outputs_Buzz_Set>
			TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_waint_exit );
 8007440:	2105      	movs	r1, #5
 8007442:	200d      	movs	r0, #13
 8007444:	f006 fa2c 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8007448:	e11d      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>

		case _e_api_swing_task_mode_nf_waint_exit:
			if( Inputs_Com_Get() != _e_InCom_OpenIn  	&&
 800744a:	f003 f9d9 	bl	800a800 <Inputs_Com_Get>
 800744e:	0003      	movs	r3, r0
 8007450:	2b01      	cmp	r3, #1
 8007452:	d015      	beq.n	8007480 <_api_swing_task_mode_nf+0x434>
				Inputs_Com_Get() != _e_InCom_OpenOut 	&&
 8007454:	f003 f9d4 	bl	800a800 <Inputs_Com_Get>
 8007458:	0003      	movs	r3, r0
			if( Inputs_Com_Get() != _e_InCom_OpenIn  	&&
 800745a:	2b02      	cmp	r3, #2
 800745c:	d010      	beq.n	8007480 <_api_swing_task_mode_nf+0x434>
				Timing_Get_Bool( _e_Timing_Swing_CloseDelay ) == true )
 800745e:	200c      	movs	r0, #12
 8007460:	f008 fa56 	bl	800f910 <Timing_Get_Bool>
 8007464:	0003      	movs	r3, r0
				Inputs_Com_Get() != _e_InCom_OpenOut 	&&
 8007466:	2b01      	cmp	r3, #1
 8007468:	d10a      	bne.n	8007480 <_api_swing_task_mode_nf+0x434>
			{
				Outputs_Com_Pass( _e_OutCom_Pass_Nop );
 800746a:	2000      	movs	r0, #0
 800746c:	f004 f952 	bl	800b714 <Outputs_Com_Pass>
				Outputs_Buzz_Set( _e_OutBuzz_Off );
 8007470:	2001      	movs	r0, #1
 8007472:	f004 f833 	bl	800b4dc <Outputs_Buzz_Set>
				TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_idle );
 8007476:	2100      	movs	r1, #0
 8007478:	200d      	movs	r0, #13
 800747a:	f006 fa11 	bl	800d8a0 <TaskManager_Step_Set>
				return;
 800747e:	e102      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>
			}

			SensorStsPass = Sensor_Get();
 8007480:	1dbc      	adds	r4, r7, #6
 8007482:	f005 fa0d 	bl	800c8a0 <Sensor_Get>
 8007486:	0003      	movs	r3, r0
 8007488:	7023      	strb	r3, [r4, #0]
			switch( SensorStsPass )
 800748a:	1dbb      	adds	r3, r7, #6
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b05      	cmp	r3, #5
 8007490:	d005      	beq.n	800749e <_api_swing_task_mode_nf+0x452>
 8007492:	dc37      	bgt.n	8007504 <_api_swing_task_mode_nf+0x4b8>
 8007494:	2b01      	cmp	r3, #1
 8007496:	d01c      	beq.n	80074d2 <_api_swing_task_mode_nf+0x486>
 8007498:	2b04      	cmp	r3, #4
 800749a:	d025      	beq.n	80074e8 <_api_swing_task_mode_nf+0x49c>
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_buzzer_sirene );
				break;

				default:

				break;
 800749c:	e032      	b.n	8007504 <_api_swing_task_mode_nf+0x4b8>
					Outputs_RGB_Set( _e_OutPic_Both,  _e_OutPicMode_Blink, _e_OutPicColor_Pink, _e_OutPicSpeed_Fast );
 800749e:	2300      	movs	r3, #0
 80074a0:	2204      	movs	r2, #4
 80074a2:	2102      	movs	r1, #2
 80074a4:	2002      	movs	r0, #2
 80074a6:	f004 f85f 	bl	800b568 <Outputs_RGB_Set>
					Timing_Set( _e_Timing_Swing_CloseDelay, APISWING_TIMEOUT_WAIT_ACCESS ); // Renova o tempo para indicar passOKAY
 80074aa:	4b79      	ldr	r3, [pc, #484]	@ (8007690 <_api_swing_task_mode_nf+0x644>)
 80074ac:	0019      	movs	r1, r3
 80074ae:	200c      	movs	r0, #12
 80074b0:	f008 fa18 	bl	800f8e4 <Timing_Set>
					sApiSwTask.stepPrevious = _e_api_swing_task_mode_nf_waint_exit;
 80074b4:	4b75      	ldr	r3, [pc, #468]	@ (800768c <_api_swing_task_mode_nf+0x640>)
 80074b6:	2205      	movs	r2, #5
 80074b8:	705a      	strb	r2, [r3, #1]
					Outputs_Com_Pass( _e_OutCom_Pass_OK );
 80074ba:	2001      	movs	r0, #1
 80074bc:	f004 f92a 	bl	800b714 <Outputs_Com_Pass>
					Timing_Set( _e_Timing_PassOk, TIMEOUT_PASSOK );
 80074c0:	2164      	movs	r1, #100	@ 0x64
 80074c2:	2013      	movs	r0, #19
 80074c4:	f008 fa0e 	bl	800f8e4 <Timing_Set>
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_access_ok );
 80074c8:	2106      	movs	r1, #6
 80074ca:	200d      	movs	r0, #13
 80074cc:	f006 f9e8 	bl	800d8a0 <TaskManager_Step_Set>
				break;
 80074d0:	e019      	b.n	8007506 <_api_swing_task_mode_nf+0x4ba>
					Sensor_Set( _e_SensorMode_Alarm );
 80074d2:	2001      	movs	r0, #1
 80074d4:	f005 f9ee 	bl	800c8b4 <Sensor_Set>
					sApiSwTask.stepBack = _e_api_swing_task_mode_nf_waint_exit;
 80074d8:	4b6c      	ldr	r3, [pc, #432]	@ (800768c <_api_swing_task_mode_nf+0x640>)
 80074da:	2205      	movs	r2, #5
 80074dc:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_invasion );
 80074de:	2107      	movs	r1, #7
 80074e0:	200d      	movs	r0, #13
 80074e2:	f006 f9dd 	bl	800d8a0 <TaskManager_Step_Set>
				break;
 80074e6:	e00e      	b.n	8007506 <_api_swing_task_mode_nf+0x4ba>
					Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 80074e8:	2300      	movs	r3, #0
 80074ea:	2200      	movs	r2, #0
 80074ec:	2102      	movs	r1, #2
 80074ee:	2002      	movs	r0, #2
 80074f0:	f004 f83a 	bl	800b568 <Outputs_RGB_Set>
					sApiSwTask.stepBack = _e_api_swing_task_mode_nf_waint_exit;
 80074f4:	4b65      	ldr	r3, [pc, #404]	@ (800768c <_api_swing_task_mode_nf+0x640>)
 80074f6:	2205      	movs	r2, #5
 80074f8:	701a      	strb	r2, [r3, #0]
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_buzzer_sirene );
 80074fa:	210b      	movs	r1, #11
 80074fc:	200d      	movs	r0, #13
 80074fe:	f006 f9cf 	bl	800d8a0 <TaskManager_Step_Set>
				break;
 8007502:	e000      	b.n	8007506 <_api_swing_task_mode_nf+0x4ba>
				break;
 8007504:	46c0      	nop			@ (mov r8, r8)
			}
		break;
 8007506:	e0be      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>


		case _e_api_swing_task_mode_nf_access_ok:
			if ( (sApiSwTask.stepPrevious == _e_api_swing_task_mode_nf_waint_entrance)||
 8007508:	4b60      	ldr	r3, [pc, #384]	@ (800768c <_api_swing_task_mode_nf+0x640>)
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	2b03      	cmp	r3, #3
 800750e:	d004      	beq.n	800751a <_api_swing_task_mode_nf+0x4ce>
				 (sApiSwTask.stepPrevious == _e_api_swing_task_mode_nf_waint_exit    ) )
 8007510:	4b5e      	ldr	r3, [pc, #376]	@ (800768c <_api_swing_task_mode_nf+0x640>)
 8007512:	785b      	ldrb	r3, [r3, #1]
			if ( (sApiSwTask.stepPrevious == _e_api_swing_task_mode_nf_waint_entrance)||
 8007514:	2b05      	cmp	r3, #5
 8007516:	d000      	beq.n	800751a <_api_swing_task_mode_nf+0x4ce>
 8007518:	e0b4      	b.n	8007684 <_api_swing_task_mode_nf+0x638>
			{
				if(Timing_Get_Bool( _e_Timing_Swing_CloseDelay ) == true)
 800751a:	200c      	movs	r0, #12
 800751c:	f008 f9f8 	bl	800f910 <Timing_Get_Bool>
 8007520:	0003      	movs	r3, r0
 8007522:	2b01      	cmp	r3, #1
 8007524:	d103      	bne.n	800752e <_api_swing_task_mode_nf+0x4e2>
				{
					//Position_NF_Set(_e_PosModeNfSts_Close);
					TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_idle ); // Se o tempo carregado na passaOK estourar, fecha a bandeira e volta pra IDLE
 8007526:	2100      	movs	r1, #0
 8007528:	200d      	movs	r0, #13
 800752a:	f006 f9b9 	bl	800d8a0 <TaskManager_Step_Set>
				}

				if( Inputs_Com_Get() != _e_InCom_OpenIn &&
 800752e:	f003 f967 	bl	800a800 <Inputs_Com_Get>
 8007532:	0003      	movs	r3, r0
 8007534:	2b01      	cmp	r3, #1
 8007536:	d100      	bne.n	800753a <_api_swing_task_mode_nf+0x4ee>
 8007538:	e0a4      	b.n	8007684 <_api_swing_task_mode_nf+0x638>
					Inputs_Com_Get() != _e_InCom_OpenOut )
 800753a:	f003 f961 	bl	800a800 <Inputs_Com_Get>
 800753e:	0003      	movs	r3, r0
				if( Inputs_Com_Get() != _e_InCom_OpenIn &&
 8007540:	2b02      	cmp	r3, #2
 8007542:	d100      	bne.n	8007546 <_api_swing_task_mode_nf+0x4fa>
 8007544:	e09e      	b.n	8007684 <_api_swing_task_mode_nf+0x638>
				{
					if( Timing_Get_Bool(_e_Timing_PassOk) == true)
 8007546:	2013      	movs	r0, #19
 8007548:	f008 f9e2 	bl	800f910 <Timing_Get_Bool>
 800754c:	0003      	movs	r3, r0
 800754e:	2b01      	cmp	r3, #1
 8007550:	d000      	beq.n	8007554 <_api_swing_task_mode_nf+0x508>
 8007552:	e097      	b.n	8007684 <_api_swing_task_mode_nf+0x638>
					{
						//Position_NF_Set(_e_PosModeNfSts_Close);
						Outputs_Com_Pass( _e_OutCom_Pass_Nop );
 8007554:	2000      	movs	r0, #0
 8007556:	f004 f8dd 	bl	800b714 <Outputs_Com_Pass>
						Outputs_Buzz_Set( _e_OutBuzz_Off );
 800755a:	2001      	movs	r0, #1
 800755c:	f003 ffbe 	bl	800b4dc <Outputs_Buzz_Set>
#if(SW_PICTOGRAMA_MODE == SW_PICTOGRAMA_FITA_LED)
						Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Static, _e_OutPicColor_TSIgr, _e_OutPicSpeed_Slow );
 8007560:	2305      	movs	r3, #5
 8007562:	2206      	movs	r2, #6
 8007564:	2101      	movs	r1, #1
 8007566:	2002      	movs	r0, #2
 8007568:	f003 fffe 	bl	800b568 <Outputs_RGB_Set>
#endif
						Timing_Set( _e_Timing_Swing_CloseDelay, APISWING_DELAY_CLOSE );
 800756c:	23fa      	movs	r3, #250	@ 0xfa
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	0019      	movs	r1, r3
 8007572:	200c      	movs	r0, #12
 8007574:	f008 f9b6 	bl	800f8e4 <Timing_Set>
						TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_idle );
 8007578:	2100      	movs	r1, #0
 800757a:	200d      	movs	r0, #13
 800757c:	f006 f990 	bl	800d8a0 <TaskManager_Step_Set>
					}
				}
			}
		break;
 8007580:	e080      	b.n	8007684 <_api_swing_task_mode_nf+0x638>

		case _e_api_swing_task_mode_nf_alarm_sts_user:
			SensorSts = Sensor_Get();
 8007582:	1dfc      	adds	r4, r7, #7
 8007584:	f005 f98c 	bl	800c8a0 <Sensor_Get>
 8007588:	0003      	movs	r3, r0
 800758a:	7023      	strb	r3, [r4, #0]
			if ( SensorSts == _e_SensorSts_Both )
 800758c:	1dfb      	adds	r3, r7, #7
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b03      	cmp	r3, #3
 8007592:	d10f      	bne.n	80075b4 <_api_swing_task_mode_nf+0x568>
			{
#if(SW_PICTOGRAMA_MODE == SW_PICTOGRAMA_FITA_LED)
				Outputs_RGB_Set( _e_OutPic_In,  _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 8007594:	2300      	movs	r3, #0
 8007596:	2200      	movs	r2, #0
 8007598:	2102      	movs	r1, #2
 800759a:	2000      	movs	r0, #0
 800759c:	f003 ffe4 	bl	800b568 <Outputs_RGB_Set>
				Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 80075a0:	2300      	movs	r3, #0
 80075a2:	2200      	movs	r2, #0
 80075a4:	2102      	movs	r1, #2
 80075a6:	2001      	movs	r0, #1
 80075a8:	f003 ffde 	bl	800b568 <Outputs_RGB_Set>
#else
				Outputs_RGB_Set( _e_OutPic_In , _e_OutPicMode_Blink, _e_OutPicColor_Green, _e_OutPicSpeed_Fast );      // LBM - 20/09/2023: Foi mudado o firmware nessa versão, para fazer o pictograma da PD300 funcionar. Já funcionava na POC na primeira versão, porém não foi feito diagrama de ligação.
				Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Green, _e_OutPicSpeed_Fast );
#endif
				Outputs_Buzz_Set( _e_OutBuzz_Siren );
 80075ac:	2004      	movs	r0, #4
 80075ae:	f003 ff95 	bl	800b4dc <Outputs_Buzz_Set>
 80075b2:	e025      	b.n	8007600 <_api_swing_task_mode_nf+0x5b4>
			}
			else
			{
				if ( SensorSts == _e_SensorSts_AlarmEntrance )
 80075b4:	1dfb      	adds	r3, r7, #7
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d109      	bne.n	80075d0 <_api_swing_task_mode_nf+0x584>
				{
					Outputs_RGB_Set( _e_OutPic_In, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 80075bc:	2300      	movs	r3, #0
 80075be:	2200      	movs	r2, #0
 80075c0:	2102      	movs	r1, #2
 80075c2:	2000      	movs	r0, #0
 80075c4:	f003 ffd0 	bl	800b568 <Outputs_RGB_Set>
					Outputs_Buzz_Set( _e_OutBuzz_Siren );
 80075c8:	2004      	movs	r0, #4
 80075ca:	f003 ff87 	bl	800b4dc <Outputs_Buzz_Set>
 80075ce:	e017      	b.n	8007600 <_api_swing_task_mode_nf+0x5b4>
				}
				else if ( SensorSts == _e_SensorSts_AlarmExit )
 80075d0:	1dfb      	adds	r3, r7, #7
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d109      	bne.n	80075ec <_api_swing_task_mode_nf+0x5a0>
				{
					Outputs_RGB_Set( _e_OutPic_Out, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 80075d8:	2300      	movs	r3, #0
 80075da:	2200      	movs	r2, #0
 80075dc:	2102      	movs	r1, #2
 80075de:	2001      	movs	r0, #1
 80075e0:	f003 ffc2 	bl	800b568 <Outputs_RGB_Set>
					Outputs_Buzz_Set( _e_OutBuzz_Siren );
 80075e4:	2004      	movs	r0, #4
 80075e6:	f003 ff79 	bl	800b4dc <Outputs_Buzz_Set>
 80075ea:	e009      	b.n	8007600 <_api_swing_task_mode_nf+0x5b4>
				}
				else if ( SensorSts == _E_SensorSts_AlarmMid )
 80075ec:	1dfb      	adds	r3, r7, #7
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d105      	bne.n	8007600 <_api_swing_task_mode_nf+0x5b4>
				{
					Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Blink, _e_OutPicColor_Red, _e_OutPicSpeed_Fast );
 80075f4:	2300      	movs	r3, #0
 80075f6:	2200      	movs	r2, #0
 80075f8:	2102      	movs	r1, #2
 80075fa:	2002      	movs	r0, #2
 80075fc:	f003 ffb4 	bl	800b568 <Outputs_RGB_Set>
				}
			}
			TaskManager_Step_Set( API_SWING, sApiSwTask.stepBack );
 8007600:	4b22      	ldr	r3, [pc, #136]	@ (800768c <_api_swing_task_mode_nf+0x640>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	0019      	movs	r1, r3
 8007606:	200d      	movs	r0, #13
 8007608:	f006 f94a 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800760c:	e03b      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>

		case _e_api_swing_task_mode_nf_idle_sts_User:

			if( Timing_Get_Bool(_e_Timing_Swing_Picto_RGB) == true)
 800760e:	2012      	movs	r0, #18
 8007610:	f008 f97e 	bl	800f910 <Timing_Get_Bool>
 8007614:	0003      	movs	r3, r0
 8007616:	2b01      	cmp	r3, #1
 8007618:	d10b      	bne.n	8007632 <_api_swing_task_mode_nf+0x5e6>
			{
#if(SW_PICTOGRAMA_MODE == SW_PICTOGRAMA_FITA_LED)
				Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Static, _e_OutPicColor_TSIgr, _e_OutPicSpeed_Slow );
 800761a:	2305      	movs	r3, #5
 800761c:	2206      	movs	r2, #6
 800761e:	2101      	movs	r1, #1
 8007620:	2002      	movs	r0, #2
 8007622:	f003 ffa1 	bl	800b568 <Outputs_RGB_Set>
#else
				Outputs_RGB_Set( _e_OutPic_Both, _e_OutPicMode_Static, _e_OutPicColor_Green, _e_OutPicSpeed_Fast );
#endif
				Timing_Set(_e_Timing_Swing_Picto_RGB, 1000);
 8007626:	23fa      	movs	r3, #250	@ 0xfa
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	0019      	movs	r1, r3
 800762c:	2012      	movs	r0, #18
 800762e:	f008 f959 	bl	800f8e4 <Timing_Set>
			}
			Outputs_Buzz_Set( _e_OutBuzz_Off );
 8007632:	2001      	movs	r0, #1
 8007634:	f003 ff52 	bl	800b4dc <Outputs_Buzz_Set>
			TaskManager_Step_Set( API_SWING, sApiSwTask.stepBack );
 8007638:	4b14      	ldr	r3, [pc, #80]	@ (800768c <_api_swing_task_mode_nf+0x640>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	0019      	movs	r1, r3
 800763e:	200d      	movs	r0, #13
 8007640:	f006 f92e 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8007644:	e01f      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>

		case _e_api_swing_task_mode_nf_buzzer_sirene:
			if( Timing_Get_Bool(_e_Timing_Swing_Beep) == true)
 8007646:	200b      	movs	r0, #11
 8007648:	f008 f962 	bl	800f910 <Timing_Get_Bool>
 800764c:	0003      	movs	r3, r0
 800764e:	2b01      	cmp	r3, #1
 8007650:	d108      	bne.n	8007664 <_api_swing_task_mode_nf+0x618>
			{
				Timing_Set(_e_Timing_Swing_Beep, 500);
 8007652:	23fa      	movs	r3, #250	@ 0xfa
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	0019      	movs	r1, r3
 8007658:	200b      	movs	r0, #11
 800765a:	f008 f943 	bl	800f8e4 <Timing_Set>
				Outputs_Buzz_Set( _e_OutBuzz_Siren );
 800765e:	2004      	movs	r0, #4
 8007660:	f003 ff3c 	bl	800b4dc <Outputs_Buzz_Set>
			}
			TaskManager_Step_Set( API_SWING, sApiSwTask.stepBack );
 8007664:	4b09      	ldr	r3, [pc, #36]	@ (800768c <_api_swing_task_mode_nf+0x640>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	0019      	movs	r1, r3
 800766a:	200d      	movs	r0, #13
 800766c:	f006 f918 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8007670:	e009      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>

		default: TaskManager_Step_Set( API_SWING, _e_api_swing_task_mode_nf_idle );	break;
 8007672:	2100      	movs	r1, #0
 8007674:	200d      	movs	r0, #13
 8007676:	f006 f913 	bl	800d8a0 <TaskManager_Step_Set>
 800767a:	e004      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>
		break;
 800767c:	46c0      	nop			@ (mov r8, r8)
 800767e:	e002      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>
		break;
 8007680:	46c0      	nop			@ (mov r8, r8)
 8007682:	e000      	b.n	8007686 <_api_swing_task_mode_nf+0x63a>
		break;
 8007684:	46c0      	nop			@ (mov r8, r8)
	}

}
 8007686:	46bd      	mov	sp, r7
 8007688:	b003      	add	sp, #12
 800768a:	bd90      	pop	{r4, r7, pc}
 800768c:	2000002c 	.word	0x2000002c
 8007690:	00003a98 	.word	0x00003a98

08007694 <Api_Swing_Init>:

void Api_Swing_Init(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
	memset((void *)&sApiSwingVar, 0, sizeof(sApiSwingVar_t));
 8007698:	4b15      	ldr	r3, [pc, #84]	@ (80076f0 <Api_Swing_Init+0x5c>)
 800769a:	220c      	movs	r2, #12
 800769c:	2100      	movs	r1, #0
 800769e:	0018      	movs	r0, r3
 80076a0:	f008 fad7 	bl	800fc52 <memset>
	sApiSwingCmdInfo.configMode = 0;
 80076a4:	4b13      	ldr	r3, [pc, #76]	@ (80076f4 <Api_Swing_Init+0x60>)
 80076a6:	2226      	movs	r2, #38	@ 0x26
 80076a8:	2100      	movs	r1, #0
 80076aa:	5499      	strb	r1, [r3, r2]

	TaskManager_Clear( API_SWING );
 80076ac:	200d      	movs	r0, #13
 80076ae:	f006 f839 	bl	800d724 <TaskManager_Clear>
	TaskManager_Go( API_SWING , _api_swing_task_searchHome );
 80076b2:	4b11      	ldr	r3, [pc, #68]	@ (80076f8 <Api_Swing_Init+0x64>)
 80076b4:	0019      	movs	r1, r3
 80076b6:	200d      	movs	r0, #13
 80076b8:	f006 f81c 	bl	800d6f4 <TaskManager_Go>

	TaskManager_Clear( API_URNA );
 80076bc:	200e      	movs	r0, #14
 80076be:	f006 f831 	bl	800d724 <TaskManager_Clear>
	TaskManager_Go( API_URNA , _Api_SwingUrna_task );
 80076c2:	4b0e      	ldr	r3, [pc, #56]	@ (80076fc <Api_Swing_Init+0x68>)
 80076c4:	0019      	movs	r1, r3
 80076c6:	200e      	movs	r0, #14
 80076c8:	f006 f814 	bl	800d6f4 <TaskManager_Go>

	TaskManager_Clear( TRATA_PACKET );
 80076cc:	200f      	movs	r0, #15
 80076ce:	f006 f829 	bl	800d724 <TaskManager_Clear>
	TaskManager_Go( TRATA_PACKET, _Api_Swing_task_Trata_Packet );
 80076d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007700 <Api_Swing_Init+0x6c>)
 80076d4:	0019      	movs	r1, r3
 80076d6:	200f      	movs	r0, #15
 80076d8:	f006 f80c 	bl	800d6f4 <TaskManager_Go>
	_Api_Swing_RenewTimeoutCamera();
 80076dc:	f7fe fbaa 	bl	8005e34 <_Api_Swing_RenewTimeoutCamera>

	// inicializa o modulo de position.
	Position_Init();
 80076e0:	f004 fc20 	bl	800bf24 <Position_Init>

	// inicializa o modulo de sensor.
	Sensor_Init();
 80076e4:	f005 f8cc 	bl	800c880 <Sensor_Init>
}
 80076e8:	46c0      	nop			@ (mov r8, r8)
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	46c0      	nop			@ (mov r8, r8)
 80076f0:	20000058 	.word	0x20000058
 80076f4:	20000030 	.word	0x20000030
 80076f8:	08005e55 	.word	0x08005e55
 80076fc:	08007789 	.word	0x08007789
 8007700:	080061e1 	.word	0x080061e1

08007704 <Api_Swing_alarm>:

//URNA
/*** ** * TASK API_SWING ALARME * ** ***/
bool Api_Swing_alarm(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
	if(Api_Swing_get_sensor() != 0 ){
 8007708:	f000 f8ba 	bl	8007880 <Api_Swing_get_sensor>
 800770c:	1e03      	subs	r3, r0, #0
 800770e:	d007      	beq.n	8007720 <Api_Swing_alarm+0x1c>
		Timing_Set( _e_Timing_Swing_AlarmDeb , 500 );
 8007710:	23fa      	movs	r3, #250	@ 0xfa
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	0019      	movs	r1, r3
 8007716:	200a      	movs	r0, #10
 8007718:	f008 f8e4 	bl	800f8e4 <Timing_Set>
		return true;
 800771c:	2301      	movs	r3, #1
 800771e:	e000      	b.n	8007722 <Api_Swing_alarm+0x1e>
	}
	else{
		return false;
 8007720:	2300      	movs	r3, #0
	}
}
 8007722:	0018      	movs	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <Api_Swing_alarm_task>:

//--------------------------------------
void Api_Swing_alarm_task(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
	if( Timing_Get_Bool( _e_Timing_Swing_Beep ) == false )// Beep
 800772c:	200b      	movs	r0, #11
 800772e:	f008 f8ef 	bl	800f910 <Timing_Get_Bool>
 8007732:	1e03      	subs	r3, r0, #0
 8007734:	d102      	bne.n	800773c <Api_Swing_alarm_task+0x14>
	{
		Outputs_Buzz_Set( _e_OutBuzz_Beep );
 8007736:	2003      	movs	r0, #3
 8007738:	f003 fed0 	bl	800b4dc <Outputs_Buzz_Set>
	}

	if(getBurlaArmisHc() == true)
 800773c:	f7fe fb42 	bl	8005dc4 <getBurlaArmisHc>
 8007740:	0003      	movs	r3, r0
 8007742:	2b01      	cmp	r3, #1
 8007744:	d116      	bne.n	8007774 <Api_Swing_alarm_task+0x4c>
	{
		if ( Timing_Get_Bool( _e_Timing_Burla ) == true )
 8007746:	2014      	movs	r0, #20
 8007748:	f008 f8e2 	bl	800f910 <Timing_Get_Bool>
 800774c:	0003      	movs	r3, r0
 800774e:	2b01      	cmp	r3, #1
 8007750:	d110      	bne.n	8007774 <Api_Swing_alarm_task+0x4c>
		{
			Timing_Set( _e_Timing_Burla, TIMEOUT_BURLA );
 8007752:	23fa      	movs	r3, #250	@ 0xfa
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	0019      	movs	r1, r3
 8007758:	2014      	movs	r0, #20
 800775a:	f008 f8c3 	bl	800f8e4 <Timing_Set>
			if(Outputs_Com_Cheat_Get() == _e_OutCom_Cheat_None)
 800775e:	f004 f815 	bl	800b78c <Outputs_Com_Cheat_Get>
 8007762:	1e03      	subs	r3, r0, #0
 8007764:	d103      	bne.n	800776e <Api_Swing_alarm_task+0x46>
			{
				Outputs_Com_Cheat( _e_OutCom_Cheat_Shit );
 8007766:	2001      	movs	r0, #1
 8007768:	f003 fff2 	bl	800b750 <Outputs_Com_Cheat>
			{
				Outputs_Com_Cheat( _e_OutCom_Cheat_None );
			}
		}
	}
}
 800776c:	e002      	b.n	8007774 <Api_Swing_alarm_task+0x4c>
				Outputs_Com_Cheat( _e_OutCom_Cheat_None );
 800776e:	2000      	movs	r0, #0
 8007770:	f003 ffee 	bl	800b750 <Outputs_Com_Cheat>
}
 8007774:	46c0      	nop			@ (mov r8, r8)
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <Api_Swing_Task_Alarme>:

//--------------------------------------
void Api_Swing_Task_Alarme(void)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	af00      	add	r7, sp, #0
	Api_Swing_alarm_task();
 800777e:	f7ff ffd3 	bl	8007728 <Api_Swing_alarm_task>
}
 8007782:	46c0      	nop			@ (mov r8, r8)
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <_Api_SwingUrna_task>:

/*** ** * TASK SWING URNA * ** ***/
static void _Api_SwingUrna_task(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
	TaskManager_Set( API_URNA, _e_ApiUrna_task_Urna );
 800778c:	2100      	movs	r1, #0
 800778e:	200e      	movs	r0, #14
 8007790:	f005 fffe 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( API_URNA ) == false )
 8007794:	200e      	movs	r0, #14
 8007796:	f006 f861 	bl	800d85c <TaskManager_First_Get>
 800779a:	1e03      	subs	r3, r0, #0
 800779c:	d106      	bne.n	80077ac <_Api_SwingUrna_task+0x24>
	{
		TaskManager_First_Set ( API_URNA );
 800779e:	200e      	movs	r0, #14
 80077a0:	f006 f812 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set ( API_URNA , 0 );
 80077a4:	2100      	movs	r1, #0
 80077a6:	200e      	movs	r0, #14
 80077a8:	f006 f87a 	bl	800d8a0 <TaskManager_Step_Set>
			Outputs_Urn_Pic_Set( _e_OutUrnPic_Off );
			break;
	}
#endif

	switch( (uint8_t)TaskManager_Step_Get( API_URNA ) )
 80077ac:	200e      	movs	r0, #14
 80077ae:	f006 f8a1 	bl	800d8f4 <TaskManager_Step_Get>
 80077b2:	0003      	movs	r3, r0
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d044      	beq.n	8007842 <_Api_SwingUrna_task+0xba>
 80077b8:	dc53      	bgt.n	8007862 <_Api_SwingUrna_task+0xda>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <_Api_SwingUrna_task+0x3c>
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d02c      	beq.n	800781c <_Api_SwingUrna_task+0x94>
 80077c2:	e04e      	b.n	8007862 <_Api_SwingUrna_task+0xda>
	{
		case 0:

			switch( (uint8_t)Inputs_Com_Get() )
 80077c4:	f003 f81c 	bl	800a800 <Inputs_Com_Get>
 80077c8:	0003      	movs	r3, r0
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d108      	bne.n	80077e0 <_Api_SwingUrna_task+0x58>
			{
				case _e_InCom_UrnPicto:
					Outputs_Urn_Pic_Set( _e_OutUrnPic_Blink );
 80077ce:	2002      	movs	r0, #2
 80077d0:	f003 ff90 	bl	800b6f4 <Outputs_Urn_Pic_Set>
					Timing_Set( _e_Timing_Swing_PictoUrn , 3000 );
 80077d4:	4b29      	ldr	r3, [pc, #164]	@ (800787c <_Api_SwingUrna_task+0xf4>)
 80077d6:	0019      	movs	r1, r3
 80077d8:	2009      	movs	r0, #9
 80077da:	f008 f883 	bl	800f8e4 <Timing_Set>
					break;
 80077de:	e00c      	b.n	80077fa <_Api_SwingUrna_task+0x72>
				default:
					if( Timing_Get_Bool( _e_Timing_Swing_PictoUrn ) ){
 80077e0:	2009      	movs	r0, #9
 80077e2:	f008 f895 	bl	800f910 <Timing_Get_Bool>
 80077e6:	1e03      	subs	r3, r0, #0
 80077e8:	d006      	beq.n	80077f8 <_Api_SwingUrna_task+0x70>
						Outputs_Urn_Pic_Set( _e_OutUrnPic_Off );
 80077ea:	2000      	movs	r0, #0
 80077ec:	f003 ff82 	bl	800b6f4 <Outputs_Urn_Pic_Set>
						Timing_Set( _e_Timing_Swing_PictoUrn , 200 );
 80077f0:	21c8      	movs	r1, #200	@ 0xc8
 80077f2:	2009      	movs	r0, #9
 80077f4:	f008 f876 	bl	800f8e4 <Timing_Set>
					}
					break;
 80077f8:	46c0      	nop			@ (mov r8, r8)
			}

			if( Inputs_Urn_CardDet(_e_UrnCardDet_Get) == true ){
 80077fa:	2000      	movs	r0, #0
 80077fc:	f003 f836 	bl	800a86c <Inputs_Urn_CardDet>
 8007800:	0003      	movs	r3, r0
 8007802:	2b01      	cmp	r3, #1
 8007804:	d132      	bne.n	800786c <_Api_SwingUrna_task+0xe4>
				Timing_Set( _e_Timing_Swing_UrnTimeOut , SWING_URN_TIMEOUT );
 8007806:	23fa      	movs	r3, #250	@ 0xfa
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	0019      	movs	r1, r3
 800780c:	2008      	movs	r0, #8
 800780e:	f008 f869 	bl	800f8e4 <Timing_Set>
				TaskManager_Step_Set ( API_URNA , 1 );
 8007812:	2101      	movs	r1, #1
 8007814:	200e      	movs	r0, #14
 8007816:	f006 f843 	bl	800d8a0 <TaskManager_Step_Set>
			}
			else{
				//Inputs_Urn_CardDet( _e_UrnCardDet_Clr );
			}
			break;
 800781a:	e027      	b.n	800786c <_Api_SwingUrna_task+0xe4>

		case 1:
			if( Timing_Get_Bool( _e_Timing_Swing_UrnTimeOut ) ){
 800781c:	2008      	movs	r0, #8
 800781e:	f008 f877 	bl	800f910 <Timing_Get_Bool>
 8007822:	1e03      	subs	r3, r0, #0
 8007824:	d024      	beq.n	8007870 <_Api_SwingUrna_task+0xe8>
				Timing_Set( _e_Timing_Swing_UrnTimeOut , SWING_URN_SOLTIME );
 8007826:	23fa      	movs	r3, #250	@ 0xfa
 8007828:	00db      	lsls	r3, r3, #3
 800782a:	0019      	movs	r1, r3
 800782c:	2008      	movs	r0, #8
 800782e:	f008 f859 	bl	800f8e4 <Timing_Set>
				Outputs_Urn_Sol_Set( _e_OutUrn_Open );
 8007832:	2001      	movs	r0, #1
 8007834:	f003 ff4e 	bl	800b6d4 <Outputs_Urn_Sol_Set>
				TaskManager_Step_Set	( API_URNA , 2 );
 8007838:	2102      	movs	r1, #2
 800783a:	200e      	movs	r0, #14
 800783c:	f006 f830 	bl	800d8a0 <TaskManager_Step_Set>
			}
			break;
 8007840:	e016      	b.n	8007870 <_Api_SwingUrna_task+0xe8>

		case 2:
			if( Timing_Get_Bool( _e_Timing_Swing_UrnTimeOut ) ){
 8007842:	2008      	movs	r0, #8
 8007844:	f008 f864 	bl	800f910 <Timing_Get_Bool>
 8007848:	1e03      	subs	r3, r0, #0
 800784a:	d013      	beq.n	8007874 <_Api_SwingUrna_task+0xec>
				Inputs_Urn_CardDet(_e_UrnCardDet_Clr);
 800784c:	2001      	movs	r0, #1
 800784e:	f003 f80d 	bl	800a86c <Inputs_Urn_CardDet>
				Outputs_Urn_Sol_Set( _e_OutUrn_Close );
 8007852:	2000      	movs	r0, #0
 8007854:	f003 ff3e 	bl	800b6d4 <Outputs_Urn_Sol_Set>
				TaskManager_Step_Set	( API_URNA , 0 );
 8007858:	2100      	movs	r1, #0
 800785a:	200e      	movs	r0, #14
 800785c:	f006 f820 	bl	800d8a0 <TaskManager_Step_Set>
			}
			break;
 8007860:	e008      	b.n	8007874 <_Api_SwingUrna_task+0xec>

		default:
			TaskManager_Step_Set	( API_URNA , 0 );
 8007862:	2100      	movs	r1, #0
 8007864:	200e      	movs	r0, #14
 8007866:	f006 f81b 	bl	800d8a0 <TaskManager_Step_Set>
			break;
 800786a:	e004      	b.n	8007876 <_Api_SwingUrna_task+0xee>
			break;
 800786c:	46c0      	nop			@ (mov r8, r8)
 800786e:	e002      	b.n	8007876 <_Api_SwingUrna_task+0xee>
			break;
 8007870:	46c0      	nop			@ (mov r8, r8)
 8007872:	e000      	b.n	8007876 <_Api_SwingUrna_task+0xee>
			break;
 8007874:	46c0      	nop			@ (mov r8, r8)
	}
}
 8007876:	46c0      	nop			@ (mov r8, r8)
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	00000bb8 	.word	0x00000bb8

08007880 <Api_Swing_get_sensor>:

//--------------------------------------
// LEITURA DOS SENSROES

uint8_t Api_Swing_get_sensor(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
	uint8_t sensorReturn = _e_Sensors_None;
 8007886:	1dfb      	adds	r3, r7, #7
 8007888:	2200      	movs	r2, #0
 800788a:	701a      	strb	r2, [r3, #0]

	bool senIn    = (bool)!Inputs_Get( _e_Inputs_SenIn );
 800788c:	2000      	movs	r0, #0
 800788e:	f002 ffa3 	bl	800a7d8 <Inputs_Get>
 8007892:	0003      	movs	r3, r0
 8007894:	425a      	negs	r2, r3
 8007896:	4153      	adcs	r3, r2
 8007898:	b2da      	uxtb	r2, r3
 800789a:	1dbb      	adds	r3, r7, #6
 800789c:	701a      	strb	r2, [r3, #0]
	bool senOut   = (bool)!Inputs_Get( _e_Inputs_SenOut );
 800789e:	2001      	movs	r0, #1
 80078a0:	f002 ff9a 	bl	800a7d8 <Inputs_Get>
 80078a4:	0003      	movs	r3, r0
 80078a6:	425a      	negs	r2, r3
 80078a8:	4153      	adcs	r3, r2
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	1d7b      	adds	r3, r7, #5
 80078ae:	701a      	strb	r2, [r3, #0]
	bool senMidUp = (bool)!Inputs_Get( _e_Inputs_SenMidU );
 80078b0:	2002      	movs	r0, #2
 80078b2:	f002 ff91 	bl	800a7d8 <Inputs_Get>
 80078b6:	0003      	movs	r3, r0
 80078b8:	425a      	negs	r2, r3
 80078ba:	4153      	adcs	r3, r2
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	1d3b      	adds	r3, r7, #4
 80078c0:	701a      	strb	r2, [r3, #0]
	bool senMidDw = (bool)!Inputs_Get( _e_Inputs_SenMidD );
 80078c2:	2003      	movs	r0, #3
 80078c4:	f002 ff88 	bl	800a7d8 <Inputs_Get>
 80078c8:	0003      	movs	r3, r0
 80078ca:	425a      	negs	r2, r3
 80078cc:	4153      	adcs	r3, r2
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	1cfb      	adds	r3, r7, #3
 80078d2:	701a      	strb	r2, [r3, #0]
	sensorReturn = (uint8_t)( senIn + (senMidUp<<1) + (senMidDw<<2) + (senOut<<3) );
 80078d4:	1d3b      	adds	r3, r7, #4
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	18db      	adds	r3, r3, r3
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	1dbb      	adds	r3, r7, #6
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	18d3      	adds	r3, r2, r3
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	1cfb      	adds	r3, r7, #3
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	18d3      	adds	r3, r2, r3
 80078ee:	b2d9      	uxtb	r1, r3
 80078f0:	1d7b      	adds	r3, r7, #5
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	1dfb      	adds	r3, r7, #7
 80078fa:	188a      	adds	r2, r1, r2
 80078fc:	701a      	strb	r2, [r3, #0]

	return sensorReturn;
 80078fe:	1dfb      	adds	r3, r7, #7
 8007900:	781b      	ldrb	r3, [r3, #0]
}
 8007902:	0018      	movs	r0, r3
 8007904:	46bd      	mov	sp, r7
 8007906:	b002      	add	sp, #8
 8007908:	bd80      	pop	{r7, pc}
	...

0800790c <_encdisk_func_get_pos>:
}sEncMtask[_e_StpMt_Qty];

/*** ** * Local Funcs * ** ***/

void _encdisk_func_get_pos(tEncNum encNum , uint8_t* pos , uint8_t* lastPos)
{
 800790c:	b590      	push	{r4, r7, lr}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	607a      	str	r2, [r7, #4]
 8007916:	240f      	movs	r4, #15
 8007918:	193b      	adds	r3, r7, r4
 800791a:	1c02      	adds	r2, r0, #0
 800791c:	701a      	strb	r2, [r3, #0]
	*pos = sEncDisk[encNum].buffDiskPos[sEncDisk[encNum].buffIndex];
 800791e:	193b      	adds	r3, r7, r4
 8007920:	781a      	ldrb	r2, [r3, #0]
 8007922:	193b      	adds	r3, r7, r4
 8007924:	7819      	ldrb	r1, [r3, #0]
 8007926:	4828      	ldr	r0, [pc, #160]	@ (80079c8 <_encdisk_func_get_pos+0xbc>)
 8007928:	000b      	movs	r3, r1
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	185b      	adds	r3, r3, r1
 800792e:	0099      	lsls	r1, r3, #2
 8007930:	185b      	adds	r3, r3, r1
 8007932:	18c3      	adds	r3, r0, r3
 8007934:	3304      	adds	r3, #4
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	0018      	movs	r0, r3
 800793a:	4923      	ldr	r1, [pc, #140]	@ (80079c8 <_encdisk_func_get_pos+0xbc>)
 800793c:	0013      	movs	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	189b      	adds	r3, r3, r2
 8007942:	009a      	lsls	r2, r3, #2
 8007944:	189b      	adds	r3, r3, r2
 8007946:	18cb      	adds	r3, r1, r3
 8007948:	181b      	adds	r3, r3, r0
 800794a:	3301      	adds	r3, #1
 800794c:	781a      	ldrb	r2, [r3, #0]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	701a      	strb	r2, [r3, #0]

	if( sEncDisk[encNum].buffIndex == 0 ){
 8007952:	193b      	adds	r3, r7, r4
 8007954:	781a      	ldrb	r2, [r3, #0]
 8007956:	491c      	ldr	r1, [pc, #112]	@ (80079c8 <_encdisk_func_get_pos+0xbc>)
 8007958:	0013      	movs	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	189b      	adds	r3, r3, r2
 800795e:	009a      	lsls	r2, r3, #2
 8007960:	189b      	adds	r3, r3, r2
 8007962:	18cb      	adds	r3, r1, r3
 8007964:	3304      	adds	r3, #4
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10d      	bne.n	8007988 <_encdisk_func_get_pos+0x7c>
		//return (ENC_DISK_POS_QTY - 1);
		*lastPos  	= sEncDisk[encNum].buffDiskPos[ENC_DISK_POS_QTY - 1];
 800796c:	193b      	adds	r3, r7, r4
 800796e:	781a      	ldrb	r2, [r3, #0]
 8007970:	4915      	ldr	r1, [pc, #84]	@ (80079c8 <_encdisk_func_get_pos+0xbc>)
 8007972:	0013      	movs	r3, r2
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	189b      	adds	r3, r3, r2
 8007978:	009a      	lsls	r2, r3, #2
 800797a:	189b      	adds	r3, r3, r2
 800797c:	18cb      	adds	r3, r1, r3
 800797e:	3303      	adds	r3, #3
 8007980:	781a      	ldrb	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	701a      	strb	r2, [r3, #0]
	}
	else{
		//return ( sEncDisk[encNum].buffIndex - 1 );
		*lastPos  	= sEncDisk[encNum].buffDiskPos[sEncDisk[encNum].buffIndex - 1];
	}
}
 8007986:	e01a      	b.n	80079be <_encdisk_func_get_pos+0xb2>
		*lastPos  	= sEncDisk[encNum].buffDiskPos[sEncDisk[encNum].buffIndex - 1];
 8007988:	210f      	movs	r1, #15
 800798a:	187b      	adds	r3, r7, r1
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	187b      	adds	r3, r7, r1
 8007990:	7819      	ldrb	r1, [r3, #0]
 8007992:	480d      	ldr	r0, [pc, #52]	@ (80079c8 <_encdisk_func_get_pos+0xbc>)
 8007994:	000b      	movs	r3, r1
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	185b      	adds	r3, r3, r1
 800799a:	0099      	lsls	r1, r3, #2
 800799c:	185b      	adds	r3, r3, r1
 800799e:	18c3      	adds	r3, r0, r3
 80079a0:	3304      	adds	r3, #4
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	1e59      	subs	r1, r3, #1
 80079a6:	4808      	ldr	r0, [pc, #32]	@ (80079c8 <_encdisk_func_get_pos+0xbc>)
 80079a8:	0013      	movs	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	189b      	adds	r3, r3, r2
 80079ae:	009a      	lsls	r2, r3, #2
 80079b0:	189b      	adds	r3, r3, r2
 80079b2:	18c3      	adds	r3, r0, r3
 80079b4:	185b      	adds	r3, r3, r1
 80079b6:	3301      	adds	r3, #1
 80079b8:	781a      	ldrb	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	701a      	strb	r2, [r3, #0]
}
 80079be:	46c0      	nop			@ (mov r8, r8)
 80079c0:	46bd      	mov	sp, r7
 80079c2:	b005      	add	sp, #20
 80079c4:	bd90      	pop	{r4, r7, pc}
 80079c6:	46c0      	nop			@ (mov r8, r8)
 80079c8:	200000e4 	.word	0x200000e4

080079cc <_encdisk_func_inc_buffindex>:

void _encdisk_func_inc_buffindex(tEncNum encNum)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	0002      	movs	r2, r0
 80079d4:	1dfb      	adds	r3, r7, #7
 80079d6:	701a      	strb	r2, [r3, #0]
	if( sEncDisk[encNum].buffIndex == (ENC_DISK_POS_QTY - 1) ){
 80079d8:	1dfb      	adds	r3, r7, #7
 80079da:	781a      	ldrb	r2, [r3, #0]
 80079dc:	4919      	ldr	r1, [pc, #100]	@ (8007a44 <_encdisk_func_inc_buffindex+0x78>)
 80079de:	0013      	movs	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	189b      	adds	r3, r3, r2
 80079e4:	009a      	lsls	r2, r3, #2
 80079e6:	189b      	adds	r3, r3, r2
 80079e8:	18cb      	adds	r3, r1, r3
 80079ea:	3304      	adds	r3, #4
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d10c      	bne.n	8007a0c <_encdisk_func_inc_buffindex+0x40>
		sEncDisk[encNum].buffIndex = 0;
 80079f2:	1dfb      	adds	r3, r7, #7
 80079f4:	781a      	ldrb	r2, [r3, #0]
 80079f6:	4913      	ldr	r1, [pc, #76]	@ (8007a44 <_encdisk_func_inc_buffindex+0x78>)
 80079f8:	0013      	movs	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	189b      	adds	r3, r3, r2
 80079fe:	009a      	lsls	r2, r3, #2
 8007a00:	189b      	adds	r3, r3, r2
 8007a02:	18cb      	adds	r3, r1, r3
 8007a04:	3304      	adds	r3, #4
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
	}
	else{
		sEncDisk[encNum].buffIndex++;
	}
}
 8007a0a:	e016      	b.n	8007a3a <_encdisk_func_inc_buffindex+0x6e>
		sEncDisk[encNum].buffIndex++;
 8007a0c:	1dfb      	adds	r3, r7, #7
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	490c      	ldr	r1, [pc, #48]	@ (8007a44 <_encdisk_func_inc_buffindex+0x78>)
 8007a12:	0013      	movs	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	189b      	adds	r3, r3, r2
 8007a18:	0098      	lsls	r0, r3, #2
 8007a1a:	181b      	adds	r3, r3, r0
 8007a1c:	18cb      	adds	r3, r1, r3
 8007a1e:	3304      	adds	r3, #4
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	3301      	adds	r3, #1
 8007a24:	b2d8      	uxtb	r0, r3
 8007a26:	4907      	ldr	r1, [pc, #28]	@ (8007a44 <_encdisk_func_inc_buffindex+0x78>)
 8007a28:	0013      	movs	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	189b      	adds	r3, r3, r2
 8007a2e:	009a      	lsls	r2, r3, #2
 8007a30:	189b      	adds	r3, r3, r2
 8007a32:	18cb      	adds	r3, r1, r3
 8007a34:	3304      	adds	r3, #4
 8007a36:	1c02      	adds	r2, r0, #0
 8007a38:	701a      	strb	r2, [r3, #0]
}
 8007a3a:	46c0      	nop			@ (mov r8, r8)
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	b002      	add	sp, #8
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	46c0      	nop			@ (mov r8, r8)
 8007a44:	200000e4 	.word	0x200000e4

08007a48 <_encdisk_func_break_clear>:

void _encdisk_func_break_clear(tEncNum encNum)
{
 8007a48:	b590      	push	{r4, r7, lr}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	0002      	movs	r2, r0
 8007a50:	1dfb      	adds	r3, r7, #7
 8007a52:	701a      	strb	r2, [r3, #0]
	for( uint8_t i = 0 ; i < 4 ; i++ )
 8007a54:	230f      	movs	r3, #15
 8007a56:	18fb      	adds	r3, r7, r3
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	e011      	b.n	8007a82 <_encdisk_func_break_clear+0x3a>
	{
		sEncBreak[encNum].state[i] = false;
 8007a5e:	1dfb      	adds	r3, r7, #7
 8007a60:	781a      	ldrb	r2, [r3, #0]
 8007a62:	240f      	movs	r4, #15
 8007a64:	193b      	adds	r3, r7, r4
 8007a66:	7819      	ldrb	r1, [r3, #0]
 8007a68:	4815      	ldr	r0, [pc, #84]	@ (8007ac0 <_encdisk_func_break_clear+0x78>)
 8007a6a:	0013      	movs	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	189b      	adds	r3, r3, r2
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	18c3      	adds	r3, r0, r3
 8007a74:	2200      	movs	r2, #0
 8007a76:	545a      	strb	r2, [r3, r1]
	for( uint8_t i = 0 ; i < 4 ; i++ )
 8007a78:	193b      	adds	r3, r7, r4
 8007a7a:	781a      	ldrb	r2, [r3, #0]
 8007a7c:	193b      	adds	r3, r7, r4
 8007a7e:	3201      	adds	r2, #1
 8007a80:	701a      	strb	r2, [r3, #0]
 8007a82:	230f      	movs	r3, #15
 8007a84:	18fb      	adds	r3, r7, r3
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d9e8      	bls.n	8007a5e <_encdisk_func_break_clear+0x16>
	}
	sEncBreak[encNum].stepAcc = 0;
 8007a8c:	1dfb      	adds	r3, r7, #7
 8007a8e:	781a      	ldrb	r2, [r3, #0]
 8007a90:	490b      	ldr	r1, [pc, #44]	@ (8007ac0 <_encdisk_func_break_clear+0x78>)
 8007a92:	0013      	movs	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	189b      	adds	r3, r3, r2
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	18cb      	adds	r3, r1, r3
 8007a9c:	3306      	adds	r3, #6
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	801a      	strh	r2, [r3, #0]
	sEncBreak[encNum].breakFlag = false;
 8007aa2:	1dfb      	adds	r3, r7, #7
 8007aa4:	781a      	ldrb	r2, [r3, #0]
 8007aa6:	4906      	ldr	r1, [pc, #24]	@ (8007ac0 <_encdisk_func_break_clear+0x78>)
 8007aa8:	0013      	movs	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	189b      	adds	r3, r3, r2
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	18cb      	adds	r3, r1, r3
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]
}
 8007ab8:	46c0      	nop			@ (mov r8, r8)
 8007aba:	46bd      	mov	sp, r7
 8007abc:	b005      	add	sp, #20
 8007abe:	bd90      	pop	{r4, r7, pc}
 8007ac0:	20000148 	.word	0x20000148

08007ac4 <_encdisk_func_break_get>:

bool _encdisk_func_break_get(tEncNum encNum)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	0002      	movs	r2, r0
 8007acc:	1dfb      	adds	r3, r7, #7
 8007ace:	701a      	strb	r2, [r3, #0]
	return sEncBreak[encNum].breakFlag;
 8007ad0:	1dfb      	adds	r3, r7, #7
 8007ad2:	781a      	ldrb	r2, [r3, #0]
 8007ad4:	4905      	ldr	r1, [pc, #20]	@ (8007aec <_encdisk_func_break_get+0x28>)
 8007ad6:	0013      	movs	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	189b      	adds	r3, r3, r2
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	18cb      	adds	r3, r1, r3
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	781b      	ldrb	r3, [r3, #0]
}
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	b002      	add	sp, #8
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20000148 	.word	0x20000148

08007af0 <_enc_stop_mode>:

void _enc_stop_mode(tEncNum encNum)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	0002      	movs	r2, r0
 8007af8:	1dfb      	adds	r3, r7, #7
 8007afa:	701a      	strb	r2, [r3, #0]
	if( sEncCtrl[encNum].stopMode == _e_EncStopMode_On ){
 8007afc:	1dfb      	adds	r3, r7, #7
 8007afe:	781a      	ldrb	r2, [r3, #0]
 8007b00:	490a      	ldr	r1, [pc, #40]	@ (8007b2c <_enc_stop_mode+0x3c>)
 8007b02:	0013      	movs	r3, r2
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	00db      	lsls	r3, r3, #3
 8007b0a:	18cb      	adds	r3, r1, r3
 8007b0c:	3302      	adds	r3, #2
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d103      	bne.n	8007b1c <_enc_stop_mode+0x2c>
		StepMotor_POWER( _e_StpMtPower_ON );
 8007b14:	2001      	movs	r0, #1
 8007b16:	f005 fd69 	bl	800d5ec <StepMotor_POWER>
	}
	else{
		StepMotor_POWER( _e_StpMtPower_OFF );
	}
}
 8007b1a:	e002      	b.n	8007b22 <_enc_stop_mode+0x32>
		StepMotor_POWER( _e_StpMtPower_OFF );
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	f005 fd65 	bl	800d5ec <StepMotor_POWER>
}
 8007b22:	46c0      	nop			@ (mov r8, r8)
 8007b24:	46bd      	mov	sp, r7
 8007b26:	b002      	add	sp, #8
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	46c0      	nop			@ (mov r8, r8)
 8007b2c:	2000015c 	.word	0x2000015c

08007b30 <_enc_task>:
	_e_enc_task,
}t_enc_task;


static void _enc_task(void)//tarefa disco posição
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
	TaskManager_Set( ENC , _e_enc_task );
 8007b36:	2100      	movs	r1, #0
 8007b38:	2004      	movs	r0, #4
 8007b3a:	f005 fe29 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( ENC ) == false )
 8007b3e:	2004      	movs	r0, #4
 8007b40:	f005 fe8c 	bl	800d85c <TaskManager_First_Get>
 8007b44:	1e03      	subs	r3, r0, #0
 8007b46:	d106      	bne.n	8007b56 <_enc_task+0x26>
	{
		TaskManager_First_Set( ENC );
 8007b48:	2004      	movs	r0, #4
 8007b4a:	f005 fe3d 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( ENC, 0 );
 8007b4e:	2100      	movs	r1, #0
 8007b50:	2004      	movs	r0, #4
 8007b52:	f005 fea5 	bl	800d8a0 <TaskManager_Step_Set>
	}

	switch( TaskManager_Step_Get( ENC ) )
 8007b56:	2004      	movs	r0, #4
 8007b58:	f005 fecc 	bl	800d8f4 <TaskManager_Step_Get>
 8007b5c:	1e03      	subs	r3, r0, #0
 8007b5e:	d002      	beq.n	8007b66 <_enc_task+0x36>
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d03a      	beq.n	8007bda <_enc_task+0xaa>
 8007b64:	e158      	b.n	8007e18 <_enc_task+0x2e8>
	{

	case 0:

		for( tEncNum encNum = _e_EncNum_Pri ; encNum < _e_EncNum_Qty ; encNum++ )
 8007b66:	1dfb      	adds	r3, r7, #7
 8007b68:	2200      	movs	r2, #0
 8007b6a:	701a      	strb	r2, [r3, #0]
 8007b6c:	e02d      	b.n	8007bca <_enc_task+0x9a>
		{
			sEncPosMap[encNum].index = 0xFF;
 8007b6e:	1dfb      	adds	r3, r7, #7
 8007b70:	781a      	ldrb	r2, [r3, #0]
 8007b72:	49ae      	ldr	r1, [pc, #696]	@ (8007e2c <_enc_task+0x2fc>)
 8007b74:	0013      	movs	r3, r2
 8007b76:	005b      	lsls	r3, r3, #1
 8007b78:	189b      	adds	r3, r3, r2
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	18cb      	adds	r3, r1, r3
 8007b7e:	3310      	adds	r3, #16
 8007b80:	22ff      	movs	r2, #255	@ 0xff
 8007b82:	701a      	strb	r2, [r3, #0]
			sEncPosMap[encNum].dir = _e_EncDir_Unknown;
 8007b84:	1dfb      	adds	r3, r7, #7
 8007b86:	781a      	ldrb	r2, [r3, #0]
 8007b88:	49a8      	ldr	r1, [pc, #672]	@ (8007e2c <_enc_task+0x2fc>)
 8007b8a:	0013      	movs	r3, r2
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	189b      	adds	r3, r3, r2
 8007b90:	00db      	lsls	r3, r3, #3
 8007b92:	18cb      	adds	r3, r1, r3
 8007b94:	3314      	adds	r3, #20
 8007b96:	2202      	movs	r2, #2
 8007b98:	701a      	strb	r2, [r3, #0]
			sEncPosMap[encNum].ang = 0xFF;
 8007b9a:	1dfb      	adds	r3, r7, #7
 8007b9c:	781a      	ldrb	r2, [r3, #0]
 8007b9e:	49a3      	ldr	r1, [pc, #652]	@ (8007e2c <_enc_task+0x2fc>)
 8007ba0:	0013      	movs	r3, r2
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	189b      	adds	r3, r3, r2
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	4aa1      	ldr	r2, [pc, #644]	@ (8007e30 <_enc_task+0x300>)
 8007baa:	505a      	str	r2, [r3, r1]
			sEncDisk[encNum].diskPosChange = true;
 8007bac:	1dfb      	adds	r3, r7, #7
 8007bae:	781a      	ldrb	r2, [r3, #0]
 8007bb0:	49a0      	ldr	r1, [pc, #640]	@ (8007e34 <_enc_task+0x304>)
 8007bb2:	0013      	movs	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	189b      	adds	r3, r3, r2
 8007bb8:	009a      	lsls	r2, r3, #2
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	545a      	strb	r2, [r3, r1]
		for( tEncNum encNum = _e_EncNum_Pri ; encNum < _e_EncNum_Qty ; encNum++ )
 8007bc0:	1dfb      	adds	r3, r7, #7
 8007bc2:	781a      	ldrb	r2, [r3, #0]
 8007bc4:	1dfb      	adds	r3, r7, #7
 8007bc6:	3201      	adds	r2, #1
 8007bc8:	701a      	strb	r2, [r3, #0]
 8007bca:	1dfb      	adds	r3, r7, #7
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d9cd      	bls.n	8007b6e <_enc_task+0x3e>
//			if( Inputs_Motor_Disc_Get((tInMt)encNum) == 0 )
//				sEncPosMap[encNum].index = 0;
		}
		TaskManager_Step_Inc( ENC );
 8007bd2:	2004      	movs	r0, #4
 8007bd4:	f005 feb2 	bl	800d93c <TaskManager_Step_Inc>

		break;
 8007bd8:	e123      	b.n	8007e22 <_enc_task+0x2f2>

	case 1:

		for( tEncNum encNum = _e_EncNum_Pri ; encNum < _e_EncNum_Qty ; encNum++ )
 8007bda:	1dbb      	adds	r3, r7, #6
 8007bdc:	2200      	movs	r2, #0
 8007bde:	701a      	strb	r2, [r3, #0]
 8007be0:	e114      	b.n	8007e0c <_enc_task+0x2dc>
		{
			if( sEncDisk[encNum].diskPosChange == true )
 8007be2:	1dbb      	adds	r3, r7, #6
 8007be4:	781a      	ldrb	r2, [r3, #0]
 8007be6:	4993      	ldr	r1, [pc, #588]	@ (8007e34 <_enc_task+0x304>)
 8007be8:	0013      	movs	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	189b      	adds	r3, r3, r2
 8007bee:	009a      	lsls	r2, r3, #2
 8007bf0:	189b      	adds	r3, r3, r2
 8007bf2:	5c5b      	ldrb	r3, [r3, r1]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d000      	beq.n	8007bfa <_enc_task+0xca>
 8007bf8:	e103      	b.n	8007e02 <_enc_task+0x2d2>
			{
				sEncDisk[encNum].diskPosChange = false;
 8007bfa:	1dbb      	adds	r3, r7, #6
 8007bfc:	781a      	ldrb	r2, [r3, #0]
 8007bfe:	498d      	ldr	r1, [pc, #564]	@ (8007e34 <_enc_task+0x304>)
 8007c00:	0013      	movs	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	189b      	adds	r3, r3, r2
 8007c06:	009a      	lsls	r2, r3, #2
 8007c08:	189b      	adds	r3, r3, r2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	545a      	strb	r2, [r3, r1]

				_encdisk_func_get_pos(encNum , &sEncPosMap[encNum].diskPosNow , &sEncPosMap[encNum].diskPosLast );
 8007c0e:	1dbb      	adds	r3, r7, #6
 8007c10:	781a      	ldrb	r2, [r3, #0]
 8007c12:	0013      	movs	r3, r2
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	189b      	adds	r3, r3, r2
 8007c18:	00db      	lsls	r3, r3, #3
 8007c1a:	3310      	adds	r3, #16
 8007c1c:	001a      	movs	r2, r3
 8007c1e:	4b83      	ldr	r3, [pc, #524]	@ (8007e2c <_enc_task+0x2fc>)
 8007c20:	18d3      	adds	r3, r2, r3
 8007c22:	1c99      	adds	r1, r3, #2
 8007c24:	1dbb      	adds	r3, r7, #6
 8007c26:	781a      	ldrb	r2, [r3, #0]
 8007c28:	0013      	movs	r3, r2
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	189b      	adds	r3, r3, r2
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	3310      	adds	r3, #16
 8007c32:	001a      	movs	r2, r3
 8007c34:	4b7d      	ldr	r3, [pc, #500]	@ (8007e2c <_enc_task+0x2fc>)
 8007c36:	18d3      	adds	r3, r2, r3
 8007c38:	1cda      	adds	r2, r3, #3
 8007c3a:	1dbb      	adds	r3, r7, #6
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	0018      	movs	r0, r3
 8007c40:	f7ff fe64 	bl	800790c <_encdisk_func_get_pos>

				//sEncPosMap[encNum].indexLast = sEncPosMap[encNum].index;

				switch((uint8_t) sEncPosMap[encNum].diskPosNow )
 8007c44:	1dbb      	adds	r3, r7, #6
 8007c46:	781a      	ldrb	r2, [r3, #0]
 8007c48:	4978      	ldr	r1, [pc, #480]	@ (8007e2c <_enc_task+0x2fc>)
 8007c4a:	0013      	movs	r3, r2
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	189b      	adds	r3, r3, r2
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	18cb      	adds	r3, r1, r3
 8007c54:	3312      	adds	r3, #18
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d100      	bne.n	8007c5e <_enc_task+0x12e>
 8007c5c:	e076      	b.n	8007d4c <_enc_task+0x21c>
 8007c5e:	dd00      	ble.n	8007c62 <_enc_task+0x132>
 8007c60:	e0cd      	b.n	8007dfe <_enc_task+0x2ce>
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d002      	beq.n	8007c6c <_enc_task+0x13c>
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d038      	beq.n	8007cdc <_enc_task+0x1ac>
 8007c6a:	e0c8      	b.n	8007dfe <_enc_task+0x2ce>
				{
				case _e_EcnDiscPos_Left:
					sEncPosMap[encNum].index = 0;
 8007c6c:	1dbb      	adds	r3, r7, #6
 8007c6e:	781a      	ldrb	r2, [r3, #0]
 8007c70:	496e      	ldr	r1, [pc, #440]	@ (8007e2c <_enc_task+0x2fc>)
 8007c72:	0013      	movs	r3, r2
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	189b      	adds	r3, r3, r2
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	18cb      	adds	r3, r1, r3
 8007c7c:	3310      	adds	r3, #16
 8007c7e:	2200      	movs	r2, #0
 8007c80:	701a      	strb	r2, [r3, #0]

					if(sEncPosMap[encNum].diskPosLast == _e_EcnDiscPos_Middle){
 8007c82:	1dbb      	adds	r3, r7, #6
 8007c84:	781a      	ldrb	r2, [r3, #0]
 8007c86:	4969      	ldr	r1, [pc, #420]	@ (8007e2c <_enc_task+0x2fc>)
 8007c88:	0013      	movs	r3, r2
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	189b      	adds	r3, r3, r2
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	18cb      	adds	r3, r1, r3
 8007c92:	3313      	adds	r3, #19
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d114      	bne.n	8007cc4 <_enc_task+0x194>
						sEncPosMap[encNum].dir = _e_EncDir_Left;
 8007c9a:	1dbb      	adds	r3, r7, #6
 8007c9c:	781a      	ldrb	r2, [r3, #0]
 8007c9e:	4963      	ldr	r1, [pc, #396]	@ (8007e2c <_enc_task+0x2fc>)
 8007ca0:	0013      	movs	r3, r2
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	189b      	adds	r3, r3, r2
 8007ca6:	00db      	lsls	r3, r3, #3
 8007ca8:	18cb      	adds	r3, r1, r3
 8007caa:	3314      	adds	r3, #20
 8007cac:	2200      	movs	r2, #0
 8007cae:	701a      	strb	r2, [r3, #0]
						sEncPosMap[encNum].ang = ENC_ANG_MIN;
 8007cb0:	1dbb      	adds	r3, r7, #6
 8007cb2:	781a      	ldrb	r2, [r3, #0]
 8007cb4:	495d      	ldr	r1, [pc, #372]	@ (8007e2c <_enc_task+0x2fc>)
 8007cb6:	0013      	movs	r3, r2
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	189b      	adds	r3, r3, r2
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	4a5e      	ldr	r2, [pc, #376]	@ (8007e38 <_enc_task+0x308>)
 8007cc0:	505a      	str	r2, [r3, r1]
					}
					else{
						sEncPosMap[encNum].dir = _e_EncDir_Unknown;
					}
					break;
 8007cc2:	e09e      	b.n	8007e02 <_enc_task+0x2d2>
						sEncPosMap[encNum].dir = _e_EncDir_Unknown;
 8007cc4:	1dbb      	adds	r3, r7, #6
 8007cc6:	781a      	ldrb	r2, [r3, #0]
 8007cc8:	4958      	ldr	r1, [pc, #352]	@ (8007e2c <_enc_task+0x2fc>)
 8007cca:	0013      	movs	r3, r2
 8007ccc:	005b      	lsls	r3, r3, #1
 8007cce:	189b      	adds	r3, r3, r2
 8007cd0:	00db      	lsls	r3, r3, #3
 8007cd2:	18cb      	adds	r3, r1, r3
 8007cd4:	3314      	adds	r3, #20
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	701a      	strb	r2, [r3, #0]
					break;
 8007cda:	e092      	b.n	8007e02 <_enc_task+0x2d2>

				case _e_EcnDiscPos_Right:

					sEncPosMap[encNum].index = 2;
 8007cdc:	1dbb      	adds	r3, r7, #6
 8007cde:	781a      	ldrb	r2, [r3, #0]
 8007ce0:	4952      	ldr	r1, [pc, #328]	@ (8007e2c <_enc_task+0x2fc>)
 8007ce2:	0013      	movs	r3, r2
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	189b      	adds	r3, r3, r2
 8007ce8:	00db      	lsls	r3, r3, #3
 8007cea:	18cb      	adds	r3, r1, r3
 8007cec:	3310      	adds	r3, #16
 8007cee:	2202      	movs	r2, #2
 8007cf0:	701a      	strb	r2, [r3, #0]

					if(sEncPosMap[encNum].diskPosLast == _e_EcnDiscPos_Middle){
 8007cf2:	1dbb      	adds	r3, r7, #6
 8007cf4:	781a      	ldrb	r2, [r3, #0]
 8007cf6:	494d      	ldr	r1, [pc, #308]	@ (8007e2c <_enc_task+0x2fc>)
 8007cf8:	0013      	movs	r3, r2
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	189b      	adds	r3, r3, r2
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	18cb      	adds	r3, r1, r3
 8007d02:	3313      	adds	r3, #19
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d114      	bne.n	8007d34 <_enc_task+0x204>
						sEncPosMap[encNum].dir = _e_EncDir_Right;
 8007d0a:	1dbb      	adds	r3, r7, #6
 8007d0c:	781a      	ldrb	r2, [r3, #0]
 8007d0e:	4947      	ldr	r1, [pc, #284]	@ (8007e2c <_enc_task+0x2fc>)
 8007d10:	0013      	movs	r3, r2
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	189b      	adds	r3, r3, r2
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	18cb      	adds	r3, r1, r3
 8007d1a:	3314      	adds	r3, #20
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	701a      	strb	r2, [r3, #0]
						sEncPosMap[encNum].ang = ENC_ANG_MAX;
 8007d20:	1dbb      	adds	r3, r7, #6
 8007d22:	781a      	ldrb	r2, [r3, #0]
 8007d24:	4941      	ldr	r1, [pc, #260]	@ (8007e2c <_enc_task+0x2fc>)
 8007d26:	0013      	movs	r3, r2
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	189b      	adds	r3, r3, r2
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	4a43      	ldr	r2, [pc, #268]	@ (8007e3c <_enc_task+0x30c>)
 8007d30:	505a      	str	r2, [r3, r1]
					}
					else{
						sEncPosMap[encNum].dir = _e_EncDir_Unknown;
					}
					break;
 8007d32:	e066      	b.n	8007e02 <_enc_task+0x2d2>
						sEncPosMap[encNum].dir = _e_EncDir_Unknown;
 8007d34:	1dbb      	adds	r3, r7, #6
 8007d36:	781a      	ldrb	r2, [r3, #0]
 8007d38:	493c      	ldr	r1, [pc, #240]	@ (8007e2c <_enc_task+0x2fc>)
 8007d3a:	0013      	movs	r3, r2
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	189b      	adds	r3, r3, r2
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	18cb      	adds	r3, r1, r3
 8007d44:	3314      	adds	r3, #20
 8007d46:	2202      	movs	r2, #2
 8007d48:	701a      	strb	r2, [r3, #0]
					break;
 8007d4a:	e05a      	b.n	8007e02 <_enc_task+0x2d2>

				case _e_EcnDiscPos_Middle:
					sEncPosMap[encNum].index = 1;
 8007d4c:	1dbb      	adds	r3, r7, #6
 8007d4e:	781a      	ldrb	r2, [r3, #0]
 8007d50:	4936      	ldr	r1, [pc, #216]	@ (8007e2c <_enc_task+0x2fc>)
 8007d52:	0013      	movs	r3, r2
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	189b      	adds	r3, r3, r2
 8007d58:	00db      	lsls	r3, r3, #3
 8007d5a:	18cb      	adds	r3, r1, r3
 8007d5c:	3310      	adds	r3, #16
 8007d5e:	2201      	movs	r2, #1
 8007d60:	701a      	strb	r2, [r3, #0]

					if(sEncPosMap[encNum].diskPosLast == _e_EcnDiscPos_Right){
 8007d62:	1dbb      	adds	r3, r7, #6
 8007d64:	781a      	ldrb	r2, [r3, #0]
 8007d66:	4931      	ldr	r1, [pc, #196]	@ (8007e2c <_enc_task+0x2fc>)
 8007d68:	0013      	movs	r3, r2
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	189b      	adds	r3, r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	18cb      	adds	r3, r1, r3
 8007d72:	3313      	adds	r3, #19
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d114      	bne.n	8007da4 <_enc_task+0x274>
						sEncPosMap[encNum].dir = _e_EncDir_Left;
 8007d7a:	1dbb      	adds	r3, r7, #6
 8007d7c:	781a      	ldrb	r2, [r3, #0]
 8007d7e:	492b      	ldr	r1, [pc, #172]	@ (8007e2c <_enc_task+0x2fc>)
 8007d80:	0013      	movs	r3, r2
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	189b      	adds	r3, r3, r2
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	18cb      	adds	r3, r1, r3
 8007d8a:	3314      	adds	r3, #20
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
						sEncPosMap[encNum].ang = ENC_ANG_MAX;
 8007d90:	1dbb      	adds	r3, r7, #6
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	4925      	ldr	r1, [pc, #148]	@ (8007e2c <_enc_task+0x2fc>)
 8007d96:	0013      	movs	r3, r2
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	189b      	adds	r3, r3, r2
 8007d9c:	00db      	lsls	r3, r3, #3
 8007d9e:	4a27      	ldr	r2, [pc, #156]	@ (8007e3c <_enc_task+0x30c>)
 8007da0:	505a      	str	r2, [r3, r1]
						sEncPosMap[encNum].ang = ENC_ANG_MIN;
					}
					else{
						sEncPosMap[encNum].dir = _e_EncDir_Unknown;
					}
					break;
 8007da2:	e02e      	b.n	8007e02 <_enc_task+0x2d2>
					else if(sEncPosMap[encNum].diskPosLast == _e_EcnDiscPos_Left){
 8007da4:	1dbb      	adds	r3, r7, #6
 8007da6:	781a      	ldrb	r2, [r3, #0]
 8007da8:	4920      	ldr	r1, [pc, #128]	@ (8007e2c <_enc_task+0x2fc>)
 8007daa:	0013      	movs	r3, r2
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	189b      	adds	r3, r3, r2
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	18cb      	adds	r3, r1, r3
 8007db4:	3313      	adds	r3, #19
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d114      	bne.n	8007de6 <_enc_task+0x2b6>
						sEncPosMap[encNum].dir = _e_EncDir_Right;
 8007dbc:	1dbb      	adds	r3, r7, #6
 8007dbe:	781a      	ldrb	r2, [r3, #0]
 8007dc0:	491a      	ldr	r1, [pc, #104]	@ (8007e2c <_enc_task+0x2fc>)
 8007dc2:	0013      	movs	r3, r2
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	189b      	adds	r3, r3, r2
 8007dc8:	00db      	lsls	r3, r3, #3
 8007dca:	18cb      	adds	r3, r1, r3
 8007dcc:	3314      	adds	r3, #20
 8007dce:	2201      	movs	r2, #1
 8007dd0:	701a      	strb	r2, [r3, #0]
						sEncPosMap[encNum].ang = ENC_ANG_MIN;
 8007dd2:	1dbb      	adds	r3, r7, #6
 8007dd4:	781a      	ldrb	r2, [r3, #0]
 8007dd6:	4915      	ldr	r1, [pc, #84]	@ (8007e2c <_enc_task+0x2fc>)
 8007dd8:	0013      	movs	r3, r2
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	189b      	adds	r3, r3, r2
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	4a15      	ldr	r2, [pc, #84]	@ (8007e38 <_enc_task+0x308>)
 8007de2:	505a      	str	r2, [r3, r1]
					break;
 8007de4:	e00d      	b.n	8007e02 <_enc_task+0x2d2>
						sEncPosMap[encNum].dir = _e_EncDir_Unknown;
 8007de6:	1dbb      	adds	r3, r7, #6
 8007de8:	781a      	ldrb	r2, [r3, #0]
 8007dea:	4910      	ldr	r1, [pc, #64]	@ (8007e2c <_enc_task+0x2fc>)
 8007dec:	0013      	movs	r3, r2
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	189b      	adds	r3, r3, r2
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	18cb      	adds	r3, r1, r3
 8007df6:	3314      	adds	r3, #20
 8007df8:	2202      	movs	r2, #2
 8007dfa:	701a      	strb	r2, [r3, #0]
					break;
 8007dfc:	e001      	b.n	8007e02 <_enc_task+0x2d2>

				case _e_EcnDiscPos_Error:
				default:

					__NOP();
 8007dfe:	46c0      	nop			@ (mov r8, r8)

					break;
 8007e00:	46c0      	nop			@ (mov r8, r8)
		for( tEncNum encNum = _e_EncNum_Pri ; encNum < _e_EncNum_Qty ; encNum++ )
 8007e02:	1dbb      	adds	r3, r7, #6
 8007e04:	781a      	ldrb	r2, [r3, #0]
 8007e06:	1dbb      	adds	r3, r7, #6
 8007e08:	3201      	adds	r2, #1
 8007e0a:	701a      	strb	r2, [r3, #0]
 8007e0c:	1dbb      	adds	r3, r7, #6
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d800      	bhi.n	8007e16 <_enc_task+0x2e6>
 8007e14:	e6e5      	b.n	8007be2 <_enc_task+0xb2>
				}

			}
		}

		break;
 8007e16:	e004      	b.n	8007e22 <_enc_task+0x2f2>

	default:
		TaskManager_Step_Set( ENC, 0 );
 8007e18:	2100      	movs	r1, #0
 8007e1a:	2004      	movs	r0, #4
 8007e1c:	f005 fd40 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8007e20:	46c0      	nop			@ (mov r8, r8)
	}
}
 8007e22:	46c0      	nop			@ (mov r8, r8)
 8007e24:	46bd      	mov	sp, r7
 8007e26:	b002      	add	sp, #8
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	46c0      	nop			@ (mov r8, r8)
 8007e2c:	20000118 	.word	0x20000118
 8007e30:	437f0000 	.word	0x437f0000
 8007e34:	200000e4 	.word	0x200000e4
 8007e38:	41b00000 	.word	0x41b00000
 8007e3c:	433b0000 	.word	0x433b0000

08007e40 <_encdisk_task>:
{
	_e_encdisk_task,
}t_encdisk_task;

static void _encdisk_task(void)//encbreak
{
 8007e40:	b5b0      	push	{r4, r5, r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
	TaskManager_Set( ENCDISK , _e_encdisk_task );
 8007e46:	2100      	movs	r1, #0
 8007e48:	2003      	movs	r0, #3
 8007e4a:	f005 fca1 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( ENCDISK ) == false )
 8007e4e:	2003      	movs	r0, #3
 8007e50:	f005 fd04 	bl	800d85c <TaskManager_First_Get>
 8007e54:	1e03      	subs	r3, r0, #0
 8007e56:	d106      	bne.n	8007e66 <_encdisk_task+0x26>
	{
		TaskManager_First_Set( ENCDISK );
 8007e58:	2003      	movs	r0, #3
 8007e5a:	f005 fcb5 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( ENCDISK, 0 );
 8007e5e:	2100      	movs	r1, #0
 8007e60:	2003      	movs	r0, #3
 8007e62:	f005 fd1d 	bl	800d8a0 <TaskManager_Step_Set>
	}

	switch( TaskManager_Step_Get( ENCDISK ) )
 8007e66:	2003      	movs	r0, #3
 8007e68:	f005 fd44 	bl	800d8f4 <TaskManager_Step_Get>
 8007e6c:	1e03      	subs	r3, r0, #0
 8007e6e:	d003      	beq.n	8007e78 <_encdisk_task+0x38>
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d100      	bne.n	8007e76 <_encdisk_task+0x36>
 8007e74:	e0b9      	b.n	8007fea <_encdisk_task+0x1aa>
 8007e76:	e2a6      	b.n	80083c6 <_encdisk_task+0x586>
	{
	case 0://zera buffer

		for( tEncNum encNum = _e_EncNum_Pri ; encNum < _e_EncNum_Qty ; encNum++ )
 8007e78:	1dfb      	adds	r3, r7, #7
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	e0ab      	b.n	8007fd8 <_encdisk_task+0x198>
		{
			sEncDisk[encNum].buffIndex = 0;
 8007e80:	1dfb      	adds	r3, r7, #7
 8007e82:	781a      	ldrb	r2, [r3, #0]
 8007e84:	49b8      	ldr	r1, [pc, #736]	@ (8008168 <_encdisk_task+0x328>)
 8007e86:	0013      	movs	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	189b      	adds	r3, r3, r2
 8007e8c:	009a      	lsls	r2, r3, #2
 8007e8e:	189b      	adds	r3, r3, r2
 8007e90:	18cb      	adds	r3, r1, r3
 8007e92:	3304      	adds	r3, #4
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]

			for( uint8_t i = 0 ; i < ENC_DISK_POS_QTY ; i++ ){
 8007e98:	1dbb      	adds	r3, r7, #6
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	701a      	strb	r2, [r3, #0]
 8007e9e:	e013      	b.n	8007ec8 <_encdisk_task+0x88>
				sEncDisk[encNum].buffDiskPos[i] = 0xFF;
 8007ea0:	1dfb      	adds	r3, r7, #7
 8007ea2:	781a      	ldrb	r2, [r3, #0]
 8007ea4:	1dbb      	adds	r3, r7, #6
 8007ea6:	7819      	ldrb	r1, [r3, #0]
 8007ea8:	48af      	ldr	r0, [pc, #700]	@ (8008168 <_encdisk_task+0x328>)
 8007eaa:	0013      	movs	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	189b      	adds	r3, r3, r2
 8007eb0:	009a      	lsls	r2, r3, #2
 8007eb2:	189b      	adds	r3, r3, r2
 8007eb4:	18c3      	adds	r3, r0, r3
 8007eb6:	185b      	adds	r3, r3, r1
 8007eb8:	3301      	adds	r3, #1
 8007eba:	22ff      	movs	r2, #255	@ 0xff
 8007ebc:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0 ; i < ENC_DISK_POS_QTY ; i++ ){
 8007ebe:	1dbb      	adds	r3, r7, #6
 8007ec0:	781a      	ldrb	r2, [r3, #0]
 8007ec2:	1dbb      	adds	r3, r7, #6
 8007ec4:	3201      	adds	r2, #1
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	1dbb      	adds	r3, r7, #6
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d9e7      	bls.n	8007ea0 <_encdisk_task+0x60>
			}
			for( uint8_t i = 0 ; i < ENC_DISK_ENC_QTY ; i++ ){
 8007ed0:	1d7b      	adds	r3, r7, #5
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
 8007ed6:	e013      	b.n	8007f00 <_encdisk_task+0xc0>
				sEncDisk[encNum].buffDiskEnc[i] = 0xFF;
 8007ed8:	1dfb      	adds	r3, r7, #7
 8007eda:	781a      	ldrb	r2, [r3, #0]
 8007edc:	1d7b      	adds	r3, r7, #5
 8007ede:	7819      	ldrb	r1, [r3, #0]
 8007ee0:	48a1      	ldr	r0, [pc, #644]	@ (8008168 <_encdisk_task+0x328>)
 8007ee2:	0013      	movs	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	189b      	adds	r3, r3, r2
 8007ee8:	009a      	lsls	r2, r3, #2
 8007eea:	189b      	adds	r3, r3, r2
 8007eec:	18c3      	adds	r3, r0, r3
 8007eee:	185b      	adds	r3, r3, r1
 8007ef0:	3306      	adds	r3, #6
 8007ef2:	22ff      	movs	r2, #255	@ 0xff
 8007ef4:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0 ; i < ENC_DISK_ENC_QTY ; i++ ){
 8007ef6:	1d7b      	adds	r3, r7, #5
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	1d7b      	adds	r3, r7, #5
 8007efc:	3201      	adds	r2, #1
 8007efe:	701a      	strb	r2, [r3, #0]
 8007f00:	1d7b      	adds	r3, r7, #5
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b0f      	cmp	r3, #15
 8007f06:	d9e7      	bls.n	8007ed8 <_encdisk_task+0x98>
			}
			for( uint8_t i = 0 ; i < 4 ; i++ ){
 8007f08:	1d3b      	adds	r3, r7, #4
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
 8007f0e:	e010      	b.n	8007f32 <_encdisk_task+0xf2>
				sEncBreak[encNum].state[i] = false;
 8007f10:	1dfb      	adds	r3, r7, #7
 8007f12:	781a      	ldrb	r2, [r3, #0]
 8007f14:	1d3b      	adds	r3, r7, #4
 8007f16:	7819      	ldrb	r1, [r3, #0]
 8007f18:	4894      	ldr	r0, [pc, #592]	@ (800816c <_encdisk_task+0x32c>)
 8007f1a:	0013      	movs	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	189b      	adds	r3, r3, r2
 8007f20:	005b      	lsls	r3, r3, #1
 8007f22:	18c3      	adds	r3, r0, r3
 8007f24:	2200      	movs	r2, #0
 8007f26:	545a      	strb	r2, [r3, r1]
			for( uint8_t i = 0 ; i < 4 ; i++ ){
 8007f28:	1d3b      	adds	r3, r7, #4
 8007f2a:	781a      	ldrb	r2, [r3, #0]
 8007f2c:	1d3b      	adds	r3, r7, #4
 8007f2e:	3201      	adds	r2, #1
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	1d3b      	adds	r3, r7, #4
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d9ea      	bls.n	8007f10 <_encdisk_task+0xd0>
			}

			sEncDisk[encNum].buffDiskPos[sEncDisk[encNum].buffIndex] = Inputs_Motor_Disc_Get((tInMt)encNum);
 8007f3a:	1dfb      	adds	r3, r7, #7
 8007f3c:	781c      	ldrb	r4, [r3, #0]
 8007f3e:	1dfb      	adds	r3, r7, #7
 8007f40:	781a      	ldrb	r2, [r3, #0]
 8007f42:	4989      	ldr	r1, [pc, #548]	@ (8008168 <_encdisk_task+0x328>)
 8007f44:	0013      	movs	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	189b      	adds	r3, r3, r2
 8007f4a:	009a      	lsls	r2, r3, #2
 8007f4c:	189b      	adds	r3, r3, r2
 8007f4e:	18cb      	adds	r3, r1, r3
 8007f50:	3304      	adds	r3, #4
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	001d      	movs	r5, r3
 8007f56:	1dfb      	adds	r3, r7, #7
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f002 fc70 	bl	800a840 <Inputs_Motor_Disc_Get>
 8007f60:	0003      	movs	r3, r0
 8007f62:	0018      	movs	r0, r3
 8007f64:	4a80      	ldr	r2, [pc, #512]	@ (8008168 <_encdisk_task+0x328>)
 8007f66:	0023      	movs	r3, r4
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	191b      	adds	r3, r3, r4
 8007f6c:	0099      	lsls	r1, r3, #2
 8007f6e:	185b      	adds	r3, r3, r1
 8007f70:	18d3      	adds	r3, r2, r3
 8007f72:	195b      	adds	r3, r3, r5
 8007f74:	3301      	adds	r3, #1
 8007f76:	1c02      	adds	r2, r0, #0
 8007f78:	701a      	strb	r2, [r3, #0]
			sEncDisk[encNum].buffDiskEnc[sEncDisk[encNum].buffIndex] = Inputs_Motor_Enc_Get((tInMt)encNum);
 8007f7a:	1dfb      	adds	r3, r7, #7
 8007f7c:	781c      	ldrb	r4, [r3, #0]
 8007f7e:	1dfb      	adds	r3, r7, #7
 8007f80:	781a      	ldrb	r2, [r3, #0]
 8007f82:	4979      	ldr	r1, [pc, #484]	@ (8008168 <_encdisk_task+0x328>)
 8007f84:	0013      	movs	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	189b      	adds	r3, r3, r2
 8007f8a:	009a      	lsls	r2, r3, #2
 8007f8c:	189b      	adds	r3, r3, r2
 8007f8e:	18cb      	adds	r3, r1, r3
 8007f90:	3304      	adds	r3, #4
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	001d      	movs	r5, r3
 8007f96:	1dfb      	adds	r3, r7, #7
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	f002 fc3a 	bl	800a814 <Inputs_Motor_Enc_Get>
 8007fa0:	0003      	movs	r3, r0
 8007fa2:	0018      	movs	r0, r3
 8007fa4:	4a70      	ldr	r2, [pc, #448]	@ (8008168 <_encdisk_task+0x328>)
 8007fa6:	0023      	movs	r3, r4
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	191b      	adds	r3, r3, r4
 8007fac:	0099      	lsls	r1, r3, #2
 8007fae:	185b      	adds	r3, r3, r1
 8007fb0:	18d3      	adds	r3, r2, r3
 8007fb2:	195b      	adds	r3, r3, r5
 8007fb4:	3306      	adds	r3, #6
 8007fb6:	1c02      	adds	r2, r0, #0
 8007fb8:	701a      	strb	r2, [r3, #0]

			sEncDisk[encNum].diskPosChange = false;
 8007fba:	1dfb      	adds	r3, r7, #7
 8007fbc:	781a      	ldrb	r2, [r3, #0]
 8007fbe:	496a      	ldr	r1, [pc, #424]	@ (8008168 <_encdisk_task+0x328>)
 8007fc0:	0013      	movs	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	189b      	adds	r3, r3, r2
 8007fc6:	009a      	lsls	r2, r3, #2
 8007fc8:	189b      	adds	r3, r3, r2
 8007fca:	2200      	movs	r2, #0
 8007fcc:	545a      	strb	r2, [r3, r1]
		for( tEncNum encNum = _e_EncNum_Pri ; encNum < _e_EncNum_Qty ; encNum++ )
 8007fce:	1dfb      	adds	r3, r7, #7
 8007fd0:	781a      	ldrb	r2, [r3, #0]
 8007fd2:	1dfb      	adds	r3, r7, #7
 8007fd4:	3201      	adds	r2, #1
 8007fd6:	701a      	strb	r2, [r3, #0]
 8007fd8:	1dfb      	adds	r3, r7, #7
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d800      	bhi.n	8007fe2 <_encdisk_task+0x1a2>
 8007fe0:	e74e      	b.n	8007e80 <_encdisk_task+0x40>
		}

		TaskManager_Step_Inc( ENCDISK );
 8007fe2:	2003      	movs	r0, #3
 8007fe4:	f005 fcaa 	bl	800d93c <TaskManager_Step_Inc>

		break;
 8007fe8:	e1f2      	b.n	80083d0 <_encdisk_task+0x590>

	case 1:

		for( tEncNum encNum = _e_EncNum_Pri ; encNum < _e_EncNum_Qty ; encNum++ )
 8007fea:	1cfb      	adds	r3, r7, #3
 8007fec:	2200      	movs	r2, #0
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	e1e3      	b.n	80083ba <_encdisk_task+0x57a>
		{
			//ENCODER BREAK
			sEncBreak[encNum].stepAcc += StepMotor_GetStepEnc( (tStpMtNum)encNum );
 8007ff2:	1cfb      	adds	r3, r7, #3
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	f005 fb12 	bl	800d620 <StepMotor_GetStepEnc>
 8007ffc:	0003      	movs	r3, r0
 8007ffe:	0018      	movs	r0, r3
 8008000:	1cfb      	adds	r3, r7, #3
 8008002:	781a      	ldrb	r2, [r3, #0]
 8008004:	4959      	ldr	r1, [pc, #356]	@ (800816c <_encdisk_task+0x32c>)
 8008006:	0013      	movs	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	189b      	adds	r3, r3, r2
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	18cb      	adds	r3, r1, r3
 8008010:	3306      	adds	r3, #6
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	1cfa      	adds	r2, r7, #3
 8008016:	7812      	ldrb	r2, [r2, #0]
 8008018:	18c3      	adds	r3, r0, r3
 800801a:	b298      	uxth	r0, r3
 800801c:	4953      	ldr	r1, [pc, #332]	@ (800816c <_encdisk_task+0x32c>)
 800801e:	0013      	movs	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	189b      	adds	r3, r3, r2
 8008024:	005b      	lsls	r3, r3, #1
 8008026:	18cb      	adds	r3, r1, r3
 8008028:	3306      	adds	r3, #6
 800802a:	1c02      	adds	r2, r0, #0
 800802c:	801a      	strh	r2, [r3, #0]
			if( sEncBreak[encNum].stepAcc > ENC_BREAK_COUNT )
 800802e:	1cfb      	adds	r3, r7, #3
 8008030:	781a      	ldrb	r2, [r3, #0]
 8008032:	494e      	ldr	r1, [pc, #312]	@ (800816c <_encdisk_task+0x32c>)
 8008034:	0013      	movs	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	189b      	adds	r3, r3, r2
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	18cb      	adds	r3, r1, r3
 800803e:	3306      	adds	r3, #6
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	4a4b      	ldr	r2, [pc, #300]	@ (8008170 <_encdisk_task+0x330>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d90f      	bls.n	8008068 <_encdisk_task+0x228>
			{
				sEncBreak[encNum].breakFlag = true;
 8008048:	1cfb      	adds	r3, r7, #3
 800804a:	781a      	ldrb	r2, [r3, #0]
 800804c:	4947      	ldr	r1, [pc, #284]	@ (800816c <_encdisk_task+0x32c>)
 800804e:	0013      	movs	r3, r2
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	189b      	adds	r3, r3, r2
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	18cb      	adds	r3, r1, r3
 8008058:	3308      	adds	r3, #8
 800805a:	2201      	movs	r2, #1
 800805c:	701a      	strb	r2, [r3, #0]
				StepMotor_STOP((tStpMtNum)encNum);
 800805e:	1cfb      	adds	r3, r7, #3
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	0018      	movs	r0, r3
 8008064:	f005 faaa 	bl	800d5bc <StepMotor_STOP>
			}



			if( sEncCalib[encNum].encCount[0] >= ENC_ALIGN_OPEN )
 8008068:	1cfb      	adds	r3, r7, #3
 800806a:	781a      	ldrb	r2, [r3, #0]
 800806c:	4941      	ldr	r1, [pc, #260]	@ (8008174 <_encdisk_task+0x334>)
 800806e:	0013      	movs	r3, r2
 8008070:	00db      	lsls	r3, r3, #3
 8008072:	1a9b      	subs	r3, r3, r2
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	18cb      	adds	r3, r1, r3
 8008078:	3302      	adds	r3, #2
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d800      	bhi.n	8008082 <_encdisk_task+0x242>
 8008080:	e07a      	b.n	8008178 <_encdisk_task+0x338>
			{
				sEncCalib[encNum].angMin = sEncCalib[encNum].ang[1] - ( sEncCalib[encNum].encRes[1] * ( sEncCalib[encNum].encCount[0] - 2 ) );
 8008082:	1cfb      	adds	r3, r7, #3
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	493b      	ldr	r1, [pc, #236]	@ (8008174 <_encdisk_task+0x334>)
 8008088:	0013      	movs	r3, r2
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	1a9b      	subs	r3, r3, r2
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	18cb      	adds	r3, r1, r3
 8008092:	3314      	adds	r3, #20
 8008094:	681d      	ldr	r5, [r3, #0]
 8008096:	1cfb      	adds	r3, r7, #3
 8008098:	781a      	ldrb	r2, [r3, #0]
 800809a:	4936      	ldr	r1, [pc, #216]	@ (8008174 <_encdisk_task+0x334>)
 800809c:	0013      	movs	r3, r2
 800809e:	00db      	lsls	r3, r3, #3
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	18cb      	adds	r3, r1, r3
 80080a6:	3320      	adds	r3, #32
 80080a8:	681c      	ldr	r4, [r3, #0]
 80080aa:	1cfb      	adds	r3, r7, #3
 80080ac:	781a      	ldrb	r2, [r3, #0]
 80080ae:	4931      	ldr	r1, [pc, #196]	@ (8008174 <_encdisk_task+0x334>)
 80080b0:	0013      	movs	r3, r2
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	1a9b      	subs	r3, r3, r2
 80080b6:	00db      	lsls	r3, r3, #3
 80080b8:	18cb      	adds	r3, r1, r3
 80080ba:	3302      	adds	r3, #2
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	3b02      	subs	r3, #2
 80080c0:	0018      	movs	r0, r3
 80080c2:	f7f9 f879 	bl	80011b8 <__aeabi_i2f>
 80080c6:	1c03      	adds	r3, r0, #0
 80080c8:	1c19      	adds	r1, r3, #0
 80080ca:	1c20      	adds	r0, r4, #0
 80080cc:	f7f8 fd72 	bl	8000bb4 <__aeabi_fmul>
 80080d0:	1c03      	adds	r3, r0, #0
 80080d2:	1c1a      	adds	r2, r3, #0
 80080d4:	1cfb      	adds	r3, r7, #3
 80080d6:	781c      	ldrb	r4, [r3, #0]
 80080d8:	1c11      	adds	r1, r2, #0
 80080da:	1c28      	adds	r0, r5, #0
 80080dc:	f7f8 fea8 	bl	8000e30 <__aeabi_fsub>
 80080e0:	1c03      	adds	r3, r0, #0
 80080e2:	1c19      	adds	r1, r3, #0
 80080e4:	4a23      	ldr	r2, [pc, #140]	@ (8008174 <_encdisk_task+0x334>)
 80080e6:	0023      	movs	r3, r4
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	1b1b      	subs	r3, r3, r4
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	18d3      	adds	r3, r2, r3
 80080f0:	3330      	adds	r3, #48	@ 0x30
 80080f2:	6019      	str	r1, [r3, #0]
				sEncCalib[encNum].angMax = sEncCalib[encNum].ang[2] + ( sEncCalib[encNum].encRes[1] * ( sEncCalib[encNum].encCount[2] - 2 ) );
 80080f4:	1cfb      	adds	r3, r7, #3
 80080f6:	781a      	ldrb	r2, [r3, #0]
 80080f8:	491e      	ldr	r1, [pc, #120]	@ (8008174 <_encdisk_task+0x334>)
 80080fa:	0013      	movs	r3, r2
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	1a9b      	subs	r3, r3, r2
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	18cb      	adds	r3, r1, r3
 8008104:	3318      	adds	r3, #24
 8008106:	681d      	ldr	r5, [r3, #0]
 8008108:	1cfb      	adds	r3, r7, #3
 800810a:	781a      	ldrb	r2, [r3, #0]
 800810c:	4919      	ldr	r1, [pc, #100]	@ (8008174 <_encdisk_task+0x334>)
 800810e:	0013      	movs	r3, r2
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	1a9b      	subs	r3, r3, r2
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	18cb      	adds	r3, r1, r3
 8008118:	3320      	adds	r3, #32
 800811a:	681c      	ldr	r4, [r3, #0]
 800811c:	1cfb      	adds	r3, r7, #3
 800811e:	781a      	ldrb	r2, [r3, #0]
 8008120:	4914      	ldr	r1, [pc, #80]	@ (8008174 <_encdisk_task+0x334>)
 8008122:	0013      	movs	r3, r2
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	00db      	lsls	r3, r3, #3
 800812a:	18cb      	adds	r3, r1, r3
 800812c:	3306      	adds	r3, #6
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	3b02      	subs	r3, #2
 8008132:	0018      	movs	r0, r3
 8008134:	f7f9 f840 	bl	80011b8 <__aeabi_i2f>
 8008138:	1c03      	adds	r3, r0, #0
 800813a:	1c19      	adds	r1, r3, #0
 800813c:	1c20      	adds	r0, r4, #0
 800813e:	f7f8 fd39 	bl	8000bb4 <__aeabi_fmul>
 8008142:	1c03      	adds	r3, r0, #0
 8008144:	1c1a      	adds	r2, r3, #0
 8008146:	1cfb      	adds	r3, r7, #3
 8008148:	781c      	ldrb	r4, [r3, #0]
 800814a:	1c11      	adds	r1, r2, #0
 800814c:	1c28      	adds	r0, r5, #0
 800814e:	f7f8 f9c1 	bl	80004d4 <__aeabi_fadd>
 8008152:	1c03      	adds	r3, r0, #0
 8008154:	1c19      	adds	r1, r3, #0
 8008156:	4a07      	ldr	r2, [pc, #28]	@ (8008174 <_encdisk_task+0x334>)
 8008158:	0023      	movs	r3, r4
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	1b1b      	subs	r3, r3, r4
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	18d3      	adds	r3, r2, r3
 8008162:	3334      	adds	r3, #52	@ 0x34
 8008164:	6019      	str	r1, [r3, #0]
 8008166:	e077      	b.n	8008258 <_encdisk_task+0x418>
 8008168:	200000e4 	.word	0x200000e4
 800816c:	20000148 	.word	0x20000148
 8008170:	000009c4 	.word	0x000009c4
 8008174:	20000074 	.word	0x20000074
			}
			else
			{
				sEncCalib[encNum].angMin = sEncCalib[encNum].ang[1] - ( sEncCalib[encNum].encRes[1] * ( sEncCalib[encNum].encCount[0] ));
 8008178:	1cfb      	adds	r3, r7, #3
 800817a:	781a      	ldrb	r2, [r3, #0]
 800817c:	4996      	ldr	r1, [pc, #600]	@ (80083d8 <_encdisk_task+0x598>)
 800817e:	0013      	movs	r3, r2
 8008180:	00db      	lsls	r3, r3, #3
 8008182:	1a9b      	subs	r3, r3, r2
 8008184:	00db      	lsls	r3, r3, #3
 8008186:	18cb      	adds	r3, r1, r3
 8008188:	3314      	adds	r3, #20
 800818a:	681d      	ldr	r5, [r3, #0]
 800818c:	1cfb      	adds	r3, r7, #3
 800818e:	781a      	ldrb	r2, [r3, #0]
 8008190:	4991      	ldr	r1, [pc, #580]	@ (80083d8 <_encdisk_task+0x598>)
 8008192:	0013      	movs	r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	1a9b      	subs	r3, r3, r2
 8008198:	00db      	lsls	r3, r3, #3
 800819a:	18cb      	adds	r3, r1, r3
 800819c:	3320      	adds	r3, #32
 800819e:	681c      	ldr	r4, [r3, #0]
 80081a0:	1cfb      	adds	r3, r7, #3
 80081a2:	781a      	ldrb	r2, [r3, #0]
 80081a4:	498c      	ldr	r1, [pc, #560]	@ (80083d8 <_encdisk_task+0x598>)
 80081a6:	0013      	movs	r3, r2
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	1a9b      	subs	r3, r3, r2
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	18cb      	adds	r3, r1, r3
 80081b0:	3302      	adds	r3, #2
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	0018      	movs	r0, r3
 80081b6:	f7f8 ffff 	bl	80011b8 <__aeabi_i2f>
 80081ba:	1c03      	adds	r3, r0, #0
 80081bc:	1c19      	adds	r1, r3, #0
 80081be:	1c20      	adds	r0, r4, #0
 80081c0:	f7f8 fcf8 	bl	8000bb4 <__aeabi_fmul>
 80081c4:	1c03      	adds	r3, r0, #0
 80081c6:	1c1a      	adds	r2, r3, #0
 80081c8:	1cfb      	adds	r3, r7, #3
 80081ca:	781c      	ldrb	r4, [r3, #0]
 80081cc:	1c11      	adds	r1, r2, #0
 80081ce:	1c28      	adds	r0, r5, #0
 80081d0:	f7f8 fe2e 	bl	8000e30 <__aeabi_fsub>
 80081d4:	1c03      	adds	r3, r0, #0
 80081d6:	1c19      	adds	r1, r3, #0
 80081d8:	4a7f      	ldr	r2, [pc, #508]	@ (80083d8 <_encdisk_task+0x598>)
 80081da:	0023      	movs	r3, r4
 80081dc:	00db      	lsls	r3, r3, #3
 80081de:	1b1b      	subs	r3, r3, r4
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	18d3      	adds	r3, r2, r3
 80081e4:	3330      	adds	r3, #48	@ 0x30
 80081e6:	6019      	str	r1, [r3, #0]
				sEncCalib[encNum].angMax = sEncCalib[encNum].ang[2] + ( sEncCalib[encNum].encRes[1] * ( sEncCalib[encNum].encCount[2] ));
 80081e8:	1cfb      	adds	r3, r7, #3
 80081ea:	781a      	ldrb	r2, [r3, #0]
 80081ec:	497a      	ldr	r1, [pc, #488]	@ (80083d8 <_encdisk_task+0x598>)
 80081ee:	0013      	movs	r3, r2
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	1a9b      	subs	r3, r3, r2
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	18cb      	adds	r3, r1, r3
 80081f8:	3318      	adds	r3, #24
 80081fa:	681d      	ldr	r5, [r3, #0]
 80081fc:	1cfb      	adds	r3, r7, #3
 80081fe:	781a      	ldrb	r2, [r3, #0]
 8008200:	4975      	ldr	r1, [pc, #468]	@ (80083d8 <_encdisk_task+0x598>)
 8008202:	0013      	movs	r3, r2
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	1a9b      	subs	r3, r3, r2
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	18cb      	adds	r3, r1, r3
 800820c:	3320      	adds	r3, #32
 800820e:	681c      	ldr	r4, [r3, #0]
 8008210:	1cfb      	adds	r3, r7, #3
 8008212:	781a      	ldrb	r2, [r3, #0]
 8008214:	4970      	ldr	r1, [pc, #448]	@ (80083d8 <_encdisk_task+0x598>)
 8008216:	0013      	movs	r3, r2
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	00db      	lsls	r3, r3, #3
 800821e:	18cb      	adds	r3, r1, r3
 8008220:	3306      	adds	r3, #6
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	0018      	movs	r0, r3
 8008226:	f7f8 ffc7 	bl	80011b8 <__aeabi_i2f>
 800822a:	1c03      	adds	r3, r0, #0
 800822c:	1c19      	adds	r1, r3, #0
 800822e:	1c20      	adds	r0, r4, #0
 8008230:	f7f8 fcc0 	bl	8000bb4 <__aeabi_fmul>
 8008234:	1c03      	adds	r3, r0, #0
 8008236:	1c1a      	adds	r2, r3, #0
 8008238:	1cfb      	adds	r3, r7, #3
 800823a:	781c      	ldrb	r4, [r3, #0]
 800823c:	1c11      	adds	r1, r2, #0
 800823e:	1c28      	adds	r0, r5, #0
 8008240:	f7f8 f948 	bl	80004d4 <__aeabi_fadd>
 8008244:	1c03      	adds	r3, r0, #0
 8008246:	1c19      	adds	r1, r3, #0
 8008248:	4a63      	ldr	r2, [pc, #396]	@ (80083d8 <_encdisk_task+0x598>)
 800824a:	0023      	movs	r3, r4
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	1b1b      	subs	r3, r3, r4
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	18d3      	adds	r3, r2, r3
 8008254:	3334      	adds	r3, #52	@ 0x34
 8008256:	6019      	str	r1, [r3, #0]
			}

			if( sEncPosMap[encNum].ang < sEncCalib[encNum].angMin )
 8008258:	1cfb      	adds	r3, r7, #3
 800825a:	781a      	ldrb	r2, [r3, #0]
 800825c:	495f      	ldr	r1, [pc, #380]	@ (80083dc <_encdisk_task+0x59c>)
 800825e:	0013      	movs	r3, r2
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	189b      	adds	r3, r3, r2
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	5858      	ldr	r0, [r3, r1]
 8008268:	1cfb      	adds	r3, r7, #3
 800826a:	781a      	ldrb	r2, [r3, #0]
 800826c:	495a      	ldr	r1, [pc, #360]	@ (80083d8 <_encdisk_task+0x598>)
 800826e:	0013      	movs	r3, r2
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	1a9b      	subs	r3, r3, r2
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	18cb      	adds	r3, r1, r3
 8008278:	3330      	adds	r3, #48	@ 0x30
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	1c19      	adds	r1, r3, #0
 800827e:	f7f8 f8cb 	bl	8000418 <__aeabi_fcmplt>
 8008282:	1e03      	subs	r3, r0, #0
 8008284:	d00b      	beq.n	800829e <_encdisk_task+0x45e>
			{
				sEncPosMap[encNum].angPercent = 0;
 8008286:	1cfb      	adds	r3, r7, #3
 8008288:	781a      	ldrb	r2, [r3, #0]
 800828a:	4954      	ldr	r1, [pc, #336]	@ (80083dc <_encdisk_task+0x59c>)
 800828c:	0013      	movs	r3, r2
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	189b      	adds	r3, r3, r2
 8008292:	00db      	lsls	r3, r3, #3
 8008294:	18cb      	adds	r3, r1, r3
 8008296:	3308      	adds	r3, #8
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	e088      	b.n	80083b0 <_encdisk_task+0x570>
			}
			else if( sEncPosMap[encNum].ang > sEncCalib[encNum].angMax )
 800829e:	1cfb      	adds	r3, r7, #3
 80082a0:	781a      	ldrb	r2, [r3, #0]
 80082a2:	494e      	ldr	r1, [pc, #312]	@ (80083dc <_encdisk_task+0x59c>)
 80082a4:	0013      	movs	r3, r2
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	189b      	adds	r3, r3, r2
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	5858      	ldr	r0, [r3, r1]
 80082ae:	1cfb      	adds	r3, r7, #3
 80082b0:	781a      	ldrb	r2, [r3, #0]
 80082b2:	4949      	ldr	r1, [pc, #292]	@ (80083d8 <_encdisk_task+0x598>)
 80082b4:	0013      	movs	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	1a9b      	subs	r3, r3, r2
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	18cb      	adds	r3, r1, r3
 80082be:	3334      	adds	r3, #52	@ 0x34
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	1c19      	adds	r1, r3, #0
 80082c4:	f7f8 f8bc 	bl	8000440 <__aeabi_fcmpgt>
 80082c8:	1e03      	subs	r3, r0, #0
 80082ca:	d00b      	beq.n	80082e4 <_encdisk_task+0x4a4>
			{
				sEncPosMap[encNum].angPercent = 100;
 80082cc:	1cfb      	adds	r3, r7, #3
 80082ce:	781a      	ldrb	r2, [r3, #0]
 80082d0:	4942      	ldr	r1, [pc, #264]	@ (80083dc <_encdisk_task+0x59c>)
 80082d2:	0013      	movs	r3, r2
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	189b      	adds	r3, r3, r2
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	18cb      	adds	r3, r1, r3
 80082dc:	3308      	adds	r3, #8
 80082de:	4a40      	ldr	r2, [pc, #256]	@ (80083e0 <_encdisk_task+0x5a0>)
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	e065      	b.n	80083b0 <_encdisk_task+0x570>
			}
			else
			{
				sEncPosMap[encNum].angCalc = sEncPosMap[encNum].ang - sEncCalib[encNum].ang[1];
 80082e4:	1cfb      	adds	r3, r7, #3
 80082e6:	781a      	ldrb	r2, [r3, #0]
 80082e8:	493c      	ldr	r1, [pc, #240]	@ (80083dc <_encdisk_task+0x59c>)
 80082ea:	0013      	movs	r3, r2
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	189b      	adds	r3, r3, r2
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	5858      	ldr	r0, [r3, r1]
 80082f4:	1cfb      	adds	r3, r7, #3
 80082f6:	781a      	ldrb	r2, [r3, #0]
 80082f8:	4937      	ldr	r1, [pc, #220]	@ (80083d8 <_encdisk_task+0x598>)
 80082fa:	0013      	movs	r3, r2
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	00db      	lsls	r3, r3, #3
 8008302:	18cb      	adds	r3, r1, r3
 8008304:	3314      	adds	r3, #20
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	1cfb      	adds	r3, r7, #3
 800830a:	781c      	ldrb	r4, [r3, #0]
 800830c:	1c11      	adds	r1, r2, #0
 800830e:	f7f8 fd8f 	bl	8000e30 <__aeabi_fsub>
 8008312:	1c03      	adds	r3, r0, #0
 8008314:	1c19      	adds	r1, r3, #0
 8008316:	4a31      	ldr	r2, [pc, #196]	@ (80083dc <_encdisk_task+0x59c>)
 8008318:	0023      	movs	r3, r4
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	191b      	adds	r3, r3, r4
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	18d3      	adds	r3, r2, r3
 8008322:	3304      	adds	r3, #4
 8008324:	6019      	str	r1, [r3, #0]
				sEncPosMap[encNum].angPercent =  (sEncPosMap[encNum].ang - sEncCalib[encNum].angMin) * 100 / (sEncCalib[encNum].angMax-sEncCalib[encNum].angMin) ;
 8008326:	1cfb      	adds	r3, r7, #3
 8008328:	781a      	ldrb	r2, [r3, #0]
 800832a:	492c      	ldr	r1, [pc, #176]	@ (80083dc <_encdisk_task+0x59c>)
 800832c:	0013      	movs	r3, r2
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	189b      	adds	r3, r3, r2
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	5858      	ldr	r0, [r3, r1]
 8008336:	1cfb      	adds	r3, r7, #3
 8008338:	781a      	ldrb	r2, [r3, #0]
 800833a:	4927      	ldr	r1, [pc, #156]	@ (80083d8 <_encdisk_task+0x598>)
 800833c:	0013      	movs	r3, r2
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	1a9b      	subs	r3, r3, r2
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	18cb      	adds	r3, r1, r3
 8008346:	3330      	adds	r3, #48	@ 0x30
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	1c19      	adds	r1, r3, #0
 800834c:	f7f8 fd70 	bl	8000e30 <__aeabi_fsub>
 8008350:	1c03      	adds	r3, r0, #0
 8008352:	4923      	ldr	r1, [pc, #140]	@ (80083e0 <_encdisk_task+0x5a0>)
 8008354:	1c18      	adds	r0, r3, #0
 8008356:	f7f8 fc2d 	bl	8000bb4 <__aeabi_fmul>
 800835a:	1c03      	adds	r3, r0, #0
 800835c:	1c1d      	adds	r5, r3, #0
 800835e:	1cfb      	adds	r3, r7, #3
 8008360:	781a      	ldrb	r2, [r3, #0]
 8008362:	491d      	ldr	r1, [pc, #116]	@ (80083d8 <_encdisk_task+0x598>)
 8008364:	0013      	movs	r3, r2
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	1a9b      	subs	r3, r3, r2
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	18cb      	adds	r3, r1, r3
 800836e:	3334      	adds	r3, #52	@ 0x34
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	1cfb      	adds	r3, r7, #3
 8008374:	781a      	ldrb	r2, [r3, #0]
 8008376:	4918      	ldr	r1, [pc, #96]	@ (80083d8 <_encdisk_task+0x598>)
 8008378:	0013      	movs	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	1a9b      	subs	r3, r3, r2
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	18cb      	adds	r3, r1, r3
 8008382:	3330      	adds	r3, #48	@ 0x30
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	1c19      	adds	r1, r3, #0
 8008388:	f7f8 fd52 	bl	8000e30 <__aeabi_fsub>
 800838c:	1c03      	adds	r3, r0, #0
 800838e:	1c1a      	adds	r2, r3, #0
 8008390:	1cfb      	adds	r3, r7, #3
 8008392:	781c      	ldrb	r4, [r3, #0]
 8008394:	1c11      	adds	r1, r2, #0
 8008396:	1c28      	adds	r0, r5, #0
 8008398:	f7f8 fa26 	bl	80007e8 <__aeabi_fdiv>
 800839c:	1c03      	adds	r3, r0, #0
 800839e:	1c19      	adds	r1, r3, #0
 80083a0:	4a0e      	ldr	r2, [pc, #56]	@ (80083dc <_encdisk_task+0x59c>)
 80083a2:	0023      	movs	r3, r4
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	191b      	adds	r3, r3, r4
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	18d3      	adds	r3, r2, r3
 80083ac:	3308      	adds	r3, #8
 80083ae:	6019      	str	r1, [r3, #0]
		for( tEncNum encNum = _e_EncNum_Pri ; encNum < _e_EncNum_Qty ; encNum++ )
 80083b0:	1cfb      	adds	r3, r7, #3
 80083b2:	781a      	ldrb	r2, [r3, #0]
 80083b4:	1cfb      	adds	r3, r7, #3
 80083b6:	3201      	adds	r2, #1
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	1cfb      	adds	r3, r7, #3
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d800      	bhi.n	80083c4 <_encdisk_task+0x584>
 80083c2:	e616      	b.n	8007ff2 <_encdisk_task+0x1b2>
			}
		}

		break;
 80083c4:	e004      	b.n	80083d0 <_encdisk_task+0x590>

	default:
		TaskManager_Step_Set( ENCDISK, 0 );
 80083c6:	2100      	movs	r1, #0
 80083c8:	2003      	movs	r0, #3
 80083ca:	f005 fa69 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 80083ce:	46c0      	nop			@ (mov r8, r8)
	}
}
 80083d0:	46c0      	nop			@ (mov r8, r8)
 80083d2:	46bd      	mov	sp, r7
 80083d4:	b002      	add	sp, #8
 80083d6:	bdb0      	pop	{r4, r5, r7, pc}
 80083d8:	20000074 	.word	0x20000074
 80083dc:	20000118 	.word	0x20000118
 80083e0:	42c80000 	.word	0x42c80000

080083e4 <_encmt_task_init>:
static void _encmt_task_move( tEncNum encNum );
static void _encmt_task_cali( tEncNum encNum );
static void _encmt_task_move_to_stop( tEncNum encNum );

static void _encmt_task_init( tEncNum encNum )
{
 80083e4:	b590      	push	{r4, r7, lr}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	0002      	movs	r2, r0
 80083ec:	1dfb      	adds	r3, r7, #7
 80083ee:	701a      	strb	r2, [r3, #0]
	tTaskManager ENCMTASK = ( ENCSTPMT1 + (tTaskManager)encNum );
 80083f0:	240f      	movs	r4, #15
 80083f2:	193b      	adds	r3, r7, r4
 80083f4:	1dfa      	adds	r2, r7, #7
 80083f6:	7812      	ldrb	r2, [r2, #0]
 80083f8:	3205      	adds	r2, #5
 80083fa:	701a      	strb	r2, [r3, #0]
	TaskManager_Set( ENCMTASK , _e_encmt_task_init );
 80083fc:	193b      	adds	r3, r7, r4
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2100      	movs	r1, #0
 8008402:	0018      	movs	r0, r3
 8008404:	f005 f9c4 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( ENCMTASK ) == false ){
 8008408:	193b      	adds	r3, r7, r4
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	0018      	movs	r0, r3
 800840e:	f005 fa25 	bl	800d85c <TaskManager_First_Get>
 8008412:	1e03      	subs	r3, r0, #0
 8008414:	d118      	bne.n	8008448 <_encmt_task_init+0x64>
		TaskManager_First_Set( ENCMTASK );
 8008416:	193b      	adds	r3, r7, r4
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	0018      	movs	r0, r3
 800841c:	f005 f9d4 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( ENCMTASK, 0 );
 8008420:	193b      	adds	r3, r7, r4
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	2100      	movs	r1, #0
 8008426:	0018      	movs	r0, r3
 8008428:	f005 fa3a 	bl	800d8a0 <TaskManager_Step_Set>
		StepMotor_STOP((tStpMtNum)encNum);
 800842c:	1dfb      	adds	r3, r7, #7
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	0018      	movs	r0, r3
 8008432:	f005 f8c3 	bl	800d5bc <StepMotor_STOP>
		sEncCtrl[encNum].status = _e_EncSts_Init;
 8008436:	1dfb      	adds	r3, r7, #7
 8008438:	781a      	ldrb	r2, [r3, #0]
 800843a:	491c      	ldr	r1, [pc, #112]	@ (80084ac <_encmt_task_init+0xc8>)
 800843c:	0013      	movs	r3, r2
 800843e:	005b      	lsls	r3, r3, #1
 8008440:	189b      	adds	r3, r3, r2
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	2200      	movs	r2, #0
 8008446:	545a      	strb	r2, [r3, r1]
	}

	switch( TaskManager_Step_Get( ENCMTASK ) )
 8008448:	230f      	movs	r3, #15
 800844a:	18fb      	adds	r3, r7, r3
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	0018      	movs	r0, r3
 8008450:	f005 fa50 	bl	800d8f4 <TaskManager_Step_Get>
 8008454:	1e03      	subs	r3, r0, #0
 8008456:	d002      	beq.n	800845e <_encmt_task_init+0x7a>
 8008458:	2b01      	cmp	r3, #1
 800845a:	d013      	beq.n	8008484 <_encmt_task_init+0xa0>
 800845c:	e019      	b.n	8008492 <_encmt_task_init+0xae>
	{
	case 0:
		sEncCalib[encNum].status = _e_EncCalib_Nok;
 800845e:	1dfb      	adds	r3, r7, #7
 8008460:	781a      	ldrb	r2, [r3, #0]
 8008462:	4913      	ldr	r1, [pc, #76]	@ (80084b0 <_encmt_task_init+0xcc>)
 8008464:	202d      	movs	r0, #45	@ 0x2d
 8008466:	0013      	movs	r3, r2
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	1a9b      	subs	r3, r3, r2
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	18cb      	adds	r3, r1, r3
 8008470:	181b      	adds	r3, r3, r0
 8008472:	2204      	movs	r2, #4
 8008474:	701a      	strb	r2, [r3, #0]
		TaskManager_Step_Inc(ENCMTASK);
 8008476:	230f      	movs	r3, #15
 8008478:	18fb      	adds	r3, r7, r3
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	0018      	movs	r0, r3
 800847e:	f005 fa5d 	bl	800d93c <TaskManager_Step_Inc>
		break;
 8008482:	e00e      	b.n	80084a2 <_encmt_task_init+0xbe>
	case 1:
		sEncMtask[encNum].TASK = _encmt_task_idle;
 8008484:	1dfb      	adds	r3, r7, #7
 8008486:	781a      	ldrb	r2, [r3, #0]
 8008488:	4b0a      	ldr	r3, [pc, #40]	@ (80084b4 <_encmt_task_init+0xd0>)
 800848a:	0092      	lsls	r2, r2, #2
 800848c:	490a      	ldr	r1, [pc, #40]	@ (80084b8 <_encmt_task_init+0xd4>)
 800848e:	50d1      	str	r1, [r2, r3]
		break;
 8008490:	e007      	b.n	80084a2 <_encmt_task_init+0xbe>
	default:
		TaskManager_Step_Set( ENCMTASK, 0 );
 8008492:	230f      	movs	r3, #15
 8008494:	18fb      	adds	r3, r7, r3
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	2100      	movs	r1, #0
 800849a:	0018      	movs	r0, r3
 800849c:	f005 fa00 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 80084a0:	46c0      	nop			@ (mov r8, r8)
	}
}
 80084a2:	46c0      	nop			@ (mov r8, r8)
 80084a4:	46bd      	mov	sp, r7
 80084a6:	b005      	add	sp, #20
 80084a8:	bd90      	pop	{r4, r7, pc}
 80084aa:	46c0      	nop			@ (mov r8, r8)
 80084ac:	2000015c 	.word	0x2000015c
 80084b0:	20000074 	.word	0x20000074
 80084b4:	2000018c 	.word	0x2000018c
 80084b8:	080084bd 	.word	0x080084bd

080084bc <_encmt_task_idle>:

static void _encmt_task_idle( tEncNum encNum )
{
 80084bc:	b590      	push	{r4, r7, lr}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	0002      	movs	r2, r0
 80084c4:	1dfb      	adds	r3, r7, #7
 80084c6:	701a      	strb	r2, [r3, #0]
	tTaskManager ENCMTASK = ( ENCSTPMT1 + (tTaskManager)encNum );
 80084c8:	240f      	movs	r4, #15
 80084ca:	193b      	adds	r3, r7, r4
 80084cc:	1dfa      	adds	r2, r7, #7
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	3205      	adds	r2, #5
 80084d2:	701a      	strb	r2, [r3, #0]
	TaskManager_Set( ENCMTASK , _e_encmt_task_idle );
 80084d4:	193b      	adds	r3, r7, r4
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2101      	movs	r1, #1
 80084da:	0018      	movs	r0, r3
 80084dc:	f005 f958 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( ENCMTASK ) == false ){
 80084e0:	193b      	adds	r3, r7, r4
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	0018      	movs	r0, r3
 80084e6:	f005 f9b9 	bl	800d85c <TaskManager_First_Get>
 80084ea:	1e03      	subs	r3, r0, #0
 80084ec:	d10a      	bne.n	8008504 <_encmt_task_idle+0x48>
		TaskManager_First_Set( ENCMTASK );
 80084ee:	193b      	adds	r3, r7, r4
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	0018      	movs	r0, r3
 80084f4:	f005 f968 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( ENCMTASK, 0 );
 80084f8:	193b      	adds	r3, r7, r4
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2100      	movs	r1, #0
 80084fe:	0018      	movs	r0, r3
 8008500:	f005 f9ce 	bl	800d8a0 <TaskManager_Step_Set>
		//sEncCtrl[encNum].command = _e_EncCmd_None;
		//sEncCtrl[encNum].status = _e_EncSts_Idle;
	}

	if( sEncCtrl[encNum].command == _e_EncCmd_None )
 8008504:	1dfb      	adds	r3, r7, #7
 8008506:	781a      	ldrb	r2, [r3, #0]
 8008508:	4933      	ldr	r1, [pc, #204]	@ (80085d8 <_encmt_task_idle+0x11c>)
 800850a:	0013      	movs	r3, r2
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	189b      	adds	r3, r3, r2
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	18cb      	adds	r3, r1, r3
 8008514:	3301      	adds	r3, #1
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d119      	bne.n	8008550 <_encmt_task_idle+0x94>
	{
		if( StepMotor_GetSts( (tStpMtNum)encNum ) != _e_StpMtSts_Stop ){
 800851c:	1dfb      	adds	r3, r7, #7
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	0018      	movs	r0, r3
 8008522:	f004 ffb9 	bl	800d498 <StepMotor_GetSts>
 8008526:	1e03      	subs	r3, r0, #0
 8008528:	d009      	beq.n	800853e <_encmt_task_idle+0x82>
			sEncCtrl[encNum].status = _e_EncSts_Move;
 800852a:	1dfb      	adds	r3, r7, #7
 800852c:	781a      	ldrb	r2, [r3, #0]
 800852e:	492a      	ldr	r1, [pc, #168]	@ (80085d8 <_encmt_task_idle+0x11c>)
 8008530:	0013      	movs	r3, r2
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	189b      	adds	r3, r3, r2
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	2202      	movs	r2, #2
 800853a:	545a      	strb	r2, [r3, r1]
 800853c:	e008      	b.n	8008550 <_encmt_task_idle+0x94>
		}
		else{
			sEncCtrl[encNum].status = _e_EncSts_Idle;
 800853e:	1dfb      	adds	r3, r7, #7
 8008540:	781a      	ldrb	r2, [r3, #0]
 8008542:	4925      	ldr	r1, [pc, #148]	@ (80085d8 <_encmt_task_idle+0x11c>)
 8008544:	0013      	movs	r3, r2
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	189b      	adds	r3, r3, r2
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	2201      	movs	r2, #1
 800854e:	545a      	strb	r2, [r3, r1]
		}
	}

	switch( (uint8_t)sEncCtrl[encNum].command )
 8008550:	1dfb      	adds	r3, r7, #7
 8008552:	781a      	ldrb	r2, [r3, #0]
 8008554:	4920      	ldr	r1, [pc, #128]	@ (80085d8 <_encmt_task_idle+0x11c>)
 8008556:	0013      	movs	r3, r2
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	189b      	adds	r3, r3, r2
 800855c:	00db      	lsls	r3, r3, #3
 800855e:	18cb      	adds	r3, r1, r3
 8008560:	3301      	adds	r3, #1
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b04      	cmp	r3, #4
 8008566:	d016      	beq.n	8008596 <_encmt_task_idle+0xda>
 8008568:	dc32      	bgt.n	80085d0 <_encmt_task_idle+0x114>
 800856a:	2b03      	cmp	r3, #3
 800856c:	d01a      	beq.n	80085a4 <_encmt_task_idle+0xe8>
 800856e:	dc2f      	bgt.n	80085d0 <_encmt_task_idle+0x114>
 8008570:	2b01      	cmp	r3, #1
 8008572:	d002      	beq.n	800857a <_encmt_task_idle+0xbe>
 8008574:	2b02      	cmp	r3, #2
 8008576:	d007      	beq.n	8008588 <_encmt_task_idle+0xcc>
		_enc_stop_mode(encNum);
		sEncCtrl[encNum].command = _e_EncCmd_None;
		break;
	}

}
 8008578:	e02a      	b.n	80085d0 <_encmt_task_idle+0x114>
		sEncMtask[encNum].TASK = _encmt_task_cali;
 800857a:	1dfb      	adds	r3, r7, #7
 800857c:	781a      	ldrb	r2, [r3, #0]
 800857e:	4b17      	ldr	r3, [pc, #92]	@ (80085dc <_encmt_task_idle+0x120>)
 8008580:	0092      	lsls	r2, r2, #2
 8008582:	4917      	ldr	r1, [pc, #92]	@ (80085e0 <_encmt_task_idle+0x124>)
 8008584:	50d1      	str	r1, [r2, r3]
		break;
 8008586:	e023      	b.n	80085d0 <_encmt_task_idle+0x114>
		sEncMtask[encNum].TASK = _encmt_task_move;
 8008588:	1dfb      	adds	r3, r7, #7
 800858a:	781a      	ldrb	r2, [r3, #0]
 800858c:	4b13      	ldr	r3, [pc, #76]	@ (80085dc <_encmt_task_idle+0x120>)
 800858e:	0092      	lsls	r2, r2, #2
 8008590:	4914      	ldr	r1, [pc, #80]	@ (80085e4 <_encmt_task_idle+0x128>)
 8008592:	50d1      	str	r1, [r2, r3]
		break;
 8008594:	e01c      	b.n	80085d0 <_encmt_task_idle+0x114>
		sEncMtask[encNum].TASK = _encmt_task_move_to_stop;
 8008596:	1dfb      	adds	r3, r7, #7
 8008598:	781a      	ldrb	r2, [r3, #0]
 800859a:	4b10      	ldr	r3, [pc, #64]	@ (80085dc <_encmt_task_idle+0x120>)
 800859c:	0092      	lsls	r2, r2, #2
 800859e:	4912      	ldr	r1, [pc, #72]	@ (80085e8 <_encmt_task_idle+0x12c>)
 80085a0:	50d1      	str	r1, [r2, r3]
		break;
 80085a2:	e015      	b.n	80085d0 <_encmt_task_idle+0x114>
		StepMotor_STOP((tStpMtNum)encNum);
 80085a4:	1dfb      	adds	r3, r7, #7
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	0018      	movs	r0, r3
 80085aa:	f005 f807 	bl	800d5bc <StepMotor_STOP>
		_enc_stop_mode(encNum);
 80085ae:	1dfb      	adds	r3, r7, #7
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	0018      	movs	r0, r3
 80085b4:	f7ff fa9c 	bl	8007af0 <_enc_stop_mode>
		sEncCtrl[encNum].command = _e_EncCmd_None;
 80085b8:	1dfb      	adds	r3, r7, #7
 80085ba:	781a      	ldrb	r2, [r3, #0]
 80085bc:	4906      	ldr	r1, [pc, #24]	@ (80085d8 <_encmt_task_idle+0x11c>)
 80085be:	0013      	movs	r3, r2
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	189b      	adds	r3, r3, r2
 80085c4:	00db      	lsls	r3, r3, #3
 80085c6:	18cb      	adds	r3, r1, r3
 80085c8:	3301      	adds	r3, #1
 80085ca:	2200      	movs	r2, #0
 80085cc:	701a      	strb	r2, [r3, #0]
		break;
 80085ce:	46c0      	nop			@ (mov r8, r8)
}
 80085d0:	46c0      	nop			@ (mov r8, r8)
 80085d2:	46bd      	mov	sp, r7
 80085d4:	b005      	add	sp, #20
 80085d6:	bd90      	pop	{r4, r7, pc}
 80085d8:	2000015c 	.word	0x2000015c
 80085dc:	2000018c 	.word	0x2000018c
 80085e0:	08008f19 	.word	0x08008f19
 80085e4:	08008761 	.word	0x08008761
 80085e8:	080085ed 	.word	0x080085ed

080085ec <_encmt_task_move_to_stop>:

static void _encmt_task_move_to_stop( tEncNum encNum )
{
 80085ec:	b590      	push	{r4, r7, lr}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af02      	add	r7, sp, #8
 80085f2:	0002      	movs	r2, r0
 80085f4:	1dfb      	adds	r3, r7, #7
 80085f6:	701a      	strb	r2, [r3, #0]
	tTaskManager ENCMTASK = ( ENCSTPMT1 + (tTaskManager)encNum );
 80085f8:	240f      	movs	r4, #15
 80085fa:	193b      	adds	r3, r7, r4
 80085fc:	1dfa      	adds	r2, r7, #7
 80085fe:	7812      	ldrb	r2, [r2, #0]
 8008600:	3205      	adds	r2, #5
 8008602:	701a      	strb	r2, [r3, #0]
	TaskManager_Set( ENCMTASK , _e_encmt_task_move_to_stop );
 8008604:	193b      	adds	r3, r7, r4
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2104      	movs	r1, #4
 800860a:	0018      	movs	r0, r3
 800860c:	f005 f8c0 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( ENCMTASK ) == false ){
 8008610:	193b      	adds	r3, r7, r4
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	0018      	movs	r0, r3
 8008616:	f005 f921 	bl	800d85c <TaskManager_First_Get>
 800861a:	1e03      	subs	r3, r0, #0
 800861c:	d113      	bne.n	8008646 <_encmt_task_move_to_stop+0x5a>
		TaskManager_First_Set( ENCMTASK );
 800861e:	193b      	adds	r3, r7, r4
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	0018      	movs	r0, r3
 8008624:	f005 f8d0 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( ENCMTASK, 0 );
 8008628:	193b      	adds	r3, r7, r4
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2100      	movs	r1, #0
 800862e:	0018      	movs	r0, r3
 8008630:	f005 f936 	bl	800d8a0 <TaskManager_Step_Set>
		sEncCtrl[encNum].status = _e_EncSts_Move;
 8008634:	1dfb      	adds	r3, r7, #7
 8008636:	781a      	ldrb	r2, [r3, #0]
 8008638:	4942      	ldr	r1, [pc, #264]	@ (8008744 <_encmt_task_move_to_stop+0x158>)
 800863a:	0013      	movs	r3, r2
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	189b      	adds	r3, r3, r2
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	2202      	movs	r2, #2
 8008644:	545a      	strb	r2, [r3, r1]
	}

	switch( TaskManager_Step_Get( ENCMTASK ) )
 8008646:	230f      	movs	r3, #15
 8008648:	18fb      	adds	r3, r7, r3
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	0018      	movs	r0, r3
 800864e:	f005 f951 	bl	800d8f4 <TaskManager_Step_Get>
 8008652:	0003      	movs	r3, r0
 8008654:	2b02      	cmp	r3, #2
 8008656:	d056      	beq.n	8008706 <_encmt_task_move_to_stop+0x11a>
 8008658:	dc67      	bgt.n	800872a <_encmt_task_move_to_stop+0x13e>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <_encmt_task_move_to_stop+0x78>
 800865e:	2b01      	cmp	r3, #1
 8008660:	d026      	beq.n	80086b0 <_encmt_task_move_to_stop+0xc4>
 8008662:	e062      	b.n	800872a <_encmt_task_move_to_stop+0x13e>
	{
	case 0://Joga para o lado setado
		Timing_Set( _e_Timing_Encoder_Break , TIMEOUT_CALIB_DINAM * 2 /*10000 */);
 8008664:	4b38      	ldr	r3, [pc, #224]	@ (8008748 <_encmt_task_move_to_stop+0x15c>)
 8008666:	0019      	movs	r1, r3
 8008668:	200f      	movs	r0, #15
 800866a:	f007 f93b 	bl	800f8e4 <Timing_Set>
		_encdisk_func_break_clear(encNum);
 800866e:	1dfb      	adds	r3, r7, #7
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	0018      	movs	r0, r3
 8008674:	f7ff f9e8 	bl	8007a48 <_encdisk_func_break_clear>
		StepMotor_GO( (tStpMtNum)encNum , (tStpMtDir)sEncCtrl[encNum].direction , 200 , STPMT_MT_SPEED_CAL , STPMT_MT_ACC_CAL , STPMT_MT_SPEED_INI_CAL );
 8008678:	1dfb      	adds	r3, r7, #7
 800867a:	781a      	ldrb	r2, [r3, #0]
 800867c:	4931      	ldr	r1, [pc, #196]	@ (8008744 <_encmt_task_move_to_stop+0x158>)
 800867e:	0013      	movs	r3, r2
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	189b      	adds	r3, r3, r2
 8008684:	00db      	lsls	r3, r3, #3
 8008686:	18cb      	adds	r3, r1, r3
 8008688:	3314      	adds	r3, #20
 800868a:	7819      	ldrb	r1, [r3, #0]
 800868c:	4c2f      	ldr	r4, [pc, #188]	@ (800874c <_encmt_task_move_to_stop+0x160>)
 800868e:	4a30      	ldr	r2, [pc, #192]	@ (8008750 <_encmt_task_move_to_stop+0x164>)
 8008690:	1dfb      	adds	r3, r7, #7
 8008692:	7818      	ldrb	r0, [r3, #0]
 8008694:	2364      	movs	r3, #100	@ 0x64
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	2314      	movs	r3, #20
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	0023      	movs	r3, r4
 800869e:	f004 ff11 	bl	800d4c4 <StepMotor_GO>
		TaskManager_Step_Inc(ENCMTASK);
 80086a2:	230f      	movs	r3, #15
 80086a4:	18fb      	adds	r3, r7, r3
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	0018      	movs	r0, r3
 80086aa:	f005 f947 	bl	800d93c <TaskManager_Step_Inc>
		break;
 80086ae:	e045      	b.n	800873c <_encmt_task_move_to_stop+0x150>

	case 1://aguarda fim de curso
		if( _encdisk_func_break_get(encNum) )
 80086b0:	1dfb      	adds	r3, r7, #7
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	0018      	movs	r0, r3
 80086b6:	f7ff fa05 	bl	8007ac4 <_encdisk_func_break_get>
 80086ba:	1e03      	subs	r3, r0, #0
 80086bc:	d00b      	beq.n	80086d6 <_encmt_task_move_to_stop+0xea>
		{
			StepMotor_STOP((tStpMtNum)encNum);
 80086be:	1dfb      	adds	r3, r7, #7
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	0018      	movs	r0, r3
 80086c4:	f004 ff7a 	bl	800d5bc <StepMotor_STOP>
			TaskManager_Step_Inc(ENCMTASK);
 80086c8:	230f      	movs	r3, #15
 80086ca:	18fb      	adds	r3, r7, r3
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	0018      	movs	r0, r3
 80086d0:	f005 f934 	bl	800d93c <TaskManager_Step_Inc>
		}
		else if( Timing_Get_Bool( _e_Timing_Encoder_Break ) ){
			sEncCalib[encNum].status = _e_EncCalib_TimeOut1;
			TaskManager_Step_Inc(ENCMTASK);
		}
		break;
 80086d4:	e031      	b.n	800873a <_encmt_task_move_to_stop+0x14e>
		else if( Timing_Get_Bool( _e_Timing_Encoder_Break ) ){
 80086d6:	200f      	movs	r0, #15
 80086d8:	f007 f91a 	bl	800f910 <Timing_Get_Bool>
 80086dc:	1e03      	subs	r3, r0, #0
 80086de:	d02c      	beq.n	800873a <_encmt_task_move_to_stop+0x14e>
			sEncCalib[encNum].status = _e_EncCalib_TimeOut1;
 80086e0:	1dfb      	adds	r3, r7, #7
 80086e2:	781a      	ldrb	r2, [r3, #0]
 80086e4:	491b      	ldr	r1, [pc, #108]	@ (8008754 <_encmt_task_move_to_stop+0x168>)
 80086e6:	202d      	movs	r0, #45	@ 0x2d
 80086e8:	0013      	movs	r3, r2
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	1a9b      	subs	r3, r3, r2
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	18cb      	adds	r3, r1, r3
 80086f2:	181b      	adds	r3, r3, r0
 80086f4:	2202      	movs	r2, #2
 80086f6:	701a      	strb	r2, [r3, #0]
			TaskManager_Step_Inc(ENCMTASK);
 80086f8:	230f      	movs	r3, #15
 80086fa:	18fb      	adds	r3, r7, r3
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	0018      	movs	r0, r3
 8008700:	f005 f91c 	bl	800d93c <TaskManager_Step_Inc>
		break;
 8008704:	e019      	b.n	800873a <_encmt_task_move_to_stop+0x14e>

	case 2:
		sEncCtrl[encNum].command = _e_EncCmd_None;
 8008706:	1dfb      	adds	r3, r7, #7
 8008708:	781a      	ldrb	r2, [r3, #0]
 800870a:	490e      	ldr	r1, [pc, #56]	@ (8008744 <_encmt_task_move_to_stop+0x158>)
 800870c:	0013      	movs	r3, r2
 800870e:	005b      	lsls	r3, r3, #1
 8008710:	189b      	adds	r3, r3, r2
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	18cb      	adds	r3, r1, r3
 8008716:	3301      	adds	r3, #1
 8008718:	2200      	movs	r2, #0
 800871a:	701a      	strb	r2, [r3, #0]
		sEncMtask[encNum].TASK = _encmt_task_idle;
 800871c:	1dfb      	adds	r3, r7, #7
 800871e:	781a      	ldrb	r2, [r3, #0]
 8008720:	4b0d      	ldr	r3, [pc, #52]	@ (8008758 <_encmt_task_move_to_stop+0x16c>)
 8008722:	0092      	lsls	r2, r2, #2
 8008724:	490d      	ldr	r1, [pc, #52]	@ (800875c <_encmt_task_move_to_stop+0x170>)
 8008726:	50d1      	str	r1, [r2, r3]
		break;
 8008728:	e008      	b.n	800873c <_encmt_task_move_to_stop+0x150>

	default:
		TaskManager_Step_Set( ENCMTASK, 0 );
 800872a:	230f      	movs	r3, #15
 800872c:	18fb      	adds	r3, r7, r3
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2100      	movs	r1, #0
 8008732:	0018      	movs	r0, r3
 8008734:	f005 f8b4 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8008738:	e000      	b.n	800873c <_encmt_task_move_to_stop+0x150>
		break;
 800873a:	46c0      	nop			@ (mov r8, r8)
	}

}
 800873c:	46c0      	nop			@ (mov r8, r8)
 800873e:	46bd      	mov	sp, r7
 8008740:	b005      	add	sp, #20
 8008742:	bd90      	pop	{r4, r7, pc}
 8008744:	2000015c 	.word	0x2000015c
 8008748:	00003c44 	.word	0x00003c44
 800874c:	000036b0 	.word	0x000036b0
 8008750:	43480000 	.word	0x43480000
 8008754:	20000074 	.word	0x20000074
 8008758:	2000018c 	.word	0x2000018c
 800875c:	080084bd 	.word	0x080084bd

08008760 <_encmt_task_move>:



static void _encmt_task_move( tEncNum encNum )
{
 8008760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008762:	b089      	sub	sp, #36	@ 0x24
 8008764:	af02      	add	r7, sp, #8
 8008766:	0002      	movs	r2, r0
 8008768:	1dfb      	adds	r3, r7, #7
 800876a:	701a      	strb	r2, [r3, #0]
	tEncDir dir;

	tTaskManager ENCMTASK = ( ENCSTPMT1 + (tTaskManager)encNum );
 800876c:	2416      	movs	r4, #22
 800876e:	193b      	adds	r3, r7, r4
 8008770:	1dfa      	adds	r2, r7, #7
 8008772:	7812      	ldrb	r2, [r2, #0]
 8008774:	3205      	adds	r2, #5
 8008776:	701a      	strb	r2, [r3, #0]
	TaskManager_Set( ENCMTASK , _e_encmt_task_move );
 8008778:	193b      	adds	r3, r7, r4
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2102      	movs	r1, #2
 800877e:	0018      	movs	r0, r3
 8008780:	f005 f806 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( ENCMTASK ) == false ){
 8008784:	193b      	adds	r3, r7, r4
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	0018      	movs	r0, r3
 800878a:	f005 f867 	bl	800d85c <TaskManager_First_Get>
 800878e:	1e03      	subs	r3, r0, #0
 8008790:	d113      	bne.n	80087ba <_encmt_task_move+0x5a>
		TaskManager_First_Set( ENCMTASK );
 8008792:	193b      	adds	r3, r7, r4
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	0018      	movs	r0, r3
 8008798:	f005 f816 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( ENCMTASK, 0 );
 800879c:	193b      	adds	r3, r7, r4
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2100      	movs	r1, #0
 80087a2:	0018      	movs	r0, r3
 80087a4:	f005 f87c 	bl	800d8a0 <TaskManager_Step_Set>
		sEncCtrl[encNum].status = _e_EncSts_Move;
 80087a8:	1dfb      	adds	r3, r7, #7
 80087aa:	781a      	ldrb	r2, [r3, #0]
 80087ac:	4990      	ldr	r1, [pc, #576]	@ (80089f0 <_encmt_task_move+0x290>)
 80087ae:	0013      	movs	r3, r2
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	189b      	adds	r3, r3, r2
 80087b4:	00db      	lsls	r3, r3, #3
 80087b6:	2202      	movs	r2, #2
 80087b8:	545a      	strb	r2, [r3, r1]
	}

	if(encNum == _e_EncNum_Pri){
 80087ba:	1dfb      	adds	r3, r7, #7
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <_encmt_task_move+0x66>
		__NOP();
 80087c2:	46c0      	nop			@ (mov r8, r8)
 80087c4:	e000      	b.n	80087c8 <_encmt_task_move+0x68>
	}
	else{
		__NOP();
 80087c6:	46c0      	nop			@ (mov r8, r8)
	}

	switch( TaskManager_Step_Get( ENCMTASK ) )
 80087c8:	2316      	movs	r3, #22
 80087ca:	18fb      	adds	r3, r7, r3
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	0018      	movs	r0, r3
 80087d0:	f005 f890 	bl	800d8f4 <TaskManager_Step_Get>
 80087d4:	0003      	movs	r3, r0
 80087d6:	2b05      	cmp	r3, #5
 80087d8:	d100      	bne.n	80087dc <_encmt_task_move+0x7c>
 80087da:	e375      	b.n	8008ec8 <_encmt_task_move+0x768>
 80087dc:	dd00      	ble.n	80087e0 <_encmt_task_move+0x80>
 80087de:	e385      	b.n	8008eec <_encmt_task_move+0x78c>
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d100      	bne.n	80087e6 <_encmt_task_move+0x86>
 80087e4:	e2bc      	b.n	8008d60 <_encmt_task_move+0x600>
 80087e6:	dd00      	ble.n	80087ea <_encmt_task_move+0x8a>
 80087e8:	e380      	b.n	8008eec <_encmt_task_move+0x78c>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <_encmt_task_move+0x96>
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d100      	bne.n	80087f4 <_encmt_task_move+0x94>
 80087f2:	e29f      	b.n	8008d34 <_encmt_task_move+0x5d4>
 80087f4:	e37a      	b.n	8008eec <_encmt_task_move+0x78c>
	{
	case 0:

		if( sEncCtrl[encNum].angUser > sEncPosMap[encNum].ang ){
 80087f6:	1dfb      	adds	r3, r7, #7
 80087f8:	781a      	ldrb	r2, [r3, #0]
 80087fa:	497d      	ldr	r1, [pc, #500]	@ (80089f0 <_encmt_task_move+0x290>)
 80087fc:	0013      	movs	r3, r2
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	189b      	adds	r3, r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	18cb      	adds	r3, r1, r3
 8008806:	3304      	adds	r3, #4
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	0018      	movs	r0, r3
 800880c:	f7f8 fcd4 	bl	80011b8 <__aeabi_i2f>
 8008810:	1dfb      	adds	r3, r7, #7
 8008812:	781a      	ldrb	r2, [r3, #0]
 8008814:	4977      	ldr	r1, [pc, #476]	@ (80089f4 <_encmt_task_move+0x294>)
 8008816:	0013      	movs	r3, r2
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	189b      	adds	r3, r3, r2
 800881c:	00db      	lsls	r3, r3, #3
 800881e:	585b      	ldr	r3, [r3, r1]
 8008820:	1c19      	adds	r1, r3, #0
 8008822:	f7f7 fe0d 	bl	8000440 <__aeabi_fcmpgt>
 8008826:	1e03      	subs	r3, r0, #0
 8008828:	d033      	beq.n	8008892 <_encmt_task_move+0x132>
			sEncCtrl[encNum].angToMove = sEncCtrl[encNum].angUser - sEncPosMap[encNum].ang;
 800882a:	1dfb      	adds	r3, r7, #7
 800882c:	781a      	ldrb	r2, [r3, #0]
 800882e:	4970      	ldr	r1, [pc, #448]	@ (80089f0 <_encmt_task_move+0x290>)
 8008830:	0013      	movs	r3, r2
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	189b      	adds	r3, r3, r2
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	18cb      	adds	r3, r1, r3
 800883a:	3304      	adds	r3, #4
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	0018      	movs	r0, r3
 8008840:	f7f8 fcba 	bl	80011b8 <__aeabi_i2f>
 8008844:	1dfb      	adds	r3, r7, #7
 8008846:	781a      	ldrb	r2, [r3, #0]
 8008848:	496a      	ldr	r1, [pc, #424]	@ (80089f4 <_encmt_task_move+0x294>)
 800884a:	0013      	movs	r3, r2
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	189b      	adds	r3, r3, r2
 8008850:	00db      	lsls	r3, r3, #3
 8008852:	585a      	ldr	r2, [r3, r1]
 8008854:	1dfb      	adds	r3, r7, #7
 8008856:	781c      	ldrb	r4, [r3, #0]
 8008858:	1c11      	adds	r1, r2, #0
 800885a:	f7f8 fae9 	bl	8000e30 <__aeabi_fsub>
 800885e:	1c03      	adds	r3, r0, #0
 8008860:	1c19      	adds	r1, r3, #0
 8008862:	4a63      	ldr	r2, [pc, #396]	@ (80089f0 <_encmt_task_move+0x290>)
 8008864:	0023      	movs	r3, r4
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	191b      	adds	r3, r3, r4
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	18d3      	adds	r3, r2, r3
 800886e:	3308      	adds	r3, #8
 8008870:	6019      	str	r1, [r3, #0]
			sEncCtrl[encNum].dirToMove = _e_StMtDir_Right;
 8008872:	1dfb      	adds	r3, r7, #7
 8008874:	781a      	ldrb	r2, [r3, #0]
 8008876:	495e      	ldr	r1, [pc, #376]	@ (80089f0 <_encmt_task_move+0x290>)
 8008878:	0013      	movs	r3, r2
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	189b      	adds	r3, r3, r2
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	18cb      	adds	r3, r1, r3
 8008882:	330c      	adds	r3, #12
 8008884:	2201      	movs	r2, #1
 8008886:	701a      	strb	r2, [r3, #0]
			dir = _e_StMtDir_Right;
 8008888:	2317      	movs	r3, #23
 800888a:	18fb      	adds	r3, r7, r3
 800888c:	2201      	movs	r2, #1
 800888e:	701a      	strb	r2, [r3, #0]
 8008890:	e061      	b.n	8008956 <_encmt_task_move+0x1f6>
		}
		else if( sEncCtrl[encNum].angUser < sEncPosMap[encNum].ang ){
 8008892:	1dfb      	adds	r3, r7, #7
 8008894:	781a      	ldrb	r2, [r3, #0]
 8008896:	4956      	ldr	r1, [pc, #344]	@ (80089f0 <_encmt_task_move+0x290>)
 8008898:	0013      	movs	r3, r2
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	189b      	adds	r3, r3, r2
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	18cb      	adds	r3, r1, r3
 80088a2:	3304      	adds	r3, #4
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	0018      	movs	r0, r3
 80088a8:	f7f8 fc86 	bl	80011b8 <__aeabi_i2f>
 80088ac:	1dfb      	adds	r3, r7, #7
 80088ae:	781a      	ldrb	r2, [r3, #0]
 80088b0:	4950      	ldr	r1, [pc, #320]	@ (80089f4 <_encmt_task_move+0x294>)
 80088b2:	0013      	movs	r3, r2
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	189b      	adds	r3, r3, r2
 80088b8:	00db      	lsls	r3, r3, #3
 80088ba:	585b      	ldr	r3, [r3, r1]
 80088bc:	1c19      	adds	r1, r3, #0
 80088be:	f7f7 fdab 	bl	8000418 <__aeabi_fcmplt>
 80088c2:	1e03      	subs	r3, r0, #0
 80088c4:	d035      	beq.n	8008932 <_encmt_task_move+0x1d2>
			sEncCtrl[encNum].angToMove = sEncPosMap[encNum].ang - sEncCtrl[encNum].angUser;
 80088c6:	1dfb      	adds	r3, r7, #7
 80088c8:	781a      	ldrb	r2, [r3, #0]
 80088ca:	494a      	ldr	r1, [pc, #296]	@ (80089f4 <_encmt_task_move+0x294>)
 80088cc:	0013      	movs	r3, r2
 80088ce:	005b      	lsls	r3, r3, #1
 80088d0:	189b      	adds	r3, r3, r2
 80088d2:	00db      	lsls	r3, r3, #3
 80088d4:	585d      	ldr	r5, [r3, r1]
 80088d6:	1dfb      	adds	r3, r7, #7
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	4945      	ldr	r1, [pc, #276]	@ (80089f0 <_encmt_task_move+0x290>)
 80088dc:	0013      	movs	r3, r2
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	189b      	adds	r3, r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	18cb      	adds	r3, r1, r3
 80088e6:	3304      	adds	r3, #4
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	0018      	movs	r0, r3
 80088ec:	f7f8 fc64 	bl	80011b8 <__aeabi_i2f>
 80088f0:	1c02      	adds	r2, r0, #0
 80088f2:	1dfb      	adds	r3, r7, #7
 80088f4:	781c      	ldrb	r4, [r3, #0]
 80088f6:	1c11      	adds	r1, r2, #0
 80088f8:	1c28      	adds	r0, r5, #0
 80088fa:	f7f8 fa99 	bl	8000e30 <__aeabi_fsub>
 80088fe:	1c03      	adds	r3, r0, #0
 8008900:	1c19      	adds	r1, r3, #0
 8008902:	4a3b      	ldr	r2, [pc, #236]	@ (80089f0 <_encmt_task_move+0x290>)
 8008904:	0023      	movs	r3, r4
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	191b      	adds	r3, r3, r4
 800890a:	00db      	lsls	r3, r3, #3
 800890c:	18d3      	adds	r3, r2, r3
 800890e:	3308      	adds	r3, #8
 8008910:	6019      	str	r1, [r3, #0]
			sEncCtrl[encNum].dirToMove = _e_StMtDir_Left;
 8008912:	1dfb      	adds	r3, r7, #7
 8008914:	781a      	ldrb	r2, [r3, #0]
 8008916:	4936      	ldr	r1, [pc, #216]	@ (80089f0 <_encmt_task_move+0x290>)
 8008918:	0013      	movs	r3, r2
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	189b      	adds	r3, r3, r2
 800891e:	00db      	lsls	r3, r3, #3
 8008920:	18cb      	adds	r3, r1, r3
 8008922:	330c      	adds	r3, #12
 8008924:	2200      	movs	r2, #0
 8008926:	701a      	strb	r2, [r3, #0]
			dir = _e_StMtDir_Left;
 8008928:	2317      	movs	r3, #23
 800892a:	18fb      	adds	r3, r7, r3
 800892c:	2200      	movs	r2, #0
 800892e:	701a      	strb	r2, [r3, #0]
 8008930:	e011      	b.n	8008956 <_encmt_task_move+0x1f6>
		}
		else{
			sEncCtrl[encNum].command = _e_EncCmd_None;
 8008932:	1dfb      	adds	r3, r7, #7
 8008934:	781a      	ldrb	r2, [r3, #0]
 8008936:	492e      	ldr	r1, [pc, #184]	@ (80089f0 <_encmt_task_move+0x290>)
 8008938:	0013      	movs	r3, r2
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	189b      	adds	r3, r3, r2
 800893e:	00db      	lsls	r3, r3, #3
 8008940:	18cb      	adds	r3, r1, r3
 8008942:	3301      	adds	r3, #1
 8008944:	2200      	movs	r2, #0
 8008946:	701a      	strb	r2, [r3, #0]
			sEncMtask[encNum].TASK = _encmt_task_idle;
 8008948:	1dfb      	adds	r3, r7, #7
 800894a:	781a      	ldrb	r2, [r3, #0]
 800894c:	4b2a      	ldr	r3, [pc, #168]	@ (80089f8 <_encmt_task_move+0x298>)
 800894e:	0092      	lsls	r2, r2, #2
 8008950:	492a      	ldr	r1, [pc, #168]	@ (80089fc <_encmt_task_move+0x29c>)
 8008952:	50d1      	str	r1, [r2, r3]
			return;
 8008954:	e2d3      	b.n	8008efe <_encmt_task_move+0x79e>
			sEncCtrl[encNum].accToMove = ( sEncCtrl[encNum].angToMove * accBaseCalc / ENC_MOVE_PARAM_ANG_SPEED_MAX ) + accMinCalc;
		}

		sEncCtrl[encNum].angToMove = sEncCtrl[encNum].angToMove * ENC_MOVE_PARAM_CORRECTION_PERCENT;
*/
		if( sEncCtrl[encNum].angToMove > sEncMoveParam[dir].param[_e_EncMoveParam_AngSpeedMax] ){
 8008956:	1dfb      	adds	r3, r7, #7
 8008958:	781a      	ldrb	r2, [r3, #0]
 800895a:	4925      	ldr	r1, [pc, #148]	@ (80089f0 <_encmt_task_move+0x290>)
 800895c:	0013      	movs	r3, r2
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	189b      	adds	r3, r3, r2
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	18cb      	adds	r3, r1, r3
 8008966:	3308      	adds	r3, #8
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	2517      	movs	r5, #23
 800896c:	197b      	adds	r3, r7, r5
 800896e:	781a      	ldrb	r2, [r3, #0]
 8008970:	4923      	ldr	r1, [pc, #140]	@ (8008a00 <_encmt_task_move+0x2a0>)
 8008972:	0013      	movs	r3, r2
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	189b      	adds	r3, r3, r2
 8008978:	00db      	lsls	r3, r3, #3
 800897a:	18cb      	adds	r3, r1, r3
 800897c:	3308      	adds	r3, #8
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	1c19      	adds	r1, r3, #0
 8008982:	f7f7 fd5d 	bl	8000440 <__aeabi_fcmpgt>
 8008986:	1e03      	subs	r3, r0, #0
 8008988:	d03c      	beq.n	8008a04 <_encmt_task_move+0x2a4>
			sEncCtrl[encNum].spdToMove = sEncMoveParam[dir].param[_e_EncMoveParam_SpeedMax];
 800898a:	197b      	adds	r3, r7, r5
 800898c:	781a      	ldrb	r2, [r3, #0]
 800898e:	491c      	ldr	r1, [pc, #112]	@ (8008a00 <_encmt_task_move+0x2a0>)
 8008990:	0013      	movs	r3, r2
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	189b      	adds	r3, r3, r2
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	585a      	ldr	r2, [r3, r1]
 800899a:	1dfb      	adds	r3, r7, #7
 800899c:	781c      	ldrb	r4, [r3, #0]
 800899e:	1c10      	adds	r0, r2, #0
 80089a0:	f7f7 fd62 	bl	8000468 <__aeabi_f2uiz>
 80089a4:	0003      	movs	r3, r0
 80089a6:	b299      	uxth	r1, r3
 80089a8:	4a11      	ldr	r2, [pc, #68]	@ (80089f0 <_encmt_task_move+0x290>)
 80089aa:	0023      	movs	r3, r4
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	191b      	adds	r3, r3, r4
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	18d3      	adds	r3, r2, r3
 80089b4:	330e      	adds	r3, #14
 80089b6:	1c0a      	adds	r2, r1, #0
 80089b8:	801a      	strh	r2, [r3, #0]
			sEncCtrl[encNum].accToMove = sEncMoveParam[dir].param[_e_EncMoveParam_AccMax];
 80089ba:	197b      	adds	r3, r7, r5
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	4910      	ldr	r1, [pc, #64]	@ (8008a00 <_encmt_task_move+0x2a0>)
 80089c0:	0013      	movs	r3, r2
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	189b      	adds	r3, r3, r2
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	18cb      	adds	r3, r1, r3
 80089ca:	3304      	adds	r3, #4
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	1dfb      	adds	r3, r7, #7
 80089d0:	781c      	ldrb	r4, [r3, #0]
 80089d2:	1c10      	adds	r0, r2, #0
 80089d4:	f7f7 fd48 	bl	8000468 <__aeabi_f2uiz>
 80089d8:	0003      	movs	r3, r0
 80089da:	b299      	uxth	r1, r3
 80089dc:	4a04      	ldr	r2, [pc, #16]	@ (80089f0 <_encmt_task_move+0x290>)
 80089de:	0023      	movs	r3, r4
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	191b      	adds	r3, r3, r4
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	18d3      	adds	r3, r2, r3
 80089e8:	3312      	adds	r3, #18
 80089ea:	1c0a      	adds	r2, r1, #0
 80089ec:	801a      	strh	r2, [r3, #0]
 80089ee:	e13a      	b.n	8008c66 <_encmt_task_move+0x506>
 80089f0:	2000015c 	.word	0x2000015c
 80089f4:	20000118 	.word	0x20000118
 80089f8:	2000018c 	.word	0x2000018c
 80089fc:	080084bd 	.word	0x080084bd
 8008a00:	0800fe30 	.word	0x0800fe30
		}
		else{
			uint16_t speedMinCalc = sEncMoveParam[dir].param[_e_EncMoveParam_SpeedMax] * sEncMoveParam[dir].param[_e_EncMoveParam_RampSpeedMin];
 8008a04:	2517      	movs	r5, #23
 8008a06:	197b      	adds	r3, r7, r5
 8008a08:	781a      	ldrb	r2, [r3, #0]
 8008a0a:	49d3      	ldr	r1, [pc, #844]	@ (8008d58 <_encmt_task_move+0x5f8>)
 8008a0c:	0013      	movs	r3, r2
 8008a0e:	005b      	lsls	r3, r3, #1
 8008a10:	189b      	adds	r3, r3, r2
 8008a12:	00db      	lsls	r3, r3, #3
 8008a14:	5858      	ldr	r0, [r3, r1]
 8008a16:	197b      	adds	r3, r7, r5
 8008a18:	781a      	ldrb	r2, [r3, #0]
 8008a1a:	49cf      	ldr	r1, [pc, #828]	@ (8008d58 <_encmt_task_move+0x5f8>)
 8008a1c:	0013      	movs	r3, r2
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	189b      	adds	r3, r3, r2
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	18cb      	adds	r3, r1, r3
 8008a26:	330c      	adds	r3, #12
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	1c19      	adds	r1, r3, #0
 8008a2c:	f7f8 f8c2 	bl	8000bb4 <__aeabi_fmul>
 8008a30:	1c03      	adds	r3, r0, #0
 8008a32:	2614      	movs	r6, #20
 8008a34:	19bc      	adds	r4, r7, r6
 8008a36:	1c18      	adds	r0, r3, #0
 8008a38:	f7f7 fd16 	bl	8000468 <__aeabi_f2uiz>
 8008a3c:	0003      	movs	r3, r0
 8008a3e:	8023      	strh	r3, [r4, #0]
			uint16_t speedBaseCalc = sEncMoveParam[dir].param[_e_EncMoveParam_SpeedMax] - speedMinCalc;
 8008a40:	197b      	adds	r3, r7, r5
 8008a42:	781a      	ldrb	r2, [r3, #0]
 8008a44:	49c4      	ldr	r1, [pc, #784]	@ (8008d58 <_encmt_task_move+0x5f8>)
 8008a46:	0013      	movs	r3, r2
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	189b      	adds	r3, r3, r2
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	585c      	ldr	r4, [r3, r1]
 8008a50:	19bb      	adds	r3, r7, r6
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	0018      	movs	r0, r3
 8008a56:	f7f8 fbaf 	bl	80011b8 <__aeabi_i2f>
 8008a5a:	1c03      	adds	r3, r0, #0
 8008a5c:	1c19      	adds	r1, r3, #0
 8008a5e:	1c20      	adds	r0, r4, #0
 8008a60:	f7f8 f9e6 	bl	8000e30 <__aeabi_fsub>
 8008a64:	1c03      	adds	r3, r0, #0
 8008a66:	2212      	movs	r2, #18
 8008a68:	18bc      	adds	r4, r7, r2
 8008a6a:	1c18      	adds	r0, r3, #0
 8008a6c:	f7f7 fcfc 	bl	8000468 <__aeabi_f2uiz>
 8008a70:	0003      	movs	r3, r0
 8008a72:	8023      	strh	r3, [r4, #0]
			sEncCtrl[encNum].spdToMove = ( sEncCtrl[encNum].angToMove * speedBaseCalc / sEncMoveParam[dir].param[_e_EncMoveParam_AngSpeedMax] ) + speedMinCalc;
 8008a74:	1dfb      	adds	r3, r7, #7
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	49b8      	ldr	r1, [pc, #736]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008a7a:	0013      	movs	r3, r2
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	189b      	adds	r3, r3, r2
 8008a80:	00db      	lsls	r3, r3, #3
 8008a82:	18cb      	adds	r3, r1, r3
 8008a84:	3308      	adds	r3, #8
 8008a86:	681c      	ldr	r4, [r3, #0]
 8008a88:	2212      	movs	r2, #18
 8008a8a:	18bb      	adds	r3, r7, r2
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	0018      	movs	r0, r3
 8008a90:	f7f8 fb92 	bl	80011b8 <__aeabi_i2f>
 8008a94:	1c03      	adds	r3, r0, #0
 8008a96:	1c19      	adds	r1, r3, #0
 8008a98:	1c20      	adds	r0, r4, #0
 8008a9a:	f7f8 f88b 	bl	8000bb4 <__aeabi_fmul>
 8008a9e:	1c03      	adds	r3, r0, #0
 8008aa0:	1c18      	adds	r0, r3, #0
 8008aa2:	197b      	adds	r3, r7, r5
 8008aa4:	781a      	ldrb	r2, [r3, #0]
 8008aa6:	49ac      	ldr	r1, [pc, #688]	@ (8008d58 <_encmt_task_move+0x5f8>)
 8008aa8:	0013      	movs	r3, r2
 8008aaa:	005b      	lsls	r3, r3, #1
 8008aac:	189b      	adds	r3, r3, r2
 8008aae:	00db      	lsls	r3, r3, #3
 8008ab0:	18cb      	adds	r3, r1, r3
 8008ab2:	3308      	adds	r3, #8
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	1c19      	adds	r1, r3, #0
 8008ab8:	f7f7 fe96 	bl	80007e8 <__aeabi_fdiv>
 8008abc:	1c03      	adds	r3, r0, #0
 8008abe:	1c1c      	adds	r4, r3, #0
 8008ac0:	19bb      	adds	r3, r7, r6
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	f7f8 fb77 	bl	80011b8 <__aeabi_i2f>
 8008aca:	1c03      	adds	r3, r0, #0
 8008acc:	1c19      	adds	r1, r3, #0
 8008ace:	1c20      	adds	r0, r4, #0
 8008ad0:	f7f7 fd00 	bl	80004d4 <__aeabi_fadd>
 8008ad4:	1c03      	adds	r3, r0, #0
 8008ad6:	1c1a      	adds	r2, r3, #0
 8008ad8:	1dfb      	adds	r3, r7, #7
 8008ada:	781c      	ldrb	r4, [r3, #0]
 8008adc:	1c10      	adds	r0, r2, #0
 8008ade:	f7f7 fcc3 	bl	8000468 <__aeabi_f2uiz>
 8008ae2:	0003      	movs	r3, r0
 8008ae4:	b299      	uxth	r1, r3
 8008ae6:	4a9d      	ldr	r2, [pc, #628]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008ae8:	0023      	movs	r3, r4
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	191b      	adds	r3, r3, r4
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	18d3      	adds	r3, r2, r3
 8008af2:	330e      	adds	r3, #14
 8008af4:	1c0a      	adds	r2, r1, #0
 8008af6:	801a      	strh	r2, [r3, #0]

			uint16_t	accMinCalc = sEncMoveParam[dir].param[_e_EncMoveParam_AccMax] * sEncMoveParam[dir].param[_e_EncMoveParam_RampAccMin];
 8008af8:	197b      	adds	r3, r7, r5
 8008afa:	781a      	ldrb	r2, [r3, #0]
 8008afc:	4996      	ldr	r1, [pc, #600]	@ (8008d58 <_encmt_task_move+0x5f8>)
 8008afe:	0013      	movs	r3, r2
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	189b      	adds	r3, r3, r2
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	18cb      	adds	r3, r1, r3
 8008b08:	3304      	adds	r3, #4
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	197b      	adds	r3, r7, r5
 8008b0e:	781a      	ldrb	r2, [r3, #0]
 8008b10:	4991      	ldr	r1, [pc, #580]	@ (8008d58 <_encmt_task_move+0x5f8>)
 8008b12:	0013      	movs	r3, r2
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	189b      	adds	r3, r3, r2
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	18cb      	adds	r3, r1, r3
 8008b1c:	3310      	adds	r3, #16
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	1c19      	adds	r1, r3, #0
 8008b22:	f7f8 f847 	bl	8000bb4 <__aeabi_fmul>
 8008b26:	1c03      	adds	r3, r0, #0
 8008b28:	2610      	movs	r6, #16
 8008b2a:	19bc      	adds	r4, r7, r6
 8008b2c:	1c18      	adds	r0, r3, #0
 8008b2e:	f7f7 fc9b 	bl	8000468 <__aeabi_f2uiz>
 8008b32:	0003      	movs	r3, r0
 8008b34:	8023      	strh	r3, [r4, #0]
			uint16_t	accBaseCalc = sEncMoveParam[dir].param[_e_EncMoveParam_AccMax] - accMinCalc;
 8008b36:	197b      	adds	r3, r7, r5
 8008b38:	781a      	ldrb	r2, [r3, #0]
 8008b3a:	4987      	ldr	r1, [pc, #540]	@ (8008d58 <_encmt_task_move+0x5f8>)
 8008b3c:	0013      	movs	r3, r2
 8008b3e:	005b      	lsls	r3, r3, #1
 8008b40:	189b      	adds	r3, r3, r2
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	18cb      	adds	r3, r1, r3
 8008b46:	3304      	adds	r3, #4
 8008b48:	681c      	ldr	r4, [r3, #0]
 8008b4a:	19bb      	adds	r3, r7, r6
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	0018      	movs	r0, r3
 8008b50:	f7f8 fb32 	bl	80011b8 <__aeabi_i2f>
 8008b54:	1c03      	adds	r3, r0, #0
 8008b56:	1c19      	adds	r1, r3, #0
 8008b58:	1c20      	adds	r0, r4, #0
 8008b5a:	f7f8 f969 	bl	8000e30 <__aeabi_fsub>
 8008b5e:	1c03      	adds	r3, r0, #0
 8008b60:	220e      	movs	r2, #14
 8008b62:	18bc      	adds	r4, r7, r2
 8008b64:	1c18      	adds	r0, r3, #0
 8008b66:	f7f7 fc7f 	bl	8000468 <__aeabi_f2uiz>
 8008b6a:	0003      	movs	r3, r0
 8008b6c:	8023      	strh	r3, [r4, #0]
			sEncCtrl[encNum].accToMove = ( sEncCtrl[encNum].angToMove * accBaseCalc / sEncMoveParam[dir].param[_e_EncMoveParam_AngSpeedMax] ) + accMinCalc;
 8008b6e:	1dfb      	adds	r3, r7, #7
 8008b70:	781a      	ldrb	r2, [r3, #0]
 8008b72:	497a      	ldr	r1, [pc, #488]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008b74:	0013      	movs	r3, r2
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	189b      	adds	r3, r3, r2
 8008b7a:	00db      	lsls	r3, r3, #3
 8008b7c:	18cb      	adds	r3, r1, r3
 8008b7e:	3308      	adds	r3, #8
 8008b80:	681c      	ldr	r4, [r3, #0]
 8008b82:	220e      	movs	r2, #14
 8008b84:	18bb      	adds	r3, r7, r2
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	0018      	movs	r0, r3
 8008b8a:	f7f8 fb15 	bl	80011b8 <__aeabi_i2f>
 8008b8e:	1c03      	adds	r3, r0, #0
 8008b90:	1c19      	adds	r1, r3, #0
 8008b92:	1c20      	adds	r0, r4, #0
 8008b94:	f7f8 f80e 	bl	8000bb4 <__aeabi_fmul>
 8008b98:	1c03      	adds	r3, r0, #0
 8008b9a:	1c18      	adds	r0, r3, #0
 8008b9c:	197b      	adds	r3, r7, r5
 8008b9e:	781a      	ldrb	r2, [r3, #0]
 8008ba0:	496d      	ldr	r1, [pc, #436]	@ (8008d58 <_encmt_task_move+0x5f8>)
 8008ba2:	0013      	movs	r3, r2
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	189b      	adds	r3, r3, r2
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	18cb      	adds	r3, r1, r3
 8008bac:	3308      	adds	r3, #8
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	1c19      	adds	r1, r3, #0
 8008bb2:	f7f7 fe19 	bl	80007e8 <__aeabi_fdiv>
 8008bb6:	1c03      	adds	r3, r0, #0
 8008bb8:	1c1c      	adds	r4, r3, #0
 8008bba:	19bb      	adds	r3, r7, r6
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f7f8 fafa 	bl	80011b8 <__aeabi_i2f>
 8008bc4:	1c03      	adds	r3, r0, #0
 8008bc6:	1c19      	adds	r1, r3, #0
 8008bc8:	1c20      	adds	r0, r4, #0
 8008bca:	f7f7 fc83 	bl	80004d4 <__aeabi_fadd>
 8008bce:	1c03      	adds	r3, r0, #0
 8008bd0:	1c1a      	adds	r2, r3, #0
 8008bd2:	1dfb      	adds	r3, r7, #7
 8008bd4:	781c      	ldrb	r4, [r3, #0]
 8008bd6:	1c10      	adds	r0, r2, #0
 8008bd8:	f7f7 fc46 	bl	8000468 <__aeabi_f2uiz>
 8008bdc:	0003      	movs	r3, r0
 8008bde:	b299      	uxth	r1, r3
 8008be0:	4a5e      	ldr	r2, [pc, #376]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008be2:	0023      	movs	r3, r4
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	191b      	adds	r3, r3, r4
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	18d3      	adds	r3, r2, r3
 8008bec:	3312      	adds	r3, #18
 8008bee:	1c0a      	adds	r2, r1, #0
 8008bf0:	801a      	strh	r2, [r3, #0]

			uint16_t startSpeedDelta = STPMT_MT_SPEED_INI_MAX - STPMT_MT_SPEED_INI_MIN;
 8008bf2:	200c      	movs	r0, #12
 8008bf4:	183b      	adds	r3, r7, r0
 8008bf6:	22c8      	movs	r2, #200	@ 0xc8
 8008bf8:	0052      	lsls	r2, r2, #1
 8008bfa:	801a      	strh	r2, [r3, #0]
			sEncCtrl[encNum].spsToMove = sEncCtrl[encNum].angToMove * startSpeedDelta / sEncMoveParam[dir].param[_e_EncMoveParam_AngSpeedMax];
 8008bfc:	1dfb      	adds	r3, r7, #7
 8008bfe:	781a      	ldrb	r2, [r3, #0]
 8008c00:	4956      	ldr	r1, [pc, #344]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008c02:	0013      	movs	r3, r2
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	189b      	adds	r3, r3, r2
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	18cb      	adds	r3, r1, r3
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	681c      	ldr	r4, [r3, #0]
 8008c10:	183b      	adds	r3, r7, r0
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	0018      	movs	r0, r3
 8008c16:	f7f8 facf 	bl	80011b8 <__aeabi_i2f>
 8008c1a:	1c03      	adds	r3, r0, #0
 8008c1c:	1c19      	adds	r1, r3, #0
 8008c1e:	1c20      	adds	r0, r4, #0
 8008c20:	f7f7 ffc8 	bl	8000bb4 <__aeabi_fmul>
 8008c24:	1c03      	adds	r3, r0, #0
 8008c26:	1c18      	adds	r0, r3, #0
 8008c28:	197b      	adds	r3, r7, r5
 8008c2a:	781a      	ldrb	r2, [r3, #0]
 8008c2c:	494a      	ldr	r1, [pc, #296]	@ (8008d58 <_encmt_task_move+0x5f8>)
 8008c2e:	0013      	movs	r3, r2
 8008c30:	005b      	lsls	r3, r3, #1
 8008c32:	189b      	adds	r3, r3, r2
 8008c34:	00db      	lsls	r3, r3, #3
 8008c36:	18cb      	adds	r3, r1, r3
 8008c38:	3308      	adds	r3, #8
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	1c19      	adds	r1, r3, #0
 8008c3e:	f7f7 fdd3 	bl	80007e8 <__aeabi_fdiv>
 8008c42:	1c03      	adds	r3, r0, #0
 8008c44:	1c1a      	adds	r2, r3, #0
 8008c46:	1dfb      	adds	r3, r7, #7
 8008c48:	781c      	ldrb	r4, [r3, #0]
 8008c4a:	1c10      	adds	r0, r2, #0
 8008c4c:	f7f7 fc0c 	bl	8000468 <__aeabi_f2uiz>
 8008c50:	0003      	movs	r3, r0
 8008c52:	b299      	uxth	r1, r3
 8008c54:	4a41      	ldr	r2, [pc, #260]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008c56:	0023      	movs	r3, r4
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	191b      	adds	r3, r3, r4
 8008c5c:	00db      	lsls	r3, r3, #3
 8008c5e:	18d3      	adds	r3, r2, r3
 8008c60:	3310      	adds	r3, #16
 8008c62:	1c0a      	adds	r2, r1, #0
 8008c64:	801a      	strh	r2, [r3, #0]
		}

		sEncCtrl[encNum].angToMove = sEncCtrl[encNum].angToMove * sEncMoveParam[dir].param[_e_EncMoveParam_CorrectPer];
 8008c66:	1dfb      	adds	r3, r7, #7
 8008c68:	781a      	ldrb	r2, [r3, #0]
 8008c6a:	493c      	ldr	r1, [pc, #240]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008c6c:	0013      	movs	r3, r2
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	189b      	adds	r3, r3, r2
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	18cb      	adds	r3, r1, r3
 8008c76:	3308      	adds	r3, #8
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	2317      	movs	r3, #23
 8008c7c:	18fb      	adds	r3, r7, r3
 8008c7e:	781a      	ldrb	r2, [r3, #0]
 8008c80:	4935      	ldr	r1, [pc, #212]	@ (8008d58 <_encmt_task_move+0x5f8>)
 8008c82:	0013      	movs	r3, r2
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	189b      	adds	r3, r3, r2
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	18cb      	adds	r3, r1, r3
 8008c8c:	3314      	adds	r3, #20
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	1dfb      	adds	r3, r7, #7
 8008c92:	781c      	ldrb	r4, [r3, #0]
 8008c94:	1c11      	adds	r1, r2, #0
 8008c96:	f7f7 ff8d 	bl	8000bb4 <__aeabi_fmul>
 8008c9a:	1c03      	adds	r3, r0, #0
 8008c9c:	1c19      	adds	r1, r3, #0
 8008c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008ca0:	0023      	movs	r3, r4
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	191b      	adds	r3, r3, r4
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	18d3      	adds	r3, r2, r3
 8008caa:	3308      	adds	r3, #8
 8008cac:	6019      	str	r1, [r3, #0]

		StepMotor_GO( 	(tStpMtNum)encNum ,
 8008cae:	1dfb      	adds	r3, r7, #7
 8008cb0:	781a      	ldrb	r2, [r3, #0]
 8008cb2:	492a      	ldr	r1, [pc, #168]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008cb4:	0013      	movs	r3, r2
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	189b      	adds	r3, r3, r2
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	18cb      	adds	r3, r1, r3
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	781c      	ldrb	r4, [r3, #0]
 8008cc2:	1dfb      	adds	r3, r7, #7
 8008cc4:	781a      	ldrb	r2, [r3, #0]
 8008cc6:	4925      	ldr	r1, [pc, #148]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008cc8:	0013      	movs	r3, r2
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	189b      	adds	r3, r3, r2
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	18cb      	adds	r3, r1, r3
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	681d      	ldr	r5, [r3, #0]
 8008cd6:	1dfb      	adds	r3, r7, #7
 8008cd8:	781a      	ldrb	r2, [r3, #0]
 8008cda:	4920      	ldr	r1, [pc, #128]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008cdc:	0013      	movs	r3, r2
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	189b      	adds	r3, r3, r2
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	18cb      	adds	r3, r1, r3
 8008ce6:	330e      	adds	r3, #14
 8008ce8:	881e      	ldrh	r6, [r3, #0]
						sEncCtrl[encNum].dirToMove ,
						sEncCtrl[encNum].angToMove ,
						sEncCtrl[encNum].spdToMove ,
						sEncCtrl[encNum].accToMove ,
 8008cea:	1dfb      	adds	r3, r7, #7
 8008cec:	781a      	ldrb	r2, [r3, #0]
 8008cee:	491b      	ldr	r1, [pc, #108]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008cf0:	0013      	movs	r3, r2
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	189b      	adds	r3, r3, r2
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	18cb      	adds	r3, r1, r3
 8008cfa:	3312      	adds	r3, #18
 8008cfc:	881b      	ldrh	r3, [r3, #0]
		StepMotor_GO( 	(tStpMtNum)encNum ,
 8008cfe:	b2d9      	uxtb	r1, r3
 8008d00:	1dfb      	adds	r3, r7, #7
 8008d02:	781a      	ldrb	r2, [r3, #0]
 8008d04:	4815      	ldr	r0, [pc, #84]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008d06:	0013      	movs	r3, r2
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	189b      	adds	r3, r3, r2
 8008d0c:	00db      	lsls	r3, r3, #3
 8008d0e:	18c3      	adds	r3, r0, r3
 8008d10:	3310      	adds	r3, #16
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	1dfa      	adds	r2, r7, #7
 8008d16:	7810      	ldrb	r0, [r2, #0]
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	9100      	str	r1, [sp, #0]
 8008d1c:	0033      	movs	r3, r6
 8008d1e:	1c2a      	adds	r2, r5, #0
 8008d20:	0021      	movs	r1, r4
 8008d22:	f004 fbcf 	bl	800d4c4 <StepMotor_GO>
						sEncCtrl[encNum].spsToMove );

		TaskManager_Step_Inc(ENCMTASK);
 8008d26:	2316      	movs	r3, #22
 8008d28:	18fb      	adds	r3, r7, r3
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	f004 fe05 	bl	800d93c <TaskManager_Step_Inc>
		break;
 8008d32:	e0e4      	b.n	8008efe <_encmt_task_move+0x79e>

	case 1://zera comando
		sEncCtrl[encNum].command = _e_EncCmd_None;
 8008d34:	1dfb      	adds	r3, r7, #7
 8008d36:	781a      	ldrb	r2, [r3, #0]
 8008d38:	4908      	ldr	r1, [pc, #32]	@ (8008d5c <_encmt_task_move+0x5fc>)
 8008d3a:	0013      	movs	r3, r2
 8008d3c:	005b      	lsls	r3, r3, #1
 8008d3e:	189b      	adds	r3, r3, r2
 8008d40:	00db      	lsls	r3, r3, #3
 8008d42:	18cb      	adds	r3, r1, r3
 8008d44:	3301      	adds	r3, #1
 8008d46:	2200      	movs	r2, #0
 8008d48:	701a      	strb	r2, [r3, #0]
		TaskManager_Step_Inc(ENCMTASK);
 8008d4a:	2316      	movs	r3, #22
 8008d4c:	18fb      	adds	r3, r7, r3
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	0018      	movs	r0, r3
 8008d52:	f004 fdf3 	bl	800d93c <TaskManager_Step_Inc>
		break;
 8008d56:	e0d2      	b.n	8008efe <_encmt_task_move+0x79e>
 8008d58:	0800fe30 	.word	0x0800fe30
 8008d5c:	2000015c 	.word	0x2000015c
			StepMotor_STOP((tStpMtNum)encNum);
		}
		*/

		//Verifica motor
		if( StepMotor_GetSts( (tStpMtNum)encNum ) != _e_StpMtSts_Stop )
 8008d60:	1dfb      	adds	r3, r7, #7
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	0018      	movs	r0, r3
 8008d66:	f004 fb97 	bl	800d498 <StepMotor_GetSts>
 8008d6a:	1e03      	subs	r3, r0, #0
 8008d6c:	d100      	bne.n	8008d70 <_encmt_task_move+0x610>
 8008d6e:	e0a3      	b.n	8008eb8 <_encmt_task_move+0x758>
		{
			if( sEncCtrl[encNum].dirToMove == _e_StMtDir_Right )
 8008d70:	1dfb      	adds	r3, r7, #7
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	4963      	ldr	r1, [pc, #396]	@ (8008f04 <_encmt_task_move+0x7a4>)
 8008d76:	0013      	movs	r3, r2
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	189b      	adds	r3, r3, r2
 8008d7c:	00db      	lsls	r3, r3, #3
 8008d7e:	18cb      	adds	r3, r1, r3
 8008d80:	330c      	adds	r3, #12
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d145      	bne.n	8008e14 <_encmt_task_move+0x6b4>
			{
				if(/* sEncPosMap[encNum].ang > ENC_ANG_MAX ||*/ sEncPosMap[encNum].ang >= sEncCtrl[encNum].angUser || sEncPosMap[encNum].ang >= sEncCalib[encNum].angMax ){
 8008d88:	1dfb      	adds	r3, r7, #7
 8008d8a:	781a      	ldrb	r2, [r3, #0]
 8008d8c:	495e      	ldr	r1, [pc, #376]	@ (8008f08 <_encmt_task_move+0x7a8>)
 8008d8e:	0013      	movs	r3, r2
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	189b      	adds	r3, r3, r2
 8008d94:	00db      	lsls	r3, r3, #3
 8008d96:	585c      	ldr	r4, [r3, r1]
 8008d98:	1dfb      	adds	r3, r7, #7
 8008d9a:	781a      	ldrb	r2, [r3, #0]
 8008d9c:	4959      	ldr	r1, [pc, #356]	@ (8008f04 <_encmt_task_move+0x7a4>)
 8008d9e:	0013      	movs	r3, r2
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	189b      	adds	r3, r3, r2
 8008da4:	00db      	lsls	r3, r3, #3
 8008da6:	18cb      	adds	r3, r1, r3
 8008da8:	3304      	adds	r3, #4
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	0018      	movs	r0, r3
 8008dae:	f7f8 fa03 	bl	80011b8 <__aeabi_i2f>
 8008db2:	1c03      	adds	r3, r0, #0
 8008db4:	1c19      	adds	r1, r3, #0
 8008db6:	1c20      	adds	r0, r4, #0
 8008db8:	f7f7 fb4c 	bl	8000454 <__aeabi_fcmpge>
 8008dbc:	1e03      	subs	r3, r0, #0
 8008dbe:	d117      	bne.n	8008df0 <_encmt_task_move+0x690>
 8008dc0:	1dfb      	adds	r3, r7, #7
 8008dc2:	781a      	ldrb	r2, [r3, #0]
 8008dc4:	4950      	ldr	r1, [pc, #320]	@ (8008f08 <_encmt_task_move+0x7a8>)
 8008dc6:	0013      	movs	r3, r2
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	189b      	adds	r3, r3, r2
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	5858      	ldr	r0, [r3, r1]
 8008dd0:	1dfb      	adds	r3, r7, #7
 8008dd2:	781a      	ldrb	r2, [r3, #0]
 8008dd4:	494d      	ldr	r1, [pc, #308]	@ (8008f0c <_encmt_task_move+0x7ac>)
 8008dd6:	0013      	movs	r3, r2
 8008dd8:	00db      	lsls	r3, r3, #3
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	00db      	lsls	r3, r3, #3
 8008dde:	18cb      	adds	r3, r1, r3
 8008de0:	3334      	adds	r3, #52	@ 0x34
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	1c19      	adds	r1, r3, #0
 8008de6:	f7f7 fb35 	bl	8000454 <__aeabi_fcmpge>
 8008dea:	1e03      	subs	r3, r0, #0
 8008dec:	d100      	bne.n	8008df0 <_encmt_task_move+0x690>
			}
		}
		else{
			TaskManager_Step_Set( ENCMTASK, 5 );
		}
		break;
 8008dee:	e085      	b.n	8008efc <_encmt_task_move+0x79c>
					StepMotor_STOP((tStpMtNum)encNum);
 8008df0:	1dfb      	adds	r3, r7, #7
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	0018      	movs	r0, r3
 8008df6:	f004 fbe1 	bl	800d5bc <StepMotor_STOP>
					_enc_stop_mode(encNum);
 8008dfa:	1dfb      	adds	r3, r7, #7
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	0018      	movs	r0, r3
 8008e00:	f7fe fe76 	bl	8007af0 <_enc_stop_mode>
					TaskManager_Step_Set( ENCMTASK, 5 );
 8008e04:	2316      	movs	r3, #22
 8008e06:	18fb      	adds	r3, r7, r3
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	2105      	movs	r1, #5
 8008e0c:	0018      	movs	r0, r3
 8008e0e:	f004 fd47 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8008e12:	e073      	b.n	8008efc <_encmt_task_move+0x79c>
			else if( sEncCtrl[encNum].dirToMove == _e_StMtDir_Left )
 8008e14:	1dfb      	adds	r3, r7, #7
 8008e16:	781a      	ldrb	r2, [r3, #0]
 8008e18:	493a      	ldr	r1, [pc, #232]	@ (8008f04 <_encmt_task_move+0x7a4>)
 8008e1a:	0013      	movs	r3, r2
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	189b      	adds	r3, r3, r2
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	18cb      	adds	r3, r1, r3
 8008e24:	330c      	adds	r3, #12
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d167      	bne.n	8008efc <_encmt_task_move+0x79c>
				if(/* sEncPosMap[encNum].ang < ENC_ANG_MIN ||*/ sEncPosMap[encNum].ang <= sEncCtrl[encNum].angUser || sEncPosMap[encNum].ang <= sEncCalib[encNum].angMin ){
 8008e2c:	1dfb      	adds	r3, r7, #7
 8008e2e:	781a      	ldrb	r2, [r3, #0]
 8008e30:	4935      	ldr	r1, [pc, #212]	@ (8008f08 <_encmt_task_move+0x7a8>)
 8008e32:	0013      	movs	r3, r2
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	189b      	adds	r3, r3, r2
 8008e38:	00db      	lsls	r3, r3, #3
 8008e3a:	585c      	ldr	r4, [r3, r1]
 8008e3c:	1dfb      	adds	r3, r7, #7
 8008e3e:	781a      	ldrb	r2, [r3, #0]
 8008e40:	4930      	ldr	r1, [pc, #192]	@ (8008f04 <_encmt_task_move+0x7a4>)
 8008e42:	0013      	movs	r3, r2
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	189b      	adds	r3, r3, r2
 8008e48:	00db      	lsls	r3, r3, #3
 8008e4a:	18cb      	adds	r3, r1, r3
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	0018      	movs	r0, r3
 8008e52:	f7f8 f9b1 	bl	80011b8 <__aeabi_i2f>
 8008e56:	1c03      	adds	r3, r0, #0
 8008e58:	1c19      	adds	r1, r3, #0
 8008e5a:	1c20      	adds	r0, r4, #0
 8008e5c:	f7f7 fae6 	bl	800042c <__aeabi_fcmple>
 8008e60:	1e03      	subs	r3, r0, #0
 8008e62:	d117      	bne.n	8008e94 <_encmt_task_move+0x734>
 8008e64:	1dfb      	adds	r3, r7, #7
 8008e66:	781a      	ldrb	r2, [r3, #0]
 8008e68:	4927      	ldr	r1, [pc, #156]	@ (8008f08 <_encmt_task_move+0x7a8>)
 8008e6a:	0013      	movs	r3, r2
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	189b      	adds	r3, r3, r2
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	5858      	ldr	r0, [r3, r1]
 8008e74:	1dfb      	adds	r3, r7, #7
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	4924      	ldr	r1, [pc, #144]	@ (8008f0c <_encmt_task_move+0x7ac>)
 8008e7a:	0013      	movs	r3, r2
 8008e7c:	00db      	lsls	r3, r3, #3
 8008e7e:	1a9b      	subs	r3, r3, r2
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	18cb      	adds	r3, r1, r3
 8008e84:	3330      	adds	r3, #48	@ 0x30
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	1c19      	adds	r1, r3, #0
 8008e8a:	f7f7 facf 	bl	800042c <__aeabi_fcmple>
 8008e8e:	1e03      	subs	r3, r0, #0
 8008e90:	d100      	bne.n	8008e94 <_encmt_task_move+0x734>
		break;
 8008e92:	e033      	b.n	8008efc <_encmt_task_move+0x79c>
					StepMotor_STOP((tStpMtNum)encNum);
 8008e94:	1dfb      	adds	r3, r7, #7
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	0018      	movs	r0, r3
 8008e9a:	f004 fb8f 	bl	800d5bc <StepMotor_STOP>
					_enc_stop_mode(encNum);
 8008e9e:	1dfb      	adds	r3, r7, #7
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f7fe fe24 	bl	8007af0 <_enc_stop_mode>
					TaskManager_Step_Set( ENCMTASK, 5 );
 8008ea8:	2316      	movs	r3, #22
 8008eaa:	18fb      	adds	r3, r7, r3
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	2105      	movs	r1, #5
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f004 fcf5 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8008eb6:	e021      	b.n	8008efc <_encmt_task_move+0x79c>
			TaskManager_Step_Set( ENCMTASK, 5 );
 8008eb8:	2316      	movs	r3, #22
 8008eba:	18fb      	adds	r3, r7, r3
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2105      	movs	r1, #5
 8008ec0:	0018      	movs	r0, r3
 8008ec2:	f004 fced 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8008ec6:	e019      	b.n	8008efc <_encmt_task_move+0x79c>

	case 5:
		sEncCtrl[encNum].command = _e_EncCmd_None;
 8008ec8:	1dfb      	adds	r3, r7, #7
 8008eca:	781a      	ldrb	r2, [r3, #0]
 8008ecc:	490d      	ldr	r1, [pc, #52]	@ (8008f04 <_encmt_task_move+0x7a4>)
 8008ece:	0013      	movs	r3, r2
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	189b      	adds	r3, r3, r2
 8008ed4:	00db      	lsls	r3, r3, #3
 8008ed6:	18cb      	adds	r3, r1, r3
 8008ed8:	3301      	adds	r3, #1
 8008eda:	2200      	movs	r2, #0
 8008edc:	701a      	strb	r2, [r3, #0]
		sEncMtask[encNum].TASK = _encmt_task_idle;
 8008ede:	1dfb      	adds	r3, r7, #7
 8008ee0:	781a      	ldrb	r2, [r3, #0]
 8008ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f10 <_encmt_task_move+0x7b0>)
 8008ee4:	0092      	lsls	r2, r2, #2
 8008ee6:	490b      	ldr	r1, [pc, #44]	@ (8008f14 <_encmt_task_move+0x7b4>)
 8008ee8:	50d1      	str	r1, [r2, r3]
		break;
 8008eea:	e008      	b.n	8008efe <_encmt_task_move+0x79e>

	default:
		TaskManager_Step_Set( ENCMTASK, 0 );
 8008eec:	2316      	movs	r3, #22
 8008eee:	18fb      	adds	r3, r7, r3
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	f004 fcd3 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8008efa:	e000      	b.n	8008efe <_encmt_task_move+0x79e>
		break;
 8008efc:	46c0      	nop			@ (mov r8, r8)
	}
}
 8008efe:	46bd      	mov	sp, r7
 8008f00:	b007      	add	sp, #28
 8008f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f04:	2000015c 	.word	0x2000015c
 8008f08:	20000118 	.word	0x20000118
 8008f0c:	20000074 	.word	0x20000074
 8008f10:	2000018c 	.word	0x2000018c
 8008f14:	080084bd 	.word	0x080084bd

08008f18 <_encmt_task_cali>:

float encCounterTestCalib = 0;
float encCounterTest = 0;

static void _encmt_task_cali( tEncNum encNum )
{
 8008f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af02      	add	r7, sp, #8
 8008f1e:	0002      	movs	r2, r0
 8008f20:	1dfb      	adds	r3, r7, #7
 8008f22:	701a      	strb	r2, [r3, #0]
	tTaskManager ENCMTASK = ( ENCSTPMT1 + (tTaskManager)encNum );
 8008f24:	240c      	movs	r4, #12
 8008f26:	193b      	adds	r3, r7, r4
 8008f28:	1dfa      	adds	r2, r7, #7
 8008f2a:	7812      	ldrb	r2, [r2, #0]
 8008f2c:	3205      	adds	r2, #5
 8008f2e:	701a      	strb	r2, [r3, #0]
	TaskManager_Set( ENCMTASK , _e_encmt_task_cali );
 8008f30:	193b      	adds	r3, r7, r4
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	2103      	movs	r1, #3
 8008f36:	0018      	movs	r0, r3
 8008f38:	f004 fc2a 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( ENCMTASK ) == false ){
 8008f3c:	193b      	adds	r3, r7, r4
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	0018      	movs	r0, r3
 8008f42:	f004 fc8b 	bl	800d85c <TaskManager_First_Get>
 8008f46:	1e03      	subs	r3, r0, #0
 8008f48:	d124      	bne.n	8008f94 <_encmt_task_cali+0x7c>
		TaskManager_First_Set( ENCMTASK );
 8008f4a:	193b      	adds	r3, r7, r4
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	0018      	movs	r0, r3
 8008f50:	f004 fc3a 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( ENCMTASK, _e_encmt_task_cali_turn_left );
 8008f54:	193b      	adds	r3, r7, r4
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2100      	movs	r1, #0
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	f004 fca0 	bl	800d8a0 <TaskManager_Step_Set>
		StepMotor_STOP((tStpMtNum)encNum);
 8008f60:	1dfb      	adds	r3, r7, #7
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	0018      	movs	r0, r3
 8008f66:	f004 fb29 	bl	800d5bc <StepMotor_STOP>
		sEncCtrl[encNum].status = _e_EncSts_Cali;
 8008f6a:	1dfb      	adds	r3, r7, #7
 8008f6c:	781a      	ldrb	r2, [r3, #0]
 8008f6e:	498e      	ldr	r1, [pc, #568]	@ (80091a8 <_encmt_task_cali+0x290>)
 8008f70:	0013      	movs	r3, r2
 8008f72:	005b      	lsls	r3, r3, #1
 8008f74:	189b      	adds	r3, r3, r2
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	2203      	movs	r2, #3
 8008f7a:	545a      	strb	r2, [r3, r1]
		sEncCalib[encNum].status = _e_EncCalib_Running;
 8008f7c:	1dfb      	adds	r3, r7, #7
 8008f7e:	781a      	ldrb	r2, [r3, #0]
 8008f80:	498a      	ldr	r1, [pc, #552]	@ (80091ac <_encmt_task_cali+0x294>)
 8008f82:	202d      	movs	r0, #45	@ 0x2d
 8008f84:	0013      	movs	r3, r2
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	18cb      	adds	r3, r1, r3
 8008f8e:	181b      	adds	r3, r3, r0
 8008f90:	2205      	movs	r2, #5
 8008f92:	701a      	strb	r2, [r3, #0]
	}

	switch( TaskManager_Step_Get( ENCMTASK ) )
 8008f94:	230c      	movs	r3, #12
 8008f96:	18fb      	adds	r3, r7, r3
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	f004 fcaa 	bl	800d8f4 <TaskManager_Step_Get>
 8008fa0:	0003      	movs	r3, r0
 8008fa2:	2b0a      	cmp	r3, #10
 8008fa4:	d901      	bls.n	8008faa <_encmt_task_cali+0x92>
 8008fa6:	f000 fc16 	bl	80097d6 <_encmt_task_cali+0x8be>
 8008faa:	009a      	lsls	r2, r3, #2
 8008fac:	4b80      	ldr	r3, [pc, #512]	@ (80091b0 <_encmt_task_cali+0x298>)
 8008fae:	18d3      	adds	r3, r2, r3
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	469f      	mov	pc, r3
	{
	case _e_encmt_task_cali_turn_left://Joga pra esquerda

		Timing_Set( _e_Timing_Encoder_Break , TIMEOUT_CALIB_DINAM /*5000*/ );
 8008fb4:	4b7f      	ldr	r3, [pc, #508]	@ (80091b4 <_encmt_task_cali+0x29c>)
 8008fb6:	0019      	movs	r1, r3
 8008fb8:	200f      	movs	r0, #15
 8008fba:	f006 fc93 	bl	800f8e4 <Timing_Set>
		_encdisk_func_break_clear(encNum);
 8008fbe:	1dfb      	adds	r3, r7, #7
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	f7fe fd40 	bl	8007a48 <_encdisk_func_break_clear>
		StepMotor_GO( (tStpMtNum)encNum , _e_StMtDir_Left , 250 , STPMT_MT_SPEED_CAL , STPMT_MT_ACC_CAL , STPMT_MT_SPEED_INI_CAL );
 8008fc8:	497b      	ldr	r1, [pc, #492]	@ (80091b8 <_encmt_task_cali+0x2a0>)
 8008fca:	4a7c      	ldr	r2, [pc, #496]	@ (80091bc <_encmt_task_cali+0x2a4>)
 8008fcc:	1dfb      	adds	r3, r7, #7
 8008fce:	7818      	ldrb	r0, [r3, #0]
 8008fd0:	2364      	movs	r3, #100	@ 0x64
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	2314      	movs	r3, #20
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	000b      	movs	r3, r1
 8008fda:	2100      	movs	r1, #0
 8008fdc:	f004 fa72 	bl	800d4c4 <StepMotor_GO>
		TaskManager_Step_Inc(ENCMTASK);
 8008fe0:	230c      	movs	r3, #12
 8008fe2:	18fb      	adds	r3, r7, r3
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	f004 fca8 	bl	800d93c <TaskManager_Step_Inc>
		break;
 8008fec:	f000 fc02 	bl	80097f4 <_encmt_task_cali+0x8dc>

	case _e_encmt_task_cali_turn_left_wait://aguarda fim de curso

//		if( _encdisk_func_break_get(encNum) )//para quando fim de curso que agora vai ser pelo diskPos
		if(sEncPosMap[encNum].diskPosNow == _e_EcnDiscPos_Left)
 8008ff0:	1dfb      	adds	r3, r7, #7
 8008ff2:	781a      	ldrb	r2, [r3, #0]
 8008ff4:	4972      	ldr	r1, [pc, #456]	@ (80091c0 <_encmt_task_cali+0x2a8>)
 8008ff6:	0013      	movs	r3, r2
 8008ff8:	005b      	lsls	r3, r3, #1
 8008ffa:	189b      	adds	r3, r3, r2
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	18cb      	adds	r3, r1, r3
 8009000:	3312      	adds	r3, #18
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d112      	bne.n	800902e <_encmt_task_cali+0x116>
		{
			StepMotor_STOP((tStpMtNum)encNum);
 8009008:	1dfb      	adds	r3, r7, #7
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	0018      	movs	r0, r3
 800900e:	f004 fad5 	bl	800d5bc <StepMotor_STOP>
			TaskManager_Step_Inc(ENCMTASK);
 8009012:	230c      	movs	r3, #12
 8009014:	18fb      	adds	r3, r7, r3
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	0018      	movs	r0, r3
 800901a:	f004 fc8f 	bl	800d93c <TaskManager_Step_Inc>
			Timing_Set( _e_Timing_Encoder_WaitStop , 500 );
 800901e:	23fa      	movs	r3, #250	@ 0xfa
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	0019      	movs	r1, r3
 8009024:	2010      	movs	r0, #16
 8009026:	f006 fc5d 	bl	800f8e4 <Timing_Set>
		}
		else if( Timing_Get_Bool( _e_Timing_Encoder_Break ) ){//para quando timeout
			sEncCalib[encNum].status = _e_EncCalib_TimeOut1;
			TaskManager_Step_Set( ENCMTASK, _e_encmt_task_cali_error );
		}
		break;
 800902a:	f000 fbdc 	bl	80097e6 <_encmt_task_cali+0x8ce>
		else if( Timing_Get_Bool( _e_Timing_Encoder_Break ) ){//para quando timeout
 800902e:	200f      	movs	r0, #15
 8009030:	f006 fc6e 	bl	800f910 <Timing_Get_Bool>
 8009034:	1e03      	subs	r3, r0, #0
 8009036:	d101      	bne.n	800903c <_encmt_task_cali+0x124>
 8009038:	f000 fbd5 	bl	80097e6 <_encmt_task_cali+0x8ce>
			sEncCalib[encNum].status = _e_EncCalib_TimeOut1;
 800903c:	1dfb      	adds	r3, r7, #7
 800903e:	781a      	ldrb	r2, [r3, #0]
 8009040:	495a      	ldr	r1, [pc, #360]	@ (80091ac <_encmt_task_cali+0x294>)
 8009042:	202d      	movs	r0, #45	@ 0x2d
 8009044:	0013      	movs	r3, r2
 8009046:	00db      	lsls	r3, r3, #3
 8009048:	1a9b      	subs	r3, r3, r2
 800904a:	00db      	lsls	r3, r3, #3
 800904c:	18cb      	adds	r3, r1, r3
 800904e:	181b      	adds	r3, r3, r0
 8009050:	2202      	movs	r2, #2
 8009052:	701a      	strb	r2, [r3, #0]
			TaskManager_Step_Set( ENCMTASK, _e_encmt_task_cali_error );
 8009054:	230c      	movs	r3, #12
 8009056:	18fb      	adds	r3, r7, r3
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2107      	movs	r1, #7
 800905c:	0018      	movs	r0, r3
 800905e:	f004 fc1f 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 8009062:	e3c0      	b.n	80097e6 <_encmt_task_cali+0x8ce>

	case _e_encmt_task_cali_wait_stop://aguarda um tempinho de estabilização
		if( Timing_Get_Bool( _e_Timing_Encoder_WaitStop ) ){
 8009064:	2010      	movs	r0, #16
 8009066:	f006 fc53 	bl	800f910 <Timing_Get_Bool>
 800906a:	1e03      	subs	r3, r0, #0
 800906c:	d100      	bne.n	8009070 <_encmt_task_cali+0x158>
 800906e:	e3bc      	b.n	80097ea <_encmt_task_cali+0x8d2>
			TaskManager_Step_Inc(ENCMTASK);
 8009070:	230c      	movs	r3, #12
 8009072:	18fb      	adds	r3, r7, r3
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	0018      	movs	r0, r3
 8009078:	f004 fc60 	bl	800d93c <TaskManager_Step_Inc>
		}
		break;
 800907c:	e3b5      	b.n	80097ea <_encmt_task_cali+0x8d2>

	case _e_encmt_task_cali_turn_right://Joga pra direita

		//Limpa variaveis de calibra��o
		sEncPosMap[encNum].index = 0;
 800907e:	1dfb      	adds	r3, r7, #7
 8009080:	781a      	ldrb	r2, [r3, #0]
 8009082:	494f      	ldr	r1, [pc, #316]	@ (80091c0 <_encmt_task_cali+0x2a8>)
 8009084:	0013      	movs	r3, r2
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	189b      	adds	r3, r3, r2
 800908a:	00db      	lsls	r3, r3, #3
 800908c:	18cb      	adds	r3, r1, r3
 800908e:	3310      	adds	r3, #16
 8009090:	2200      	movs	r2, #0
 8009092:	701a      	strb	r2, [r3, #0]
		sEncPosMap[encNum].ang = 0;
 8009094:	1dfb      	adds	r3, r7, #7
 8009096:	781a      	ldrb	r2, [r3, #0]
 8009098:	4949      	ldr	r1, [pc, #292]	@ (80091c0 <_encmt_task_cali+0x2a8>)
 800909a:	0013      	movs	r3, r2
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	189b      	adds	r3, r3, r2
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	2200      	movs	r2, #0
 80090a4:	505a      	str	r2, [r3, r1]
		sEncCalib[encNum].ang[sEncPosMap[encNum].index] = 0;
 80090a6:	1dfb      	adds	r3, r7, #7
 80090a8:	781a      	ldrb	r2, [r3, #0]
 80090aa:	1dfb      	adds	r3, r7, #7
 80090ac:	7819      	ldrb	r1, [r3, #0]
 80090ae:	4844      	ldr	r0, [pc, #272]	@ (80091c0 <_encmt_task_cali+0x2a8>)
 80090b0:	000b      	movs	r3, r1
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	185b      	adds	r3, r3, r1
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	18c3      	adds	r3, r0, r3
 80090ba:	3310      	adds	r3, #16
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	0018      	movs	r0, r3
 80090c0:	493a      	ldr	r1, [pc, #232]	@ (80091ac <_encmt_task_cali+0x294>)
 80090c2:	0013      	movs	r3, r2
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	1a9b      	subs	r3, r3, r2
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	181b      	adds	r3, r3, r0
 80090cc:	3304      	adds	r3, #4
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	2200      	movs	r2, #0
 80090d2:	505a      	str	r2, [r3, r1]
		sEncDisk[encNum].buffDiskEncInd = 0;
 80090d4:	1dfb      	adds	r3, r7, #7
 80090d6:	781a      	ldrb	r2, [r3, #0]
 80090d8:	493a      	ldr	r1, [pc, #232]	@ (80091c4 <_encmt_task_cali+0x2ac>)
 80090da:	0013      	movs	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	189b      	adds	r3, r3, r2
 80090e0:	009a      	lsls	r2, r3, #2
 80090e2:	189b      	adds	r3, r3, r2
 80090e4:	18cb      	adds	r3, r1, r3
 80090e6:	3316      	adds	r3, #22
 80090e8:	2200      	movs	r2, #0
 80090ea:	701a      	strb	r2, [r3, #0]
		for( uint8_t i = 0 ; i < ENC_DISK_POS_QTY ; i++ ){
 80090ec:	230f      	movs	r3, #15
 80090ee:	18fb      	adds	r3, r7, r3
 80090f0:	2200      	movs	r2, #0
 80090f2:	701a      	strb	r2, [r3, #0]
 80090f4:	e022      	b.n	800913c <_encmt_task_cali+0x224>
			sEncCalib[encNum].encCount[i] = 0;
 80090f6:	1dfb      	adds	r3, r7, #7
 80090f8:	781a      	ldrb	r2, [r3, #0]
 80090fa:	240f      	movs	r4, #15
 80090fc:	193b      	adds	r3, r7, r4
 80090fe:	7818      	ldrb	r0, [r3, #0]
 8009100:	492a      	ldr	r1, [pc, #168]	@ (80091ac <_encmt_task_cali+0x294>)
 8009102:	0013      	movs	r3, r2
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	1a9b      	subs	r3, r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	181b      	adds	r3, r3, r0
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	18cb      	adds	r3, r1, r3
 8009110:	3302      	adds	r3, #2
 8009112:	2200      	movs	r2, #0
 8009114:	801a      	strh	r2, [r3, #0]
			sEncCalib[encNum].stepCount[i] = 0;
 8009116:	1dfb      	adds	r3, r7, #7
 8009118:	781a      	ldrb	r2, [r3, #0]
 800911a:	193b      	adds	r3, r7, r4
 800911c:	7818      	ldrb	r0, [r3, #0]
 800911e:	4923      	ldr	r1, [pc, #140]	@ (80091ac <_encmt_task_cali+0x294>)
 8009120:	0013      	movs	r3, r2
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	1a9b      	subs	r3, r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	181b      	adds	r3, r3, r0
 800912a:	3304      	adds	r3, #4
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	2200      	movs	r2, #0
 8009130:	525a      	strh	r2, [r3, r1]
		for( uint8_t i = 0 ; i < ENC_DISK_POS_QTY ; i++ ){
 8009132:	193b      	adds	r3, r7, r4
 8009134:	781a      	ldrb	r2, [r3, #0]
 8009136:	193b      	adds	r3, r7, r4
 8009138:	3201      	adds	r2, #1
 800913a:	701a      	strb	r2, [r3, #0]
 800913c:	230f      	movs	r3, #15
 800913e:	18fb      	adds	r3, r7, r3
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	2b02      	cmp	r3, #2
 8009144:	d9d7      	bls.n	80090f6 <_encmt_task_cali+0x1de>
		}
		sEncCalib[encNum].encSeqFlag = false;
 8009146:	1dfb      	adds	r3, r7, #7
 8009148:	781a      	ldrb	r2, [r3, #0]
 800914a:	4918      	ldr	r1, [pc, #96]	@ (80091ac <_encmt_task_cali+0x294>)
 800914c:	202c      	movs	r0, #44	@ 0x2c
 800914e:	0013      	movs	r3, r2
 8009150:	00db      	lsls	r3, r3, #3
 8009152:	1a9b      	subs	r3, r3, r2
 8009154:	00db      	lsls	r3, r3, #3
 8009156:	18cb      	adds	r3, r1, r3
 8009158:	181b      	adds	r3, r3, r0
 800915a:	2200      	movs	r2, #0
 800915c:	701a      	strb	r2, [r3, #0]
		StepMotor_GetStepPos( (tStpMtNum)encNum );
 800915e:	1dfb      	adds	r3, r7, #7
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	0018      	movs	r0, r3
 8009164:	f004 fa78 	bl	800d658 <StepMotor_GetStepPos>

		//Prepara para mover
		Timing_Set( _e_Timing_Encoder_Break , TIMEOUT_CALIB_DINAM /*5000*/ );
 8009168:	4b12      	ldr	r3, [pc, #72]	@ (80091b4 <_encmt_task_cali+0x29c>)
 800916a:	0019      	movs	r1, r3
 800916c:	200f      	movs	r0, #15
 800916e:	f006 fbb9 	bl	800f8e4 <Timing_Set>
		_encdisk_func_break_clear(encNum);
 8009172:	1dfb      	adds	r3, r7, #7
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	0018      	movs	r0, r3
 8009178:	f7fe fc66 	bl	8007a48 <_encdisk_func_break_clear>
		StepMotor_GO( (tStpMtNum)encNum , _e_StMtDir_Right , 250 , STPMT_MT_SPEED_CAL , STPMT_MT_ACC_CAL , STPMT_MT_SPEED_INI_CAL );
 800917c:	490e      	ldr	r1, [pc, #56]	@ (80091b8 <_encmt_task_cali+0x2a0>)
 800917e:	4a0f      	ldr	r2, [pc, #60]	@ (80091bc <_encmt_task_cali+0x2a4>)
 8009180:	1dfb      	adds	r3, r7, #7
 8009182:	7818      	ldrb	r0, [r3, #0]
 8009184:	2364      	movs	r3, #100	@ 0x64
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	2314      	movs	r3, #20
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	000b      	movs	r3, r1
 800918e:	2101      	movs	r1, #1
 8009190:	f004 f998 	bl	800d4c4 <StepMotor_GO>
		TaskManager_Step_Inc(ENCMTASK);
 8009194:	230c      	movs	r3, #12
 8009196:	18fb      	adds	r3, r7, r3
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	0018      	movs	r0, r3
 800919c:	f004 fbce 	bl	800d93c <TaskManager_Step_Inc>
		encCounterTestCalib=0;
 80091a0:	4b09      	ldr	r3, [pc, #36]	@ (80091c8 <_encmt_task_cali+0x2b0>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
		break;
 80091a6:	e325      	b.n	80097f4 <_encmt_task_cali+0x8dc>
 80091a8:	2000015c 	.word	0x2000015c
 80091ac:	20000074 	.word	0x20000074
 80091b0:	0800fe60 	.word	0x0800fe60
 80091b4:	00001e22 	.word	0x00001e22
 80091b8:	000036b0 	.word	0x000036b0
 80091bc:	437a0000 	.word	0x437a0000
 80091c0:	20000118 	.word	0x20000118
 80091c4:	200000e4 	.word	0x200000e4
 80091c8:	20000194 	.word	0x20000194

	case _e_encmt_task_cali_read_values:

		//Mapa de posi��es
			//pega quantidade de steps acumulados lá do módulo stepmotor
		sEncCalib[encNum].stepCount[sEncPosMap[encNum].index] += StepMotor_GetStepPos( (tStpMtNum)encNum );
 80091cc:	1dfb      	adds	r3, r7, #7
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	0018      	movs	r0, r3
 80091d2:	f004 fa41 	bl	800d658 <StepMotor_GetStepPos>
 80091d6:	0003      	movs	r3, r0
 80091d8:	001d      	movs	r5, r3
 80091da:	1dfb      	adds	r3, r7, #7
 80091dc:	781a      	ldrb	r2, [r3, #0]
 80091de:	1dfb      	adds	r3, r7, #7
 80091e0:	7819      	ldrb	r1, [r3, #0]
 80091e2:	48e4      	ldr	r0, [pc, #912]	@ (8009574 <_encmt_task_cali+0x65c>)
 80091e4:	000b      	movs	r3, r1
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	185b      	adds	r3, r3, r1
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	18c3      	adds	r3, r0, r3
 80091ee:	3310      	adds	r3, #16
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	0018      	movs	r0, r3
 80091f4:	49e0      	ldr	r1, [pc, #896]	@ (8009578 <_encmt_task_cali+0x660>)
 80091f6:	0013      	movs	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	1a9b      	subs	r3, r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	181b      	adds	r3, r3, r0
 8009200:	3304      	adds	r3, #4
 8009202:	005b      	lsls	r3, r3, #1
 8009204:	5a58      	ldrh	r0, [r3, r1]
 8009206:	1dfb      	adds	r3, r7, #7
 8009208:	781a      	ldrb	r2, [r3, #0]
 800920a:	1dfb      	adds	r3, r7, #7
 800920c:	7819      	ldrb	r1, [r3, #0]
 800920e:	4cd9      	ldr	r4, [pc, #868]	@ (8009574 <_encmt_task_cali+0x65c>)
 8009210:	000b      	movs	r3, r1
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	185b      	adds	r3, r3, r1
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	18e3      	adds	r3, r4, r3
 800921a:	3310      	adds	r3, #16
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	001c      	movs	r4, r3
 8009220:	182b      	adds	r3, r5, r0
 8009222:	b298      	uxth	r0, r3
 8009224:	49d4      	ldr	r1, [pc, #848]	@ (8009578 <_encmt_task_cali+0x660>)
 8009226:	0013      	movs	r3, r2
 8009228:	00db      	lsls	r3, r3, #3
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	191b      	adds	r3, r3, r4
 8009230:	3304      	adds	r3, #4
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	1c02      	adds	r2, r0, #0
 8009236:	525a      	strh	r2, [r3, r1]

		sEncCalib[encNum].ang[sEncPosMap[encNum].index] = sEncPosMap[encNum].ang;
 8009238:	1dfb      	adds	r3, r7, #7
 800923a:	7819      	ldrb	r1, [r3, #0]
 800923c:	1dfb      	adds	r3, r7, #7
 800923e:	781a      	ldrb	r2, [r3, #0]
 8009240:	1dfb      	adds	r3, r7, #7
 8009242:	7818      	ldrb	r0, [r3, #0]
 8009244:	4ccb      	ldr	r4, [pc, #812]	@ (8009574 <_encmt_task_cali+0x65c>)
 8009246:	0003      	movs	r3, r0
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	181b      	adds	r3, r3, r0
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	18e3      	adds	r3, r4, r3
 8009250:	3310      	adds	r3, #16
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	001c      	movs	r4, r3
 8009256:	48c7      	ldr	r0, [pc, #796]	@ (8009574 <_encmt_task_cali+0x65c>)
 8009258:	000b      	movs	r3, r1
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	185b      	adds	r3, r3, r1
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	5818      	ldr	r0, [r3, r0]
 8009262:	49c5      	ldr	r1, [pc, #788]	@ (8009578 <_encmt_task_cali+0x660>)
 8009264:	0013      	movs	r3, r2
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	1a9b      	subs	r3, r3, r2
 800926a:	005b      	lsls	r3, r3, #1
 800926c:	191b      	adds	r3, r3, r4
 800926e:	3304      	adds	r3, #4
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	5058      	str	r0, [r3, r1]

		//Leitura resolução do encoder
		if( sEncDisk[encNum].diskEncChange == true && sEncPosMap[encNum].diskPosNow == _e_EcnDiscPos_Middle ){
 8009274:	1dfb      	adds	r3, r7, #7
 8009276:	781a      	ldrb	r2, [r3, #0]
 8009278:	49c0      	ldr	r1, [pc, #768]	@ (800957c <_encmt_task_cali+0x664>)
 800927a:	0013      	movs	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	189b      	adds	r3, r3, r2
 8009280:	009a      	lsls	r2, r3, #2
 8009282:	189b      	adds	r3, r3, r2
 8009284:	18cb      	adds	r3, r1, r3
 8009286:	3318      	adds	r3, #24
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d146      	bne.n	800931c <_encmt_task_cali+0x404>
 800928e:	1dfb      	adds	r3, r7, #7
 8009290:	781a      	ldrb	r2, [r3, #0]
 8009292:	49b8      	ldr	r1, [pc, #736]	@ (8009574 <_encmt_task_cali+0x65c>)
 8009294:	0013      	movs	r3, r2
 8009296:	005b      	lsls	r3, r3, #1
 8009298:	189b      	adds	r3, r3, r2
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	18cb      	adds	r3, r1, r3
 800929e:	3312      	adds	r3, #18
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d13a      	bne.n	800931c <_encmt_task_cali+0x404>
			encCounterTestCalib++;
 80092a6:	4bb6      	ldr	r3, [pc, #728]	@ (8009580 <_encmt_task_cali+0x668>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	21fe      	movs	r1, #254	@ 0xfe
 80092ac:	0589      	lsls	r1, r1, #22
 80092ae:	1c18      	adds	r0, r3, #0
 80092b0:	f7f7 f910 	bl	80004d4 <__aeabi_fadd>
 80092b4:	1c03      	adds	r3, r0, #0
 80092b6:	1c1a      	adds	r2, r3, #0
 80092b8:	4bb1      	ldr	r3, [pc, #708]	@ (8009580 <_encmt_task_cali+0x668>)
 80092ba:	601a      	str	r2, [r3, #0]
			sEncCalib[encNum].encCount[sEncPosMap[encNum].index]++;
 80092bc:	1dfb      	adds	r3, r7, #7
 80092be:	781a      	ldrb	r2, [r3, #0]
 80092c0:	1dfb      	adds	r3, r7, #7
 80092c2:	7819      	ldrb	r1, [r3, #0]
 80092c4:	48ab      	ldr	r0, [pc, #684]	@ (8009574 <_encmt_task_cali+0x65c>)
 80092c6:	000b      	movs	r3, r1
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	185b      	adds	r3, r3, r1
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	18c3      	adds	r3, r0, r3
 80092d0:	3310      	adds	r3, #16
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	0019      	movs	r1, r3
 80092d6:	48a8      	ldr	r0, [pc, #672]	@ (8009578 <_encmt_task_cali+0x660>)
 80092d8:	0013      	movs	r3, r2
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	1a9b      	subs	r3, r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	185b      	adds	r3, r3, r1
 80092e2:	005b      	lsls	r3, r3, #1
 80092e4:	18c3      	adds	r3, r0, r3
 80092e6:	3302      	adds	r3, #2
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	3301      	adds	r3, #1
 80092ec:	b29c      	uxth	r4, r3
 80092ee:	48a2      	ldr	r0, [pc, #648]	@ (8009578 <_encmt_task_cali+0x660>)
 80092f0:	0013      	movs	r3, r2
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	1a9b      	subs	r3, r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	185b      	adds	r3, r3, r1
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	18c3      	adds	r3, r0, r3
 80092fe:	3302      	adds	r3, #2
 8009300:	1c22      	adds	r2, r4, #0
 8009302:	801a      	strh	r2, [r3, #0]
			sEncDisk[encNum].diskEncChange = false;
 8009304:	1dfb      	adds	r3, r7, #7
 8009306:	781a      	ldrb	r2, [r3, #0]
 8009308:	499c      	ldr	r1, [pc, #624]	@ (800957c <_encmt_task_cali+0x664>)
 800930a:	0013      	movs	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	189b      	adds	r3, r3, r2
 8009310:	009a      	lsls	r2, r3, #2
 8009312:	189b      	adds	r3, r3, r2
 8009314:	18cb      	adds	r3, r1, r3
 8009316:	3318      	adds	r3, #24
 8009318:	2200      	movs	r2, #0
 800931a:	701a      	strb	r2, [r3, #0]
		}
		//Sequencia do Encoder
		if( sEncCalib[encNum].encSeqFlag == false && sEncPosMap[encNum].index >=1 && sEncDisk[encNum].buffDiskEncInd >= 12 )
 800931c:	1dfb      	adds	r3, r7, #7
 800931e:	781a      	ldrb	r2, [r3, #0]
 8009320:	4995      	ldr	r1, [pc, #596]	@ (8009578 <_encmt_task_cali+0x660>)
 8009322:	202c      	movs	r0, #44	@ 0x2c
 8009324:	0013      	movs	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	1a9b      	subs	r3, r3, r2
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	18cb      	adds	r3, r1, r3
 800932e:	181b      	adds	r3, r3, r0
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d146      	bne.n	80093c4 <_encmt_task_cali+0x4ac>
 8009336:	1dfb      	adds	r3, r7, #7
 8009338:	781a      	ldrb	r2, [r3, #0]
 800933a:	498e      	ldr	r1, [pc, #568]	@ (8009574 <_encmt_task_cali+0x65c>)
 800933c:	0013      	movs	r3, r2
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	189b      	adds	r3, r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	18cb      	adds	r3, r1, r3
 8009346:	3310      	adds	r3, #16
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d03a      	beq.n	80093c4 <_encmt_task_cali+0x4ac>
 800934e:	1dfb      	adds	r3, r7, #7
 8009350:	781a      	ldrb	r2, [r3, #0]
 8009352:	498a      	ldr	r1, [pc, #552]	@ (800957c <_encmt_task_cali+0x664>)
 8009354:	0013      	movs	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	189b      	adds	r3, r3, r2
 800935a:	009a      	lsls	r2, r3, #2
 800935c:	189b      	adds	r3, r3, r2
 800935e:	18cb      	adds	r3, r1, r3
 8009360:	3316      	adds	r3, #22
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b0b      	cmp	r3, #11
 8009366:	d92d      	bls.n	80093c4 <_encmt_task_cali+0x4ac>
		{
			for( uint8_t i = 0 ; i < 4 ; i++ ){
 8009368:	230e      	movs	r3, #14
 800936a:	18fb      	adds	r3, r7, r3
 800936c:	2200      	movs	r2, #0
 800936e:	701a      	strb	r2, [r3, #0]
 8009370:	e023      	b.n	80093ba <_encmt_task_cali+0x4a2>
				sEncCalib[encNum].encSeq[i] = sEncDisk[encNum].buffDiskEnc[i+7];
 8009372:	1dfb      	adds	r3, r7, #7
 8009374:	7819      	ldrb	r1, [r3, #0]
 8009376:	260e      	movs	r6, #14
 8009378:	19bb      	adds	r3, r7, r6
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	1ddc      	adds	r4, r3, #7
 800937e:	1dfb      	adds	r3, r7, #7
 8009380:	781a      	ldrb	r2, [r3, #0]
 8009382:	19bb      	adds	r3, r7, r6
 8009384:	7818      	ldrb	r0, [r3, #0]
 8009386:	4d7d      	ldr	r5, [pc, #500]	@ (800957c <_encmt_task_cali+0x664>)
 8009388:	000b      	movs	r3, r1
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	185b      	adds	r3, r3, r1
 800938e:	0099      	lsls	r1, r3, #2
 8009390:	185b      	adds	r3, r3, r1
 8009392:	18eb      	adds	r3, r5, r3
 8009394:	191b      	adds	r3, r3, r4
 8009396:	3306      	adds	r3, #6
 8009398:	781d      	ldrb	r5, [r3, #0]
 800939a:	4977      	ldr	r1, [pc, #476]	@ (8009578 <_encmt_task_cali+0x660>)
 800939c:	2428      	movs	r4, #40	@ 0x28
 800939e:	0013      	movs	r3, r2
 80093a0:	00db      	lsls	r3, r3, #3
 80093a2:	1a9b      	subs	r3, r3, r2
 80093a4:	00db      	lsls	r3, r3, #3
 80093a6:	18cb      	adds	r3, r1, r3
 80093a8:	181b      	adds	r3, r3, r0
 80093aa:	191b      	adds	r3, r3, r4
 80093ac:	1c2a      	adds	r2, r5, #0
 80093ae:	701a      	strb	r2, [r3, #0]
			for( uint8_t i = 0 ; i < 4 ; i++ ){
 80093b0:	19bb      	adds	r3, r7, r6
 80093b2:	781a      	ldrb	r2, [r3, #0]
 80093b4:	19bb      	adds	r3, r7, r6
 80093b6:	3201      	adds	r2, #1
 80093b8:	701a      	strb	r2, [r3, #0]
 80093ba:	230e      	movs	r3, #14
 80093bc:	18fb      	adds	r3, r7, r3
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d9d6      	bls.n	8009372 <_encmt_task_cali+0x45a>
			}

		}
		//Aguarda Fim de Curso
		if( _encdisk_func_break_get(encNum) ){
 80093c4:	1dfb      	adds	r3, r7, #7
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	0018      	movs	r0, r3
 80093ca:	f7fe fb7b 	bl	8007ac4 <_encdisk_func_break_get>
 80093ce:	1e03      	subs	r3, r0, #0
 80093d0:	d018      	beq.n	8009404 <_encmt_task_cali+0x4ec>
			StepMotor_STOP((tStpMtNum)encNum);
 80093d2:	1dfb      	adds	r3, r7, #7
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	0018      	movs	r0, r3
 80093d8:	f004 f8f0 	bl	800d5bc <StepMotor_STOP>
			sEncCalib[encNum].status = _e_EncCalib_ErrIndex;
 80093dc:	1dfb      	adds	r3, r7, #7
 80093de:	781a      	ldrb	r2, [r3, #0]
 80093e0:	4965      	ldr	r1, [pc, #404]	@ (8009578 <_encmt_task_cali+0x660>)
 80093e2:	202d      	movs	r0, #45	@ 0x2d
 80093e4:	0013      	movs	r3, r2
 80093e6:	00db      	lsls	r3, r3, #3
 80093e8:	1a9b      	subs	r3, r3, r2
 80093ea:	00db      	lsls	r3, r3, #3
 80093ec:	18cb      	adds	r3, r1, r3
 80093ee:	181b      	adds	r3, r3, r0
 80093f0:	2201      	movs	r2, #1
 80093f2:	701a      	strb	r2, [r3, #0]
			TaskManager_Step_Set( ENCMTASK, _e_encmt_task_cali_error );
 80093f4:	230c      	movs	r3, #12
 80093f6:	18fb      	adds	r3, r7, r3
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	2107      	movs	r1, #7
 80093fc:	0018      	movs	r0, r3
 80093fe:	f004 fa4f 	bl	800d8a0 <TaskManager_Step_Set>
		{
			StepMotor_STOP((tStpMtNum)encNum);
			TaskManager_Step_Inc(ENCMTASK);
		}

		break;
 8009402:	e1f4      	b.n	80097ee <_encmt_task_cali+0x8d6>
		else if( Timing_Get_Bool( _e_Timing_Encoder_Break ) ){
 8009404:	200f      	movs	r0, #15
 8009406:	f006 fa83 	bl	800f910 <Timing_Get_Bool>
 800940a:	1e03      	subs	r3, r0, #0
 800940c:	d018      	beq.n	8009440 <_encmt_task_cali+0x528>
			StepMotor_STOP((tStpMtNum)encNum);
 800940e:	1dfb      	adds	r3, r7, #7
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	0018      	movs	r0, r3
 8009414:	f004 f8d2 	bl	800d5bc <StepMotor_STOP>
			sEncCalib[encNum].status = _e_EncCalib_TimeOut2;
 8009418:	1dfb      	adds	r3, r7, #7
 800941a:	781a      	ldrb	r2, [r3, #0]
 800941c:	4956      	ldr	r1, [pc, #344]	@ (8009578 <_encmt_task_cali+0x660>)
 800941e:	202d      	movs	r0, #45	@ 0x2d
 8009420:	0013      	movs	r3, r2
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	1a9b      	subs	r3, r3, r2
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	18cb      	adds	r3, r1, r3
 800942a:	181b      	adds	r3, r3, r0
 800942c:	2203      	movs	r2, #3
 800942e:	701a      	strb	r2, [r3, #0]
			TaskManager_Step_Set( ENCMTASK, _e_encmt_task_cali_error );
 8009430:	230c      	movs	r3, #12
 8009432:	18fb      	adds	r3, r7, r3
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	2107      	movs	r1, #7
 8009438:	0018      	movs	r0, r3
 800943a:	f004 fa31 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800943e:	e1d6      	b.n	80097ee <_encmt_task_cali+0x8d6>
		else if( sEncPosMap[encNum].index >= 2 )
 8009440:	1dfb      	adds	r3, r7, #7
 8009442:	781a      	ldrb	r2, [r3, #0]
 8009444:	494b      	ldr	r1, [pc, #300]	@ (8009574 <_encmt_task_cali+0x65c>)
 8009446:	0013      	movs	r3, r2
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	189b      	adds	r3, r3, r2
 800944c:	00db      	lsls	r3, r3, #3
 800944e:	18cb      	adds	r3, r1, r3
 8009450:	3310      	adds	r3, #16
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d800      	bhi.n	800945a <_encmt_task_cali+0x542>
 8009458:	e1c9      	b.n	80097ee <_encmt_task_cali+0x8d6>
			StepMotor_STOP((tStpMtNum)encNum);
 800945a:	1dfb      	adds	r3, r7, #7
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	0018      	movs	r0, r3
 8009460:	f004 f8ac 	bl	800d5bc <StepMotor_STOP>
			TaskManager_Step_Inc(ENCMTASK);
 8009464:	230c      	movs	r3, #12
 8009466:	18fb      	adds	r3, r7, r3
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	0018      	movs	r0, r3
 800946c:	f004 fa66 	bl	800d93c <TaskManager_Step_Inc>
		break;
 8009470:	e1bd      	b.n	80097ee <_encmt_task_cali+0x8d6>

	case _e_encmt_task_cali_calc_values://CALIBRA��O FINALIZADA - Calcula resolu��o do encoder
		StepMotor_STOP((tStpMtNum)encNum);
 8009472:	1dfb      	adds	r3, r7, #7
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	0018      	movs	r0, r3
 8009478:	f004 f8a0 	bl	800d5bc <StepMotor_STOP>
		_enc_stop_mode(encNum);
 800947c:	1dfb      	adds	r3, r7, #7
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	0018      	movs	r0, r3
 8009482:	f7fe fb35 	bl	8007af0 <_enc_stop_mode>

		sEncCalib[encNum].encCount[2] = sEncCalib[encNum].encCount[0];
 8009486:	1dfb      	adds	r3, r7, #7
 8009488:	7819      	ldrb	r1, [r3, #0]
 800948a:	1dfb      	adds	r3, r7, #7
 800948c:	781a      	ldrb	r2, [r3, #0]
 800948e:	483a      	ldr	r0, [pc, #232]	@ (8009578 <_encmt_task_cali+0x660>)
 8009490:	000b      	movs	r3, r1
 8009492:	00db      	lsls	r3, r3, #3
 8009494:	1a5b      	subs	r3, r3, r1
 8009496:	00db      	lsls	r3, r3, #3
 8009498:	18c3      	adds	r3, r0, r3
 800949a:	3302      	adds	r3, #2
 800949c:	8818      	ldrh	r0, [r3, #0]
 800949e:	4936      	ldr	r1, [pc, #216]	@ (8009578 <_encmt_task_cali+0x660>)
 80094a0:	0013      	movs	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	18cb      	adds	r3, r1, r3
 80094aa:	3306      	adds	r3, #6
 80094ac:	1c02      	adds	r2, r0, #0
 80094ae:	801a      	strh	r2, [r3, #0]

		for( uint8_t i = 0 ; i < ENC_DISK_POS_QTY ; i++ )
 80094b0:	230d      	movs	r3, #13
 80094b2:	18fb      	adds	r3, r7, r3
 80094b4:	2200      	movs	r2, #0
 80094b6:	701a      	strb	r2, [r3, #0]
 80094b8:	e0b5      	b.n	8009626 <_encmt_task_cali+0x70e>
		{
			sEncPosMap[encNum].encCount[i] = sEncCalib[encNum].encCount[i];
 80094ba:	1dfb      	adds	r3, r7, #7
 80094bc:	781a      	ldrb	r2, [r3, #0]
 80094be:	250d      	movs	r5, #13
 80094c0:	197b      	adds	r3, r7, r5
 80094c2:	7818      	ldrb	r0, [r3, #0]
 80094c4:	492c      	ldr	r1, [pc, #176]	@ (8009578 <_encmt_task_cali+0x660>)
 80094c6:	0013      	movs	r3, r2
 80094c8:	00db      	lsls	r3, r3, #3
 80094ca:	1a9b      	subs	r3, r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	181b      	adds	r3, r3, r0
 80094d0:	005b      	lsls	r3, r3, #1
 80094d2:	18cb      	adds	r3, r1, r3
 80094d4:	3302      	adds	r3, #2
 80094d6:	8818      	ldrh	r0, [r3, #0]
 80094d8:	1dfb      	adds	r3, r7, #7
 80094da:	781a      	ldrb	r2, [r3, #0]
 80094dc:	197b      	adds	r3, r7, r5
 80094de:	7819      	ldrb	r1, [r3, #0]
 80094e0:	b2c4      	uxtb	r4, r0
 80094e2:	4824      	ldr	r0, [pc, #144]	@ (8009574 <_encmt_task_cali+0x65c>)
 80094e4:	0013      	movs	r3, r2
 80094e6:	005b      	lsls	r3, r3, #1
 80094e8:	189b      	adds	r3, r3, r2
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	18c3      	adds	r3, r0, r3
 80094ee:	185b      	adds	r3, r3, r1
 80094f0:	3315      	adds	r3, #21
 80094f2:	1c22      	adds	r2, r4, #0
 80094f4:	701a      	strb	r2, [r3, #0]

			if( i == 2 ){
 80094f6:	197b      	adds	r3, r7, r5
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d144      	bne.n	8009588 <_encmt_task_cali+0x670>
				sEncCalib[encNum].encRes[i] = ( ENC_DISK_PARAM_TOT - sEncCalib[encNum].ang[i] ) / sEncCalib[encNum].encCount[i];
 80094fe:	1dfb      	adds	r3, r7, #7
 8009500:	781a      	ldrb	r2, [r3, #0]
 8009502:	197b      	adds	r3, r7, r5
 8009504:	7818      	ldrb	r0, [r3, #0]
 8009506:	491c      	ldr	r1, [pc, #112]	@ (8009578 <_encmt_task_cali+0x660>)
 8009508:	0013      	movs	r3, r2
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	1a9b      	subs	r3, r3, r2
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	181b      	adds	r3, r3, r0
 8009512:	3304      	adds	r3, #4
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	585b      	ldr	r3, [r3, r1]
 8009518:	1c19      	adds	r1, r3, #0
 800951a:	481a      	ldr	r0, [pc, #104]	@ (8009584 <_encmt_task_cali+0x66c>)
 800951c:	f7f7 fc88 	bl	8000e30 <__aeabi_fsub>
 8009520:	1c03      	adds	r3, r0, #0
 8009522:	1c1e      	adds	r6, r3, #0
 8009524:	1dfb      	adds	r3, r7, #7
 8009526:	781a      	ldrb	r2, [r3, #0]
 8009528:	197b      	adds	r3, r7, r5
 800952a:	7818      	ldrb	r0, [r3, #0]
 800952c:	4912      	ldr	r1, [pc, #72]	@ (8009578 <_encmt_task_cali+0x660>)
 800952e:	0013      	movs	r3, r2
 8009530:	00db      	lsls	r3, r3, #3
 8009532:	1a9b      	subs	r3, r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	181b      	adds	r3, r3, r0
 8009538:	005b      	lsls	r3, r3, #1
 800953a:	18cb      	adds	r3, r1, r3
 800953c:	3302      	adds	r3, #2
 800953e:	881b      	ldrh	r3, [r3, #0]
 8009540:	0018      	movs	r0, r3
 8009542:	f7f7 fe39 	bl	80011b8 <__aeabi_i2f>
 8009546:	1c02      	adds	r2, r0, #0
 8009548:	1dfb      	adds	r3, r7, #7
 800954a:	781c      	ldrb	r4, [r3, #0]
 800954c:	197b      	adds	r3, r7, r5
 800954e:	781d      	ldrb	r5, [r3, #0]
 8009550:	1c11      	adds	r1, r2, #0
 8009552:	1c30      	adds	r0, r6, #0
 8009554:	f7f7 f948 	bl	80007e8 <__aeabi_fdiv>
 8009558:	1c03      	adds	r3, r0, #0
 800955a:	1c19      	adds	r1, r3, #0
 800955c:	4a06      	ldr	r2, [pc, #24]	@ (8009578 <_encmt_task_cali+0x660>)
 800955e:	0023      	movs	r3, r4
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	1b1b      	subs	r3, r3, r4
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	195b      	adds	r3, r3, r5
 8009568:	3306      	adds	r3, #6
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	18d3      	adds	r3, r2, r3
 800956e:	3304      	adds	r3, #4
 8009570:	6019      	str	r1, [r3, #0]
 8009572:	e052      	b.n	800961a <_encmt_task_cali+0x702>
 8009574:	20000118 	.word	0x20000118
 8009578:	20000074 	.word	0x20000074
 800957c:	200000e4 	.word	0x200000e4
 8009580:	20000194 	.word	0x20000194
 8009584:	43560000 	.word	0x43560000
			}
			else{
				sEncCalib[encNum].encRes[i] = ( sEncCalib[encNum].ang[i+1] - sEncCalib[encNum].ang[i] ) / sEncCalib[encNum].encCount[i];
 8009588:	1dfb      	adds	r3, r7, #7
 800958a:	781a      	ldrb	r2, [r3, #0]
 800958c:	250d      	movs	r5, #13
 800958e:	197b      	adds	r3, r7, r5
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	1c58      	adds	r0, r3, #1
 8009594:	4999      	ldr	r1, [pc, #612]	@ (80097fc <_encmt_task_cali+0x8e4>)
 8009596:	0013      	movs	r3, r2
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	1a9b      	subs	r3, r3, r2
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	181b      	adds	r3, r3, r0
 80095a0:	3304      	adds	r3, #4
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	585c      	ldr	r4, [r3, r1]
 80095a6:	1dfb      	adds	r3, r7, #7
 80095a8:	781a      	ldrb	r2, [r3, #0]
 80095aa:	197b      	adds	r3, r7, r5
 80095ac:	7818      	ldrb	r0, [r3, #0]
 80095ae:	4993      	ldr	r1, [pc, #588]	@ (80097fc <_encmt_task_cali+0x8e4>)
 80095b0:	0013      	movs	r3, r2
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	1a9b      	subs	r3, r3, r2
 80095b6:	005b      	lsls	r3, r3, #1
 80095b8:	181b      	adds	r3, r3, r0
 80095ba:	3304      	adds	r3, #4
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	585b      	ldr	r3, [r3, r1]
 80095c0:	1c19      	adds	r1, r3, #0
 80095c2:	1c20      	adds	r0, r4, #0
 80095c4:	f7f7 fc34 	bl	8000e30 <__aeabi_fsub>
 80095c8:	1c03      	adds	r3, r0, #0
 80095ca:	1c1e      	adds	r6, r3, #0
 80095cc:	1dfb      	adds	r3, r7, #7
 80095ce:	781a      	ldrb	r2, [r3, #0]
 80095d0:	197b      	adds	r3, r7, r5
 80095d2:	7818      	ldrb	r0, [r3, #0]
 80095d4:	4989      	ldr	r1, [pc, #548]	@ (80097fc <_encmt_task_cali+0x8e4>)
 80095d6:	0013      	movs	r3, r2
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	1a9b      	subs	r3, r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	181b      	adds	r3, r3, r0
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	18cb      	adds	r3, r1, r3
 80095e4:	3302      	adds	r3, #2
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	0018      	movs	r0, r3
 80095ea:	f7f7 fde5 	bl	80011b8 <__aeabi_i2f>
 80095ee:	1c02      	adds	r2, r0, #0
 80095f0:	1dfb      	adds	r3, r7, #7
 80095f2:	781c      	ldrb	r4, [r3, #0]
 80095f4:	197b      	adds	r3, r7, r5
 80095f6:	781d      	ldrb	r5, [r3, #0]
 80095f8:	1c11      	adds	r1, r2, #0
 80095fa:	1c30      	adds	r0, r6, #0
 80095fc:	f7f7 f8f4 	bl	80007e8 <__aeabi_fdiv>
 8009600:	1c03      	adds	r3, r0, #0
 8009602:	1c19      	adds	r1, r3, #0
 8009604:	4a7d      	ldr	r2, [pc, #500]	@ (80097fc <_encmt_task_cali+0x8e4>)
 8009606:	0023      	movs	r3, r4
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	1b1b      	subs	r3, r3, r4
 800960c:	005b      	lsls	r3, r3, #1
 800960e:	195b      	adds	r3, r3, r5
 8009610:	3306      	adds	r3, #6
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	18d3      	adds	r3, r2, r3
 8009616:	3304      	adds	r3, #4
 8009618:	6019      	str	r1, [r3, #0]
		for( uint8_t i = 0 ; i < ENC_DISK_POS_QTY ; i++ )
 800961a:	210d      	movs	r1, #13
 800961c:	187b      	adds	r3, r7, r1
 800961e:	781a      	ldrb	r2, [r3, #0]
 8009620:	187b      	adds	r3, r7, r1
 8009622:	3201      	adds	r2, #1
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	230d      	movs	r3, #13
 8009628:	18fb      	adds	r3, r7, r3
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d800      	bhi.n	8009632 <_encmt_task_cali+0x71a>
 8009630:	e743      	b.n	80094ba <_encmt_task_cali+0x5a2>
			}
		}

		sEncCalib[encNum].encRes[0] = sEncCalib[encNum].encRes[1];
 8009632:	1dfb      	adds	r3, r7, #7
 8009634:	7819      	ldrb	r1, [r3, #0]
 8009636:	1dfb      	adds	r3, r7, #7
 8009638:	781a      	ldrb	r2, [r3, #0]
 800963a:	4870      	ldr	r0, [pc, #448]	@ (80097fc <_encmt_task_cali+0x8e4>)
 800963c:	000b      	movs	r3, r1
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	1a5b      	subs	r3, r3, r1
 8009642:	00db      	lsls	r3, r3, #3
 8009644:	18c3      	adds	r3, r0, r3
 8009646:	3320      	adds	r3, #32
 8009648:	6819      	ldr	r1, [r3, #0]
 800964a:	486c      	ldr	r0, [pc, #432]	@ (80097fc <_encmt_task_cali+0x8e4>)
 800964c:	0013      	movs	r3, r2
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	1a9b      	subs	r3, r3, r2
 8009652:	00db      	lsls	r3, r3, #3
 8009654:	18c3      	adds	r3, r0, r3
 8009656:	331c      	adds	r3, #28
 8009658:	6019      	str	r1, [r3, #0]
		sEncCalib[encNum].encRes[2] = sEncCalib[encNum].encRes[1];
 800965a:	1dfb      	adds	r3, r7, #7
 800965c:	7819      	ldrb	r1, [r3, #0]
 800965e:	1dfb      	adds	r3, r7, #7
 8009660:	781a      	ldrb	r2, [r3, #0]
 8009662:	4866      	ldr	r0, [pc, #408]	@ (80097fc <_encmt_task_cali+0x8e4>)
 8009664:	000b      	movs	r3, r1
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	1a5b      	subs	r3, r3, r1
 800966a:	00db      	lsls	r3, r3, #3
 800966c:	18c3      	adds	r3, r0, r3
 800966e:	3320      	adds	r3, #32
 8009670:	6819      	ldr	r1, [r3, #0]
 8009672:	4862      	ldr	r0, [pc, #392]	@ (80097fc <_encmt_task_cali+0x8e4>)
 8009674:	0013      	movs	r3, r2
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	1a9b      	subs	r3, r3, r2
 800967a:	00db      	lsls	r3, r3, #3
 800967c:	18c3      	adds	r3, r0, r3
 800967e:	3324      	adds	r3, #36	@ 0x24
 8009680:	6019      	str	r1, [r3, #0]

		sEncCalib[encNum].encSeqFlag = true;
 8009682:	1dfb      	adds	r3, r7, #7
 8009684:	781a      	ldrb	r2, [r3, #0]
 8009686:	495d      	ldr	r1, [pc, #372]	@ (80097fc <_encmt_task_cali+0x8e4>)
 8009688:	202c      	movs	r0, #44	@ 0x2c
 800968a:	0013      	movs	r3, r2
 800968c:	00db      	lsls	r3, r3, #3
 800968e:	1a9b      	subs	r3, r3, r2
 8009690:	00db      	lsls	r3, r3, #3
 8009692:	18cb      	adds	r3, r1, r3
 8009694:	181b      	adds	r3, r3, r0
 8009696:	2201      	movs	r2, #1
 8009698:	701a      	strb	r2, [r3, #0]

		TaskManager_Step_Inc(ENCMTASK);
 800969a:	230c      	movs	r3, #12
 800969c:	18fb      	adds	r3, r7, r3
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	0018      	movs	r0, r3
 80096a2:	f004 f94b 	bl	800d93c <TaskManager_Step_Inc>
		break;
 80096a6:	e0a5      	b.n	80097f4 <_encmt_task_cali+0x8dc>

	case _e_encmt_task_cali_test1:
		StepMotor_GO( (tStpMtNum)encNum , _e_StMtDir_Left , 250 , STPMT_MT_SPEED_CAL , STPMT_MT_ACC_CAL , STPMT_MT_SPEED_INI_CAL );
 80096a8:	4955      	ldr	r1, [pc, #340]	@ (8009800 <_encmt_task_cali+0x8e8>)
 80096aa:	4a56      	ldr	r2, [pc, #344]	@ (8009804 <_encmt_task_cali+0x8ec>)
 80096ac:	1dfb      	adds	r3, r7, #7
 80096ae:	7818      	ldrb	r0, [r3, #0]
 80096b0:	2364      	movs	r3, #100	@ 0x64
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	2314      	movs	r3, #20
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	000b      	movs	r3, r1
 80096ba:	2100      	movs	r1, #0
 80096bc:	f003 ff02 	bl	800d4c4 <StepMotor_GO>
		TaskManager_Step_Inc(ENCMTASK);
 80096c0:	230c      	movs	r3, #12
 80096c2:	18fb      	adds	r3, r7, r3
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	0018      	movs	r0, r3
 80096c8:	f004 f938 	bl	800d93c <TaskManager_Step_Inc>
		encCounterTest=0;
 80096cc:	4b4e      	ldr	r3, [pc, #312]	@ (8009808 <_encmt_task_cali+0x8f0>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	601a      	str	r2, [r3, #0]
		break;
 80096d2:	e08f      	b.n	80097f4 <_encmt_task_cali+0x8dc>

	case _e_encmt_task_cali_test2:
		if(sEncPosMap[encNum].diskPosNow == _e_EcnDiscPos_Middle)
 80096d4:	1dfb      	adds	r3, r7, #7
 80096d6:	781a      	ldrb	r2, [r3, #0]
 80096d8:	494c      	ldr	r1, [pc, #304]	@ (800980c <_encmt_task_cali+0x8f4>)
 80096da:	0013      	movs	r3, r2
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	189b      	adds	r3, r3, r2
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	18cb      	adds	r3, r1, r3
 80096e4:	3312      	adds	r3, #18
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	2b03      	cmp	r3, #3
 80096ea:	d125      	bne.n	8009738 <_encmt_task_cali+0x820>
		{
			if( sEncDisk[encNum].diskEncChange == true )
 80096ec:	1dfb      	adds	r3, r7, #7
 80096ee:	781a      	ldrb	r2, [r3, #0]
 80096f0:	4947      	ldr	r1, [pc, #284]	@ (8009810 <_encmt_task_cali+0x8f8>)
 80096f2:	0013      	movs	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	189b      	adds	r3, r3, r2
 80096f8:	009a      	lsls	r2, r3, #2
 80096fa:	189b      	adds	r3, r3, r2
 80096fc:	18cb      	adds	r3, r1, r3
 80096fe:	3318      	adds	r3, #24
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d000      	beq.n	8009708 <_encmt_task_cali+0x7f0>
 8009706:	e074      	b.n	80097f2 <_encmt_task_cali+0x8da>
			{
				encCounterTest++;
 8009708:	4b3f      	ldr	r3, [pc, #252]	@ (8009808 <_encmt_task_cali+0x8f0>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	21fe      	movs	r1, #254	@ 0xfe
 800970e:	0589      	lsls	r1, r1, #22
 8009710:	1c18      	adds	r0, r3, #0
 8009712:	f7f6 fedf 	bl	80004d4 <__aeabi_fadd>
 8009716:	1c03      	adds	r3, r0, #0
 8009718:	1c1a      	adds	r2, r3, #0
 800971a:	4b3b      	ldr	r3, [pc, #236]	@ (8009808 <_encmt_task_cali+0x8f0>)
 800971c:	601a      	str	r2, [r3, #0]
				sEncDisk[encNum].diskEncChange = false;
 800971e:	1dfb      	adds	r3, r7, #7
 8009720:	781a      	ldrb	r2, [r3, #0]
 8009722:	493b      	ldr	r1, [pc, #236]	@ (8009810 <_encmt_task_cali+0x8f8>)
 8009724:	0013      	movs	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	189b      	adds	r3, r3, r2
 800972a:	009a      	lsls	r2, r3, #2
 800972c:	189b      	adds	r3, r3, r2
 800972e:	18cb      	adds	r3, r1, r3
 8009730:	3318      	adds	r3, #24
 8009732:	2200      	movs	r2, #0
 8009734:	701a      	strb	r2, [r3, #0]
		else if(sEncPosMap[encNum].diskPosNow == _e_EcnDiscPos_Left)
		{
			StepMotor_STOP((tStpMtNum)encNum);
			TaskManager_Step_Inc(ENCMTASK);
		}
		break;
 8009736:	e05c      	b.n	80097f2 <_encmt_task_cali+0x8da>
		else if(sEncPosMap[encNum].diskPosNow == _e_EcnDiscPos_Left)
 8009738:	1dfb      	adds	r3, r7, #7
 800973a:	781a      	ldrb	r2, [r3, #0]
 800973c:	4933      	ldr	r1, [pc, #204]	@ (800980c <_encmt_task_cali+0x8f4>)
 800973e:	0013      	movs	r3, r2
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	189b      	adds	r3, r3, r2
 8009744:	00db      	lsls	r3, r3, #3
 8009746:	18cb      	adds	r3, r1, r3
 8009748:	3312      	adds	r3, #18
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d150      	bne.n	80097f2 <_encmt_task_cali+0x8da>
			StepMotor_STOP((tStpMtNum)encNum);
 8009750:	1dfb      	adds	r3, r7, #7
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	0018      	movs	r0, r3
 8009756:	f003 ff31 	bl	800d5bc <StepMotor_STOP>
			TaskManager_Step_Inc(ENCMTASK);
 800975a:	230c      	movs	r3, #12
 800975c:	18fb      	adds	r3, r7, r3
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	0018      	movs	r0, r3
 8009762:	f004 f8eb 	bl	800d93c <TaskManager_Step_Inc>
		break;
 8009766:	e044      	b.n	80097f2 <_encmt_task_cali+0x8da>

	case _e_encmt_task_cali_test3:
		__NOP();
 8009768:	46c0      	nop			@ (mov r8, r8)
		break;
 800976a:	e043      	b.n	80097f4 <_encmt_task_cali+0x8dc>

	case _e_encmt_task_cali_ok://OK
		sEncCalib[encNum].status = _e_EncCalib_Ok;
 800976c:	1dfb      	adds	r3, r7, #7
 800976e:	781a      	ldrb	r2, [r3, #0]
 8009770:	4922      	ldr	r1, [pc, #136]	@ (80097fc <_encmt_task_cali+0x8e4>)
 8009772:	202d      	movs	r0, #45	@ 0x2d
 8009774:	0013      	movs	r3, r2
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	1a9b      	subs	r3, r3, r2
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	18cb      	adds	r3, r1, r3
 800977e:	181b      	adds	r3, r3, r0
 8009780:	2200      	movs	r2, #0
 8009782:	701a      	strb	r2, [r3, #0]
		sEncCtrl[encNum].command = _e_EncCmd_None;
 8009784:	1dfb      	adds	r3, r7, #7
 8009786:	781a      	ldrb	r2, [r3, #0]
 8009788:	4922      	ldr	r1, [pc, #136]	@ (8009814 <_encmt_task_cali+0x8fc>)
 800978a:	0013      	movs	r3, r2
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	189b      	adds	r3, r3, r2
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	18cb      	adds	r3, r1, r3
 8009794:	3301      	adds	r3, #1
 8009796:	2200      	movs	r2, #0
 8009798:	701a      	strb	r2, [r3, #0]
//		sEncCalib[encNum].encSeqFlag = true;
		sEncMtask[encNum].TASK = _encmt_task_idle;
 800979a:	1dfb      	adds	r3, r7, #7
 800979c:	781a      	ldrb	r2, [r3, #0]
 800979e:	4b1e      	ldr	r3, [pc, #120]	@ (8009818 <_encmt_task_cali+0x900>)
 80097a0:	0092      	lsls	r2, r2, #2
 80097a2:	491e      	ldr	r1, [pc, #120]	@ (800981c <_encmt_task_cali+0x904>)
 80097a4:	50d1      	str	r1, [r2, r3]
		break;
 80097a6:	e025      	b.n	80097f4 <_encmt_task_cali+0x8dc>

	case _e_encmt_task_cali_error://ERROR
		StepMotor_STOP((tStpMtNum)encNum);
 80097a8:	1dfb      	adds	r3, r7, #7
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	0018      	movs	r0, r3
 80097ae:	f003 ff05 	bl	800d5bc <StepMotor_STOP>
		sEncCtrl[encNum].command = _e_EncCmd_None;
 80097b2:	1dfb      	adds	r3, r7, #7
 80097b4:	781a      	ldrb	r2, [r3, #0]
 80097b6:	4917      	ldr	r1, [pc, #92]	@ (8009814 <_encmt_task_cali+0x8fc>)
 80097b8:	0013      	movs	r3, r2
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	189b      	adds	r3, r3, r2
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	18cb      	adds	r3, r1, r3
 80097c2:	3301      	adds	r3, #1
 80097c4:	2200      	movs	r2, #0
 80097c6:	701a      	strb	r2, [r3, #0]
		sEncMtask[encNum].TASK = _encmt_task_idle;
 80097c8:	1dfb      	adds	r3, r7, #7
 80097ca:	781a      	ldrb	r2, [r3, #0]
 80097cc:	4b12      	ldr	r3, [pc, #72]	@ (8009818 <_encmt_task_cali+0x900>)
 80097ce:	0092      	lsls	r2, r2, #2
 80097d0:	4912      	ldr	r1, [pc, #72]	@ (800981c <_encmt_task_cali+0x904>)
 80097d2:	50d1      	str	r1, [r2, r3]
		break;
 80097d4:	e00e      	b.n	80097f4 <_encmt_task_cali+0x8dc>

	default:
		TaskManager_Step_Set( ENCMTASK, 0 );
 80097d6:	230c      	movs	r3, #12
 80097d8:	18fb      	adds	r3, r7, r3
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	2100      	movs	r1, #0
 80097de:	0018      	movs	r0, r3
 80097e0:	f004 f85e 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 80097e4:	e006      	b.n	80097f4 <_encmt_task_cali+0x8dc>
		break;
 80097e6:	46c0      	nop			@ (mov r8, r8)
 80097e8:	e004      	b.n	80097f4 <_encmt_task_cali+0x8dc>
		break;
 80097ea:	46c0      	nop			@ (mov r8, r8)
 80097ec:	e002      	b.n	80097f4 <_encmt_task_cali+0x8dc>
		break;
 80097ee:	46c0      	nop			@ (mov r8, r8)
 80097f0:	e000      	b.n	80097f4 <_encmt_task_cali+0x8dc>
		break;
 80097f2:	46c0      	nop			@ (mov r8, r8)
	}
}
 80097f4:	46c0      	nop			@ (mov r8, r8)
 80097f6:	46bd      	mov	sp, r7
 80097f8:	b005      	add	sp, #20
 80097fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097fc:	20000074 	.word	0x20000074
 8009800:	000036b0 	.word	0x000036b0
 8009804:	437a0000 	.word	0x437a0000
 8009808:	20000198 	.word	0x20000198
 800980c:	20000118 	.word	0x20000118
 8009810:	200000e4 	.word	0x200000e4
 8009814:	2000015c 	.word	0x2000015c
 8009818:	2000018c 	.word	0x2000018c
 800981c:	080084bd 	.word	0x080084bd

08009820 <_EncMt_TASK>:

//MAIN ENC MOTOR TASK

void _EncMt_TASK(void)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	af00      	add	r7, sp, #0
	sEncMtask[_e_EncNum_Pri].TASK(_e_EncNum_Pri);
 8009824:	4b05      	ldr	r3, [pc, #20]	@ (800983c <_EncMt_TASK+0x1c>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2000      	movs	r0, #0
 800982a:	4798      	blx	r3
	sEncMtask[_e_EncNum_Sec].TASK(_e_EncNum_Sec);
 800982c:	4b03      	ldr	r3, [pc, #12]	@ (800983c <_EncMt_TASK+0x1c>)
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2001      	movs	r0, #1
 8009832:	4798      	blx	r3
}
 8009834:	46c0      	nop			@ (mov r8, r8)
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	46c0      	nop			@ (mov r8, r8)
 800983c:	2000018c 	.word	0x2000018c

08009840 <Encoder_Init>:
/*** Exported Functions ***/

//Ext Int

void Encoder_Init(void)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
	TaskManager_Clear( ENCDISK );
 8009846:	2003      	movs	r0, #3
 8009848:	f003 ff6c 	bl	800d724 <TaskManager_Clear>
	TaskManager_Go( ENCDISK , _encdisk_task );
 800984c:	4b27      	ldr	r3, [pc, #156]	@ (80098ec <Encoder_Init+0xac>)
 800984e:	0019      	movs	r1, r3
 8009850:	2003      	movs	r0, #3
 8009852:	f003 ff4f 	bl	800d6f4 <TaskManager_Go>

	TaskManager_Clear( ENC );
 8009856:	2004      	movs	r0, #4
 8009858:	f003 ff64 	bl	800d724 <TaskManager_Clear>
	TaskManager_Go( ENC , _enc_task );
 800985c:	4b24      	ldr	r3, [pc, #144]	@ (80098f0 <Encoder_Init+0xb0>)
 800985e:	0019      	movs	r1, r3
 8009860:	2004      	movs	r0, #4
 8009862:	f003 ff47 	bl	800d6f4 <TaskManager_Go>

	sEncMtask[_e_EncNum_Pri].TASK = _encmt_task_init;
 8009866:	4b23      	ldr	r3, [pc, #140]	@ (80098f4 <Encoder_Init+0xb4>)
 8009868:	4a23      	ldr	r2, [pc, #140]	@ (80098f8 <Encoder_Init+0xb8>)
 800986a:	601a      	str	r2, [r3, #0]
	sEncMtask[_e_EncNum_Sec].TASK = _encmt_task_init;
 800986c:	4b21      	ldr	r3, [pc, #132]	@ (80098f4 <Encoder_Init+0xb4>)
 800986e:	4a22      	ldr	r2, [pc, #136]	@ (80098f8 <Encoder_Init+0xb8>)
 8009870:	605a      	str	r2, [r3, #4]

	TaskManager_Clear( ENCSTPMT1 );
 8009872:	2005      	movs	r0, #5
 8009874:	f003 ff56 	bl	800d724 <TaskManager_Clear>
	TaskManager_Clear( ENCSTPMT2 );
 8009878:	2006      	movs	r0, #6
 800987a:	f003 ff53 	bl	800d724 <TaskManager_Clear>
	TaskManager_Clear( ENCSTPMTX);
 800987e:	2007      	movs	r0, #7
 8009880:	f003 ff50 	bl	800d724 <TaskManager_Clear>

	TaskManager_Go( ENCSTPMT1 , NULL );
 8009884:	2100      	movs	r1, #0
 8009886:	2005      	movs	r0, #5
 8009888:	f003 ff34 	bl	800d6f4 <TaskManager_Go>
	TaskManager_Go( ENCSTPMT2 , NULL );
 800988c:	2100      	movs	r1, #0
 800988e:	2006      	movs	r0, #6
 8009890:	f003 ff30 	bl	800d6f4 <TaskManager_Go>
	TaskManager_Go( ENCSTPMTX , _EncMt_TASK );
 8009894:	4b19      	ldr	r3, [pc, #100]	@ (80098fc <Encoder_Init+0xbc>)
 8009896:	0019      	movs	r1, r3
 8009898:	2007      	movs	r0, #7
 800989a:	f003 ff2b 	bl	800d6f4 <TaskManager_Go>

	StepMotor_Init();
 800989e:	f003 fdb5 	bl	800d40c <StepMotor_Init>

	//memset(sEncDisk[_e_EncNum_Pri].buffDiskEnc,0,ENC_DISK_ENC_QTY);
	//memset(sEncDisk[_e_EncNum_Sec].buffDiskEnc,0,ENC_DISK_ENC_QTY);

	sEncDisk[_e_EncNum_Pri].buffDiskEncInd = 0;
 80098a2:	4b17      	ldr	r3, [pc, #92]	@ (8009900 <Encoder_Init+0xc0>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	759a      	strb	r2, [r3, #22]
	sEncDisk[_e_EncNum_Sec].buffDiskEncInd = 0;
 80098a8:	4b15      	ldr	r3, [pc, #84]	@ (8009900 <Encoder_Init+0xc0>)
 80098aa:	222f      	movs	r2, #47	@ 0x2f
 80098ac:	2100      	movs	r1, #0
 80098ae:	5499      	strb	r1, [r3, r2]
	for(uint8_t i=0 ; i<ENC_DISK_ENC_QTY ; i++)
 80098b0:	1dfb      	adds	r3, r7, #7
 80098b2:	2200      	movs	r2, #0
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	e010      	b.n	80098da <Encoder_Init+0x9a>
	{
		sEncDisk[_e_EncNum_Pri].buffDiskEnc[i] = 0;
 80098b8:	1dfb      	adds	r3, r7, #7
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	4a10      	ldr	r2, [pc, #64]	@ (8009900 <Encoder_Init+0xc0>)
 80098be:	18d3      	adds	r3, r2, r3
 80098c0:	2200      	movs	r2, #0
 80098c2:	719a      	strb	r2, [r3, #6]
		sEncDisk[_e_EncNum_Sec].buffDiskEnc[i] = 0;
 80098c4:	1dfb      	adds	r3, r7, #7
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009900 <Encoder_Init+0xc0>)
 80098ca:	18d3      	adds	r3, r2, r3
 80098cc:	2200      	movs	r2, #0
 80098ce:	77da      	strb	r2, [r3, #31]
	for(uint8_t i=0 ; i<ENC_DISK_ENC_QTY ; i++)
 80098d0:	1dfb      	adds	r3, r7, #7
 80098d2:	781a      	ldrb	r2, [r3, #0]
 80098d4:	1dfb      	adds	r3, r7, #7
 80098d6:	3201      	adds	r2, #1
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	1dfb      	adds	r3, r7, #7
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b0f      	cmp	r3, #15
 80098e0:	d9ea      	bls.n	80098b8 <Encoder_Init+0x78>
	}
	__NOP();
 80098e2:	46c0      	nop			@ (mov r8, r8)
}
 80098e4:	46c0      	nop			@ (mov r8, r8)
 80098e6:	46bd      	mov	sp, r7
 80098e8:	b002      	add	sp, #8
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	08007e41 	.word	0x08007e41
 80098f0:	08007b31 	.word	0x08007b31
 80098f4:	2000018c 	.word	0x2000018c
 80098f8:	080083e5 	.word	0x080083e5
 80098fc:	08009821 	.word	0x08009821
 8009900:	200000e4 	.word	0x200000e4

08009904 <Encoder_Refresh_IT>:

//Ext System

//ultima versão antes do encoder bom
void Encoder_Refresh_IT( tEncNum encNum , uint8_t encVal )
{
 8009904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	0002      	movs	r2, r0
 800990c:	1dfb      	adds	r3, r7, #7
 800990e:	701a      	strb	r2, [r3, #0]
 8009910:	1dbb      	adds	r3, r7, #6
 8009912:	1c0a      	adds	r2, r1, #0
 8009914:	701a      	strb	r2, [r3, #0]
	uint8_t posIndex=0,posIndexLast=0;
 8009916:	230f      	movs	r3, #15
 8009918:	18fb      	adds	r3, r7, r3
 800991a:	2200      	movs	r2, #0
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	230e      	movs	r3, #14
 8009920:	18fb      	adds	r3, r7, r3
 8009922:	2200      	movs	r2, #0
 8009924:	701a      	strb	r2, [r3, #0]
#if(ENC_TYPE == ENC_TYPE_INC)
	bool encFlagTest[4];
#endif
	bool encFlagClear = false;
 8009926:	230b      	movs	r3, #11
 8009928:	18fb      	adds	r3, r7, r3
 800992a:	2200      	movs	r2, #0
 800992c:	701a      	strb	r2, [r3, #0]

	//Encoder State Memory
	//sEncDisk[encNum].lastDiskEnc = encVal;
	sEncDisk[encNum].buffDiskEnc[sEncDisk[encNum].buffDiskEncInd++] = encVal;
 800992e:	1dfb      	adds	r3, r7, #7
 8009930:	7819      	ldrb	r1, [r3, #0]
 8009932:	1dfb      	adds	r3, r7, #7
 8009934:	781a      	ldrb	r2, [r3, #0]
 8009936:	48d5      	ldr	r0, [pc, #852]	@ (8009c8c <Encoder_Refresh_IT+0x388>)
 8009938:	0013      	movs	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	189b      	adds	r3, r3, r2
 800993e:	009c      	lsls	r4, r3, #2
 8009940:	191b      	adds	r3, r3, r4
 8009942:	18c3      	adds	r3, r0, r3
 8009944:	3316      	adds	r3, #22
 8009946:	7818      	ldrb	r0, [r3, #0]
 8009948:	1c43      	adds	r3, r0, #1
 800994a:	b2dd      	uxtb	r5, r3
 800994c:	4ccf      	ldr	r4, [pc, #828]	@ (8009c8c <Encoder_Refresh_IT+0x388>)
 800994e:	0013      	movs	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	189b      	adds	r3, r3, r2
 8009954:	009a      	lsls	r2, r3, #2
 8009956:	189b      	adds	r3, r3, r2
 8009958:	18e3      	adds	r3, r4, r3
 800995a:	3316      	adds	r3, #22
 800995c:	1c2a      	adds	r2, r5, #0
 800995e:	701a      	strb	r2, [r3, #0]
 8009960:	4aca      	ldr	r2, [pc, #808]	@ (8009c8c <Encoder_Refresh_IT+0x388>)
 8009962:	000b      	movs	r3, r1
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	185b      	adds	r3, r3, r1
 8009968:	0099      	lsls	r1, r3, #2
 800996a:	185b      	adds	r3, r3, r1
 800996c:	18d3      	adds	r3, r2, r3
 800996e:	181b      	adds	r3, r3, r0
 8009970:	3306      	adds	r3, #6
 8009972:	1dba      	adds	r2, r7, #6
 8009974:	7812      	ldrb	r2, [r2, #0]
 8009976:	701a      	strb	r2, [r3, #0]
	sEncDisk[encNum].diskEncChange = true;
 8009978:	1dfb      	adds	r3, r7, #7
 800997a:	781a      	ldrb	r2, [r3, #0]
 800997c:	49c3      	ldr	r1, [pc, #780]	@ (8009c8c <Encoder_Refresh_IT+0x388>)
 800997e:	0013      	movs	r3, r2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	189b      	adds	r3, r3, r2
 8009984:	009a      	lsls	r2, r3, #2
 8009986:	189b      	adds	r3, r3, r2
 8009988:	18cb      	adds	r3, r1, r3
 800998a:	3318      	adds	r3, #24
 800998c:	2201      	movs	r2, #1
 800998e:	701a      	strb	r2, [r3, #0]
	if( sEncDisk[encNum].buffDiskEncInd >= ENC_DISK_ENC_QTY )sEncDisk[encNum].buffDiskEncInd = 0;
 8009990:	1dfb      	adds	r3, r7, #7
 8009992:	781a      	ldrb	r2, [r3, #0]
 8009994:	49bd      	ldr	r1, [pc, #756]	@ (8009c8c <Encoder_Refresh_IT+0x388>)
 8009996:	0013      	movs	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	189b      	adds	r3, r3, r2
 800999c:	009a      	lsls	r2, r3, #2
 800999e:	189b      	adds	r3, r3, r2
 80099a0:	18cb      	adds	r3, r1, r3
 80099a2:	3316      	adds	r3, #22
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	2b0f      	cmp	r3, #15
 80099a8:	d90b      	bls.n	80099c2 <Encoder_Refresh_IT+0xbe>
 80099aa:	1dfb      	adds	r3, r7, #7
 80099ac:	781a      	ldrb	r2, [r3, #0]
 80099ae:	49b7      	ldr	r1, [pc, #732]	@ (8009c8c <Encoder_Refresh_IT+0x388>)
 80099b0:	0013      	movs	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	189b      	adds	r3, r3, r2
 80099b6:	009a      	lsls	r2, r3, #2
 80099b8:	189b      	adds	r3, r3, r2
 80099ba:	18cb      	adds	r3, r1, r3
 80099bc:	3316      	adds	r3, #22
 80099be:	2200      	movs	r2, #0
 80099c0:	701a      	strb	r2, [r3, #0]

	//Encoder break engine
	sEncBreak[encNum].state[encVal] = true;
 80099c2:	1dfb      	adds	r3, r7, #7
 80099c4:	781a      	ldrb	r2, [r3, #0]
 80099c6:	1dbb      	adds	r3, r7, #6
 80099c8:	7819      	ldrb	r1, [r3, #0]
 80099ca:	48b1      	ldr	r0, [pc, #708]	@ (8009c90 <Encoder_Refresh_IT+0x38c>)
 80099cc:	0013      	movs	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	189b      	adds	r3, r3, r2
 80099d2:	005b      	lsls	r3, r3, #1
 80099d4:	18c3      	adds	r3, r0, r3
 80099d6:	2201      	movs	r2, #1
 80099d8:	545a      	strb	r2, [r3, r1]

	sEncBreak[encNum].stateCount = 0;
 80099da:	1dfb      	adds	r3, r7, #7
 80099dc:	781a      	ldrb	r2, [r3, #0]
 80099de:	49ac      	ldr	r1, [pc, #688]	@ (8009c90 <Encoder_Refresh_IT+0x38c>)
 80099e0:	0013      	movs	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	189b      	adds	r3, r3, r2
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	18cb      	adds	r3, r1, r3
 80099ea:	3304      	adds	r3, #4
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
	for( uint8_t i = 0 ; i < 4 ; i++ ){
 80099f0:	230d      	movs	r3, #13
 80099f2:	18fb      	adds	r3, r7, r3
 80099f4:	2200      	movs	r2, #0
 80099f6:	701a      	strb	r2, [r3, #0]
 80099f8:	e027      	b.n	8009a4a <Encoder_Refresh_IT+0x146>
		sEncBreak[encNum].stateCount += (uint8_t)sEncBreak[encNum].state[i];
 80099fa:	1dfb      	adds	r3, r7, #7
 80099fc:	781a      	ldrb	r2, [r3, #0]
 80099fe:	49a4      	ldr	r1, [pc, #656]	@ (8009c90 <Encoder_Refresh_IT+0x38c>)
 8009a00:	0013      	movs	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	189b      	adds	r3, r3, r2
 8009a06:	005b      	lsls	r3, r3, #1
 8009a08:	18cb      	adds	r3, r1, r3
 8009a0a:	3304      	adds	r3, #4
 8009a0c:	7819      	ldrb	r1, [r3, #0]
 8009a0e:	1dfb      	adds	r3, r7, #7
 8009a10:	781a      	ldrb	r2, [r3, #0]
 8009a12:	250d      	movs	r5, #13
 8009a14:	197b      	adds	r3, r7, r5
 8009a16:	7818      	ldrb	r0, [r3, #0]
 8009a18:	4c9d      	ldr	r4, [pc, #628]	@ (8009c90 <Encoder_Refresh_IT+0x38c>)
 8009a1a:	0013      	movs	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	189b      	adds	r3, r3, r2
 8009a20:	005b      	lsls	r3, r3, #1
 8009a22:	18e3      	adds	r3, r4, r3
 8009a24:	5c1b      	ldrb	r3, [r3, r0]
 8009a26:	1dfa      	adds	r2, r7, #7
 8009a28:	7812      	ldrb	r2, [r2, #0]
 8009a2a:	18cb      	adds	r3, r1, r3
 8009a2c:	b2d8      	uxtb	r0, r3
 8009a2e:	4998      	ldr	r1, [pc, #608]	@ (8009c90 <Encoder_Refresh_IT+0x38c>)
 8009a30:	0013      	movs	r3, r2
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	189b      	adds	r3, r3, r2
 8009a36:	005b      	lsls	r3, r3, #1
 8009a38:	18cb      	adds	r3, r1, r3
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	1c02      	adds	r2, r0, #0
 8009a3e:	701a      	strb	r2, [r3, #0]
	for( uint8_t i = 0 ; i < 4 ; i++ ){
 8009a40:	197b      	adds	r3, r7, r5
 8009a42:	781a      	ldrb	r2, [r3, #0]
 8009a44:	197b      	adds	r3, r7, r5
 8009a46:	3201      	adds	r2, #1
 8009a48:	701a      	strb	r2, [r3, #0]
 8009a4a:	230d      	movs	r3, #13
 8009a4c:	18fb      	adds	r3, r7, r3
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	2b03      	cmp	r3, #3
 8009a52:	d9d2      	bls.n	80099fa <Encoder_Refresh_IT+0xf6>
	}

#if(ENC_TYPE == ENC_TYPE_DISC)

	if( sEncBreak[encNum].stateCount >= 4 ){
 8009a54:	1dfb      	adds	r3, r7, #7
 8009a56:	781a      	ldrb	r2, [r3, #0]
 8009a58:	498d      	ldr	r1, [pc, #564]	@ (8009c90 <Encoder_Refresh_IT+0x38c>)
 8009a5a:	0013      	movs	r3, r2
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	189b      	adds	r3, r3, r2
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	18cb      	adds	r3, r1, r3
 8009a64:	3304      	adds	r3, #4
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d905      	bls.n	8009a78 <Encoder_Refresh_IT+0x174>
		_encdisk_func_break_clear(encNum);
 8009a6c:	1dfb      	adds	r3, r7, #7
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	0018      	movs	r0, r3
 8009a72:	f7fd ffe9 	bl	8007a48 <_encdisk_func_break_clear>
 8009a76:	e01d      	b.n	8009ab4 <Encoder_Refresh_IT+0x1b0>
	}
	else{
		sEncBreak[encNum].stepAcc += StepMotor_GetStepEnc( (tStpMtNum)encNum );
 8009a78:	1dfb      	adds	r3, r7, #7
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	0018      	movs	r0, r3
 8009a7e:	f003 fdcf 	bl	800d620 <StepMotor_GetStepEnc>
 8009a82:	0003      	movs	r3, r0
 8009a84:	0018      	movs	r0, r3
 8009a86:	1dfb      	adds	r3, r7, #7
 8009a88:	781a      	ldrb	r2, [r3, #0]
 8009a8a:	4981      	ldr	r1, [pc, #516]	@ (8009c90 <Encoder_Refresh_IT+0x38c>)
 8009a8c:	0013      	movs	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	189b      	adds	r3, r3, r2
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	18cb      	adds	r3, r1, r3
 8009a96:	3306      	adds	r3, #6
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	1dfa      	adds	r2, r7, #7
 8009a9c:	7812      	ldrb	r2, [r2, #0]
 8009a9e:	18c3      	adds	r3, r0, r3
 8009aa0:	b298      	uxth	r0, r3
 8009aa2:	497b      	ldr	r1, [pc, #492]	@ (8009c90 <Encoder_Refresh_IT+0x38c>)
 8009aa4:	0013      	movs	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	189b      	adds	r3, r3, r2
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	18cb      	adds	r3, r1, r3
 8009aae:	3306      	adds	r3, #6
 8009ab0:	1c02      	adds	r2, r0, #0
 8009ab2:	801a      	strh	r2, [r3, #0]
			}
		}
	}
#endif

	if( encFlagClear == true ){
 8009ab4:	230b      	movs	r3, #11
 8009ab6:	18fb      	adds	r3, r7, r3
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d11e      	bne.n	8009afc <Encoder_Refresh_IT+0x1f8>
		sEncBreak[encNum].stepAcc += StepMotor_GetStepEnc( (tStpMtNum)encNum );
 8009abe:	1dfb      	adds	r3, r7, #7
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	0018      	movs	r0, r3
 8009ac4:	f003 fdac 	bl	800d620 <StepMotor_GetStepEnc>
 8009ac8:	0003      	movs	r3, r0
 8009aca:	0018      	movs	r0, r3
 8009acc:	1dfb      	adds	r3, r7, #7
 8009ace:	781a      	ldrb	r2, [r3, #0]
 8009ad0:	496f      	ldr	r1, [pc, #444]	@ (8009c90 <Encoder_Refresh_IT+0x38c>)
 8009ad2:	0013      	movs	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	189b      	adds	r3, r3, r2
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	18cb      	adds	r3, r1, r3
 8009adc:	3306      	adds	r3, #6
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	1dfa      	adds	r2, r7, #7
 8009ae2:	7812      	ldrb	r2, [r2, #0]
 8009ae4:	18c3      	adds	r3, r0, r3
 8009ae6:	b298      	uxth	r0, r3
 8009ae8:	4969      	ldr	r1, [pc, #420]	@ (8009c90 <Encoder_Refresh_IT+0x38c>)
 8009aea:	0013      	movs	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	189b      	adds	r3, r3, r2
 8009af0:	005b      	lsls	r3, r3, #1
 8009af2:	18cb      	adds	r3, r1, r3
 8009af4:	3306      	adds	r3, #6
 8009af6:	1c02      	adds	r2, r0, #0
 8009af8:	801a      	strh	r2, [r3, #0]
 8009afa:	e004      	b.n	8009b06 <Encoder_Refresh_IT+0x202>
	}
	else{
		_encdisk_func_break_clear(encNum);
 8009afc:	1dfb      	adds	r3, r7, #7
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	0018      	movs	r0, r3
 8009b02:	f7fd ffa1 	bl	8007a48 <_encdisk_func_break_clear>
	}

	//Encoder Map
	if( sEncCalib[encNum].encSeqFlag == true )
 8009b06:	1dfb      	adds	r3, r7, #7
 8009b08:	781a      	ldrb	r2, [r3, #0]
 8009b0a:	4962      	ldr	r1, [pc, #392]	@ (8009c94 <Encoder_Refresh_IT+0x390>)
 8009b0c:	202c      	movs	r0, #44	@ 0x2c
 8009b0e:	0013      	movs	r3, r2
 8009b10:	00db      	lsls	r3, r3, #3
 8009b12:	1a9b      	subs	r3, r3, r2
 8009b14:	00db      	lsls	r3, r3, #3
 8009b16:	18cb      	adds	r3, r1, r3
 8009b18:	181b      	adds	r3, r3, r0
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d000      	beq.n	8009b22 <Encoder_Refresh_IT+0x21e>
 8009b20:	e1c9      	b.n	8009eb6 <Encoder_Refresh_IT+0x5b2>
	{
		//Salva os indices de posi��o
		for( uint8_t i = 0 ; i < 4 ; i++ )
 8009b22:	230c      	movs	r3, #12
 8009b24:	18fb      	adds	r3, r7, r3
 8009b26:	2200      	movs	r2, #0
 8009b28:	701a      	strb	r2, [r3, #0]
 8009b2a:	e03f      	b.n	8009bac <Encoder_Refresh_IT+0x2a8>
		{
			if( encVal == sEncCalib[encNum].encSeq[i] ){
 8009b2c:	1dfb      	adds	r3, r7, #7
 8009b2e:	781a      	ldrb	r2, [r3, #0]
 8009b30:	250c      	movs	r5, #12
 8009b32:	197b      	adds	r3, r7, r5
 8009b34:	7819      	ldrb	r1, [r3, #0]
 8009b36:	4857      	ldr	r0, [pc, #348]	@ (8009c94 <Encoder_Refresh_IT+0x390>)
 8009b38:	2428      	movs	r4, #40	@ 0x28
 8009b3a:	0013      	movs	r3, r2
 8009b3c:	00db      	lsls	r3, r3, #3
 8009b3e:	1a9b      	subs	r3, r3, r2
 8009b40:	00db      	lsls	r3, r3, #3
 8009b42:	18c3      	adds	r3, r0, r3
 8009b44:	185b      	adds	r3, r3, r1
 8009b46:	191b      	adds	r3, r3, r4
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	1dba      	adds	r2, r7, #6
 8009b4c:	7812      	ldrb	r2, [r2, #0]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d105      	bne.n	8009b5e <Encoder_Refresh_IT+0x25a>
				posIndex = i;
 8009b52:	230f      	movs	r3, #15
 8009b54:	18fb      	adds	r3, r7, r3
 8009b56:	197a      	adds	r2, r7, r5
 8009b58:	7812      	ldrb	r2, [r2, #0]
 8009b5a:	701a      	strb	r2, [r3, #0]
 8009b5c:	e020      	b.n	8009ba0 <Encoder_Refresh_IT+0x29c>
			}
			else if( sEncDisk[encNum].lastDiskEnc == sEncCalib[encNum].encSeq[i] ){
 8009b5e:	1dfb      	adds	r3, r7, #7
 8009b60:	781a      	ldrb	r2, [r3, #0]
 8009b62:	494a      	ldr	r1, [pc, #296]	@ (8009c8c <Encoder_Refresh_IT+0x388>)
 8009b64:	0013      	movs	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	189b      	adds	r3, r3, r2
 8009b6a:	009a      	lsls	r2, r3, #2
 8009b6c:	189b      	adds	r3, r3, r2
 8009b6e:	18cb      	adds	r3, r1, r3
 8009b70:	3317      	adds	r3, #23
 8009b72:	7819      	ldrb	r1, [r3, #0]
 8009b74:	1dfb      	adds	r3, r7, #7
 8009b76:	781a      	ldrb	r2, [r3, #0]
 8009b78:	260c      	movs	r6, #12
 8009b7a:	19bb      	adds	r3, r7, r6
 8009b7c:	7818      	ldrb	r0, [r3, #0]
 8009b7e:	4c45      	ldr	r4, [pc, #276]	@ (8009c94 <Encoder_Refresh_IT+0x390>)
 8009b80:	2528      	movs	r5, #40	@ 0x28
 8009b82:	0013      	movs	r3, r2
 8009b84:	00db      	lsls	r3, r3, #3
 8009b86:	1a9b      	subs	r3, r3, r2
 8009b88:	00db      	lsls	r3, r3, #3
 8009b8a:	18e3      	adds	r3, r4, r3
 8009b8c:	181b      	adds	r3, r3, r0
 8009b8e:	195b      	adds	r3, r3, r5
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	4299      	cmp	r1, r3
 8009b94:	d104      	bne.n	8009ba0 <Encoder_Refresh_IT+0x29c>
				posIndexLast = i;
 8009b96:	230e      	movs	r3, #14
 8009b98:	18fb      	adds	r3, r7, r3
 8009b9a:	19ba      	adds	r2, r7, r6
 8009b9c:	7812      	ldrb	r2, [r2, #0]
 8009b9e:	701a      	strb	r2, [r3, #0]
		for( uint8_t i = 0 ; i < 4 ; i++ )
 8009ba0:	210c      	movs	r1, #12
 8009ba2:	187b      	adds	r3, r7, r1
 8009ba4:	781a      	ldrb	r2, [r3, #0]
 8009ba6:	187b      	adds	r3, r7, r1
 8009ba8:	3201      	adds	r2, #1
 8009baa:	701a      	strb	r2, [r3, #0]
 8009bac:	230c      	movs	r3, #12
 8009bae:	18fb      	adds	r3, r7, r3
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d9ba      	bls.n	8009b2c <Encoder_Refresh_IT+0x228>
			}
		}
		//Verifica dire��o
		if( posIndex == posIndexLast ){
 8009bb6:	230f      	movs	r3, #15
 8009bb8:	18fa      	adds	r2, r7, r3
 8009bba:	230e      	movs	r3, #14
 8009bbc:	18fb      	adds	r3, r7, r3
 8009bbe:	7812      	ldrb	r2, [r2, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d10b      	bne.n	8009bde <Encoder_Refresh_IT+0x2da>
			sEncPosMap[encNum].dir = _e_EncDir_Unknown;
 8009bc6:	1dfb      	adds	r3, r7, #7
 8009bc8:	781a      	ldrb	r2, [r3, #0]
 8009bca:	4933      	ldr	r1, [pc, #204]	@ (8009c98 <Encoder_Refresh_IT+0x394>)
 8009bcc:	0013      	movs	r3, r2
 8009bce:	005b      	lsls	r3, r3, #1
 8009bd0:	189b      	adds	r3, r3, r2
 8009bd2:	00db      	lsls	r3, r3, #3
 8009bd4:	18cb      	adds	r3, r1, r3
 8009bd6:	3314      	adds	r3, #20
 8009bd8:	2202      	movs	r2, #2
 8009bda:	701a      	strb	r2, [r3, #0]
 8009bdc:	e069      	b.n	8009cb2 <Encoder_Refresh_IT+0x3ae>
		}
		else
		{
			if( posIndex == posIndexLast+1 )
 8009bde:	230f      	movs	r3, #15
 8009be0:	18fb      	adds	r3, r7, r3
 8009be2:	781a      	ldrb	r2, [r3, #0]
 8009be4:	230e      	movs	r3, #14
 8009be6:	18fb      	adds	r3, r7, r3
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	3301      	adds	r3, #1
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d10b      	bne.n	8009c08 <Encoder_Refresh_IT+0x304>
				sEncPosMap[encNum].dir = _e_EncDir_Right;
 8009bf0:	1dfb      	adds	r3, r7, #7
 8009bf2:	781a      	ldrb	r2, [r3, #0]
 8009bf4:	4928      	ldr	r1, [pc, #160]	@ (8009c98 <Encoder_Refresh_IT+0x394>)
 8009bf6:	0013      	movs	r3, r2
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	189b      	adds	r3, r3, r2
 8009bfc:	00db      	lsls	r3, r3, #3
 8009bfe:	18cb      	adds	r3, r1, r3
 8009c00:	3314      	adds	r3, #20
 8009c02:	2201      	movs	r2, #1
 8009c04:	701a      	strb	r2, [r3, #0]
 8009c06:	e054      	b.n	8009cb2 <Encoder_Refresh_IT+0x3ae>
			else if( posIndex == posIndexLast-1 )
 8009c08:	230f      	movs	r3, #15
 8009c0a:	18fb      	adds	r3, r7, r3
 8009c0c:	781a      	ldrb	r2, [r3, #0]
 8009c0e:	230e      	movs	r3, #14
 8009c10:	18fb      	adds	r3, r7, r3
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d10b      	bne.n	8009c32 <Encoder_Refresh_IT+0x32e>
				sEncPosMap[encNum].dir = _e_EncDir_Left;
 8009c1a:	1dfb      	adds	r3, r7, #7
 8009c1c:	781a      	ldrb	r2, [r3, #0]
 8009c1e:	491e      	ldr	r1, [pc, #120]	@ (8009c98 <Encoder_Refresh_IT+0x394>)
 8009c20:	0013      	movs	r3, r2
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	189b      	adds	r3, r3, r2
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	18cb      	adds	r3, r1, r3
 8009c2a:	3314      	adds	r3, #20
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	701a      	strb	r2, [r3, #0]
 8009c30:	e03f      	b.n	8009cb2 <Encoder_Refresh_IT+0x3ae>
			else
			{
				if( posIndex == 0 && posIndexLast == 3 ){
 8009c32:	230f      	movs	r3, #15
 8009c34:	18fb      	adds	r3, r7, r3
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d110      	bne.n	8009c5e <Encoder_Refresh_IT+0x35a>
 8009c3c:	230e      	movs	r3, #14
 8009c3e:	18fb      	adds	r3, r7, r3
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d10b      	bne.n	8009c5e <Encoder_Refresh_IT+0x35a>
					sEncPosMap[encNum].dir = _e_EncDir_Right;
 8009c46:	1dfb      	adds	r3, r7, #7
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	4913      	ldr	r1, [pc, #76]	@ (8009c98 <Encoder_Refresh_IT+0x394>)
 8009c4c:	0013      	movs	r3, r2
 8009c4e:	005b      	lsls	r3, r3, #1
 8009c50:	189b      	adds	r3, r3, r2
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	18cb      	adds	r3, r1, r3
 8009c56:	3314      	adds	r3, #20
 8009c58:	2201      	movs	r2, #1
 8009c5a:	701a      	strb	r2, [r3, #0]
 8009c5c:	e029      	b.n	8009cb2 <Encoder_Refresh_IT+0x3ae>
				}
				else if( posIndex == 3 && posIndexLast == 0 ){
 8009c5e:	230f      	movs	r3, #15
 8009c60:	18fb      	adds	r3, r7, r3
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2b03      	cmp	r3, #3
 8009c66:	d119      	bne.n	8009c9c <Encoder_Refresh_IT+0x398>
 8009c68:	230e      	movs	r3, #14
 8009c6a:	18fb      	adds	r3, r7, r3
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d114      	bne.n	8009c9c <Encoder_Refresh_IT+0x398>
					sEncPosMap[encNum].dir = _e_EncDir_Left;
 8009c72:	1dfb      	adds	r3, r7, #7
 8009c74:	781a      	ldrb	r2, [r3, #0]
 8009c76:	4908      	ldr	r1, [pc, #32]	@ (8009c98 <Encoder_Refresh_IT+0x394>)
 8009c78:	0013      	movs	r3, r2
 8009c7a:	005b      	lsls	r3, r3, #1
 8009c7c:	189b      	adds	r3, r3, r2
 8009c7e:	00db      	lsls	r3, r3, #3
 8009c80:	18cb      	adds	r3, r1, r3
 8009c82:	3314      	adds	r3, #20
 8009c84:	2200      	movs	r2, #0
 8009c86:	701a      	strb	r2, [r3, #0]
 8009c88:	e013      	b.n	8009cb2 <Encoder_Refresh_IT+0x3ae>
 8009c8a:	46c0      	nop			@ (mov r8, r8)
 8009c8c:	200000e4 	.word	0x200000e4
 8009c90:	20000148 	.word	0x20000148
 8009c94:	20000074 	.word	0x20000074
 8009c98:	20000118 	.word	0x20000118
				}
				else{
					sEncPosMap[encNum].dir = _e_EncDir_Unknown;
 8009c9c:	1dfb      	adds	r3, r7, #7
 8009c9e:	781a      	ldrb	r2, [r3, #0]
 8009ca0:	498d      	ldr	r1, [pc, #564]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009ca2:	0013      	movs	r3, r2
 8009ca4:	005b      	lsls	r3, r3, #1
 8009ca6:	189b      	adds	r3, r3, r2
 8009ca8:	00db      	lsls	r3, r3, #3
 8009caa:	18cb      	adds	r3, r1, r3
 8009cac:	3314      	adds	r3, #20
 8009cae:	2202      	movs	r2, #2
 8009cb0:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		//Faz incremento ou dercemento de posi��o
		if( sEncPosMap[encNum].dir == _e_EncDir_Left /*||
 8009cb2:	1dfb      	adds	r3, r7, #7
 8009cb4:	781a      	ldrb	r2, [r3, #0]
 8009cb6:	4988      	ldr	r1, [pc, #544]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009cb8:	0013      	movs	r3, r2
 8009cba:	005b      	lsls	r3, r3, #1
 8009cbc:	189b      	adds	r3, r3, r2
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	18cb      	adds	r3, r1, r3
 8009cc2:	3314      	adds	r3, #20
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d168      	bne.n	8009d9c <Encoder_Refresh_IT+0x498>
			( 	StepMotor_GetDir((tStpMtNum)encNum) == _e_StMtDir_Left &&
				StepMotor_GetSts((tStpMtNum)encNum) != _e_StpMtSts_Stop )*/
		  )
		{
			if( sEncPosMap[encNum].encCount[sEncPosMap[encNum].index] > 0 ){
 8009cca:	1dfb      	adds	r3, r7, #7
 8009ccc:	781a      	ldrb	r2, [r3, #0]
 8009cce:	1dfb      	adds	r3, r7, #7
 8009cd0:	7819      	ldrb	r1, [r3, #0]
 8009cd2:	4881      	ldr	r0, [pc, #516]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009cd4:	000b      	movs	r3, r1
 8009cd6:	005b      	lsls	r3, r3, #1
 8009cd8:	185b      	adds	r3, r3, r1
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	18c3      	adds	r3, r0, r3
 8009cde:	3310      	adds	r3, #16
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	497c      	ldr	r1, [pc, #496]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009ce6:	0013      	movs	r3, r2
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	189b      	adds	r3, r3, r2
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	18cb      	adds	r3, r1, r3
 8009cf0:	181b      	adds	r3, r3, r0
 8009cf2:	3315      	adds	r3, #21
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d021      	beq.n	8009d3e <Encoder_Refresh_IT+0x43a>
				sEncPosMap[encNum].encCount[sEncPosMap[encNum].index]--;
 8009cfa:	1dfb      	adds	r3, r7, #7
 8009cfc:	781a      	ldrb	r2, [r3, #0]
 8009cfe:	1dfb      	adds	r3, r7, #7
 8009d00:	7819      	ldrb	r1, [r3, #0]
 8009d02:	4875      	ldr	r0, [pc, #468]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009d04:	000b      	movs	r3, r1
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	185b      	adds	r3, r3, r1
 8009d0a:	00db      	lsls	r3, r3, #3
 8009d0c:	18c3      	adds	r3, r0, r3
 8009d0e:	3310      	adds	r3, #16
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	0019      	movs	r1, r3
 8009d14:	4870      	ldr	r0, [pc, #448]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009d16:	0013      	movs	r3, r2
 8009d18:	005b      	lsls	r3, r3, #1
 8009d1a:	189b      	adds	r3, r3, r2
 8009d1c:	00db      	lsls	r3, r3, #3
 8009d1e:	18c3      	adds	r3, r0, r3
 8009d20:	185b      	adds	r3, r3, r1
 8009d22:	3315      	adds	r3, #21
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	b2dc      	uxtb	r4, r3
 8009d2a:	486b      	ldr	r0, [pc, #428]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009d2c:	0013      	movs	r3, r2
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	189b      	adds	r3, r3, r2
 8009d32:	00db      	lsls	r3, r3, #3
 8009d34:	18c3      	adds	r3, r0, r3
 8009d36:	185b      	adds	r3, r3, r1
 8009d38:	3315      	adds	r3, #21
 8009d3a:	1c22      	adds	r2, r4, #0
 8009d3c:	701a      	strb	r2, [r3, #0]
			}
			sEncPosMap[encNum].ang -= sEncCalib[encNum].encRes[sEncPosMap[encNum].index];
 8009d3e:	1dfb      	adds	r3, r7, #7
 8009d40:	781a      	ldrb	r2, [r3, #0]
 8009d42:	4965      	ldr	r1, [pc, #404]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009d44:	0013      	movs	r3, r2
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	189b      	adds	r3, r3, r2
 8009d4a:	00db      	lsls	r3, r3, #3
 8009d4c:	585d      	ldr	r5, [r3, r1]
 8009d4e:	1dfb      	adds	r3, r7, #7
 8009d50:	781a      	ldrb	r2, [r3, #0]
 8009d52:	1dfb      	adds	r3, r7, #7
 8009d54:	7819      	ldrb	r1, [r3, #0]
 8009d56:	4860      	ldr	r0, [pc, #384]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009d58:	000b      	movs	r3, r1
 8009d5a:	005b      	lsls	r3, r3, #1
 8009d5c:	185b      	adds	r3, r3, r1
 8009d5e:	00db      	lsls	r3, r3, #3
 8009d60:	18c3      	adds	r3, r0, r3
 8009d62:	3310      	adds	r3, #16
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	0018      	movs	r0, r3
 8009d68:	495c      	ldr	r1, [pc, #368]	@ (8009edc <Encoder_Refresh_IT+0x5d8>)
 8009d6a:	0013      	movs	r3, r2
 8009d6c:	00db      	lsls	r3, r3, #3
 8009d6e:	1a9b      	subs	r3, r3, r2
 8009d70:	005b      	lsls	r3, r3, #1
 8009d72:	181b      	adds	r3, r3, r0
 8009d74:	3306      	adds	r3, #6
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	18cb      	adds	r3, r1, r3
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	1dfb      	adds	r3, r7, #7
 8009d80:	781c      	ldrb	r4, [r3, #0]
 8009d82:	1c11      	adds	r1, r2, #0
 8009d84:	1c28      	adds	r0, r5, #0
 8009d86:	f7f7 f853 	bl	8000e30 <__aeabi_fsub>
 8009d8a:	1c03      	adds	r3, r0, #0
 8009d8c:	1c19      	adds	r1, r3, #0
 8009d8e:	4a52      	ldr	r2, [pc, #328]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009d90:	0023      	movs	r3, r4
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	191b      	adds	r3, r3, r4
 8009d96:	00db      	lsls	r3, r3, #3
 8009d98:	5099      	str	r1, [r3, r2]
 8009d9a:	e08c      	b.n	8009eb6 <Encoder_Refresh_IT+0x5b2>
		}
		else if( sEncPosMap[encNum].dir == _e_EncDir_Right /*||
 8009d9c:	1dfb      	adds	r3, r7, #7
 8009d9e:	781a      	ldrb	r2, [r3, #0]
 8009da0:	494d      	ldr	r1, [pc, #308]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009da2:	0013      	movs	r3, r2
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	189b      	adds	r3, r3, r2
 8009da8:	00db      	lsls	r3, r3, #3
 8009daa:	18cb      	adds	r3, r1, r3
 8009dac:	3314      	adds	r3, #20
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d000      	beq.n	8009db6 <Encoder_Refresh_IT+0x4b2>
 8009db4:	e07f      	b.n	8009eb6 <Encoder_Refresh_IT+0x5b2>
				( 	StepMotor_GetDir((tStpMtNum)encNum) == _e_StMtDir_Right &&
					StepMotor_GetSts((tStpMtNum)encNum) != _e_StpMtSts_Stop )*/
			  )
		{
			if( sEncPosMap[encNum].encCount[sEncPosMap[encNum].index] < sEncCalib[encNum].encCount[sEncPosMap[encNum].index] ){
 8009db6:	1dfb      	adds	r3, r7, #7
 8009db8:	781a      	ldrb	r2, [r3, #0]
 8009dba:	1dfb      	adds	r3, r7, #7
 8009dbc:	7819      	ldrb	r1, [r3, #0]
 8009dbe:	4846      	ldr	r0, [pc, #280]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009dc0:	000b      	movs	r3, r1
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	185b      	adds	r3, r3, r1
 8009dc6:	00db      	lsls	r3, r3, #3
 8009dc8:	18c3      	adds	r3, r0, r3
 8009dca:	3310      	adds	r3, #16
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	0018      	movs	r0, r3
 8009dd0:	4941      	ldr	r1, [pc, #260]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009dd2:	0013      	movs	r3, r2
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	189b      	adds	r3, r3, r2
 8009dd8:	00db      	lsls	r3, r3, #3
 8009dda:	18cb      	adds	r3, r1, r3
 8009ddc:	181b      	adds	r3, r3, r0
 8009dde:	3315      	adds	r3, #21
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	001c      	movs	r4, r3
 8009de4:	1dfb      	adds	r3, r7, #7
 8009de6:	781a      	ldrb	r2, [r3, #0]
 8009de8:	1dfb      	adds	r3, r7, #7
 8009dea:	7819      	ldrb	r1, [r3, #0]
 8009dec:	483a      	ldr	r0, [pc, #232]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009dee:	000b      	movs	r3, r1
 8009df0:	005b      	lsls	r3, r3, #1
 8009df2:	185b      	adds	r3, r3, r1
 8009df4:	00db      	lsls	r3, r3, #3
 8009df6:	18c3      	adds	r3, r0, r3
 8009df8:	3310      	adds	r3, #16
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	0018      	movs	r0, r3
 8009dfe:	4937      	ldr	r1, [pc, #220]	@ (8009edc <Encoder_Refresh_IT+0x5d8>)
 8009e00:	0013      	movs	r3, r2
 8009e02:	00db      	lsls	r3, r3, #3
 8009e04:	1a9b      	subs	r3, r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	181b      	adds	r3, r3, r0
 8009e0a:	005b      	lsls	r3, r3, #1
 8009e0c:	18cb      	adds	r3, r1, r3
 8009e0e:	3302      	adds	r3, #2
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	429c      	cmp	r4, r3
 8009e14:	d221      	bcs.n	8009e5a <Encoder_Refresh_IT+0x556>
				sEncPosMap[encNum].encCount[sEncPosMap[encNum].index]++;
 8009e16:	1dfb      	adds	r3, r7, #7
 8009e18:	781a      	ldrb	r2, [r3, #0]
 8009e1a:	1dfb      	adds	r3, r7, #7
 8009e1c:	7819      	ldrb	r1, [r3, #0]
 8009e1e:	482e      	ldr	r0, [pc, #184]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009e20:	000b      	movs	r3, r1
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	185b      	adds	r3, r3, r1
 8009e26:	00db      	lsls	r3, r3, #3
 8009e28:	18c3      	adds	r3, r0, r3
 8009e2a:	3310      	adds	r3, #16
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	0019      	movs	r1, r3
 8009e30:	4829      	ldr	r0, [pc, #164]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009e32:	0013      	movs	r3, r2
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	189b      	adds	r3, r3, r2
 8009e38:	00db      	lsls	r3, r3, #3
 8009e3a:	18c3      	adds	r3, r0, r3
 8009e3c:	185b      	adds	r3, r3, r1
 8009e3e:	3315      	adds	r3, #21
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	3301      	adds	r3, #1
 8009e44:	b2dc      	uxtb	r4, r3
 8009e46:	4824      	ldr	r0, [pc, #144]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009e48:	0013      	movs	r3, r2
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	189b      	adds	r3, r3, r2
 8009e4e:	00db      	lsls	r3, r3, #3
 8009e50:	18c3      	adds	r3, r0, r3
 8009e52:	185b      	adds	r3, r3, r1
 8009e54:	3315      	adds	r3, #21
 8009e56:	1c22      	adds	r2, r4, #0
 8009e58:	701a      	strb	r2, [r3, #0]
			}
			sEncPosMap[encNum].ang += sEncCalib[encNum].encRes[sEncPosMap[encNum].index];
 8009e5a:	1dfb      	adds	r3, r7, #7
 8009e5c:	781a      	ldrb	r2, [r3, #0]
 8009e5e:	491e      	ldr	r1, [pc, #120]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009e60:	0013      	movs	r3, r2
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	189b      	adds	r3, r3, r2
 8009e66:	00db      	lsls	r3, r3, #3
 8009e68:	585d      	ldr	r5, [r3, r1]
 8009e6a:	1dfb      	adds	r3, r7, #7
 8009e6c:	781a      	ldrb	r2, [r3, #0]
 8009e6e:	1dfb      	adds	r3, r7, #7
 8009e70:	7819      	ldrb	r1, [r3, #0]
 8009e72:	4819      	ldr	r0, [pc, #100]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009e74:	000b      	movs	r3, r1
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	185b      	adds	r3, r3, r1
 8009e7a:	00db      	lsls	r3, r3, #3
 8009e7c:	18c3      	adds	r3, r0, r3
 8009e7e:	3310      	adds	r3, #16
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	0018      	movs	r0, r3
 8009e84:	4915      	ldr	r1, [pc, #84]	@ (8009edc <Encoder_Refresh_IT+0x5d8>)
 8009e86:	0013      	movs	r3, r2
 8009e88:	00db      	lsls	r3, r3, #3
 8009e8a:	1a9b      	subs	r3, r3, r2
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	181b      	adds	r3, r3, r0
 8009e90:	3306      	adds	r3, #6
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	18cb      	adds	r3, r1, r3
 8009e96:	3304      	adds	r3, #4
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	1dfb      	adds	r3, r7, #7
 8009e9c:	781c      	ldrb	r4, [r3, #0]
 8009e9e:	1c11      	adds	r1, r2, #0
 8009ea0:	1c28      	adds	r0, r5, #0
 8009ea2:	f7f6 fb17 	bl	80004d4 <__aeabi_fadd>
 8009ea6:	1c03      	adds	r3, r0, #0
 8009ea8:	1c19      	adds	r1, r3, #0
 8009eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8009ed8 <Encoder_Refresh_IT+0x5d4>)
 8009eac:	0023      	movs	r3, r4
 8009eae:	005b      	lsls	r3, r3, #1
 8009eb0:	191b      	adds	r3, r3, r4
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	5099      	str	r1, [r3, r2]
		}


	}
	sEncDisk[encNum].lastDiskEnc = encVal;
 8009eb6:	1dfb      	adds	r3, r7, #7
 8009eb8:	781a      	ldrb	r2, [r3, #0]
 8009eba:	4909      	ldr	r1, [pc, #36]	@ (8009ee0 <Encoder_Refresh_IT+0x5dc>)
 8009ebc:	0013      	movs	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	189b      	adds	r3, r3, r2
 8009ec2:	009a      	lsls	r2, r3, #2
 8009ec4:	189b      	adds	r3, r3, r2
 8009ec6:	18cb      	adds	r3, r1, r3
 8009ec8:	3317      	adds	r3, #23
 8009eca:	1dba      	adds	r2, r7, #6
 8009ecc:	7812      	ldrb	r2, [r2, #0]
 8009ece:	701a      	strb	r2, [r3, #0]
}
 8009ed0:	46c0      	nop			@ (mov r8, r8)
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	b005      	add	sp, #20
 8009ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ed8:	20000118 	.word	0x20000118
 8009edc:	20000074 	.word	0x20000074
 8009ee0:	200000e4 	.word	0x200000e4

08009ee4 <Encoder_Position_IT>:

void Encoder_Position_IT( tEncNum encNum , uint8_t posVal )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	0002      	movs	r2, r0
 8009eec:	1dfb      	adds	r3, r7, #7
 8009eee:	701a      	strb	r2, [r3, #0]
 8009ef0:	1dbb      	adds	r3, r7, #6
 8009ef2:	1c0a      	adds	r2, r1, #0
 8009ef4:	701a      	strb	r2, [r3, #0]
	_encdisk_func_inc_buffindex(encNum);
 8009ef6:	1dfb      	adds	r3, r7, #7
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	0018      	movs	r0, r3
 8009efc:	f7fd fd66 	bl	80079cc <_encdisk_func_inc_buffindex>
	sEncDisk[encNum].buffDiskPos[sEncDisk[encNum].buffIndex] = posVal;
 8009f00:	1dfb      	adds	r3, r7, #7
 8009f02:	781a      	ldrb	r2, [r3, #0]
 8009f04:	1dfb      	adds	r3, r7, #7
 8009f06:	7819      	ldrb	r1, [r3, #0]
 8009f08:	4811      	ldr	r0, [pc, #68]	@ (8009f50 <Encoder_Position_IT+0x6c>)
 8009f0a:	000b      	movs	r3, r1
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	185b      	adds	r3, r3, r1
 8009f10:	0099      	lsls	r1, r3, #2
 8009f12:	185b      	adds	r3, r3, r1
 8009f14:	18c3      	adds	r3, r0, r3
 8009f16:	3304      	adds	r3, #4
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	0018      	movs	r0, r3
 8009f1c:	490c      	ldr	r1, [pc, #48]	@ (8009f50 <Encoder_Position_IT+0x6c>)
 8009f1e:	0013      	movs	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	189b      	adds	r3, r3, r2
 8009f24:	009a      	lsls	r2, r3, #2
 8009f26:	189b      	adds	r3, r3, r2
 8009f28:	18cb      	adds	r3, r1, r3
 8009f2a:	181b      	adds	r3, r3, r0
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	1dba      	adds	r2, r7, #6
 8009f30:	7812      	ldrb	r2, [r2, #0]
 8009f32:	701a      	strb	r2, [r3, #0]
	sEncDisk[encNum].diskPosChange = true;
 8009f34:	1dfb      	adds	r3, r7, #7
 8009f36:	781a      	ldrb	r2, [r3, #0]
 8009f38:	4905      	ldr	r1, [pc, #20]	@ (8009f50 <Encoder_Position_IT+0x6c>)
 8009f3a:	0013      	movs	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	189b      	adds	r3, r3, r2
 8009f40:	009a      	lsls	r2, r3, #2
 8009f42:	189b      	adds	r3, r3, r2
 8009f44:	2201      	movs	r2, #1
 8009f46:	545a      	strb	r2, [r3, r1]
}
 8009f48:	46c0      	nop			@ (mov r8, r8)
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	b002      	add	sp, #8
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	200000e4 	.word	0x200000e4

08009f54 <Encoder_Cali_Get>:

//Ext User

tEncCalib Encoder_Cali_Get( tEncNum encNum )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	0002      	movs	r2, r0
 8009f5c:	1dfb      	adds	r3, r7, #7
 8009f5e:	701a      	strb	r2, [r3, #0]
	return sEncCalib[encNum].status;
 8009f60:	1dfb      	adds	r3, r7, #7
 8009f62:	781a      	ldrb	r2, [r3, #0]
 8009f64:	4906      	ldr	r1, [pc, #24]	@ (8009f80 <Encoder_Cali_Get+0x2c>)
 8009f66:	202d      	movs	r0, #45	@ 0x2d
 8009f68:	0013      	movs	r3, r2
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	1a9b      	subs	r3, r3, r2
 8009f6e:	00db      	lsls	r3, r3, #3
 8009f70:	18cb      	adds	r3, r1, r3
 8009f72:	181b      	adds	r3, r3, r0
 8009f74:	781b      	ldrb	r3, [r3, #0]
}
 8009f76:	0018      	movs	r0, r3
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	b002      	add	sp, #8
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	46c0      	nop			@ (mov r8, r8)
 8009f80:	20000074 	.word	0x20000074

08009f84 <Encoder_Cali_Set>:

void Encoder_Cali_Set( tEncNum encNum , tEncStopMode stopMode )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	0002      	movs	r2, r0
 8009f8c:	1dfb      	adds	r3, r7, #7
 8009f8e:	701a      	strb	r2, [r3, #0]
 8009f90:	1dbb      	adds	r3, r7, #6
 8009f92:	1c0a      	adds	r2, r1, #0
 8009f94:	701a      	strb	r2, [r3, #0]
	sEncCtrl[encNum].stopMode = stopMode;
 8009f96:	1dfb      	adds	r3, r7, #7
 8009f98:	781a      	ldrb	r2, [r3, #0]
 8009f9a:	4917      	ldr	r1, [pc, #92]	@ (8009ff8 <Encoder_Cali_Set+0x74>)
 8009f9c:	0013      	movs	r3, r2
 8009f9e:	005b      	lsls	r3, r3, #1
 8009fa0:	189b      	adds	r3, r3, r2
 8009fa2:	00db      	lsls	r3, r3, #3
 8009fa4:	18cb      	adds	r3, r1, r3
 8009fa6:	3302      	adds	r3, #2
 8009fa8:	1dba      	adds	r2, r7, #6
 8009faa:	7812      	ldrb	r2, [r2, #0]
 8009fac:	701a      	strb	r2, [r3, #0]
	sEncCalib[encNum].status = _e_EncCalib_Running;
 8009fae:	1dfb      	adds	r3, r7, #7
 8009fb0:	781a      	ldrb	r2, [r3, #0]
 8009fb2:	4912      	ldr	r1, [pc, #72]	@ (8009ffc <Encoder_Cali_Set+0x78>)
 8009fb4:	202d      	movs	r0, #45	@ 0x2d
 8009fb6:	0013      	movs	r3, r2
 8009fb8:	00db      	lsls	r3, r3, #3
 8009fba:	1a9b      	subs	r3, r3, r2
 8009fbc:	00db      	lsls	r3, r3, #3
 8009fbe:	18cb      	adds	r3, r1, r3
 8009fc0:	181b      	adds	r3, r3, r0
 8009fc2:	2205      	movs	r2, #5
 8009fc4:	701a      	strb	r2, [r3, #0]
	sEncCtrl[encNum].status = _e_EncCalib_Running;
 8009fc6:	1dfb      	adds	r3, r7, #7
 8009fc8:	781a      	ldrb	r2, [r3, #0]
 8009fca:	490b      	ldr	r1, [pc, #44]	@ (8009ff8 <Encoder_Cali_Set+0x74>)
 8009fcc:	0013      	movs	r3, r2
 8009fce:	005b      	lsls	r3, r3, #1
 8009fd0:	189b      	adds	r3, r3, r2
 8009fd2:	00db      	lsls	r3, r3, #3
 8009fd4:	2205      	movs	r2, #5
 8009fd6:	545a      	strb	r2, [r3, r1]
	sEncCtrl[encNum].command = _e_EncCmd_Cali;
 8009fd8:	1dfb      	adds	r3, r7, #7
 8009fda:	781a      	ldrb	r2, [r3, #0]
 8009fdc:	4906      	ldr	r1, [pc, #24]	@ (8009ff8 <Encoder_Cali_Set+0x74>)
 8009fde:	0013      	movs	r3, r2
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	189b      	adds	r3, r3, r2
 8009fe4:	00db      	lsls	r3, r3, #3
 8009fe6:	18cb      	adds	r3, r1, r3
 8009fe8:	3301      	adds	r3, #1
 8009fea:	2201      	movs	r2, #1
 8009fec:	701a      	strb	r2, [r3, #0]
}
 8009fee:	46c0      	nop			@ (mov r8, r8)
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	b002      	add	sp, #8
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	46c0      	nop			@ (mov r8, r8)
 8009ff8:	2000015c 	.word	0x2000015c
 8009ffc:	20000074 	.word	0x20000074

0800a000 <Encoder_Move_Set>:



void Encoder_Move_Set( tEncNum encNum , uint8_t ang , tEncStopMode stopMode )
{
 800a000:	b590      	push	{r4, r7, lr}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	0004      	movs	r4, r0
 800a008:	0008      	movs	r0, r1
 800a00a:	0011      	movs	r1, r2
 800a00c:	1dfb      	adds	r3, r7, #7
 800a00e:	1c22      	adds	r2, r4, #0
 800a010:	701a      	strb	r2, [r3, #0]
 800a012:	1dbb      	adds	r3, r7, #6
 800a014:	1c02      	adds	r2, r0, #0
 800a016:	701a      	strb	r2, [r3, #0]
 800a018:	1d7b      	adds	r3, r7, #5
 800a01a:	1c0a      	adds	r2, r1, #0
 800a01c:	701a      	strb	r2, [r3, #0]

	//if( sEncCtrl[encNum].angPercentUser == ang )return;
	if( sEncPosMap[encNum].angPercent < (ang-ENC_MOVE_ANG_TOL) ||
 800a01e:	1dfb      	adds	r3, r7, #7
 800a020:	781a      	ldrb	r2, [r3, #0]
 800a022:	4959      	ldr	r1, [pc, #356]	@ (800a188 <Encoder_Move_Set+0x188>)
 800a024:	0013      	movs	r3, r2
 800a026:	005b      	lsls	r3, r3, #1
 800a028:	189b      	adds	r3, r3, r2
 800a02a:	00db      	lsls	r3, r3, #3
 800a02c:	18cb      	adds	r3, r1, r3
 800a02e:	3308      	adds	r3, #8
 800a030:	681c      	ldr	r4, [r3, #0]
 800a032:	1dbb      	adds	r3, r7, #6
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	3b03      	subs	r3, #3
 800a038:	0018      	movs	r0, r3
 800a03a:	f7f7 f8bd 	bl	80011b8 <__aeabi_i2f>
 800a03e:	1c03      	adds	r3, r0, #0
 800a040:	1c19      	adds	r1, r3, #0
 800a042:	1c20      	adds	r0, r4, #0
 800a044:	f7f6 f9e8 	bl	8000418 <__aeabi_fcmplt>
 800a048:	1e03      	subs	r3, r0, #0
 800a04a:	d117      	bne.n	800a07c <Encoder_Move_Set+0x7c>
		sEncPosMap[encNum].angPercent > (ang+ENC_MOVE_ANG_TOL)	)
 800a04c:	1dfb      	adds	r3, r7, #7
 800a04e:	781a      	ldrb	r2, [r3, #0]
 800a050:	494d      	ldr	r1, [pc, #308]	@ (800a188 <Encoder_Move_Set+0x188>)
 800a052:	0013      	movs	r3, r2
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	189b      	adds	r3, r3, r2
 800a058:	00db      	lsls	r3, r3, #3
 800a05a:	18cb      	adds	r3, r1, r3
 800a05c:	3308      	adds	r3, #8
 800a05e:	681c      	ldr	r4, [r3, #0]
 800a060:	1dbb      	adds	r3, r7, #6
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	3303      	adds	r3, #3
 800a066:	0018      	movs	r0, r3
 800a068:	f7f7 f8a6 	bl	80011b8 <__aeabi_i2f>
 800a06c:	1c03      	adds	r3, r0, #0
	if( sEncPosMap[encNum].angPercent < (ang-ENC_MOVE_ANG_TOL) ||
 800a06e:	1c19      	adds	r1, r3, #0
 800a070:	1c20      	adds	r0, r4, #0
 800a072:	f7f6 f9e5 	bl	8000440 <__aeabi_fcmpgt>
 800a076:	1e03      	subs	r3, r0, #0
 800a078:	d100      	bne.n	800a07c <Encoder_Move_Set+0x7c>
		sEncCtrl[encNum].angUser = (sEncCtrl[encNum].angPercentUser * (sEncCalib[encNum].angMax-sEncCalib[encNum].angMin) / 100) + sEncCalib[encNum].angMin;
		sEncCtrl[encNum].command = _e_EncCmd_Move;
		sEncCtrl[encNum].status = _e_EncSts_Move;
		_encdisk_func_break_clear(encNum);
	}
}
 800a07a:	e080      	b.n	800a17e <Encoder_Move_Set+0x17e>
		sEncCtrl[encNum].stopMode = stopMode;
 800a07c:	1dfb      	adds	r3, r7, #7
 800a07e:	781a      	ldrb	r2, [r3, #0]
 800a080:	4942      	ldr	r1, [pc, #264]	@ (800a18c <Encoder_Move_Set+0x18c>)
 800a082:	0013      	movs	r3, r2
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	189b      	adds	r3, r3, r2
 800a088:	00db      	lsls	r3, r3, #3
 800a08a:	18cb      	adds	r3, r1, r3
 800a08c:	3302      	adds	r3, #2
 800a08e:	1d7a      	adds	r2, r7, #5
 800a090:	7812      	ldrb	r2, [r2, #0]
 800a092:	701a      	strb	r2, [r3, #0]
		sEncCtrl[encNum].angPercentUser = ang;
 800a094:	1dfb      	adds	r3, r7, #7
 800a096:	781a      	ldrb	r2, [r3, #0]
 800a098:	493c      	ldr	r1, [pc, #240]	@ (800a18c <Encoder_Move_Set+0x18c>)
 800a09a:	0013      	movs	r3, r2
 800a09c:	005b      	lsls	r3, r3, #1
 800a09e:	189b      	adds	r3, r3, r2
 800a0a0:	00db      	lsls	r3, r3, #3
 800a0a2:	18cb      	adds	r3, r1, r3
 800a0a4:	3303      	adds	r3, #3
 800a0a6:	1dba      	adds	r2, r7, #6
 800a0a8:	7812      	ldrb	r2, [r2, #0]
 800a0aa:	701a      	strb	r2, [r3, #0]
		sEncCtrl[encNum].angUser = (sEncCtrl[encNum].angPercentUser * (sEncCalib[encNum].angMax-sEncCalib[encNum].angMin) / 100) + sEncCalib[encNum].angMin;
 800a0ac:	1dfb      	adds	r3, r7, #7
 800a0ae:	781a      	ldrb	r2, [r3, #0]
 800a0b0:	4936      	ldr	r1, [pc, #216]	@ (800a18c <Encoder_Move_Set+0x18c>)
 800a0b2:	0013      	movs	r3, r2
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	189b      	adds	r3, r3, r2
 800a0b8:	00db      	lsls	r3, r3, #3
 800a0ba:	18cb      	adds	r3, r1, r3
 800a0bc:	3303      	adds	r3, #3
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	f7f7 f879 	bl	80011b8 <__aeabi_i2f>
 800a0c6:	1c04      	adds	r4, r0, #0
 800a0c8:	1dfb      	adds	r3, r7, #7
 800a0ca:	781a      	ldrb	r2, [r3, #0]
 800a0cc:	4930      	ldr	r1, [pc, #192]	@ (800a190 <Encoder_Move_Set+0x190>)
 800a0ce:	0013      	movs	r3, r2
 800a0d0:	00db      	lsls	r3, r3, #3
 800a0d2:	1a9b      	subs	r3, r3, r2
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	18cb      	adds	r3, r1, r3
 800a0d8:	3334      	adds	r3, #52	@ 0x34
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	1dfb      	adds	r3, r7, #7
 800a0de:	781a      	ldrb	r2, [r3, #0]
 800a0e0:	492b      	ldr	r1, [pc, #172]	@ (800a190 <Encoder_Move_Set+0x190>)
 800a0e2:	0013      	movs	r3, r2
 800a0e4:	00db      	lsls	r3, r3, #3
 800a0e6:	1a9b      	subs	r3, r3, r2
 800a0e8:	00db      	lsls	r3, r3, #3
 800a0ea:	18cb      	adds	r3, r1, r3
 800a0ec:	3330      	adds	r3, #48	@ 0x30
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	1c19      	adds	r1, r3, #0
 800a0f2:	f7f6 fe9d 	bl	8000e30 <__aeabi_fsub>
 800a0f6:	1c03      	adds	r3, r0, #0
 800a0f8:	1c19      	adds	r1, r3, #0
 800a0fa:	1c20      	adds	r0, r4, #0
 800a0fc:	f7f6 fd5a 	bl	8000bb4 <__aeabi_fmul>
 800a100:	1c03      	adds	r3, r0, #0
 800a102:	4924      	ldr	r1, [pc, #144]	@ (800a194 <Encoder_Move_Set+0x194>)
 800a104:	1c18      	adds	r0, r3, #0
 800a106:	f7f6 fb6f 	bl	80007e8 <__aeabi_fdiv>
 800a10a:	1c03      	adds	r3, r0, #0
 800a10c:	1c18      	adds	r0, r3, #0
 800a10e:	1dfb      	adds	r3, r7, #7
 800a110:	781a      	ldrb	r2, [r3, #0]
 800a112:	491f      	ldr	r1, [pc, #124]	@ (800a190 <Encoder_Move_Set+0x190>)
 800a114:	0013      	movs	r3, r2
 800a116:	00db      	lsls	r3, r3, #3
 800a118:	1a9b      	subs	r3, r3, r2
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	18cb      	adds	r3, r1, r3
 800a11e:	3330      	adds	r3, #48	@ 0x30
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	1c19      	adds	r1, r3, #0
 800a124:	f7f6 f9d6 	bl	80004d4 <__aeabi_fadd>
 800a128:	1c03      	adds	r3, r0, #0
 800a12a:	1c1a      	adds	r2, r3, #0
 800a12c:	1dfb      	adds	r3, r7, #7
 800a12e:	781c      	ldrb	r4, [r3, #0]
 800a130:	1c10      	adds	r0, r2, #0
 800a132:	f7f6 f999 	bl	8000468 <__aeabi_f2uiz>
 800a136:	0003      	movs	r3, r0
 800a138:	b2d9      	uxtb	r1, r3
 800a13a:	4a14      	ldr	r2, [pc, #80]	@ (800a18c <Encoder_Move_Set+0x18c>)
 800a13c:	0023      	movs	r3, r4
 800a13e:	005b      	lsls	r3, r3, #1
 800a140:	191b      	adds	r3, r3, r4
 800a142:	00db      	lsls	r3, r3, #3
 800a144:	18d3      	adds	r3, r2, r3
 800a146:	3304      	adds	r3, #4
 800a148:	1c0a      	adds	r2, r1, #0
 800a14a:	701a      	strb	r2, [r3, #0]
		sEncCtrl[encNum].command = _e_EncCmd_Move;
 800a14c:	1dfb      	adds	r3, r7, #7
 800a14e:	781a      	ldrb	r2, [r3, #0]
 800a150:	490e      	ldr	r1, [pc, #56]	@ (800a18c <Encoder_Move_Set+0x18c>)
 800a152:	0013      	movs	r3, r2
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	189b      	adds	r3, r3, r2
 800a158:	00db      	lsls	r3, r3, #3
 800a15a:	18cb      	adds	r3, r1, r3
 800a15c:	3301      	adds	r3, #1
 800a15e:	2202      	movs	r2, #2
 800a160:	701a      	strb	r2, [r3, #0]
		sEncCtrl[encNum].status = _e_EncSts_Move;
 800a162:	1dfb      	adds	r3, r7, #7
 800a164:	781a      	ldrb	r2, [r3, #0]
 800a166:	4909      	ldr	r1, [pc, #36]	@ (800a18c <Encoder_Move_Set+0x18c>)
 800a168:	0013      	movs	r3, r2
 800a16a:	005b      	lsls	r3, r3, #1
 800a16c:	189b      	adds	r3, r3, r2
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	2202      	movs	r2, #2
 800a172:	545a      	strb	r2, [r3, r1]
		_encdisk_func_break_clear(encNum);
 800a174:	1dfb      	adds	r3, r7, #7
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	0018      	movs	r0, r3
 800a17a:	f7fd fc65 	bl	8007a48 <_encdisk_func_break_clear>
}
 800a17e:	46c0      	nop			@ (mov r8, r8)
 800a180:	46bd      	mov	sp, r7
 800a182:	b003      	add	sp, #12
 800a184:	bd90      	pop	{r4, r7, pc}
 800a186:	46c0      	nop			@ (mov r8, r8)
 800a188:	20000118 	.word	0x20000118
 800a18c:	2000015c 	.word	0x2000015c
 800a190:	20000074 	.word	0x20000074
 800a194:	42c80000 	.word	0x42c80000

0800a198 <Encoder_Move_Get>:

float Encoder_Move_Get( tEncNum encNum )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	0002      	movs	r2, r0
 800a1a0:	1dfb      	adds	r3, r7, #7
 800a1a2:	701a      	strb	r2, [r3, #0]
	if( sEncCalib[encNum].status != _e_EncCalib_Ok )
 800a1a4:	1dfb      	adds	r3, r7, #7
 800a1a6:	781a      	ldrb	r2, [r3, #0]
 800a1a8:	490d      	ldr	r1, [pc, #52]	@ (800a1e0 <Encoder_Move_Get+0x48>)
 800a1aa:	202d      	movs	r0, #45	@ 0x2d
 800a1ac:	0013      	movs	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	1a9b      	subs	r3, r3, r2
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	18cb      	adds	r3, r1, r3
 800a1b6:	181b      	adds	r3, r3, r0
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d001      	beq.n	800a1c2 <Encoder_Move_Get+0x2a>
		return 0xFF;
 800a1be:	4b09      	ldr	r3, [pc, #36]	@ (800a1e4 <Encoder_Move_Get+0x4c>)
 800a1c0:	e009      	b.n	800a1d6 <Encoder_Move_Get+0x3e>
	else
		return sEncPosMap[encNum].angPercent;
 800a1c2:	1dfb      	adds	r3, r7, #7
 800a1c4:	781a      	ldrb	r2, [r3, #0]
 800a1c6:	4908      	ldr	r1, [pc, #32]	@ (800a1e8 <Encoder_Move_Get+0x50>)
 800a1c8:	0013      	movs	r3, r2
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	189b      	adds	r3, r3, r2
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	18cb      	adds	r3, r1, r3
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	681b      	ldr	r3, [r3, #0]
}
 800a1d6:	1c18      	adds	r0, r3, #0
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	b002      	add	sp, #8
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	46c0      	nop			@ (mov r8, r8)
 800a1e0:	20000074 	.word	0x20000074
 800a1e4:	437f0000 	.word	0x437f0000
 800a1e8:	20000118 	.word	0x20000118

0800a1ec <Encoder_Stat>:
	sEncCtrl[encNum].stopMode = stopMode;
	sEncCtrl[encNum].command = _e_EncCmd_Stop;
}

tEncSts	Encoder_Stat( tEncNum encNum )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	0002      	movs	r2, r0
 800a1f4:	1dfb      	adds	r3, r7, #7
 800a1f6:	701a      	strb	r2, [r3, #0]
	return sEncCtrl[encNum].status;
 800a1f8:	1dfb      	adds	r3, r7, #7
 800a1fa:	781a      	ldrb	r2, [r3, #0]
 800a1fc:	4904      	ldr	r1, [pc, #16]	@ (800a210 <Encoder_Stat+0x24>)
 800a1fe:	0013      	movs	r3, r2
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	189b      	adds	r3, r3, r2
 800a204:	00db      	lsls	r3, r3, #3
 800a206:	5c5b      	ldrb	r3, [r3, r1]
}
 800a208:	0018      	movs	r0, r3
 800a20a:	46bd      	mov	sp, r7
 800a20c:	b002      	add	sp, #8
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	2000015c 	.word	0x2000015c

0800a214 <inputs_get>:
	bool	cardDetFlag;
}sInUrn;
/*** ** * Funcs Int * ** ***/

uint32_t inputs_get( tInputs in )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	0002      	movs	r2, r0
 800a21c:	1dfb      	adds	r3, r7, #7
 800a21e:	701a      	strb	r2, [r3, #0]
	switch( (uint8_t)in )
 800a220:	1dfb      	adds	r3, r7, #7
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	2b0e      	cmp	r3, #14
 800a226:	d856      	bhi.n	800a2d6 <inputs_get+0xc2>
 800a228:	009a      	lsls	r2, r3, #2
 800a22a:	4b2d      	ldr	r3, [pc, #180]	@ (800a2e0 <inputs_get+0xcc>)
 800a22c:	18d3      	adds	r3, r2, r3
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	469f      	mov	pc, r3
	{
		case _e_Inputs_SenIn: 		return _pinGet_Sen_In();
 800a232:	4b2c      	ldr	r3, [pc, #176]	@ (800a2e4 <inputs_get+0xd0>)
 800a234:	691a      	ldr	r2, [r3, #16]
 800a236:	2380      	movs	r3, #128	@ 0x80
 800a238:	01db      	lsls	r3, r3, #7
 800a23a:	4013      	ands	r3, r2
 800a23c:	e04c      	b.n	800a2d8 <inputs_get+0xc4>
		case _e_Inputs_SenOut: 		return _pinGet_Sen_Out();
 800a23e:	4b29      	ldr	r3, [pc, #164]	@ (800a2e4 <inputs_get+0xd0>)
 800a240:	691a      	ldr	r2, [r3, #16]
 800a242:	2380      	movs	r3, #128	@ 0x80
 800a244:	021b      	lsls	r3, r3, #8
 800a246:	4013      	ands	r3, r2
 800a248:	e046      	b.n	800a2d8 <inputs_get+0xc4>
		case _e_Inputs_SenMidU: 	return _pinGet_Sen_MidUp();
 800a24a:	4b27      	ldr	r3, [pc, #156]	@ (800a2e8 <inputs_get+0xd4>)
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	2201      	movs	r2, #1
 800a250:	4013      	ands	r3, r2
 800a252:	e041      	b.n	800a2d8 <inputs_get+0xc4>
		case _e_Inputs_SenMidD: 	return _pinGet_Sen_MidDown();
 800a254:	4b24      	ldr	r3, [pc, #144]	@ (800a2e8 <inputs_get+0xd4>)
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	2202      	movs	r2, #2
 800a25a:	4013      	ands	r3, r2
 800a25c:	e03c      	b.n	800a2d8 <inputs_get+0xc4>
		case _e_Inputs_ComIn1: 		return _pinGet_Com_In1();
 800a25e:	4b21      	ldr	r3, [pc, #132]	@ (800a2e4 <inputs_get+0xd0>)
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	2202      	movs	r2, #2
 800a264:	4013      	ands	r3, r2
 800a266:	e037      	b.n	800a2d8 <inputs_get+0xc4>
		case _e_Inputs_ComIn2: 		return _pinGet_Com_In2();
 800a268:	4b1e      	ldr	r3, [pc, #120]	@ (800a2e4 <inputs_get+0xd0>)
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	2201      	movs	r2, #1
 800a26e:	4013      	ands	r3, r2
 800a270:	e032      	b.n	800a2d8 <inputs_get+0xc4>

		case _e_Inputs_Mt1Enc2: 	return _pinGet_Mt1_Disc2();	//está trocado os pinos do encoder com posição
 800a272:	4b1e      	ldr	r3, [pc, #120]	@ (800a2ec <inputs_get+0xd8>)
 800a274:	691a      	ldr	r2, [r3, #16]
 800a276:	2380      	movs	r3, #128	@ 0x80
 800a278:	011b      	lsls	r3, r3, #4
 800a27a:	4013      	ands	r3, r2
 800a27c:	e02c      	b.n	800a2d8 <inputs_get+0xc4>
		case _e_Inputs_Mt1Enc1: 	return _pinGet_Mt1_Disc1();	//algum dia alguem tem que corrigir isso
 800a27e:	4b1b      	ldr	r3, [pc, #108]	@ (800a2ec <inputs_get+0xd8>)
 800a280:	691a      	ldr	r2, [r3, #16]
 800a282:	2380      	movs	r3, #128	@ 0x80
 800a284:	00db      	lsls	r3, r3, #3
 800a286:	4013      	ands	r3, r2
 800a288:	e026      	b.n	800a2d8 <inputs_get+0xc4>
		case _e_Inputs_Mt1Disc1: 	return _pinGet_Mt1_Enc2();
 800a28a:	4b16      	ldr	r3, [pc, #88]	@ (800a2e4 <inputs_get+0xd0>)
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	2220      	movs	r2, #32
 800a290:	4013      	ands	r3, r2
 800a292:	e021      	b.n	800a2d8 <inputs_get+0xc4>
		case _e_Inputs_Mt1Disc2: 	return _pinGet_Mt1_Enc1();
 800a294:	4b15      	ldr	r3, [pc, #84]	@ (800a2ec <inputs_get+0xd8>)
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	2204      	movs	r2, #4
 800a29a:	4013      	ands	r3, r2
 800a29c:	e01c      	b.n	800a2d8 <inputs_get+0xc4>

		case _e_Inputs_Mt2Enc2: 	return _pinGet_Mt2_Disc2();
 800a29e:	2390      	movs	r3, #144	@ 0x90
 800a2a0:	05db      	lsls	r3, r3, #23
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	2240      	movs	r2, #64	@ 0x40
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	e016      	b.n	800a2d8 <inputs_get+0xc4>
		case _e_Inputs_Mt2Enc1: 	return _pinGet_Mt2_Disc1();
 800a2aa:	2390      	movs	r3, #144	@ 0x90
 800a2ac:	05db      	lsls	r3, r3, #23
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2220      	movs	r2, #32
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	e010      	b.n	800a2d8 <inputs_get+0xc4>
		case _e_Inputs_Mt2Disc1: 	return _pinGet_Mt2_Enc2();
 800a2b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e4 <inputs_get+0xd0>)
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	2210      	movs	r2, #16
 800a2bc:	4013      	ands	r3, r2
 800a2be:	e00b      	b.n	800a2d8 <inputs_get+0xc4>
		case _e_Inputs_Mt2Disc2: 	return _pinGet_Mt2_Enc1();
 800a2c0:	2390      	movs	r3, #144	@ 0x90
 800a2c2:	05db      	lsls	r3, r3, #23
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	2280      	movs	r2, #128	@ 0x80
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	e005      	b.n	800a2d8 <inputs_get+0xc4>
//		case _e_Inputs_Mt1Disc2: 	return _pinGet_Mt1_Disc1();
//		case _e_Inputs_Mt2Enc2: 	return _pinGet_Mt2_Enc2();
//		case _e_Inputs_Mt2Enc1: 	return _pinGet_Mt2_Enc1();
//		case _e_Inputs_Mt2Disc1: 	return _pinGet_Mt2_Disc2();
//		case _e_Inputs_Mt2Disc2: 	return _pinGet_Mt2_Disc1();
		case _e_Inputs_UrnDet: 		return _pinGet_Urn_Det();
 800a2cc:	4b07      	ldr	r3, [pc, #28]	@ (800a2ec <inputs_get+0xd8>)
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	e000      	b.n	800a2d8 <inputs_get+0xc4>
		default: 									return 0;
 800a2d6:	2300      	movs	r3, #0
	}
}
 800a2d8:	0018      	movs	r0, r3
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	b002      	add	sp, #8
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	0800feac 	.word	0x0800feac
 800a2e4:	48000800 	.word	0x48000800
 800a2e8:	48001400 	.word	0x48001400
 800a2ec:	48000400 	.word	0x48000400

0800a2f0 <inputs_motor_get>:

void inputs_motor_get( tInMt mtNum, bool* retEnc2, bool* retEnc1, bool* retDisc1, bool* retDisc2 )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60b9      	str	r1, [r7, #8]
 800a2f8:	607a      	str	r2, [r7, #4]
 800a2fa:	603b      	str	r3, [r7, #0]
 800a2fc:	210f      	movs	r1, #15
 800a2fe:	187b      	adds	r3, r7, r1
 800a300:	1c02      	adds	r2, r0, #0
 800a302:	701a      	strb	r2, [r3, #0]
	if( mtNum == _e_InMt_Pri ){
 800a304:	187b      	adds	r3, r7, r1
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d112      	bne.n	800a332 <inputs_motor_get+0x42>
		*retEnc2 	= sInPin[_e_Inputs_Mt1Enc2].state;
 800a30c:	4b15      	ldr	r3, [pc, #84]	@ (800a364 <inputs_motor_get+0x74>)
 800a30e:	7e9a      	ldrb	r2, [r3, #26]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	701a      	strb	r2, [r3, #0]
		//*retSen 	= sInPin[_e_Inputs_Mt1Enc].state;
		*retEnc1 	= sInPin[_e_Inputs_Mt1Enc1].state;
 800a314:	4b13      	ldr	r3, [pc, #76]	@ (800a364 <inputs_motor_get+0x74>)
 800a316:	7f9a      	ldrb	r2, [r3, #30]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	701a      	strb	r2, [r3, #0]
		*retDisc1   = sInPin[_e_Inputs_Mt1Disc1].state;
 800a31c:	4b11      	ldr	r3, [pc, #68]	@ (800a364 <inputs_motor_get+0x74>)
 800a31e:	2222      	movs	r2, #34	@ 0x22
 800a320:	5c9a      	ldrb	r2, [r3, r2]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	701a      	strb	r2, [r3, #0]
		*retDisc2   = sInPin[_e_Inputs_Mt1Disc2].state;
 800a326:	4b0f      	ldr	r3, [pc, #60]	@ (800a364 <inputs_motor_get+0x74>)
 800a328:	2226      	movs	r2, #38	@ 0x26
 800a32a:	5c9a      	ldrb	r2, [r3, r2]
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	701a      	strb	r2, [r3, #0]
		//*retSen 	= sInPin[_e_Inputs_Mt2Enc1].state;
		*retEnc1 	= sInPin[_e_Inputs_Mt2Enc1].state;
		*retDisc1   = sInPin[_e_Inputs_Mt2Disc1].state;
		*retDisc2   = sInPin[_e_Inputs_Mt2Disc2].state;
	}
}	
 800a330:	e013      	b.n	800a35a <inputs_motor_get+0x6a>
		*retEnc2 	= sInPin[_e_Inputs_Mt2Enc2].state;
 800a332:	4b0c      	ldr	r3, [pc, #48]	@ (800a364 <inputs_motor_get+0x74>)
 800a334:	222a      	movs	r2, #42	@ 0x2a
 800a336:	5c9a      	ldrb	r2, [r3, r2]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	701a      	strb	r2, [r3, #0]
		*retEnc1 	= sInPin[_e_Inputs_Mt2Enc1].state;
 800a33c:	4b09      	ldr	r3, [pc, #36]	@ (800a364 <inputs_motor_get+0x74>)
 800a33e:	222e      	movs	r2, #46	@ 0x2e
 800a340:	5c9a      	ldrb	r2, [r3, r2]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	701a      	strb	r2, [r3, #0]
		*retDisc1   = sInPin[_e_Inputs_Mt2Disc1].state;
 800a346:	4b07      	ldr	r3, [pc, #28]	@ (800a364 <inputs_motor_get+0x74>)
 800a348:	2232      	movs	r2, #50	@ 0x32
 800a34a:	5c9a      	ldrb	r2, [r3, r2]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	701a      	strb	r2, [r3, #0]
		*retDisc2   = sInPin[_e_Inputs_Mt2Disc2].state;
 800a350:	4b04      	ldr	r3, [pc, #16]	@ (800a364 <inputs_motor_get+0x74>)
 800a352:	2236      	movs	r2, #54	@ 0x36
 800a354:	5c9a      	ldrb	r2, [r3, r2]
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	701a      	strb	r2, [r3, #0]
}	
 800a35a:	46c0      	nop			@ (mov r8, r8)
 800a35c:	46bd      	mov	sp, r7
 800a35e:	b004      	add	sp, #16
 800a360:	bd80      	pop	{r7, pc}
 800a362:	46c0      	nop			@ (mov r8, r8)
 800a364:	2000019c 	.word	0x2000019c

0800a368 <HAL_GPIO_EXTI_Callback>:

/*** ** * Funcs Ext * ** ***/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a368:	b590      	push	{r4, r7, lr}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	0002      	movs	r2, r0
 800a370:	1dbb      	adds	r3, r7, #6
 800a372:	801a      	strh	r2, [r3, #0]
	switch( GPIO_Pin )
 800a374:	1dbb      	adds	r3, r7, #6
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	2b80      	cmp	r3, #128	@ 0x80
 800a37a:	d033      	beq.n	800a3e4 <HAL_GPIO_EXTI_Callback+0x7c>
 800a37c:	dc5a      	bgt.n	800a434 <HAL_GPIO_EXTI_Callback+0xcc>
 800a37e:	2b20      	cmp	r3, #32
 800a380:	d00c      	beq.n	800a39c <HAL_GPIO_EXTI_Callback+0x34>
 800a382:	dc57      	bgt.n	800a434 <HAL_GPIO_EXTI_Callback+0xcc>
 800a384:	2b10      	cmp	r3, #16
 800a386:	d02d      	beq.n	800a3e4 <HAL_GPIO_EXTI_Callback+0x7c>
 800a388:	dc54      	bgt.n	800a434 <HAL_GPIO_EXTI_Callback+0xcc>
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d002      	beq.n	800a394 <HAL_GPIO_EXTI_Callback+0x2c>
 800a38e:	2b04      	cmp	r3, #4
 800a390:	d004      	beq.n	800a39c <HAL_GPIO_EXTI_Callback+0x34>
//		sInMt[1].enc = (bool)HAL_GPIO_ReadPin(GPIO_MT2_Enc1_Port,GPIO_MT2_Enc1_Pin) + ( (bool)HAL_GPIO_ReadPin(GPIO_MT2_Enc2_Port,GPIO_MT2_Enc2_Pin) << 1 );
//		break;

	}

}
 800a392:	e04f      	b.n	800a434 <HAL_GPIO_EXTI_Callback+0xcc>
		sInUrn.cardDetFlag = true;
 800a394:	4b29      	ldr	r3, [pc, #164]	@ (800a43c <HAL_GPIO_EXTI_Callback+0xd4>)
 800a396:	2201      	movs	r2, #1
 800a398:	701a      	strb	r2, [r3, #0]
		break;
 800a39a:	e04b      	b.n	800a434 <HAL_GPIO_EXTI_Callback+0xcc>
		sInMt[0].encCmp = (bool)HAL_GPIO_ReadPin(GPIO_MT1_Enc1_Port,GPIO_MT1_Enc1_Pin) + ( (bool)HAL_GPIO_ReadPin(GPIO_MT1_Enc2_Port,GPIO_MT1_Enc2_Pin) << 1 );
 800a39c:	4b28      	ldr	r3, [pc, #160]	@ (800a440 <HAL_GPIO_EXTI_Callback+0xd8>)
 800a39e:	2104      	movs	r1, #4
 800a3a0:	0018      	movs	r0, r3
 800a3a2:	f7f8 fda3 	bl	8002eec <HAL_GPIO_ReadPin>
 800a3a6:	0003      	movs	r3, r0
 800a3a8:	001c      	movs	r4, r3
 800a3aa:	4b26      	ldr	r3, [pc, #152]	@ (800a444 <HAL_GPIO_EXTI_Callback+0xdc>)
 800a3ac:	2120      	movs	r1, #32
 800a3ae:	0018      	movs	r0, r3
 800a3b0:	f7f8 fd9c 	bl	8002eec <HAL_GPIO_ReadPin>
 800a3b4:	0003      	movs	r3, r0
 800a3b6:	18db      	adds	r3, r3, r3
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	18e3      	adds	r3, r4, r3
 800a3bc:	b2da      	uxtb	r2, r3
 800a3be:	4b22      	ldr	r3, [pc, #136]	@ (800a448 <HAL_GPIO_EXTI_Callback+0xe0>)
 800a3c0:	715a      	strb	r2, [r3, #5]
		if( sInMt[0].enc != sInMt[0].encCmp ){
 800a3c2:	4b21      	ldr	r3, [pc, #132]	@ (800a448 <HAL_GPIO_EXTI_Callback+0xe0>)
 800a3c4:	791a      	ldrb	r2, [r3, #4]
 800a3c6:	4b20      	ldr	r3, [pc, #128]	@ (800a448 <HAL_GPIO_EXTI_Callback+0xe0>)
 800a3c8:	795b      	ldrb	r3, [r3, #5]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d02f      	beq.n	800a42e <HAL_GPIO_EXTI_Callback+0xc6>
			sInMt[0].enc = sInMt[0].encCmp;
 800a3ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a448 <HAL_GPIO_EXTI_Callback+0xe0>)
 800a3d0:	795a      	ldrb	r2, [r3, #5]
 800a3d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a448 <HAL_GPIO_EXTI_Callback+0xe0>)
 800a3d4:	711a      	strb	r2, [r3, #4]
			Encoder_Refresh_IT( _e_EncNum_Pri , sInMt[0].enc );
 800a3d6:	4b1c      	ldr	r3, [pc, #112]	@ (800a448 <HAL_GPIO_EXTI_Callback+0xe0>)
 800a3d8:	791b      	ldrb	r3, [r3, #4]
 800a3da:	0019      	movs	r1, r3
 800a3dc:	2000      	movs	r0, #0
 800a3de:	f7ff fa91 	bl	8009904 <Encoder_Refresh_IT>
		break;
 800a3e2:	e024      	b.n	800a42e <HAL_GPIO_EXTI_Callback+0xc6>
		sInMt[1].encCmp = (bool)HAL_GPIO_ReadPin(GPIO_MT2_Enc1_Port,GPIO_MT2_Enc1_Pin) + ( (bool)HAL_GPIO_ReadPin(GPIO_MT2_Enc2_Port,GPIO_MT2_Enc2_Pin) << 1 );
 800a3e4:	2390      	movs	r3, #144	@ 0x90
 800a3e6:	05db      	lsls	r3, r3, #23
 800a3e8:	2180      	movs	r1, #128	@ 0x80
 800a3ea:	0018      	movs	r0, r3
 800a3ec:	f7f8 fd7e 	bl	8002eec <HAL_GPIO_ReadPin>
 800a3f0:	0003      	movs	r3, r0
 800a3f2:	001c      	movs	r4, r3
 800a3f4:	4b13      	ldr	r3, [pc, #76]	@ (800a444 <HAL_GPIO_EXTI_Callback+0xdc>)
 800a3f6:	2110      	movs	r1, #16
 800a3f8:	0018      	movs	r0, r3
 800a3fa:	f7f8 fd77 	bl	8002eec <HAL_GPIO_ReadPin>
 800a3fe:	0003      	movs	r3, r0
 800a400:	18db      	adds	r3, r3, r3
 800a402:	b2db      	uxtb	r3, r3
 800a404:	18e3      	adds	r3, r4, r3
 800a406:	b2da      	uxtb	r2, r3
 800a408:	4b0f      	ldr	r3, [pc, #60]	@ (800a448 <HAL_GPIO_EXTI_Callback+0xe0>)
 800a40a:	739a      	strb	r2, [r3, #14]
		if( sInMt[1].enc != sInMt[1].encCmp ){
 800a40c:	4b0e      	ldr	r3, [pc, #56]	@ (800a448 <HAL_GPIO_EXTI_Callback+0xe0>)
 800a40e:	7b5a      	ldrb	r2, [r3, #13]
 800a410:	4b0d      	ldr	r3, [pc, #52]	@ (800a448 <HAL_GPIO_EXTI_Callback+0xe0>)
 800a412:	7b9b      	ldrb	r3, [r3, #14]
 800a414:	429a      	cmp	r2, r3
 800a416:	d00c      	beq.n	800a432 <HAL_GPIO_EXTI_Callback+0xca>
			sInMt[1].enc = sInMt[1].encCmp;
 800a418:	4b0b      	ldr	r3, [pc, #44]	@ (800a448 <HAL_GPIO_EXTI_Callback+0xe0>)
 800a41a:	7b9a      	ldrb	r2, [r3, #14]
 800a41c:	4b0a      	ldr	r3, [pc, #40]	@ (800a448 <HAL_GPIO_EXTI_Callback+0xe0>)
 800a41e:	735a      	strb	r2, [r3, #13]
			Encoder_Refresh_IT( _e_EncNum_Sec , sInMt[1].enc );
 800a420:	4b09      	ldr	r3, [pc, #36]	@ (800a448 <HAL_GPIO_EXTI_Callback+0xe0>)
 800a422:	7b5b      	ldrb	r3, [r3, #13]
 800a424:	0019      	movs	r1, r3
 800a426:	2001      	movs	r0, #1
 800a428:	f7ff fa6c 	bl	8009904 <Encoder_Refresh_IT>
		break;
 800a42c:	e001      	b.n	800a432 <HAL_GPIO_EXTI_Callback+0xca>
		break;
 800a42e:	46c0      	nop			@ (mov r8, r8)
 800a430:	e000      	b.n	800a434 <HAL_GPIO_EXTI_Callback+0xcc>
		break;
 800a432:	46c0      	nop			@ (mov r8, r8)
}
 800a434:	46c0      	nop			@ (mov r8, r8)
 800a436:	46bd      	mov	sp, r7
 800a438:	b003      	add	sp, #12
 800a43a:	bd90      	pop	{r4, r7, pc}
 800a43c:	200001f4 	.word	0x200001f4
 800a440:	48000400 	.word	0x48000400
 800a444:	48000800 	.word	0x48000800
 800a448:	200001e0 	.word	0x200001e0

0800a44c <Inputs_Init>:

void Inputs_Init(void)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	af00      	add	r7, sp, #0
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800a450:	2005      	movs	r0, #5
 800a452:	f7f8 f8c4 	bl	80025de <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800a456:	2006      	movs	r0, #6
 800a458:	f7f8 f8c1 	bl	80025de <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800a45c:	2007      	movs	r0, #7
 800a45e:	f7f8 f8be 	bl	80025de <HAL_NVIC_EnableIRQ>
}
 800a462:	46c0      	nop			@ (mov r8, r8)
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <Inputs_IT>:

void Inputs_IT(void)//Agora está dentro do Inputs_Task
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
	for( uint8_t i = 0 ; i < _e_Inputs_QTY ; i++ )
 800a46e:	1dfb      	adds	r3, r7, #7
 800a470:	2200      	movs	r2, #0
 800a472:	701a      	strb	r2, [r3, #0]
 800a474:	e05e      	b.n	800a534 <Inputs_IT+0xcc>
	{
		if ( inputs_get( (tInputs)i ) == GPIO_PIN_RESET && sInPin[i].count > 0 ) sInPin[i].count--;
 800a476:	1dfb      	adds	r3, r7, #7
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	0018      	movs	r0, r3
 800a47c:	f7ff feca 	bl	800a214 <inputs_get>
 800a480:	1e03      	subs	r3, r0, #0
 800a482:	d111      	bne.n	800a4a8 <Inputs_IT+0x40>
 800a484:	1dfb      	adds	r3, r7, #7
 800a486:	781a      	ldrb	r2, [r3, #0]
 800a488:	4b2f      	ldr	r3, [pc, #188]	@ (800a548 <Inputs_IT+0xe0>)
 800a48a:	0092      	lsls	r2, r2, #2
 800a48c:	5ad3      	ldrh	r3, [r2, r3]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <Inputs_IT+0x40>
 800a492:	1dfb      	adds	r3, r7, #7
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	4a2c      	ldr	r2, [pc, #176]	@ (800a548 <Inputs_IT+0xe0>)
 800a498:	0099      	lsls	r1, r3, #2
 800a49a:	5a8a      	ldrh	r2, [r1, r2]
 800a49c:	3a01      	subs	r2, #1
 800a49e:	b291      	uxth	r1, r2
 800a4a0:	4a29      	ldr	r2, [pc, #164]	@ (800a548 <Inputs_IT+0xe0>)
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	5299      	strh	r1, [r3, r2]
 800a4a6:	e01c      	b.n	800a4e2 <Inputs_IT+0x7a>
		else if	( inputs_get( (tInputs)i ) != GPIO_PIN_RESET && sInPin[i].count < inDebConst[i] ) sInPin[i].count++;
 800a4a8:	1dfb      	adds	r3, r7, #7
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	0018      	movs	r0, r3
 800a4ae:	f7ff feb1 	bl	800a214 <inputs_get>
 800a4b2:	1e03      	subs	r3, r0, #0
 800a4b4:	d015      	beq.n	800a4e2 <Inputs_IT+0x7a>
 800a4b6:	1dfb      	adds	r3, r7, #7
 800a4b8:	781a      	ldrb	r2, [r3, #0]
 800a4ba:	4b23      	ldr	r3, [pc, #140]	@ (800a548 <Inputs_IT+0xe0>)
 800a4bc:	0092      	lsls	r2, r2, #2
 800a4be:	5ad2      	ldrh	r2, [r2, r3]
 800a4c0:	1dfb      	adds	r3, r7, #7
 800a4c2:	7819      	ldrb	r1, [r3, #0]
 800a4c4:	4b21      	ldr	r3, [pc, #132]	@ (800a54c <Inputs_IT+0xe4>)
 800a4c6:	0049      	lsls	r1, r1, #1
 800a4c8:	5acb      	ldrh	r3, [r1, r3]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d209      	bcs.n	800a4e2 <Inputs_IT+0x7a>
 800a4ce:	1dfb      	adds	r3, r7, #7
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	4a1d      	ldr	r2, [pc, #116]	@ (800a548 <Inputs_IT+0xe0>)
 800a4d4:	0099      	lsls	r1, r3, #2
 800a4d6:	5a8a      	ldrh	r2, [r1, r2]
 800a4d8:	3201      	adds	r2, #1
 800a4da:	b291      	uxth	r1, r2
 800a4dc:	4a1a      	ldr	r2, [pc, #104]	@ (800a548 <Inputs_IT+0xe0>)
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	5299      	strh	r1, [r3, r2]

		if ( sInPin[i].count == 0 ) sInPin[i].state = false;
 800a4e2:	1dfb      	adds	r3, r7, #7
 800a4e4:	781a      	ldrb	r2, [r3, #0]
 800a4e6:	4b18      	ldr	r3, [pc, #96]	@ (800a548 <Inputs_IT+0xe0>)
 800a4e8:	0092      	lsls	r2, r2, #2
 800a4ea:	5ad3      	ldrh	r3, [r2, r3]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d108      	bne.n	800a502 <Inputs_IT+0x9a>
 800a4f0:	1dfb      	adds	r3, r7, #7
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	4a14      	ldr	r2, [pc, #80]	@ (800a548 <Inputs_IT+0xe0>)
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	18d3      	adds	r3, r2, r3
 800a4fa:	3302      	adds	r3, #2
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	701a      	strb	r2, [r3, #0]
 800a500:	e013      	b.n	800a52a <Inputs_IT+0xc2>
		else if	( sInPin[i].count >= inDebConst[i] ) sInPin[i].state = true;
 800a502:	1dfb      	adds	r3, r7, #7
 800a504:	781a      	ldrb	r2, [r3, #0]
 800a506:	4b10      	ldr	r3, [pc, #64]	@ (800a548 <Inputs_IT+0xe0>)
 800a508:	0092      	lsls	r2, r2, #2
 800a50a:	5ad2      	ldrh	r2, [r2, r3]
 800a50c:	1dfb      	adds	r3, r7, #7
 800a50e:	7819      	ldrb	r1, [r3, #0]
 800a510:	4b0e      	ldr	r3, [pc, #56]	@ (800a54c <Inputs_IT+0xe4>)
 800a512:	0049      	lsls	r1, r1, #1
 800a514:	5acb      	ldrh	r3, [r1, r3]
 800a516:	429a      	cmp	r2, r3
 800a518:	d307      	bcc.n	800a52a <Inputs_IT+0xc2>
 800a51a:	1dfb      	adds	r3, r7, #7
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	4a0a      	ldr	r2, [pc, #40]	@ (800a548 <Inputs_IT+0xe0>)
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	18d3      	adds	r3, r2, r3
 800a524:	3302      	adds	r3, #2
 800a526:	2201      	movs	r2, #1
 800a528:	701a      	strb	r2, [r3, #0]
	for( uint8_t i = 0 ; i < _e_Inputs_QTY ; i++ )
 800a52a:	1dfb      	adds	r3, r7, #7
 800a52c:	781a      	ldrb	r2, [r3, #0]
 800a52e:	1dfb      	adds	r3, r7, #7
 800a530:	3201      	adds	r2, #1
 800a532:	701a      	strb	r2, [r3, #0]
 800a534:	1dfb      	adds	r3, r7, #7
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	2b0e      	cmp	r3, #14
 800a53a:	d99c      	bls.n	800a476 <Inputs_IT+0xe>
	}
}	
 800a53c:	46c0      	nop			@ (mov r8, r8)
 800a53e:	46c0      	nop			@ (mov r8, r8)
 800a540:	46bd      	mov	sp, r7
 800a542:	b002      	add	sp, #8
 800a544:	bd80      	pop	{r7, pc}
 800a546:	46c0      	nop			@ (mov r8, r8)
 800a548:	2000019c 	.word	0x2000019c
 800a54c:	0800fe8c 	.word	0x0800fe8c

0800a550 <Inputs_Task>:


void Inputs_Task(void)
{
 800a550:	b5b0      	push	{r4, r5, r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af02      	add	r7, sp, #8
	Inputs_IT();
 800a556:	f7ff ff87 	bl	800a468 <Inputs_IT>

	//Comunicacao IO
	if		( sInPin[_e_Inputs_ComIn1].state == true  && sInPin[_e_Inputs_ComIn2].state == true  ) sInCom.stateNoDeb = _e_InCom_None;
 800a55a:	4b9c      	ldr	r3, [pc, #624]	@ (800a7cc <Inputs_Task+0x27c>)
 800a55c:	7c9b      	ldrb	r3, [r3, #18]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d107      	bne.n	800a572 <Inputs_Task+0x22>
 800a562:	4b9a      	ldr	r3, [pc, #616]	@ (800a7cc <Inputs_Task+0x27c>)
 800a564:	7d9b      	ldrb	r3, [r3, #22]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d103      	bne.n	800a572 <Inputs_Task+0x22>
 800a56a:	4b99      	ldr	r3, [pc, #612]	@ (800a7d0 <Inputs_Task+0x280>)
 800a56c:	2200      	movs	r2, #0
 800a56e:	705a      	strb	r2, [r3, #1]
 800a570:	e022      	b.n	800a5b8 <Inputs_Task+0x68>
	else if	( sInPin[_e_Inputs_ComIn1].state == false && sInPin[_e_Inputs_ComIn2].state == true  ) sInCom.stateNoDeb = _e_InCom_OpenIn;
 800a572:	4b96      	ldr	r3, [pc, #600]	@ (800a7cc <Inputs_Task+0x27c>)
 800a574:	7c9b      	ldrb	r3, [r3, #18]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d107      	bne.n	800a58a <Inputs_Task+0x3a>
 800a57a:	4b94      	ldr	r3, [pc, #592]	@ (800a7cc <Inputs_Task+0x27c>)
 800a57c:	7d9b      	ldrb	r3, [r3, #22]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d103      	bne.n	800a58a <Inputs_Task+0x3a>
 800a582:	4b93      	ldr	r3, [pc, #588]	@ (800a7d0 <Inputs_Task+0x280>)
 800a584:	2201      	movs	r2, #1
 800a586:	705a      	strb	r2, [r3, #1]
 800a588:	e016      	b.n	800a5b8 <Inputs_Task+0x68>
	else if	( sInPin[_e_Inputs_ComIn1].state == true  && sInPin[_e_Inputs_ComIn2].state == false ) sInCom.stateNoDeb = _e_InCom_OpenOut;
 800a58a:	4b90      	ldr	r3, [pc, #576]	@ (800a7cc <Inputs_Task+0x27c>)
 800a58c:	7c9b      	ldrb	r3, [r3, #18]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d107      	bne.n	800a5a2 <Inputs_Task+0x52>
 800a592:	4b8e      	ldr	r3, [pc, #568]	@ (800a7cc <Inputs_Task+0x27c>)
 800a594:	7d9b      	ldrb	r3, [r3, #22]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d103      	bne.n	800a5a2 <Inputs_Task+0x52>
 800a59a:	4b8d      	ldr	r3, [pc, #564]	@ (800a7d0 <Inputs_Task+0x280>)
 800a59c:	2202      	movs	r2, #2
 800a59e:	705a      	strb	r2, [r3, #1]
 800a5a0:	e00a      	b.n	800a5b8 <Inputs_Task+0x68>
	else if	( sInPin[_e_Inputs_ComIn1].state == false && sInPin[_e_Inputs_ComIn2].state == false ) sInCom.stateNoDeb = _e_InCom_UrnPicto;
 800a5a2:	4b8a      	ldr	r3, [pc, #552]	@ (800a7cc <Inputs_Task+0x27c>)
 800a5a4:	7c9b      	ldrb	r3, [r3, #18]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d106      	bne.n	800a5b8 <Inputs_Task+0x68>
 800a5aa:	4b88      	ldr	r3, [pc, #544]	@ (800a7cc <Inputs_Task+0x27c>)
 800a5ac:	7d9b      	ldrb	r3, [r3, #22]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d102      	bne.n	800a5b8 <Inputs_Task+0x68>
 800a5b2:	4b87      	ldr	r3, [pc, #540]	@ (800a7d0 <Inputs_Task+0x280>)
 800a5b4:	2203      	movs	r2, #3
 800a5b6:	705a      	strb	r2, [r3, #1]
		
	if( sInCom.stateNoDeb != sInCom.stateNoDebMem )
 800a5b8:	4b85      	ldr	r3, [pc, #532]	@ (800a7d0 <Inputs_Task+0x280>)
 800a5ba:	785a      	ldrb	r2, [r3, #1]
 800a5bc:	4b84      	ldr	r3, [pc, #528]	@ (800a7d0 <Inputs_Task+0x280>)
 800a5be:	789b      	ldrb	r3, [r3, #2]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d009      	beq.n	800a5d8 <Inputs_Task+0x88>
	{
		sInCom.debCount 			= 0;
 800a5c4:	4b82      	ldr	r3, [pc, #520]	@ (800a7d0 <Inputs_Task+0x280>)
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	809a      	strh	r2, [r3, #4]
		sInCom.stateNoDebMem 	= sInCom.stateNoDeb;
 800a5ca:	4b81      	ldr	r3, [pc, #516]	@ (800a7d0 <Inputs_Task+0x280>)
 800a5cc:	785a      	ldrb	r2, [r3, #1]
 800a5ce:	4b80      	ldr	r3, [pc, #512]	@ (800a7d0 <Inputs_Task+0x280>)
 800a5d0:	709a      	strb	r2, [r3, #2]
		sInCom.state = _e_InCom_None;
 800a5d2:	4b7f      	ldr	r3, [pc, #508]	@ (800a7d0 <Inputs_Task+0x280>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	701a      	strb	r2, [r3, #0]
	}

	if	( sInCom.debCount < IN_COM_DEB ) sInCom.debCount++;
 800a5d8:	4b7d      	ldr	r3, [pc, #500]	@ (800a7d0 <Inputs_Task+0x280>)
 800a5da:	889a      	ldrh	r2, [r3, #4]
 800a5dc:	23fa      	movs	r3, #250	@ 0xfa
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d206      	bcs.n	800a5f2 <Inputs_Task+0xa2>
 800a5e4:	4b7a      	ldr	r3, [pc, #488]	@ (800a7d0 <Inputs_Task+0x280>)
 800a5e6:	889b      	ldrh	r3, [r3, #4]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	4b78      	ldr	r3, [pc, #480]	@ (800a7d0 <Inputs_Task+0x280>)
 800a5ee:	809a      	strh	r2, [r3, #4]
 800a5f0:	e003      	b.n	800a5fa <Inputs_Task+0xaa>
	else sInCom.state = sInCom.stateNoDeb;
 800a5f2:	4b77      	ldr	r3, [pc, #476]	@ (800a7d0 <Inputs_Task+0x280>)
 800a5f4:	785a      	ldrb	r2, [r3, #1]
 800a5f6:	4b76      	ldr	r3, [pc, #472]	@ (800a7d0 <Inputs_Task+0x280>)
 800a5f8:	701a      	strb	r2, [r3, #0]
	
	//Motores
	for( uint8_t i = 0 ; i < 2 ; i++ )
 800a5fa:	1dfb      	adds	r3, r7, #7
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	701a      	strb	r2, [r3, #0]
 800a600:	e0da      	b.n	800a7b8 <Inputs_Task+0x268>
	{
		inputs_motor_get( (tInMt)i, &sInMt[i].pinSen, &sInMt[i].pinEnc, &sInMt[i].pinDisc1, &sInMt[i].pinDisc2 );
 800a602:	1dfb      	adds	r3, r7, #7
 800a604:	781a      	ldrb	r2, [r3, #0]
 800a606:	0013      	movs	r3, r2
 800a608:	00db      	lsls	r3, r3, #3
 800a60a:	189b      	adds	r3, r3, r2
 800a60c:	4a71      	ldr	r2, [pc, #452]	@ (800a7d4 <Inputs_Task+0x284>)
 800a60e:	1899      	adds	r1, r3, r2
 800a610:	1dfb      	adds	r3, r7, #7
 800a612:	781a      	ldrb	r2, [r3, #0]
 800a614:	0013      	movs	r3, r2
 800a616:	00db      	lsls	r3, r3, #3
 800a618:	189b      	adds	r3, r3, r2
 800a61a:	4a6e      	ldr	r2, [pc, #440]	@ (800a7d4 <Inputs_Task+0x284>)
 800a61c:	189b      	adds	r3, r3, r2
 800a61e:	1c5c      	adds	r4, r3, #1
 800a620:	1dfb      	adds	r3, r7, #7
 800a622:	781a      	ldrb	r2, [r3, #0]
 800a624:	0013      	movs	r3, r2
 800a626:	00db      	lsls	r3, r3, #3
 800a628:	189b      	adds	r3, r3, r2
 800a62a:	4a6a      	ldr	r2, [pc, #424]	@ (800a7d4 <Inputs_Task+0x284>)
 800a62c:	189b      	adds	r3, r3, r2
 800a62e:	1c9d      	adds	r5, r3, #2
 800a630:	1dfb      	adds	r3, r7, #7
 800a632:	781a      	ldrb	r2, [r3, #0]
 800a634:	0013      	movs	r3, r2
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	189b      	adds	r3, r3, r2
 800a63a:	4a66      	ldr	r2, [pc, #408]	@ (800a7d4 <Inputs_Task+0x284>)
 800a63c:	189b      	adds	r3, r3, r2
 800a63e:	3303      	adds	r3, #3
 800a640:	1dfa      	adds	r2, r7, #7
 800a642:	7810      	ldrb	r0, [r2, #0]
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	002b      	movs	r3, r5
 800a648:	0022      	movs	r2, r4
 800a64a:	f7ff fe51 	bl	800a2f0 <inputs_motor_get>

#if(GPIO_ENCODER == GPIO_ENCODER_PULL)
		if( sInMt[i].enc != sInMt[i].pinSen + ( sInMt[i].pinEnc << 1 ) )
 800a64e:	1dfb      	adds	r3, r7, #7
 800a650:	781a      	ldrb	r2, [r3, #0]
 800a652:	4960      	ldr	r1, [pc, #384]	@ (800a7d4 <Inputs_Task+0x284>)
 800a654:	0013      	movs	r3, r2
 800a656:	00db      	lsls	r3, r3, #3
 800a658:	189b      	adds	r3, r3, r2
 800a65a:	18cb      	adds	r3, r1, r3
 800a65c:	3304      	adds	r3, #4
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	0018      	movs	r0, r3
 800a662:	1dfb      	adds	r3, r7, #7
 800a664:	781a      	ldrb	r2, [r3, #0]
 800a666:	495b      	ldr	r1, [pc, #364]	@ (800a7d4 <Inputs_Task+0x284>)
 800a668:	0013      	movs	r3, r2
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	189b      	adds	r3, r3, r2
 800a66e:	5c5b      	ldrb	r3, [r3, r1]
 800a670:	001c      	movs	r4, r3
 800a672:	1dfb      	adds	r3, r7, #7
 800a674:	781a      	ldrb	r2, [r3, #0]
 800a676:	4957      	ldr	r1, [pc, #348]	@ (800a7d4 <Inputs_Task+0x284>)
 800a678:	0013      	movs	r3, r2
 800a67a:	00db      	lsls	r3, r3, #3
 800a67c:	189b      	adds	r3, r3, r2
 800a67e:	18cb      	adds	r3, r1, r3
 800a680:	3301      	adds	r3, #1
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	18e3      	adds	r3, r4, r3
 800a688:	4298      	cmp	r0, r3
 800a68a:	d036      	beq.n	800a6fa <Inputs_Task+0x1aa>
		{
			sInMt[i].encChange = true;
 800a68c:	1dfb      	adds	r3, r7, #7
 800a68e:	781a      	ldrb	r2, [r3, #0]
 800a690:	4950      	ldr	r1, [pc, #320]	@ (800a7d4 <Inputs_Task+0x284>)
 800a692:	0013      	movs	r3, r2
 800a694:	00db      	lsls	r3, r3, #3
 800a696:	189b      	adds	r3, r3, r2
 800a698:	18cb      	adds	r3, r1, r3
 800a69a:	3306      	adds	r3, #6
 800a69c:	2201      	movs	r2, #1
 800a69e:	701a      	strb	r2, [r3, #0]
			sInMt[i].enc  = sInMt[i].pinSen + ( sInMt[i].pinEnc << 1 );
 800a6a0:	1dfb      	adds	r3, r7, #7
 800a6a2:	781a      	ldrb	r2, [r3, #0]
 800a6a4:	494b      	ldr	r1, [pc, #300]	@ (800a7d4 <Inputs_Task+0x284>)
 800a6a6:	0013      	movs	r3, r2
 800a6a8:	00db      	lsls	r3, r3, #3
 800a6aa:	189b      	adds	r3, r3, r2
 800a6ac:	5c59      	ldrb	r1, [r3, r1]
 800a6ae:	1dfb      	adds	r3, r7, #7
 800a6b0:	781a      	ldrb	r2, [r3, #0]
 800a6b2:	4848      	ldr	r0, [pc, #288]	@ (800a7d4 <Inputs_Task+0x284>)
 800a6b4:	0013      	movs	r3, r2
 800a6b6:	00db      	lsls	r3, r3, #3
 800a6b8:	189b      	adds	r3, r3, r2
 800a6ba:	18c3      	adds	r3, r0, r3
 800a6bc:	3301      	adds	r3, #1
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	18db      	adds	r3, r3, r3
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	1dfa      	adds	r2, r7, #7
 800a6c6:	7812      	ldrb	r2, [r2, #0]
 800a6c8:	18cb      	adds	r3, r1, r3
 800a6ca:	b2d8      	uxtb	r0, r3
 800a6cc:	4941      	ldr	r1, [pc, #260]	@ (800a7d4 <Inputs_Task+0x284>)
 800a6ce:	0013      	movs	r3, r2
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	189b      	adds	r3, r3, r2
 800a6d4:	18cb      	adds	r3, r1, r3
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	1c02      	adds	r2, r0, #0
 800a6da:	701a      	strb	r2, [r3, #0]
			Encoder_Refresh_IT( (tEncNum)i , sInMt[i].enc );
 800a6dc:	1dfb      	adds	r3, r7, #7
 800a6de:	781a      	ldrb	r2, [r3, #0]
 800a6e0:	493c      	ldr	r1, [pc, #240]	@ (800a7d4 <Inputs_Task+0x284>)
 800a6e2:	0013      	movs	r3, r2
 800a6e4:	00db      	lsls	r3, r3, #3
 800a6e6:	189b      	adds	r3, r3, r2
 800a6e8:	18cb      	adds	r3, r1, r3
 800a6ea:	3304      	adds	r3, #4
 800a6ec:	781a      	ldrb	r2, [r3, #0]
 800a6ee:	1dfb      	adds	r3, r7, #7
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	0011      	movs	r1, r2
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	f7ff f905 	bl	8009904 <Encoder_Refresh_IT>
		}
#endif
		//Disco
		if( sInMt[i].disc != sInMt[i].pinDisc1 + ( sInMt[i].pinDisc2 << 1 ) )
 800a6fa:	1dfb      	adds	r3, r7, #7
 800a6fc:	781a      	ldrb	r2, [r3, #0]
 800a6fe:	4935      	ldr	r1, [pc, #212]	@ (800a7d4 <Inputs_Task+0x284>)
 800a700:	0013      	movs	r3, r2
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	189b      	adds	r3, r3, r2
 800a706:	18cb      	adds	r3, r1, r3
 800a708:	3307      	adds	r3, #7
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	0018      	movs	r0, r3
 800a70e:	1dfb      	adds	r3, r7, #7
 800a710:	781a      	ldrb	r2, [r3, #0]
 800a712:	4930      	ldr	r1, [pc, #192]	@ (800a7d4 <Inputs_Task+0x284>)
 800a714:	0013      	movs	r3, r2
 800a716:	00db      	lsls	r3, r3, #3
 800a718:	189b      	adds	r3, r3, r2
 800a71a:	18cb      	adds	r3, r1, r3
 800a71c:	3302      	adds	r3, #2
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	001c      	movs	r4, r3
 800a722:	1dfb      	adds	r3, r7, #7
 800a724:	781a      	ldrb	r2, [r3, #0]
 800a726:	492b      	ldr	r1, [pc, #172]	@ (800a7d4 <Inputs_Task+0x284>)
 800a728:	0013      	movs	r3, r2
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	189b      	adds	r3, r3, r2
 800a72e:	18cb      	adds	r3, r1, r3
 800a730:	3303      	adds	r3, #3
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	005b      	lsls	r3, r3, #1
 800a736:	18e3      	adds	r3, r4, r3
 800a738:	4298      	cmp	r0, r3
 800a73a:	d038      	beq.n	800a7ae <Inputs_Task+0x25e>
		{
			sInMt[i].discChange = true;
 800a73c:	1dfb      	adds	r3, r7, #7
 800a73e:	781a      	ldrb	r2, [r3, #0]
 800a740:	4924      	ldr	r1, [pc, #144]	@ (800a7d4 <Inputs_Task+0x284>)
 800a742:	0013      	movs	r3, r2
 800a744:	00db      	lsls	r3, r3, #3
 800a746:	189b      	adds	r3, r3, r2
 800a748:	18cb      	adds	r3, r1, r3
 800a74a:	3308      	adds	r3, #8
 800a74c:	2201      	movs	r2, #1
 800a74e:	701a      	strb	r2, [r3, #0]
			sInMt[i].disc = sInMt[i].pinDisc1 + ( sInMt[i].pinDisc2 << 1 );
 800a750:	1dfb      	adds	r3, r7, #7
 800a752:	781a      	ldrb	r2, [r3, #0]
 800a754:	491f      	ldr	r1, [pc, #124]	@ (800a7d4 <Inputs_Task+0x284>)
 800a756:	0013      	movs	r3, r2
 800a758:	00db      	lsls	r3, r3, #3
 800a75a:	189b      	adds	r3, r3, r2
 800a75c:	18cb      	adds	r3, r1, r3
 800a75e:	3302      	adds	r3, #2
 800a760:	7819      	ldrb	r1, [r3, #0]
 800a762:	1dfb      	adds	r3, r7, #7
 800a764:	781a      	ldrb	r2, [r3, #0]
 800a766:	481b      	ldr	r0, [pc, #108]	@ (800a7d4 <Inputs_Task+0x284>)
 800a768:	0013      	movs	r3, r2
 800a76a:	00db      	lsls	r3, r3, #3
 800a76c:	189b      	adds	r3, r3, r2
 800a76e:	18c3      	adds	r3, r0, r3
 800a770:	3303      	adds	r3, #3
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	18db      	adds	r3, r3, r3
 800a776:	b2db      	uxtb	r3, r3
 800a778:	1dfa      	adds	r2, r7, #7
 800a77a:	7812      	ldrb	r2, [r2, #0]
 800a77c:	18cb      	adds	r3, r1, r3
 800a77e:	b2d8      	uxtb	r0, r3
 800a780:	4914      	ldr	r1, [pc, #80]	@ (800a7d4 <Inputs_Task+0x284>)
 800a782:	0013      	movs	r3, r2
 800a784:	00db      	lsls	r3, r3, #3
 800a786:	189b      	adds	r3, r3, r2
 800a788:	18cb      	adds	r3, r1, r3
 800a78a:	3307      	adds	r3, #7
 800a78c:	1c02      	adds	r2, r0, #0
 800a78e:	701a      	strb	r2, [r3, #0]
			Encoder_Position_IT( (tEncNum)i , sInMt[i].disc );
 800a790:	1dfb      	adds	r3, r7, #7
 800a792:	781a      	ldrb	r2, [r3, #0]
 800a794:	490f      	ldr	r1, [pc, #60]	@ (800a7d4 <Inputs_Task+0x284>)
 800a796:	0013      	movs	r3, r2
 800a798:	00db      	lsls	r3, r3, #3
 800a79a:	189b      	adds	r3, r3, r2
 800a79c:	18cb      	adds	r3, r1, r3
 800a79e:	3307      	adds	r3, #7
 800a7a0:	781a      	ldrb	r2, [r3, #0]
 800a7a2:	1dfb      	adds	r3, r7, #7
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	0011      	movs	r1, r2
 800a7a8:	0018      	movs	r0, r3
 800a7aa:	f7ff fb9b 	bl	8009ee4 <Encoder_Position_IT>
	for( uint8_t i = 0 ; i < 2 ; i++ )
 800a7ae:	1dfb      	adds	r3, r7, #7
 800a7b0:	781a      	ldrb	r2, [r3, #0]
 800a7b2:	1dfb      	adds	r3, r7, #7
 800a7b4:	3201      	adds	r2, #1
 800a7b6:	701a      	strb	r2, [r3, #0]
 800a7b8:	1dfb      	adds	r3, r7, #7
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d800      	bhi.n	800a7c2 <Inputs_Task+0x272>
 800a7c0:	e71f      	b.n	800a602 <Inputs_Task+0xb2>
		}

		//sInMt[i].disc = sInMt[i].pinDisc1 + ( sInMt[i].pinDisc2 << 1 );
	}
}
 800a7c2:	46c0      	nop			@ (mov r8, r8)
 800a7c4:	46c0      	nop			@ (mov r8, r8)
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	b002      	add	sp, #8
 800a7ca:	bdb0      	pop	{r4, r5, r7, pc}
 800a7cc:	2000019c 	.word	0x2000019c
 800a7d0:	200001d8 	.word	0x200001d8
 800a7d4:	200001e0 	.word	0x200001e0

0800a7d8 <Inputs_Get>:

bool Inputs_Get( tInputs in )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	0002      	movs	r2, r0
 800a7e0:	1dfb      	adds	r3, r7, #7
 800a7e2:	701a      	strb	r2, [r3, #0]
	return sInPin[in].state;
 800a7e4:	1dfb      	adds	r3, r7, #7
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	4a04      	ldr	r2, [pc, #16]	@ (800a7fc <Inputs_Get+0x24>)
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	18d3      	adds	r3, r2, r3
 800a7ee:	3302      	adds	r3, #2
 800a7f0:	781b      	ldrb	r3, [r3, #0]
}
 800a7f2:	0018      	movs	r0, r3
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	b002      	add	sp, #8
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	46c0      	nop			@ (mov r8, r8)
 800a7fc:	2000019c 	.word	0x2000019c

0800a800 <Inputs_Com_Get>:

tInCom 	Inputs_Com_Get(void)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	af00      	add	r7, sp, #0
	return sInCom.state;
 800a804:	4b02      	ldr	r3, [pc, #8]	@ (800a810 <Inputs_Com_Get+0x10>)
 800a806:	781b      	ldrb	r3, [r3, #0]
}
 800a808:	0018      	movs	r0, r3
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	46c0      	nop			@ (mov r8, r8)
 800a810:	200001d8 	.word	0x200001d8

0800a814 <Inputs_Motor_Enc_Get>:

uint8_t Inputs_Motor_Enc_Get(tInMt motorNum)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	0002      	movs	r2, r0
 800a81c:	1dfb      	adds	r3, r7, #7
 800a81e:	701a      	strb	r2, [r3, #0]
	return sInMt[motorNum].enc;
 800a820:	1dfb      	adds	r3, r7, #7
 800a822:	781a      	ldrb	r2, [r3, #0]
 800a824:	4905      	ldr	r1, [pc, #20]	@ (800a83c <Inputs_Motor_Enc_Get+0x28>)
 800a826:	0013      	movs	r3, r2
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	189b      	adds	r3, r3, r2
 800a82c:	18cb      	adds	r3, r1, r3
 800a82e:	3304      	adds	r3, #4
 800a830:	781b      	ldrb	r3, [r3, #0]
}
 800a832:	0018      	movs	r0, r3
 800a834:	46bd      	mov	sp, r7
 800a836:	b002      	add	sp, #8
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	46c0      	nop			@ (mov r8, r8)
 800a83c:	200001e0 	.word	0x200001e0

0800a840 <Inputs_Motor_Disc_Get>:
	sInMt[motorNum].encChange = false;
	return encChgMem;
}

uint8_t	Inputs_Motor_Disc_Get(tInMt motorNum)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	0002      	movs	r2, r0
 800a848:	1dfb      	adds	r3, r7, #7
 800a84a:	701a      	strb	r2, [r3, #0]
	return sInMt[motorNum].disc;
 800a84c:	1dfb      	adds	r3, r7, #7
 800a84e:	781a      	ldrb	r2, [r3, #0]
 800a850:	4905      	ldr	r1, [pc, #20]	@ (800a868 <Inputs_Motor_Disc_Get+0x28>)
 800a852:	0013      	movs	r3, r2
 800a854:	00db      	lsls	r3, r3, #3
 800a856:	189b      	adds	r3, r3, r2
 800a858:	18cb      	adds	r3, r1, r3
 800a85a:	3307      	adds	r3, #7
 800a85c:	781b      	ldrb	r3, [r3, #0]
}
 800a85e:	0018      	movs	r0, r3
 800a860:	46bd      	mov	sp, r7
 800a862:	b002      	add	sp, #8
 800a864:	bd80      	pop	{r7, pc}
 800a866:	46c0      	nop			@ (mov r8, r8)
 800a868:	200001e0 	.word	0x200001e0

0800a86c <Inputs_Urn_CardDet>:

bool Inputs_Urn_CardDet( tUrnCardDet getCear )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	0002      	movs	r2, r0
 800a874:	1dfb      	adds	r3, r7, #7
 800a876:	701a      	strb	r2, [r3, #0]
	if( getCear == _e_UrnCardDet_Get )
 800a878:	1dfb      	adds	r3, r7, #7
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d102      	bne.n	800a886 <Inputs_Urn_CardDet+0x1a>
		return sInUrn.cardDetFlag;
 800a880:	4b06      	ldr	r3, [pc, #24]	@ (800a89c <Inputs_Urn_CardDet+0x30>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	e006      	b.n	800a894 <Inputs_Urn_CardDet+0x28>
	else{
		//HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);///EXTI0_1_IRQn
		HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800a886:	2005      	movs	r0, #5
 800a888:	f7f7 fea9 	bl	80025de <HAL_NVIC_EnableIRQ>
		sInUrn.cardDetFlag = false; 
 800a88c:	4b03      	ldr	r3, [pc, #12]	@ (800a89c <Inputs_Urn_CardDet+0x30>)
 800a88e:	2200      	movs	r2, #0
 800a890:	701a      	strb	r2, [r3, #0]
	}
	return false;
 800a892:	2300      	movs	r3, #0
}
 800a894:	0018      	movs	r0, r3
 800a896:	46bd      	mov	sp, r7
 800a898:	b002      	add	sp, #8
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	200001f4 	.word	0x200001f4

0800a8a0 <outputs_Buzz_Task>:
/*** ** * Funcs Int * ** ***/

//Buzzer

void outputs_Buzz_Task(void)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	af00      	add	r7, sp, #0
	switch( (uint8_t)sOutBuzz.taskBuzz )
 800a8a4:	4b45      	ldr	r3, [pc, #276]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	2b06      	cmp	r3, #6
 800a8aa:	d900      	bls.n	800a8ae <outputs_Buzz_Task+0xe>
 800a8ac:	e07e      	b.n	800a9ac <outputs_Buzz_Task+0x10c>
 800a8ae:	009a      	lsls	r2, r3, #2
 800a8b0:	4b43      	ldr	r3, [pc, #268]	@ (800a9c0 <outputs_Buzz_Task+0x120>)
 800a8b2:	18d3      	adds	r3, r2, r3
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	469f      	mov	pc, r3
	{
		case _e_BuzzTask_Idle:
			sOutBuzz.sirenCount = BUZZER_SIREN_DEF;
 800a8b8:	4b40      	ldr	r3, [pc, #256]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a8ba:	2230      	movs	r2, #48	@ 0x30
 800a8bc:	705a      	strb	r2, [r3, #1]
			break;
 800a8be:	e07a      	b.n	800a9b6 <outputs_Buzz_Task+0x116>
		case _e_BuzzTask_Off:
			sOutBuzz.sirenCount = BUZZER_SIREN_DEF;
 800a8c0:	4b3e      	ldr	r3, [pc, #248]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a8c2:	2230      	movs	r2, #48	@ 0x30
 800a8c4:	705a      	strb	r2, [r3, #1]
			BUZZ_OFF;
 800a8c6:	4b3f      	ldr	r3, [pc, #252]	@ (800a9c4 <outputs_Buzz_Task+0x124>)
 800a8c8:	2280      	movs	r2, #128	@ 0x80
 800a8ca:	0392      	lsls	r2, r2, #14
 800a8cc:	619a      	str	r2, [r3, #24]
			sOutBuzz.taskBuzz = _e_BuzzTask_Idle;
 800a8ce:	4b3b      	ldr	r3, [pc, #236]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	701a      	strb	r2, [r3, #0]
			break;
 800a8d4:	e06f      	b.n	800a9b6 <outputs_Buzz_Task+0x116>
		case _e_BuzzTask_On:
			sOutBuzz.sirenCount = BUZZER_SIREN_DEF;
 800a8d6:	4b39      	ldr	r3, [pc, #228]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a8d8:	2230      	movs	r2, #48	@ 0x30
 800a8da:	705a      	strb	r2, [r3, #1]
			BUZZ_ON;
 800a8dc:	4b39      	ldr	r3, [pc, #228]	@ (800a9c4 <outputs_Buzz_Task+0x124>)
 800a8de:	2220      	movs	r2, #32
 800a8e0:	619a      	str	r2, [r3, #24]
			sOutBuzz.taskBuzz = _e_BuzzTask_Idle;
 800a8e2:	4b36      	ldr	r3, [pc, #216]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	701a      	strb	r2, [r3, #0]
			break;
 800a8e8:	e065      	b.n	800a9b6 <outputs_Buzz_Task+0x116>
		case _e_BuzzTask_BeepIni:
			sOutBuzz.sirenCount = BUZZER_SIREN_DEF;
 800a8ea:	4b34      	ldr	r3, [pc, #208]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a8ec:	2230      	movs	r2, #48	@ 0x30
 800a8ee:	705a      	strb	r2, [r3, #1]
			BUZZ_ON;
 800a8f0:	4b34      	ldr	r3, [pc, #208]	@ (800a9c4 <outputs_Buzz_Task+0x124>)
 800a8f2:	2220      	movs	r2, #32
 800a8f4:	619a      	str	r2, [r3, #24]
			Timing_Set( _e_Timing_Buzz , buzz_beep_time );
 800a8f6:	23fa      	movs	r3, #250	@ 0xfa
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	0019      	movs	r1, r3
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f004 fff1 	bl	800f8e4 <Timing_Set>
			sOutBuzz.taskBuzz = _e_BuzzTask_BeepEnd;
 800a902:	4b2e      	ldr	r3, [pc, #184]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a904:	2204      	movs	r2, #4
 800a906:	701a      	strb	r2, [r3, #0]
			break;
 800a908:	e055      	b.n	800a9b6 <outputs_Buzz_Task+0x116>
		case _e_BuzzTask_BeepEnd:
			sOutBuzz.sirenCount = BUZZER_SIREN_DEF;
 800a90a:	4b2c      	ldr	r3, [pc, #176]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a90c:	2230      	movs	r2, #48	@ 0x30
 800a90e:	705a      	strb	r2, [r3, #1]
			if( Timing_Get_Bool(_e_Timing_Buzz) ){
 800a910:	2000      	movs	r0, #0
 800a912:	f004 fffd 	bl	800f910 <Timing_Get_Bool>
 800a916:	1e03      	subs	r3, r0, #0
 800a918:	d04c      	beq.n	800a9b4 <outputs_Buzz_Task+0x114>
				BUZZ_OFF;
 800a91a:	4b2a      	ldr	r3, [pc, #168]	@ (800a9c4 <outputs_Buzz_Task+0x124>)
 800a91c:	2280      	movs	r2, #128	@ 0x80
 800a91e:	0392      	lsls	r2, r2, #14
 800a920:	619a      	str	r2, [r3, #24]
				sOutBuzz.taskBuzz = _e_BuzzTask_Idle;
 800a922:	4b26      	ldr	r3, [pc, #152]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a924:	2200      	movs	r2, #0
 800a926:	701a      	strb	r2, [r3, #0]
			}
			break;
 800a928:	e044      	b.n	800a9b4 <outputs_Buzz_Task+0x114>
			
		case _e_BuzzTask_SirenUp:
			BUZZ_ON;
 800a92a:	4b26      	ldr	r3, [pc, #152]	@ (800a9c4 <outputs_Buzz_Task+0x124>)
 800a92c:	2220      	movs	r2, #32
 800a92e:	619a      	str	r2, [r3, #24]
			if( sOutBuzz.sirenSpeed < BUZZER_SIREN_SPD )sOutBuzz.sirenSpeed++;
 800a930:	4b22      	ldr	r3, [pc, #136]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a932:	789b      	ldrb	r3, [r3, #2]
 800a934:	2b06      	cmp	r3, #6
 800a936:	d806      	bhi.n	800a946 <outputs_Buzz_Task+0xa6>
 800a938:	4b20      	ldr	r3, [pc, #128]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a93a:	789b      	ldrb	r3, [r3, #2]
 800a93c:	3301      	adds	r3, #1
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	4b1e      	ldr	r3, [pc, #120]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a942:	709a      	strb	r2, [r3, #2]
				else{
					//sOutBuzz.sirenCount = BUZZER_SIREN_MAX;
					sOutBuzz.taskBuzz = _e_BuzzTask_SirenDw;
				}
			}
			break;
 800a944:	e037      	b.n	800a9b6 <outputs_Buzz_Task+0x116>
				sOutBuzz.sirenSpeed = 0;
 800a946:	4b1d      	ldr	r3, [pc, #116]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a948:	2200      	movs	r2, #0
 800a94a:	709a      	strb	r2, [r3, #2]
				if( sOutBuzz.sirenCount < BUZZER_SIREN_MAX )sOutBuzz.sirenCount++;
 800a94c:	4b1b      	ldr	r3, [pc, #108]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a94e:	785b      	ldrb	r3, [r3, #1]
 800a950:	2bc7      	cmp	r3, #199	@ 0xc7
 800a952:	d806      	bhi.n	800a962 <outputs_Buzz_Task+0xc2>
 800a954:	4b19      	ldr	r3, [pc, #100]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a956:	785b      	ldrb	r3, [r3, #1]
 800a958:	3301      	adds	r3, #1
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	4b17      	ldr	r3, [pc, #92]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a95e:	705a      	strb	r2, [r3, #1]
			break;
 800a960:	e029      	b.n	800a9b6 <outputs_Buzz_Task+0x116>
					sOutBuzz.taskBuzz = _e_BuzzTask_SirenDw;
 800a962:	4b16      	ldr	r3, [pc, #88]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a964:	2206      	movs	r2, #6
 800a966:	701a      	strb	r2, [r3, #0]
			break;
 800a968:	e025      	b.n	800a9b6 <outputs_Buzz_Task+0x116>
		case _e_BuzzTask_SirenDw:
			BUZZ_OFF;
 800a96a:	4b16      	ldr	r3, [pc, #88]	@ (800a9c4 <outputs_Buzz_Task+0x124>)
 800a96c:	2280      	movs	r2, #128	@ 0x80
 800a96e:	0392      	lsls	r2, r2, #14
 800a970:	619a      	str	r2, [r3, #24]
			if( sOutBuzz.sirenSpeed < BUZZER_SIREN_SPD )sOutBuzz.sirenSpeed++;
 800a972:	4b12      	ldr	r3, [pc, #72]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a974:	789b      	ldrb	r3, [r3, #2]
 800a976:	2b06      	cmp	r3, #6
 800a978:	d806      	bhi.n	800a988 <outputs_Buzz_Task+0xe8>
 800a97a:	4b10      	ldr	r3, [pc, #64]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a97c:	789b      	ldrb	r3, [r3, #2]
 800a97e:	3301      	adds	r3, #1
 800a980:	b2da      	uxtb	r2, r3
 800a982:	4b0e      	ldr	r3, [pc, #56]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a984:	709a      	strb	r2, [r3, #2]
				else{
					//sOutBuzz.sirenCount = BUZZER_SIREN_MIN;
					sOutBuzz.taskBuzz = _e_BuzzTask_SirenUp;
				}
			}
			break;
 800a986:	e016      	b.n	800a9b6 <outputs_Buzz_Task+0x116>
				sOutBuzz.sirenSpeed = 0;
 800a988:	4b0c      	ldr	r3, [pc, #48]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	709a      	strb	r2, [r3, #2]
				if( sOutBuzz.sirenCount > BUZZER_SIREN_MIN )sOutBuzz.sirenCount--;
 800a98e:	4b0b      	ldr	r3, [pc, #44]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a990:	785b      	ldrb	r3, [r3, #1]
 800a992:	2b64      	cmp	r3, #100	@ 0x64
 800a994:	d906      	bls.n	800a9a4 <outputs_Buzz_Task+0x104>
 800a996:	4b09      	ldr	r3, [pc, #36]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a998:	785b      	ldrb	r3, [r3, #1]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	b2da      	uxtb	r2, r3
 800a99e:	4b07      	ldr	r3, [pc, #28]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a9a0:	705a      	strb	r2, [r3, #1]
			break;
 800a9a2:	e008      	b.n	800a9b6 <outputs_Buzz_Task+0x116>
					sOutBuzz.taskBuzz = _e_BuzzTask_SirenUp;
 800a9a4:	4b05      	ldr	r3, [pc, #20]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a9a6:	2205      	movs	r2, #5
 800a9a8:	701a      	strb	r2, [r3, #0]
			break;
 800a9aa:	e004      	b.n	800a9b6 <outputs_Buzz_Task+0x116>
		default:
			sOutBuzz.taskBuzz = _e_BuzzTask_Off;
 800a9ac:	4b03      	ldr	r3, [pc, #12]	@ (800a9bc <outputs_Buzz_Task+0x11c>)
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	701a      	strb	r2, [r3, #0]
			break;
 800a9b2:	e000      	b.n	800a9b6 <outputs_Buzz_Task+0x116>
			break;
 800a9b4:	46c0      	nop			@ (mov r8, r8)
	}
	//BUZZ_FREQ(sOutBuzz.sirenCount);
}
 800a9b6:	46c0      	nop			@ (mov r8, r8)
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	200001f8 	.word	0x200001f8
 800a9c0:	0800fee8 	.word	0x0800fee8
 800a9c4:	48001400 	.word	0x48001400

0800a9c8 <output_RGB_Set>:
}

//Picto RGB

void output_RGB_Set( tOutPic inOut, uint8_t valR, uint8_t valG, uint8_t valB )
{
 800a9c8:	b5b0      	push	{r4, r5, r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	0005      	movs	r5, r0
 800a9d0:	000c      	movs	r4, r1
 800a9d2:	0010      	movs	r0, r2
 800a9d4:	0019      	movs	r1, r3
 800a9d6:	1dfb      	adds	r3, r7, #7
 800a9d8:	1c2a      	adds	r2, r5, #0
 800a9da:	701a      	strb	r2, [r3, #0]
 800a9dc:	1dbb      	adds	r3, r7, #6
 800a9de:	1c22      	adds	r2, r4, #0
 800a9e0:	701a      	strb	r2, [r3, #0]
 800a9e2:	1d7b      	adds	r3, r7, #5
 800a9e4:	1c02      	adds	r2, r0, #0
 800a9e6:	701a      	strb	r2, [r3, #0]
 800a9e8:	1d3b      	adds	r3, r7, #4
 800a9ea:	1c0a      	adds	r2, r1, #0
 800a9ec:	701a      	strb	r2, [r3, #0]
	if			( inOut == _e_OutPic_In ){
 800a9ee:	1dfb      	adds	r3, r7, #7
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10c      	bne.n	800aa10 <output_RGB_Set+0x48>
		//RGB1_R_DUTY(valR); RGB1_G_DUTY(valG); RGB1_B_DUTY(valB);
		RGB2_R_DUTY(valR); RGB2_G_DUTY(valG); RGB2_B_DUTY(valB);
 800a9f6:	4b1f      	ldr	r3, [pc, #124]	@ (800aa74 <output_RGB_Set+0xac>)
 800a9f8:	1dba      	adds	r2, r7, #6
 800a9fa:	7812      	ldrb	r2, [r2, #0]
 800a9fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a9fe:	4b1d      	ldr	r3, [pc, #116]	@ (800aa74 <output_RGB_Set+0xac>)
 800aa00:	1d7a      	adds	r2, r7, #5
 800aa02:	7812      	ldrb	r2, [r2, #0]
 800aa04:	641a      	str	r2, [r3, #64]	@ 0x40
 800aa06:	4b1c      	ldr	r3, [pc, #112]	@ (800aa78 <output_RGB_Set+0xb0>)
 800aa08:	1d3a      	adds	r2, r7, #4
 800aa0a:	7812      	ldrb	r2, [r2, #0]
 800aa0c:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if	( inOut == _e_OutPic_Both ){
		RGB1_R_DUTY(valR); RGB1_G_DUTY(valG); RGB1_B_DUTY(valB);
		RGB2_R_DUTY(valR); RGB2_G_DUTY(valG); RGB2_B_DUTY(valB);
	}
}
 800aa0e:	e02c      	b.n	800aa6a <output_RGB_Set+0xa2>
	else if	( inOut == _e_OutPic_Out ){
 800aa10:	1dfb      	adds	r3, r7, #7
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d10c      	bne.n	800aa32 <output_RGB_Set+0x6a>
		RGB1_R_DUTY(valR); RGB1_G_DUTY(valG); RGB1_B_DUTY(valB);
 800aa18:	4b17      	ldr	r3, [pc, #92]	@ (800aa78 <output_RGB_Set+0xb0>)
 800aa1a:	1dba      	adds	r2, r7, #6
 800aa1c:	7812      	ldrb	r2, [r2, #0]
 800aa1e:	639a      	str	r2, [r3, #56]	@ 0x38
 800aa20:	4b15      	ldr	r3, [pc, #84]	@ (800aa78 <output_RGB_Set+0xb0>)
 800aa22:	1d7a      	adds	r2, r7, #5
 800aa24:	7812      	ldrb	r2, [r2, #0]
 800aa26:	63da      	str	r2, [r3, #60]	@ 0x3c
 800aa28:	4b13      	ldr	r3, [pc, #76]	@ (800aa78 <output_RGB_Set+0xb0>)
 800aa2a:	1d3a      	adds	r2, r7, #4
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800aa30:	e01b      	b.n	800aa6a <output_RGB_Set+0xa2>
	else if	( inOut == _e_OutPic_Both ){
 800aa32:	1dfb      	adds	r3, r7, #7
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d117      	bne.n	800aa6a <output_RGB_Set+0xa2>
		RGB1_R_DUTY(valR); RGB1_G_DUTY(valG); RGB1_B_DUTY(valB);
 800aa3a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa78 <output_RGB_Set+0xb0>)
 800aa3c:	1dba      	adds	r2, r7, #6
 800aa3e:	7812      	ldrb	r2, [r2, #0]
 800aa40:	639a      	str	r2, [r3, #56]	@ 0x38
 800aa42:	4b0d      	ldr	r3, [pc, #52]	@ (800aa78 <output_RGB_Set+0xb0>)
 800aa44:	1d7a      	adds	r2, r7, #5
 800aa46:	7812      	ldrb	r2, [r2, #0]
 800aa48:	63da      	str	r2, [r3, #60]	@ 0x3c
 800aa4a:	4b0b      	ldr	r3, [pc, #44]	@ (800aa78 <output_RGB_Set+0xb0>)
 800aa4c:	1d3a      	adds	r2, r7, #4
 800aa4e:	7812      	ldrb	r2, [r2, #0]
 800aa50:	641a      	str	r2, [r3, #64]	@ 0x40
		RGB2_R_DUTY(valR); RGB2_G_DUTY(valG); RGB2_B_DUTY(valB);
 800aa52:	4b08      	ldr	r3, [pc, #32]	@ (800aa74 <output_RGB_Set+0xac>)
 800aa54:	1dba      	adds	r2, r7, #6
 800aa56:	7812      	ldrb	r2, [r2, #0]
 800aa58:	63da      	str	r2, [r3, #60]	@ 0x3c
 800aa5a:	4b06      	ldr	r3, [pc, #24]	@ (800aa74 <output_RGB_Set+0xac>)
 800aa5c:	1d7a      	adds	r2, r7, #5
 800aa5e:	7812      	ldrb	r2, [r2, #0]
 800aa60:	641a      	str	r2, [r3, #64]	@ 0x40
 800aa62:	4b05      	ldr	r3, [pc, #20]	@ (800aa78 <output_RGB_Set+0xb0>)
 800aa64:	1d3a      	adds	r2, r7, #4
 800aa66:	7812      	ldrb	r2, [r2, #0]
 800aa68:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800aa6a:	46c0      	nop			@ (mov r8, r8)
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	b002      	add	sp, #8
 800aa70:	bdb0      	pop	{r4, r5, r7, pc}
 800aa72:	46c0      	nop			@ (mov r8, r8)
 800aa74:	40000400 	.word	0x40000400
 800aa78:	40012c00 	.word	0x40012c00

0800aa7c <output_RGB_ctrl>:

void output_RGB_ctrl( tOutPic picNum, bool uD )
{
 800aa7c:	b5b0      	push	{r4, r5, r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	0002      	movs	r2, r0
 800aa84:	1dfb      	adds	r3, r7, #7
 800aa86:	701a      	strb	r2, [r3, #0]
 800aa88:	1dbb      	adds	r3, r7, #6
 800aa8a:	1c0a      	adds	r2, r1, #0
 800aa8c:	701a      	strb	r2, [r3, #0]
	if( uD )
 800aa8e:	1dbb      	adds	r3, r7, #6
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d100      	bne.n	800aa98 <output_RGB_ctrl+0x1c>
 800aa96:	e0d8      	b.n	800ac4a <output_RGB_ctrl+0x1ce>
	{
		if( sOutRgb[picNum].speedSys < sOutRgb[picNum].speedUser ){
 800aa98:	1dfb      	adds	r3, r7, #7
 800aa9a:	781a      	ldrb	r2, [r3, #0]
 800aa9c:	49bb      	ldr	r1, [pc, #748]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800aa9e:	0013      	movs	r3, r2
 800aaa0:	011b      	lsls	r3, r3, #4
 800aaa2:	1a9b      	subs	r3, r3, r2
 800aaa4:	18cb      	adds	r3, r1, r3
 800aaa6:	3307      	adds	r3, #7
 800aaa8:	7819      	ldrb	r1, [r3, #0]
 800aaaa:	1dfb      	adds	r3, r7, #7
 800aaac:	781a      	ldrb	r2, [r3, #0]
 800aaae:	48b7      	ldr	r0, [pc, #732]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800aab0:	0013      	movs	r3, r2
 800aab2:	011b      	lsls	r3, r3, #4
 800aab4:	1a9b      	subs	r3, r3, r2
 800aab6:	18c3      	adds	r3, r0, r3
 800aab8:	3308      	adds	r3, #8
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	4299      	cmp	r1, r3
 800aabe:	d213      	bcs.n	800aae8 <output_RGB_ctrl+0x6c>
			sOutRgb[picNum].speedSys++;
 800aac0:	1dfb      	adds	r3, r7, #7
 800aac2:	781a      	ldrb	r2, [r3, #0]
 800aac4:	49b1      	ldr	r1, [pc, #708]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800aac6:	0013      	movs	r3, r2
 800aac8:	011b      	lsls	r3, r3, #4
 800aaca:	1a9b      	subs	r3, r3, r2
 800aacc:	18cb      	adds	r3, r1, r3
 800aace:	3307      	adds	r3, #7
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	3301      	adds	r3, #1
 800aad4:	b2d8      	uxtb	r0, r3
 800aad6:	49ad      	ldr	r1, [pc, #692]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800aad8:	0013      	movs	r3, r2
 800aada:	011b      	lsls	r3, r3, #4
 800aadc:	1a9b      	subs	r3, r3, r2
 800aade:	18cb      	adds	r3, r1, r3
 800aae0:	3307      	adds	r3, #7
 800aae2:	1c02      	adds	r2, r0, #0
 800aae4:	701a      	strb	r2, [r3, #0]
 800aae6:	e081      	b.n	800abec <output_RGB_ctrl+0x170>
		}
		else{
			sOutRgb[picNum].speedSys = (tOutPicSpeed)0;
 800aae8:	1dfb      	adds	r3, r7, #7
 800aaea:	781a      	ldrb	r2, [r3, #0]
 800aaec:	49a7      	ldr	r1, [pc, #668]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800aaee:	0013      	movs	r3, r2
 800aaf0:	011b      	lsls	r3, r3, #4
 800aaf2:	1a9b      	subs	r3, r3, r2
 800aaf4:	18cb      	adds	r3, r1, r3
 800aaf6:	3307      	adds	r3, #7
 800aaf8:	2200      	movs	r2, #0
 800aafa:	701a      	strb	r2, [r3, #0]
			for( uint8_t x = 0 ; x < 3 ; x++ ){
 800aafc:	230f      	movs	r3, #15
 800aafe:	18fb      	adds	r3, r7, r3
 800ab00:	2200      	movs	r2, #0
 800ab02:	701a      	strb	r2, [r3, #0]
 800ab04:	e06d      	b.n	800abe2 <output_RGB_ctrl+0x166>
				if ( sOutRgb[picNum].dutySys[x] < sOutRgb[picNum].dutyUser[x] )sOutRgb[picNum].dutySys[x]++;
 800ab06:	1dfb      	adds	r3, r7, #7
 800ab08:	781a      	ldrb	r2, [r3, #0]
 800ab0a:	250f      	movs	r5, #15
 800ab0c:	197b      	adds	r3, r7, r5
 800ab0e:	7819      	ldrb	r1, [r3, #0]
 800ab10:	489e      	ldr	r0, [pc, #632]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ab12:	0013      	movs	r3, r2
 800ab14:	011b      	lsls	r3, r3, #4
 800ab16:	1a9b      	subs	r3, r3, r2
 800ab18:	18c3      	adds	r3, r0, r3
 800ab1a:	5c59      	ldrb	r1, [r3, r1]
 800ab1c:	1dfb      	adds	r3, r7, #7
 800ab1e:	781a      	ldrb	r2, [r3, #0]
 800ab20:	197b      	adds	r3, r7, r5
 800ab22:	7818      	ldrb	r0, [r3, #0]
 800ab24:	4c99      	ldr	r4, [pc, #612]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ab26:	0013      	movs	r3, r2
 800ab28:	011b      	lsls	r3, r3, #4
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	18e3      	adds	r3, r4, r3
 800ab2e:	181b      	adds	r3, r3, r0
 800ab30:	3303      	adds	r3, #3
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	4299      	cmp	r1, r3
 800ab36:	d213      	bcs.n	800ab60 <output_RGB_ctrl+0xe4>
 800ab38:	1dfb      	adds	r3, r7, #7
 800ab3a:	781a      	ldrb	r2, [r3, #0]
 800ab3c:	197b      	adds	r3, r7, r5
 800ab3e:	7819      	ldrb	r1, [r3, #0]
 800ab40:	4892      	ldr	r0, [pc, #584]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ab42:	0013      	movs	r3, r2
 800ab44:	011b      	lsls	r3, r3, #4
 800ab46:	1a9b      	subs	r3, r3, r2
 800ab48:	18c3      	adds	r3, r0, r3
 800ab4a:	5c5b      	ldrb	r3, [r3, r1]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	b2dc      	uxtb	r4, r3
 800ab50:	488e      	ldr	r0, [pc, #568]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ab52:	0013      	movs	r3, r2
 800ab54:	011b      	lsls	r3, r3, #4
 800ab56:	1a9b      	subs	r3, r3, r2
 800ab58:	18c3      	adds	r3, r0, r3
 800ab5a:	1c22      	adds	r2, r4, #0
 800ab5c:	545a      	strb	r2, [r3, r1]
 800ab5e:	e03a      	b.n	800abd6 <output_RGB_ctrl+0x15a>
				else if	( sOutRgb[picNum].dutySys[x] > sOutRgb[picNum].dutyUser[x] )sOutRgb[picNum].dutySys[x]--;
 800ab60:	1dfb      	adds	r3, r7, #7
 800ab62:	781a      	ldrb	r2, [r3, #0]
 800ab64:	250f      	movs	r5, #15
 800ab66:	197b      	adds	r3, r7, r5
 800ab68:	7819      	ldrb	r1, [r3, #0]
 800ab6a:	4888      	ldr	r0, [pc, #544]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ab6c:	0013      	movs	r3, r2
 800ab6e:	011b      	lsls	r3, r3, #4
 800ab70:	1a9b      	subs	r3, r3, r2
 800ab72:	18c3      	adds	r3, r0, r3
 800ab74:	5c59      	ldrb	r1, [r3, r1]
 800ab76:	1dfb      	adds	r3, r7, #7
 800ab78:	781a      	ldrb	r2, [r3, #0]
 800ab7a:	197b      	adds	r3, r7, r5
 800ab7c:	7818      	ldrb	r0, [r3, #0]
 800ab7e:	4c83      	ldr	r4, [pc, #524]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ab80:	0013      	movs	r3, r2
 800ab82:	011b      	lsls	r3, r3, #4
 800ab84:	1a9b      	subs	r3, r3, r2
 800ab86:	18e3      	adds	r3, r4, r3
 800ab88:	181b      	adds	r3, r3, r0
 800ab8a:	3303      	adds	r3, #3
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	4299      	cmp	r1, r3
 800ab90:	d913      	bls.n	800abba <output_RGB_ctrl+0x13e>
 800ab92:	1dfb      	adds	r3, r7, #7
 800ab94:	781a      	ldrb	r2, [r3, #0]
 800ab96:	197b      	adds	r3, r7, r5
 800ab98:	7819      	ldrb	r1, [r3, #0]
 800ab9a:	487c      	ldr	r0, [pc, #496]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ab9c:	0013      	movs	r3, r2
 800ab9e:	011b      	lsls	r3, r3, #4
 800aba0:	1a9b      	subs	r3, r3, r2
 800aba2:	18c3      	adds	r3, r0, r3
 800aba4:	5c5b      	ldrb	r3, [r3, r1]
 800aba6:	3b01      	subs	r3, #1
 800aba8:	b2dc      	uxtb	r4, r3
 800abaa:	4878      	ldr	r0, [pc, #480]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800abac:	0013      	movs	r3, r2
 800abae:	011b      	lsls	r3, r3, #4
 800abb0:	1a9b      	subs	r3, r3, r2
 800abb2:	18c3      	adds	r3, r0, r3
 800abb4:	1c22      	adds	r2, r4, #0
 800abb6:	545a      	strb	r2, [r3, r1]
 800abb8:	e00d      	b.n	800abd6 <output_RGB_ctrl+0x15a>
				else sOutRgb[picNum].blinkMode[x] = true;
 800abba:	1dfb      	adds	r3, r7, #7
 800abbc:	781a      	ldrb	r2, [r3, #0]
 800abbe:	230f      	movs	r3, #15
 800abc0:	18fb      	adds	r3, r7, r3
 800abc2:	7819      	ldrb	r1, [r3, #0]
 800abc4:	4871      	ldr	r0, [pc, #452]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800abc6:	0013      	movs	r3, r2
 800abc8:	011b      	lsls	r3, r3, #4
 800abca:	1a9b      	subs	r3, r3, r2
 800abcc:	18c3      	adds	r3, r0, r3
 800abce:	185b      	adds	r3, r3, r1
 800abd0:	330a      	adds	r3, #10
 800abd2:	2201      	movs	r2, #1
 800abd4:	701a      	strb	r2, [r3, #0]
			for( uint8_t x = 0 ; x < 3 ; x++ ){
 800abd6:	210f      	movs	r1, #15
 800abd8:	187b      	adds	r3, r7, r1
 800abda:	781a      	ldrb	r2, [r3, #0]
 800abdc:	187b      	adds	r3, r7, r1
 800abde:	3201      	adds	r2, #1
 800abe0:	701a      	strb	r2, [r3, #0]
 800abe2:	230f      	movs	r3, #15
 800abe4:	18fb      	adds	r3, r7, r3
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d98c      	bls.n	800ab06 <output_RGB_ctrl+0x8a>
			}
		}
		if( sOutRgb[picNum].blinkMode[_e_Rgb_R] == true && 
 800abec:	1dfb      	adds	r3, r7, #7
 800abee:	781a      	ldrb	r2, [r3, #0]
 800abf0:	4966      	ldr	r1, [pc, #408]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800abf2:	0013      	movs	r3, r2
 800abf4:	011b      	lsls	r3, r3, #4
 800abf6:	1a9b      	subs	r3, r3, r2
 800abf8:	18cb      	adds	r3, r1, r3
 800abfa:	330a      	adds	r3, #10
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d000      	beq.n	800ac04 <output_RGB_ctrl+0x188>
 800ac02:	e0be      	b.n	800ad82 <output_RGB_ctrl+0x306>
				sOutRgb[picNum].blinkMode[_e_Rgb_G] == true && 
 800ac04:	1dfb      	adds	r3, r7, #7
 800ac06:	781a      	ldrb	r2, [r3, #0]
 800ac08:	4960      	ldr	r1, [pc, #384]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ac0a:	0013      	movs	r3, r2
 800ac0c:	011b      	lsls	r3, r3, #4
 800ac0e:	1a9b      	subs	r3, r3, r2
 800ac10:	18cb      	adds	r3, r1, r3
 800ac12:	330b      	adds	r3, #11
 800ac14:	781b      	ldrb	r3, [r3, #0]
		if( sOutRgb[picNum].blinkMode[_e_Rgb_R] == true && 
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d000      	beq.n	800ac1c <output_RGB_ctrl+0x1a0>
 800ac1a:	e0b2      	b.n	800ad82 <output_RGB_ctrl+0x306>
				sOutRgb[picNum].blinkMode[_e_Rgb_B] == true )
 800ac1c:	1dfb      	adds	r3, r7, #7
 800ac1e:	781a      	ldrb	r2, [r3, #0]
 800ac20:	495a      	ldr	r1, [pc, #360]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ac22:	0013      	movs	r3, r2
 800ac24:	011b      	lsls	r3, r3, #4
 800ac26:	1a9b      	subs	r3, r3, r2
 800ac28:	18cb      	adds	r3, r1, r3
 800ac2a:	330c      	adds	r3, #12
 800ac2c:	781b      	ldrb	r3, [r3, #0]
				sOutRgb[picNum].blinkMode[_e_Rgb_G] == true && 
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d000      	beq.n	800ac34 <output_RGB_ctrl+0x1b8>
 800ac32:	e0a6      	b.n	800ad82 <output_RGB_ctrl+0x306>
		{
			sOutRgb[picNum].blinkModeFlag = true;
 800ac34:	1dfb      	adds	r3, r7, #7
 800ac36:	781a      	ldrb	r2, [r3, #0]
 800ac38:	4954      	ldr	r1, [pc, #336]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ac3a:	0013      	movs	r3, r2
 800ac3c:	011b      	lsls	r3, r3, #4
 800ac3e:	1a9b      	subs	r3, r3, r2
 800ac40:	18cb      	adds	r3, r1, r3
 800ac42:	330d      	adds	r3, #13
 800ac44:	2201      	movs	r2, #1
 800ac46:	701a      	strb	r2, [r3, #0]
				sOutRgb[picNum].blinkMode[_e_Rgb_B] == false )
		{
			sOutRgb[picNum].blinkModeFlag = false;
		}
	}
}
 800ac48:	e09b      	b.n	800ad82 <output_RGB_ctrl+0x306>
		if( sOutRgb[picNum].speedSys < sOutRgb[picNum].speedUser ){
 800ac4a:	1dfb      	adds	r3, r7, #7
 800ac4c:	781a      	ldrb	r2, [r3, #0]
 800ac4e:	494f      	ldr	r1, [pc, #316]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ac50:	0013      	movs	r3, r2
 800ac52:	011b      	lsls	r3, r3, #4
 800ac54:	1a9b      	subs	r3, r3, r2
 800ac56:	18cb      	adds	r3, r1, r3
 800ac58:	3307      	adds	r3, #7
 800ac5a:	7819      	ldrb	r1, [r3, #0]
 800ac5c:	1dfb      	adds	r3, r7, #7
 800ac5e:	781a      	ldrb	r2, [r3, #0]
 800ac60:	484a      	ldr	r0, [pc, #296]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ac62:	0013      	movs	r3, r2
 800ac64:	011b      	lsls	r3, r3, #4
 800ac66:	1a9b      	subs	r3, r3, r2
 800ac68:	18c3      	adds	r3, r0, r3
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	4299      	cmp	r1, r3
 800ac70:	d213      	bcs.n	800ac9a <output_RGB_ctrl+0x21e>
			sOutRgb[picNum].speedSys++;
 800ac72:	1dfb      	adds	r3, r7, #7
 800ac74:	781a      	ldrb	r2, [r3, #0]
 800ac76:	4945      	ldr	r1, [pc, #276]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ac78:	0013      	movs	r3, r2
 800ac7a:	011b      	lsls	r3, r3, #4
 800ac7c:	1a9b      	subs	r3, r3, r2
 800ac7e:	18cb      	adds	r3, r1, r3
 800ac80:	3307      	adds	r3, #7
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	3301      	adds	r3, #1
 800ac86:	b2d8      	uxtb	r0, r3
 800ac88:	4940      	ldr	r1, [pc, #256]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ac8a:	0013      	movs	r3, r2
 800ac8c:	011b      	lsls	r3, r3, #4
 800ac8e:	1a9b      	subs	r3, r3, r2
 800ac90:	18cb      	adds	r3, r1, r3
 800ac92:	3307      	adds	r3, #7
 800ac94:	1c02      	adds	r2, r0, #0
 800ac96:	701a      	strb	r2, [r3, #0]
 800ac98:	e048      	b.n	800ad2c <output_RGB_ctrl+0x2b0>
			sOutRgb[picNum].speedSys = (tOutPicSpeed)0;
 800ac9a:	1dfb      	adds	r3, r7, #7
 800ac9c:	781a      	ldrb	r2, [r3, #0]
 800ac9e:	493b      	ldr	r1, [pc, #236]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800aca0:	0013      	movs	r3, r2
 800aca2:	011b      	lsls	r3, r3, #4
 800aca4:	1a9b      	subs	r3, r3, r2
 800aca6:	18cb      	adds	r3, r1, r3
 800aca8:	3307      	adds	r3, #7
 800acaa:	2200      	movs	r2, #0
 800acac:	701a      	strb	r2, [r3, #0]
			for( uint8_t x = 0 ; x < 3 ; x++ ){
 800acae:	230e      	movs	r3, #14
 800acb0:	18fb      	adds	r3, r7, r3
 800acb2:	2200      	movs	r2, #0
 800acb4:	701a      	strb	r2, [r3, #0]
 800acb6:	e034      	b.n	800ad22 <output_RGB_ctrl+0x2a6>
				if( sOutRgb[picNum].dutySys[x] > 0 )sOutRgb[picNum].dutySys[x]--;
 800acb8:	1dfb      	adds	r3, r7, #7
 800acba:	781a      	ldrb	r2, [r3, #0]
 800acbc:	240e      	movs	r4, #14
 800acbe:	193b      	adds	r3, r7, r4
 800acc0:	7819      	ldrb	r1, [r3, #0]
 800acc2:	4832      	ldr	r0, [pc, #200]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800acc4:	0013      	movs	r3, r2
 800acc6:	011b      	lsls	r3, r3, #4
 800acc8:	1a9b      	subs	r3, r3, r2
 800acca:	18c3      	adds	r3, r0, r3
 800accc:	5c5b      	ldrb	r3, [r3, r1]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d013      	beq.n	800acfa <output_RGB_ctrl+0x27e>
 800acd2:	1dfb      	adds	r3, r7, #7
 800acd4:	781a      	ldrb	r2, [r3, #0]
 800acd6:	193b      	adds	r3, r7, r4
 800acd8:	7819      	ldrb	r1, [r3, #0]
 800acda:	482c      	ldr	r0, [pc, #176]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800acdc:	0013      	movs	r3, r2
 800acde:	011b      	lsls	r3, r3, #4
 800ace0:	1a9b      	subs	r3, r3, r2
 800ace2:	18c3      	adds	r3, r0, r3
 800ace4:	5c5b      	ldrb	r3, [r3, r1]
 800ace6:	3b01      	subs	r3, #1
 800ace8:	b2dc      	uxtb	r4, r3
 800acea:	4828      	ldr	r0, [pc, #160]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800acec:	0013      	movs	r3, r2
 800acee:	011b      	lsls	r3, r3, #4
 800acf0:	1a9b      	subs	r3, r3, r2
 800acf2:	18c3      	adds	r3, r0, r3
 800acf4:	1c22      	adds	r2, r4, #0
 800acf6:	545a      	strb	r2, [r3, r1]
 800acf8:	e00d      	b.n	800ad16 <output_RGB_ctrl+0x29a>
				else sOutRgb[picNum].blinkMode[x] = false;
 800acfa:	1dfb      	adds	r3, r7, #7
 800acfc:	781a      	ldrb	r2, [r3, #0]
 800acfe:	230e      	movs	r3, #14
 800ad00:	18fb      	adds	r3, r7, r3
 800ad02:	7819      	ldrb	r1, [r3, #0]
 800ad04:	4821      	ldr	r0, [pc, #132]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ad06:	0013      	movs	r3, r2
 800ad08:	011b      	lsls	r3, r3, #4
 800ad0a:	1a9b      	subs	r3, r3, r2
 800ad0c:	18c3      	adds	r3, r0, r3
 800ad0e:	185b      	adds	r3, r3, r1
 800ad10:	330a      	adds	r3, #10
 800ad12:	2200      	movs	r2, #0
 800ad14:	701a      	strb	r2, [r3, #0]
			for( uint8_t x = 0 ; x < 3 ; x++ ){
 800ad16:	210e      	movs	r1, #14
 800ad18:	187b      	adds	r3, r7, r1
 800ad1a:	781a      	ldrb	r2, [r3, #0]
 800ad1c:	187b      	adds	r3, r7, r1
 800ad1e:	3201      	adds	r2, #1
 800ad20:	701a      	strb	r2, [r3, #0]
 800ad22:	230e      	movs	r3, #14
 800ad24:	18fb      	adds	r3, r7, r3
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	d9c5      	bls.n	800acb8 <output_RGB_ctrl+0x23c>
		if( sOutRgb[picNum].blinkMode[_e_Rgb_R] == false && 
 800ad2c:	1dfb      	adds	r3, r7, #7
 800ad2e:	781a      	ldrb	r2, [r3, #0]
 800ad30:	4916      	ldr	r1, [pc, #88]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ad32:	0013      	movs	r3, r2
 800ad34:	011b      	lsls	r3, r3, #4
 800ad36:	1a9b      	subs	r3, r3, r2
 800ad38:	18cb      	adds	r3, r1, r3
 800ad3a:	330a      	adds	r3, #10
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d11f      	bne.n	800ad82 <output_RGB_ctrl+0x306>
				sOutRgb[picNum].blinkMode[_e_Rgb_G] == false && 
 800ad42:	1dfb      	adds	r3, r7, #7
 800ad44:	781a      	ldrb	r2, [r3, #0]
 800ad46:	4911      	ldr	r1, [pc, #68]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ad48:	0013      	movs	r3, r2
 800ad4a:	011b      	lsls	r3, r3, #4
 800ad4c:	1a9b      	subs	r3, r3, r2
 800ad4e:	18cb      	adds	r3, r1, r3
 800ad50:	330b      	adds	r3, #11
 800ad52:	781b      	ldrb	r3, [r3, #0]
		if( sOutRgb[picNum].blinkMode[_e_Rgb_R] == false && 
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d114      	bne.n	800ad82 <output_RGB_ctrl+0x306>
				sOutRgb[picNum].blinkMode[_e_Rgb_B] == false )
 800ad58:	1dfb      	adds	r3, r7, #7
 800ad5a:	781a      	ldrb	r2, [r3, #0]
 800ad5c:	490b      	ldr	r1, [pc, #44]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ad5e:	0013      	movs	r3, r2
 800ad60:	011b      	lsls	r3, r3, #4
 800ad62:	1a9b      	subs	r3, r3, r2
 800ad64:	18cb      	adds	r3, r1, r3
 800ad66:	330c      	adds	r3, #12
 800ad68:	781b      	ldrb	r3, [r3, #0]
				sOutRgb[picNum].blinkMode[_e_Rgb_G] == false && 
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d109      	bne.n	800ad82 <output_RGB_ctrl+0x306>
			sOutRgb[picNum].blinkModeFlag = false;
 800ad6e:	1dfb      	adds	r3, r7, #7
 800ad70:	781a      	ldrb	r2, [r3, #0]
 800ad72:	4906      	ldr	r1, [pc, #24]	@ (800ad8c <output_RGB_ctrl+0x310>)
 800ad74:	0013      	movs	r3, r2
 800ad76:	011b      	lsls	r3, r3, #4
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	18cb      	adds	r3, r1, r3
 800ad7c:	330d      	adds	r3, #13
 800ad7e:	2200      	movs	r2, #0
 800ad80:	701a      	strb	r2, [r3, #0]
}
 800ad82:	46c0      	nop			@ (mov r8, r8)
 800ad84:	46bd      	mov	sp, r7
 800ad86:	b004      	add	sp, #16
 800ad88:	bdb0      	pop	{r4, r5, r7, pc}
 800ad8a:	46c0      	nop			@ (mov r8, r8)
 800ad8c:	20000200 	.word	0x20000200

0800ad90 <outputs_RGB_IT>:

void outputs_RGB_IT(void)
{
 800ad90:	b5b0      	push	{r4, r5, r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
	for( uint8_t i = 0 ; i < 2 ; i++ )
 800ad96:	1dfb      	adds	r3, r7, #7
 800ad98:	2200      	movs	r2, #0
 800ad9a:	701a      	strb	r2, [r3, #0]
 800ad9c:	e06b      	b.n	800ae76 <outputs_RGB_IT+0xe6>
	{
		if( sOutRgb[i].mode == _e_OutPicMode_Off )
 800ad9e:	1dfb      	adds	r3, r7, #7
 800ada0:	781a      	ldrb	r2, [r3, #0]
 800ada2:	4939      	ldr	r1, [pc, #228]	@ (800ae88 <outputs_RGB_IT+0xf8>)
 800ada4:	0013      	movs	r3, r2
 800ada6:	011b      	lsls	r3, r3, #4
 800ada8:	1a9b      	subs	r3, r3, r2
 800adaa:	18cb      	adds	r3, r1, r3
 800adac:	3306      	adds	r3, #6
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d106      	bne.n	800adc2 <outputs_RGB_IT+0x32>
		{
			output_RGB_ctrl( (tOutPic)i , false );
 800adb4:	1dfb      	adds	r3, r7, #7
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	2100      	movs	r1, #0
 800adba:	0018      	movs	r0, r3
 800adbc:	f7ff fe5e 	bl	800aa7c <output_RGB_ctrl>
 800adc0:	e034      	b.n	800ae2c <outputs_RGB_IT+0x9c>
		}
		else if( sOutRgb[i].mode == _e_OutPicMode_Static )
 800adc2:	1dfb      	adds	r3, r7, #7
 800adc4:	781a      	ldrb	r2, [r3, #0]
 800adc6:	4930      	ldr	r1, [pc, #192]	@ (800ae88 <outputs_RGB_IT+0xf8>)
 800adc8:	0013      	movs	r3, r2
 800adca:	011b      	lsls	r3, r3, #4
 800adcc:	1a9b      	subs	r3, r3, r2
 800adce:	18cb      	adds	r3, r1, r3
 800add0:	3306      	adds	r3, #6
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d106      	bne.n	800ade6 <outputs_RGB_IT+0x56>
		{
			output_RGB_ctrl( (tOutPic)i , true );
 800add8:	1dfb      	adds	r3, r7, #7
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	2101      	movs	r1, #1
 800adde:	0018      	movs	r0, r3
 800ade0:	f7ff fe4c 	bl	800aa7c <output_RGB_ctrl>
 800ade4:	e022      	b.n	800ae2c <outputs_RGB_IT+0x9c>
		}
		else if( sOutRgb[i].mode == _e_OutPicMode_Blink )
 800ade6:	1dfb      	adds	r3, r7, #7
 800ade8:	781a      	ldrb	r2, [r3, #0]
 800adea:	4927      	ldr	r1, [pc, #156]	@ (800ae88 <outputs_RGB_IT+0xf8>)
 800adec:	0013      	movs	r3, r2
 800adee:	011b      	lsls	r3, r3, #4
 800adf0:	1a9b      	subs	r3, r3, r2
 800adf2:	18cb      	adds	r3, r1, r3
 800adf4:	3306      	adds	r3, #6
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d117      	bne.n	800ae2c <outputs_RGB_IT+0x9c>
		{
			if( sOutRgb[i].blinkModeFlag == true ) 	output_RGB_ctrl( (tOutPic)i , false );
 800adfc:	1dfb      	adds	r3, r7, #7
 800adfe:	781a      	ldrb	r2, [r3, #0]
 800ae00:	4921      	ldr	r1, [pc, #132]	@ (800ae88 <outputs_RGB_IT+0xf8>)
 800ae02:	0013      	movs	r3, r2
 800ae04:	011b      	lsls	r3, r3, #4
 800ae06:	1a9b      	subs	r3, r3, r2
 800ae08:	18cb      	adds	r3, r1, r3
 800ae0a:	330d      	adds	r3, #13
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d106      	bne.n	800ae20 <outputs_RGB_IT+0x90>
 800ae12:	1dfb      	adds	r3, r7, #7
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	2100      	movs	r1, #0
 800ae18:	0018      	movs	r0, r3
 800ae1a:	f7ff fe2f 	bl	800aa7c <output_RGB_ctrl>
 800ae1e:	e005      	b.n	800ae2c <outputs_RGB_IT+0x9c>
			else output_RGB_ctrl( (tOutPic)i , true );
 800ae20:	1dfb      	adds	r3, r7, #7
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	2101      	movs	r1, #1
 800ae26:	0018      	movs	r0, r3
 800ae28:	f7ff fe28 	bl	800aa7c <output_RGB_ctrl>
		}
		output_RGB_Set( (tOutPic)i, sOutRgb[i].dutySys[_e_Rgb_R], sOutRgb[i].dutySys[_e_Rgb_G], sOutRgb[i].dutySys[_e_Rgb_B] );
 800ae2c:	1dfb      	adds	r3, r7, #7
 800ae2e:	781a      	ldrb	r2, [r3, #0]
 800ae30:	4915      	ldr	r1, [pc, #84]	@ (800ae88 <outputs_RGB_IT+0xf8>)
 800ae32:	0013      	movs	r3, r2
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	1a9b      	subs	r3, r3, r2
 800ae38:	5c5c      	ldrb	r4, [r3, r1]
 800ae3a:	1dfb      	adds	r3, r7, #7
 800ae3c:	781a      	ldrb	r2, [r3, #0]
 800ae3e:	4912      	ldr	r1, [pc, #72]	@ (800ae88 <outputs_RGB_IT+0xf8>)
 800ae40:	0013      	movs	r3, r2
 800ae42:	011b      	lsls	r3, r3, #4
 800ae44:	1a9b      	subs	r3, r3, r2
 800ae46:	18cb      	adds	r3, r1, r3
 800ae48:	3301      	adds	r3, #1
 800ae4a:	781d      	ldrb	r5, [r3, #0]
 800ae4c:	1dfb      	adds	r3, r7, #7
 800ae4e:	781a      	ldrb	r2, [r3, #0]
 800ae50:	490d      	ldr	r1, [pc, #52]	@ (800ae88 <outputs_RGB_IT+0xf8>)
 800ae52:	0013      	movs	r3, r2
 800ae54:	011b      	lsls	r3, r3, #4
 800ae56:	1a9b      	subs	r3, r3, r2
 800ae58:	18cb      	adds	r3, r1, r3
 800ae5a:	3302      	adds	r3, #2
 800ae5c:	781a      	ldrb	r2, [r3, #0]
 800ae5e:	1dfb      	adds	r3, r7, #7
 800ae60:	7818      	ldrb	r0, [r3, #0]
 800ae62:	0013      	movs	r3, r2
 800ae64:	002a      	movs	r2, r5
 800ae66:	0021      	movs	r1, r4
 800ae68:	f7ff fdae 	bl	800a9c8 <output_RGB_Set>
	for( uint8_t i = 0 ; i < 2 ; i++ )
 800ae6c:	1dfb      	adds	r3, r7, #7
 800ae6e:	781a      	ldrb	r2, [r3, #0]
 800ae70:	1dfb      	adds	r3, r7, #7
 800ae72:	3201      	adds	r2, #1
 800ae74:	701a      	strb	r2, [r3, #0]
 800ae76:	1dfb      	adds	r3, r7, #7
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d98f      	bls.n	800ad9e <outputs_RGB_IT+0xe>
	}
}
 800ae7e:	46c0      	nop			@ (mov r8, r8)
 800ae80:	46c0      	nop			@ (mov r8, r8)
 800ae82:	46bd      	mov	sp, r7
 800ae84:	b002      	add	sp, #8
 800ae86:	bdb0      	pop	{r4, r5, r7, pc}
 800ae88:	20000200 	.word	0x20000200

0800ae8c <outputs_RGB_Color_Table>:
 
void outputs_RGB_Color_Table( tOutPicColor color, uint8_t* colR, uint8_t* colG, uint8_t* colB )
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	607a      	str	r2, [r7, #4]
 800ae96:	603b      	str	r3, [r7, #0]
 800ae98:	210f      	movs	r1, #15
 800ae9a:	187b      	adds	r3, r7, r1
 800ae9c:	1c02      	adds	r2, r0, #0
 800ae9e:	701a      	strb	r2, [r3, #0]
	switch( (uint8_t)color )
 800aea0:	187b      	adds	r3, r7, r1
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	2b07      	cmp	r3, #7
 800aea6:	d854      	bhi.n	800af52 <outputs_RGB_Color_Table+0xc6>
 800aea8:	009a      	lsls	r2, r3, #2
 800aeaa:	4b31      	ldr	r3, [pc, #196]	@ (800af70 <outputs_RGB_Color_Table+0xe4>)
 800aeac:	18d3      	adds	r3, r2, r3
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	469f      	mov	pc, r3
	{
#if(SW_PICTOGRAMA_MODE == SW_PICTOGRAMA_FITA_LED)
		case _e_OutPicColor_Red			:   *colR=0xFF;	*colG=0x10;	*colB=0x10;	break;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	22ff      	movs	r2, #255	@ 0xff
 800aeb6:	701a      	strb	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2210      	movs	r2, #16
 800aebc:	701a      	strb	r2, [r3, #0]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	2210      	movs	r2, #16
 800aec2:	701a      	strb	r2, [r3, #0]
 800aec4:	e04f      	b.n	800af66 <outputs_RGB_Color_Table+0xda>
		case _e_OutPicColor_Green		:	*colR=0x10;	*colG=0xFF;	*colB=0x10;	break;
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2210      	movs	r2, #16
 800aeca:	701a      	strb	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	22ff      	movs	r2, #255	@ 0xff
 800aed0:	701a      	strb	r2, [r3, #0]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	2210      	movs	r2, #16
 800aed6:	701a      	strb	r2, [r3, #0]
 800aed8:	e045      	b.n	800af66 <outputs_RGB_Color_Table+0xda>
		case _e_OutPicColor_Blue		:	*colR=0x10;	*colG=0x10;	*colB=0xFF;	break;
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	2210      	movs	r2, #16
 800aede:	701a      	strb	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2210      	movs	r2, #16
 800aee4:	701a      	strb	r2, [r3, #0]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	22ff      	movs	r2, #255	@ 0xff
 800aeea:	701a      	strb	r2, [r3, #0]
 800aeec:	e03b      	b.n	800af66 <outputs_RGB_Color_Table+0xda>
		case _e_OutPicColor_Yellow		:	*colR=0xFF;	*colG=0xFF;	*colB=0x00;	break;
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	22ff      	movs	r2, #255	@ 0xff
 800aef2:	701a      	strb	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	22ff      	movs	r2, #255	@ 0xff
 800aef8:	701a      	strb	r2, [r3, #0]
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2200      	movs	r2, #0
 800aefe:	701a      	strb	r2, [r3, #0]
 800af00:	e031      	b.n	800af66 <outputs_RGB_Color_Table+0xda>
		case _e_OutPicColor_Pink		:	*colR=0xFF;	*colG=0x00;	*colB=0xFF;	break;
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	22ff      	movs	r2, #255	@ 0xff
 800af06:	701a      	strb	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	701a      	strb	r2, [r3, #0]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	22ff      	movs	r2, #255	@ 0xff
 800af12:	701a      	strb	r2, [r3, #0]
 800af14:	e027      	b.n	800af66 <outputs_RGB_Color_Table+0xda>
		case _e_OutPicColor_Lblue		:	*colR=0x00;	*colG=0xFF;	*colB=0xFF;	break;
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	2200      	movs	r2, #0
 800af1a:	701a      	strb	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	22ff      	movs	r2, #255	@ 0xff
 800af20:	701a      	strb	r2, [r3, #0]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	22ff      	movs	r2, #255	@ 0xff
 800af26:	701a      	strb	r2, [r3, #0]
 800af28:	e01d      	b.n	800af66 <outputs_RGB_Color_Table+0xda>
		case _e_OutPicColor_TSIgr		:	*colR=0x00;	*colG=0xFF;	*colB=0x50;	break;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	2200      	movs	r2, #0
 800af2e:	701a      	strb	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	22ff      	movs	r2, #255	@ 0xff
 800af34:	701a      	strb	r2, [r3, #0]
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2250      	movs	r2, #80	@ 0x50
 800af3a:	701a      	strb	r2, [r3, #0]
 800af3c:	e013      	b.n	800af66 <outputs_RGB_Color_Table+0xda>
		case _e_OutPicColor_White		:	*colR=0xFF;	*colG=0xFF;	*colB=0xFF;	break;
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	22ff      	movs	r2, #255	@ 0xff
 800af42:	701a      	strb	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	22ff      	movs	r2, #255	@ 0xff
 800af48:	701a      	strb	r2, [r3, #0]
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	22ff      	movs	r2, #255	@ 0xff
 800af4e:	701a      	strb	r2, [r3, #0]
 800af50:	e009      	b.n	800af66 <outputs_RGB_Color_Table+0xda>
		default							:	*colR=0x00;	*colG=0x00;	*colB=0x00;	break;
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	2200      	movs	r2, #0
 800af56:	701a      	strb	r2, [r3, #0]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	701a      	strb	r2, [r3, #0]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2200      	movs	r2, #0
 800af62:	701a      	strb	r2, [r3, #0]
 800af64:	46c0      	nop			@ (mov r8, r8)
		case _e_OutPicColor_TSIgr		:	*colR=0x00;	*colG=0xFF;	*colB=0x50;	break;
		case _e_OutPicColor_White		:	*colR=0xFF;	*colG=0xFF;	*colB=0xFF;	break;
		default							:	*colR=0x00;	*colG=0x00;	*colB=0x00;	break;
#endif
	}
}
 800af66:	46c0      	nop			@ (mov r8, r8)
 800af68:	46bd      	mov	sp, r7
 800af6a:	b004      	add	sp, #16
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	46c0      	nop			@ (mov r8, r8)
 800af70:	0800ff04 	.word	0x0800ff04

0800af74 <outputs_Urn_IT>:

//URN

void outputs_Urn_IT(void)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	af00      	add	r7, sp, #0
	switch( (uint8_t)sOutUrn.solState )
 800af78:	4b5e      	ldr	r3, [pc, #376]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800af7a:	785b      	ldrb	r3, [r3, #1]
 800af7c:	2b04      	cmp	r3, #4
 800af7e:	d862      	bhi.n	800b046 <outputs_Urn_IT+0xd2>
 800af80:	009a      	lsls	r2, r3, #2
 800af82:	4b5d      	ldr	r3, [pc, #372]	@ (800b0f8 <outputs_Urn_IT+0x184>)
 800af84:	18d3      	adds	r3, r2, r3
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	469f      	mov	pc, r3
	{
	case _e_UrnSolState_Off		:
		sOutUrn.dutySys = 0;
 800af8a:	4b5a      	ldr	r3, [pc, #360]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	709a      	strb	r2, [r3, #2]
		if( sOutUrn.solUser == _e_OutUrn_Open ) sOutUrn.solState = _e_UrnSolState_RampUp;
 800af90:	4b58      	ldr	r3, [pc, #352]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d158      	bne.n	800b04a <outputs_Urn_IT+0xd6>
 800af98:	4b56      	ldr	r3, [pc, #344]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800af9a:	2201      	movs	r2, #1
 800af9c:	705a      	strb	r2, [r3, #1]
		break;
 800af9e:	e054      	b.n	800b04a <outputs_Urn_IT+0xd6>
	case _e_UrnSolState_RampUp:
		if( sOutUrn.dutySys < SOL_URN_PERCENT_MAX )sOutUrn.dutySys++;
 800afa0:	4b54      	ldr	r3, [pc, #336]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800afa2:	789b      	ldrb	r3, [r3, #2]
 800afa4:	2b63      	cmp	r3, #99	@ 0x63
 800afa6:	d806      	bhi.n	800afb6 <outputs_Urn_IT+0x42>
 800afa8:	4b52      	ldr	r3, [pc, #328]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800afaa:	789b      	ldrb	r3, [r3, #2]
 800afac:	3301      	adds	r3, #1
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	4b50      	ldr	r3, [pc, #320]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800afb2:	709a      	strb	r2, [r3, #2]
 800afb4:	e005      	b.n	800afc2 <outputs_Urn_IT+0x4e>
		else{
			sOutUrn.solState = _e_UrnSolState_OnMax;
 800afb6:	4b4f      	ldr	r3, [pc, #316]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800afb8:	2202      	movs	r2, #2
 800afba:	705a      	strb	r2, [r3, #1]
			sOutUrn.time = SOL_URN_ONMAXTIME;
 800afbc:	4b4d      	ldr	r3, [pc, #308]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800afbe:	4a4f      	ldr	r2, [pc, #316]	@ (800b0fc <outputs_Urn_IT+0x188>)
 800afc0:	809a      	strh	r2, [r3, #4]
		}
		if( sOutUrn.solUser == _e_OutUrn_Close ) sOutUrn.solState = _e_UrnSolState_RampDw;
 800afc2:	4b4c      	ldr	r3, [pc, #304]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d141      	bne.n	800b04e <outputs_Urn_IT+0xda>
 800afca:	4b4a      	ldr	r3, [pc, #296]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800afcc:	2204      	movs	r2, #4
 800afce:	705a      	strb	r2, [r3, #1]
		break;
 800afd0:	e03d      	b.n	800b04e <outputs_Urn_IT+0xda>
	case _e_UrnSolState_OnMax	:
		sOutUrn.dutySys = SOL_URN_PERCENT_MAX;
 800afd2:	4b48      	ldr	r3, [pc, #288]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800afd4:	2264      	movs	r2, #100	@ 0x64
 800afd6:	709a      	strb	r2, [r3, #2]
		if( sOutUrn.time > 0 )sOutUrn.time--;
 800afd8:	4b46      	ldr	r3, [pc, #280]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800afda:	889b      	ldrh	r3, [r3, #4]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d006      	beq.n	800afee <outputs_Urn_IT+0x7a>
 800afe0:	4b44      	ldr	r3, [pc, #272]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800afe2:	889b      	ldrh	r3, [r3, #4]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	4b42      	ldr	r3, [pc, #264]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800afea:	809a      	strh	r2, [r3, #4]
 800afec:	e002      	b.n	800aff4 <outputs_Urn_IT+0x80>
		else sOutUrn.solState = _e_UrnSolState_OnMin;
 800afee:	4b41      	ldr	r3, [pc, #260]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800aff0:	2203      	movs	r2, #3
 800aff2:	705a      	strb	r2, [r3, #1]
		if( sOutUrn.solUser == _e_OutUrn_Close ) sOutUrn.solState = _e_UrnSolState_RampDw;
 800aff4:	4b3f      	ldr	r3, [pc, #252]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d12a      	bne.n	800b052 <outputs_Urn_IT+0xde>
 800affc:	4b3d      	ldr	r3, [pc, #244]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800affe:	2204      	movs	r2, #4
 800b000:	705a      	strb	r2, [r3, #1]
		break;
 800b002:	e026      	b.n	800b052 <outputs_Urn_IT+0xde>
	case _e_UrnSolState_OnMin	:
		if( sOutUrn.dutySys > SOL_URN_PERCENT )sOutUrn.dutySys--;
 800b004:	4b3b      	ldr	r3, [pc, #236]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b006:	789b      	ldrb	r3, [r3, #2]
 800b008:	2b23      	cmp	r3, #35	@ 0x23
 800b00a:	d905      	bls.n	800b018 <outputs_Urn_IT+0xa4>
 800b00c:	4b39      	ldr	r3, [pc, #228]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b00e:	789b      	ldrb	r3, [r3, #2]
 800b010:	3b01      	subs	r3, #1
 800b012:	b2da      	uxtb	r2, r3
 800b014:	4b37      	ldr	r3, [pc, #220]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b016:	709a      	strb	r2, [r3, #2]
		if( sOutUrn.solUser == _e_OutUrn_Close ) sOutUrn.solState = _e_UrnSolState_RampDw;
 800b018:	4b36      	ldr	r3, [pc, #216]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d11a      	bne.n	800b056 <outputs_Urn_IT+0xe2>
 800b020:	4b34      	ldr	r3, [pc, #208]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b022:	2204      	movs	r2, #4
 800b024:	705a      	strb	r2, [r3, #1]
		break;
 800b026:	e016      	b.n	800b056 <outputs_Urn_IT+0xe2>
	case _e_UrnSolState_RampDw:
		if( sOutUrn.dutySys > 0 )sOutUrn.dutySys--;
 800b028:	4b32      	ldr	r3, [pc, #200]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b02a:	789b      	ldrb	r3, [r3, #2]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d006      	beq.n	800b03e <outputs_Urn_IT+0xca>
 800b030:	4b30      	ldr	r3, [pc, #192]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b032:	789b      	ldrb	r3, [r3, #2]
 800b034:	3b01      	subs	r3, #1
 800b036:	b2da      	uxtb	r2, r3
 800b038:	4b2e      	ldr	r3, [pc, #184]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b03a:	709a      	strb	r2, [r3, #2]
		else sOutUrn.solState = _e_UrnSolState_Off;
		break;
 800b03c:	e00c      	b.n	800b058 <outputs_Urn_IT+0xe4>
		else sOutUrn.solState = _e_UrnSolState_Off;
 800b03e:	4b2d      	ldr	r3, [pc, #180]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b040:	2200      	movs	r2, #0
 800b042:	705a      	strb	r2, [r3, #1]
		break;
 800b044:	e008      	b.n	800b058 <outputs_Urn_IT+0xe4>
	default:
		break;
 800b046:	46c0      	nop			@ (mov r8, r8)
 800b048:	e006      	b.n	800b058 <outputs_Urn_IT+0xe4>
		break;
 800b04a:	46c0      	nop			@ (mov r8, r8)
 800b04c:	e004      	b.n	800b058 <outputs_Urn_IT+0xe4>
		break;
 800b04e:	46c0      	nop			@ (mov r8, r8)
 800b050:	e002      	b.n	800b058 <outputs_Urn_IT+0xe4>
		break;
 800b052:	46c0      	nop			@ (mov r8, r8)
 800b054:	e000      	b.n	800b058 <outputs_Urn_IT+0xe4>
		break;
 800b056:	46c0      	nop			@ (mov r8, r8)
	}
	URN_DUTY(sOutUrn.dutySys);
 800b058:	4b26      	ldr	r3, [pc, #152]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b05a:	789a      	ldrb	r2, [r3, #2]
 800b05c:	4b28      	ldr	r3, [pc, #160]	@ (800b100 <outputs_Urn_IT+0x18c>)
 800b05e:	635a      	str	r2, [r3, #52]	@ 0x34
	
	switch( (uint8_t)sOutUrn.picSys )
 800b060:	4b24      	ldr	r3, [pc, #144]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b062:	799b      	ldrb	r3, [r3, #6]
 800b064:	2b02      	cmp	r3, #2
 800b066:	d01b      	beq.n	800b0a0 <outputs_Urn_IT+0x12c>
 800b068:	dc3e      	bgt.n	800b0e8 <outputs_Urn_IT+0x174>
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d002      	beq.n	800b074 <outputs_Urn_IT+0x100>
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d00b      	beq.n	800b08a <outputs_Urn_IT+0x116>
 800b072:	e039      	b.n	800b0e8 <outputs_Urn_IT+0x174>
	{
		case _e_OutUrnPic_Off:
			SOL_PIC_OFF;
 800b074:	4b23      	ldr	r3, [pc, #140]	@ (800b104 <outputs_Urn_IT+0x190>)
 800b076:	2280      	movs	r2, #128	@ 0x80
 800b078:	0592      	lsls	r2, r2, #22
 800b07a:	619a      	str	r2, [r3, #24]
			sOutUrn.blinkState = true;
 800b07c:	4b1d      	ldr	r3, [pc, #116]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b07e:	2201      	movs	r2, #1
 800b080:	71da      	strb	r2, [r3, #7]
			sOutUrn.blinkTime = 0;
 800b082:	4b1c      	ldr	r3, [pc, #112]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b084:	2200      	movs	r2, #0
 800b086:	811a      	strh	r2, [r3, #8]
			break;
 800b088:	e032      	b.n	800b0f0 <outputs_Urn_IT+0x17c>
		case _e_OutUrnPic_On:
			SOL_PIC_ON;
 800b08a:	4b1e      	ldr	r3, [pc, #120]	@ (800b104 <outputs_Urn_IT+0x190>)
 800b08c:	2280      	movs	r2, #128	@ 0x80
 800b08e:	0192      	lsls	r2, r2, #6
 800b090:	619a      	str	r2, [r3, #24]
			sOutUrn.blinkState = true;
 800b092:	4b18      	ldr	r3, [pc, #96]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b094:	2201      	movs	r2, #1
 800b096:	71da      	strb	r2, [r3, #7]
			sOutUrn.blinkTime = 0;
 800b098:	4b16      	ldr	r3, [pc, #88]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b09a:	2200      	movs	r2, #0
 800b09c:	811a      	strh	r2, [r3, #8]
			break;
 800b09e:	e027      	b.n	800b0f0 <outputs_Urn_IT+0x17c>
		case _e_OutUrnPic_Blink:
			if( sOutUrn.blinkTime > 0 ){ sOutUrn.blinkTime--; return; }
 800b0a0:	4b14      	ldr	r3, [pc, #80]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b0a2:	891b      	ldrh	r3, [r3, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d006      	beq.n	800b0b6 <outputs_Urn_IT+0x142>
 800b0a8:	4b12      	ldr	r3, [pc, #72]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b0aa:	891b      	ldrh	r3, [r3, #8]
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	4b10      	ldr	r3, [pc, #64]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b0b2:	811a      	strh	r2, [r3, #8]
 800b0b4:	e01c      	b.n	800b0f0 <outputs_Urn_IT+0x17c>
			else { sOutUrn.blinkTime = SOL_PIC_BLINK_TIME; }
 800b0b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b0b8:	22fa      	movs	r2, #250	@ 0xfa
 800b0ba:	811a      	strh	r2, [r3, #8]
			if( sOutUrn.blinkState == false ) SOL_PIC_OFF; 
 800b0bc:	4b0d      	ldr	r3, [pc, #52]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b0be:	79db      	ldrb	r3, [r3, #7]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d104      	bne.n	800b0ce <outputs_Urn_IT+0x15a>
 800b0c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b104 <outputs_Urn_IT+0x190>)
 800b0c6:	2280      	movs	r2, #128	@ 0x80
 800b0c8:	0592      	lsls	r2, r2, #22
 800b0ca:	619a      	str	r2, [r3, #24]
 800b0cc:	e003      	b.n	800b0d6 <outputs_Urn_IT+0x162>
			else SOL_PIC_ON;
 800b0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b104 <outputs_Urn_IT+0x190>)
 800b0d0:	2280      	movs	r2, #128	@ 0x80
 800b0d2:	0192      	lsls	r2, r2, #6
 800b0d4:	619a      	str	r2, [r3, #24]
			sOutUrn.blinkState = (bool)!sOutUrn.blinkState;
 800b0d6:	4b07      	ldr	r3, [pc, #28]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b0d8:	79db      	ldrb	r3, [r3, #7]
 800b0da:	425a      	negs	r2, r3
 800b0dc:	4153      	adcs	r3, r2
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	001a      	movs	r2, r3
 800b0e2:	4b04      	ldr	r3, [pc, #16]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b0e4:	71da      	strb	r2, [r3, #7]
			break;
 800b0e6:	e003      	b.n	800b0f0 <outputs_Urn_IT+0x17c>
		default:
			sOutUrn.picSys = _e_OutUrnPic_Off;
 800b0e8:	4b02      	ldr	r3, [pc, #8]	@ (800b0f4 <outputs_Urn_IT+0x180>)
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	719a      	strb	r2, [r3, #6]
			break;
 800b0ee:	46c0      	nop			@ (mov r8, r8)
	}
}
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	20000220 	.word	0x20000220
 800b0f8:	0800ff24 	.word	0x0800ff24
 800b0fc:	000009c4 	.word	0x000009c4
 800b100:	40002000 	.word	0x40002000
 800b104:	48000800 	.word	0x48000800

0800b108 <outputs_motor_lock_duty>:
	}
}
*/

void outputs_motor_lock_duty( tOutMt mtNum, uint8_t dutyVal )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	0002      	movs	r2, r0
 800b110:	1dfb      	adds	r3, r7, #7
 800b112:	701a      	strb	r2, [r3, #0]
 800b114:	1dbb      	adds	r3, r7, #6
 800b116:	1c0a      	adds	r2, r1, #0
 800b118:	701a      	strb	r2, [r3, #0]
	if( mtNum == _e_OutMt_Pri )	MT1_LOCK_DUTY(dutyVal);
 800b11a:	1dfb      	adds	r3, r7, #7
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d104      	bne.n	800b12c <outputs_motor_lock_duty+0x24>
 800b122:	4b06      	ldr	r3, [pc, #24]	@ (800b13c <outputs_motor_lock_duty+0x34>)
 800b124:	1dba      	adds	r2, r7, #6
 800b126:	7812      	ldrb	r2, [r2, #0]
 800b128:	635a      	str	r2, [r3, #52]	@ 0x34
	else						MT2_LOCK_DUTY(dutyVal);
}
 800b12a:	e003      	b.n	800b134 <outputs_motor_lock_duty+0x2c>
	else						MT2_LOCK_DUTY(dutyVal);
 800b12c:	4b03      	ldr	r3, [pc, #12]	@ (800b13c <outputs_motor_lock_duty+0x34>)
 800b12e:	1dba      	adds	r2, r7, #6
 800b130:	7812      	ldrb	r2, [r2, #0]
 800b132:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800b134:	46c0      	nop			@ (mov r8, r8)
 800b136:	46bd      	mov	sp, r7
 800b138:	b002      	add	sp, #8
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	40000400 	.word	0x40000400

0800b140 <outputs_Locks_IT>:

void outputs_Locks_IT(void)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
	for( uint8_t i = 0 ; i < 2 ; i++ )
 800b146:	1dfb      	adds	r3, r7, #7
 800b148:	2200      	movs	r2, #0
 800b14a:	701a      	strb	r2, [r3, #0]
 800b14c:	e1ba      	b.n	800b4c4 <outputs_Locks_IT+0x384>
	{
	
		switch( (uint8_t)sOutLock[i].stateSys )
 800b14e:	1dfb      	adds	r3, r7, #7
 800b150:	781a      	ldrb	r2, [r3, #0]
 800b152:	49e0      	ldr	r1, [pc, #896]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b154:	0013      	movs	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	189b      	adds	r3, r3, r2
 800b15a:	005b      	lsls	r3, r3, #1
 800b15c:	5c5b      	ldrb	r3, [r3, r1]
 800b15e:	2b04      	cmp	r3, #4
 800b160:	d900      	bls.n	800b164 <outputs_Locks_IT+0x24>
 800b162:	e187      	b.n	800b474 <outputs_Locks_IT+0x334>
 800b164:	009a      	lsls	r2, r3, #2
 800b166:	4bdc      	ldr	r3, [pc, #880]	@ (800b4d8 <outputs_Locks_IT+0x398>)
 800b168:	18d3      	adds	r3, r2, r3
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	469f      	mov	pc, r3
		{
			case _e_LockState_Off:
				sOutLock[i].dutySys = 0;
 800b16e:	1dfb      	adds	r3, r7, #7
 800b170:	781a      	ldrb	r2, [r3, #0]
 800b172:	49d8      	ldr	r1, [pc, #864]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b174:	0013      	movs	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	189b      	adds	r3, r3, r2
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	18cb      	adds	r3, r1, r3
 800b17e:	3302      	adds	r3, #2
 800b180:	2200      	movs	r2, #0
 800b182:	701a      	strb	r2, [r3, #0]
				if( sOutLock[i].stateUser == _e_OutLockState_On ){
 800b184:	1dfb      	adds	r3, r7, #7
 800b186:	781a      	ldrb	r2, [r3, #0]
 800b188:	49d2      	ldr	r1, [pc, #840]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b18a:	0013      	movs	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	189b      	adds	r3, r3, r2
 800b190:	005b      	lsls	r3, r3, #1
 800b192:	18cb      	adds	r3, r1, r3
 800b194:	3301      	adds	r3, #1
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d000      	beq.n	800b19e <outputs_Locks_IT+0x5e>
 800b19c:	e174      	b.n	800b488 <outputs_Locks_IT+0x348>
					sOutLock[i].stateSys = _e_LockState_RampUp;
 800b19e:	1dfb      	adds	r3, r7, #7
 800b1a0:	781a      	ldrb	r2, [r3, #0]
 800b1a2:	49cc      	ldr	r1, [pc, #816]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b1a4:	0013      	movs	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	189b      	adds	r3, r3, r2
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	545a      	strb	r2, [r3, r1]
					sOutLock[i].rampSpeed = LOCK_SPEED_RAMP_UP;
 800b1b0:	1dfb      	adds	r3, r7, #7
 800b1b2:	781a      	ldrb	r2, [r3, #0]
 800b1b4:	49c7      	ldr	r1, [pc, #796]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b1b6:	0013      	movs	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	189b      	adds	r3, r3, r2
 800b1bc:	005b      	lsls	r3, r3, #1
 800b1be:	18cb      	adds	r3, r1, r3
 800b1c0:	3308      	adds	r3, #8
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	701a      	strb	r2, [r3, #0]
				}
				break;
 800b1c6:	e15f      	b.n	800b488 <outputs_Locks_IT+0x348>
			
			case _e_LockState_RampUp:
				if( sOutLock[i].rampSpeed > 0 ){
 800b1c8:	1dfb      	adds	r3, r7, #7
 800b1ca:	781a      	ldrb	r2, [r3, #0]
 800b1cc:	49c1      	ldr	r1, [pc, #772]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b1ce:	0013      	movs	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	189b      	adds	r3, r3, r2
 800b1d4:	005b      	lsls	r3, r3, #1
 800b1d6:	18cb      	adds	r3, r1, r3
 800b1d8:	3308      	adds	r3, #8
 800b1da:	781b      	ldrb	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d015      	beq.n	800b20c <outputs_Locks_IT+0xcc>
					sOutLock[i].rampSpeed--;
 800b1e0:	1dfb      	adds	r3, r7, #7
 800b1e2:	781a      	ldrb	r2, [r3, #0]
 800b1e4:	49bb      	ldr	r1, [pc, #748]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b1e6:	0013      	movs	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	189b      	adds	r3, r3, r2
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	18cb      	adds	r3, r1, r3
 800b1f0:	3308      	adds	r3, #8
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	b2d8      	uxtb	r0, r3
 800b1f8:	49b6      	ldr	r1, [pc, #728]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b1fa:	0013      	movs	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	189b      	adds	r3, r3, r2
 800b200:	005b      	lsls	r3, r3, #1
 800b202:	18cb      	adds	r3, r1, r3
 800b204:	3308      	adds	r3, #8
 800b206:	1c02      	adds	r2, r0, #0
 800b208:	701a      	strb	r2, [r3, #0]
					return;
 800b20a:	e160      	b.n	800b4ce <outputs_Locks_IT+0x38e>
				}
				sOutLock[i].rampSpeed = LOCK_SPEED_RAMP_UP;
 800b20c:	1dfb      	adds	r3, r7, #7
 800b20e:	781a      	ldrb	r2, [r3, #0]
 800b210:	49b0      	ldr	r1, [pc, #704]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b212:	0013      	movs	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	189b      	adds	r3, r3, r2
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	18cb      	adds	r3, r1, r3
 800b21c:	3308      	adds	r3, #8
 800b21e:	2200      	movs	r2, #0
 800b220:	701a      	strb	r2, [r3, #0]

				if( sOutLock[i].dutySys < LOCK_PERCENT_MAX )sOutLock[i].dutySys++;
 800b222:	1dfb      	adds	r3, r7, #7
 800b224:	781a      	ldrb	r2, [r3, #0]
 800b226:	49ab      	ldr	r1, [pc, #684]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b228:	0013      	movs	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	189b      	adds	r3, r3, r2
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	18cb      	adds	r3, r1, r3
 800b232:	3302      	adds	r3, #2
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b31      	cmp	r3, #49	@ 0x31
 800b238:	d815      	bhi.n	800b266 <outputs_Locks_IT+0x126>
 800b23a:	1dfb      	adds	r3, r7, #7
 800b23c:	781a      	ldrb	r2, [r3, #0]
 800b23e:	49a5      	ldr	r1, [pc, #660]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b240:	0013      	movs	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	189b      	adds	r3, r3, r2
 800b246:	005b      	lsls	r3, r3, #1
 800b248:	18cb      	adds	r3, r1, r3
 800b24a:	3302      	adds	r3, #2
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	3301      	adds	r3, #1
 800b250:	b2d8      	uxtb	r0, r3
 800b252:	49a0      	ldr	r1, [pc, #640]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b254:	0013      	movs	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	189b      	adds	r3, r3, r2
 800b25a:	005b      	lsls	r3, r3, #1
 800b25c:	18cb      	adds	r3, r1, r3
 800b25e:	3302      	adds	r3, #2
 800b260:	1c02      	adds	r2, r0, #0
 800b262:	701a      	strb	r2, [r3, #0]
 800b264:	e013      	b.n	800b28e <outputs_Locks_IT+0x14e>
				else{
					sOutLock[i].stateSys = _e_LockState_OnMax;
 800b266:	1dfb      	adds	r3, r7, #7
 800b268:	781a      	ldrb	r2, [r3, #0]
 800b26a:	499a      	ldr	r1, [pc, #616]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b26c:	0013      	movs	r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	189b      	adds	r3, r3, r2
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	2202      	movs	r2, #2
 800b276:	545a      	strb	r2, [r3, r1]
					sOutLock[i].timeOnMax = LOCK_ONMAXTIME;
 800b278:	1dfb      	adds	r3, r7, #7
 800b27a:	781a      	ldrb	r2, [r3, #0]
 800b27c:	4995      	ldr	r1, [pc, #596]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b27e:	0013      	movs	r3, r2
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	189b      	adds	r3, r3, r2
 800b284:	005b      	lsls	r3, r3, #1
 800b286:	18cb      	adds	r3, r1, r3
 800b288:	3306      	adds	r3, #6
 800b28a:	2264      	movs	r2, #100	@ 0x64
 800b28c:	801a      	strh	r2, [r3, #0]
				}
				if( sOutLock[i].stateUser == _e_OutLockState_Off )sOutLock[i].stateSys = _e_LockState_Off;
 800b28e:	1dfb      	adds	r3, r7, #7
 800b290:	781a      	ldrb	r2, [r3, #0]
 800b292:	4990      	ldr	r1, [pc, #576]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b294:	0013      	movs	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	189b      	adds	r3, r3, r2
 800b29a:	005b      	lsls	r3, r3, #1
 800b29c:	18cb      	adds	r3, r1, r3
 800b29e:	3301      	adds	r3, #1
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d000      	beq.n	800b2a8 <outputs_Locks_IT+0x168>
 800b2a6:	e0f1      	b.n	800b48c <outputs_Locks_IT+0x34c>
 800b2a8:	1dfb      	adds	r3, r7, #7
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	4989      	ldr	r1, [pc, #548]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b2ae:	0013      	movs	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	189b      	adds	r3, r3, r2
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	545a      	strb	r2, [r3, r1]
				break;
 800b2ba:	e0e7      	b.n	800b48c <outputs_Locks_IT+0x34c>
			
			case _e_LockState_OnMax:
				sOutLock[i].dutySys = LOCK_PERCENT_MAX;
 800b2bc:	1dfb      	adds	r3, r7, #7
 800b2be:	781a      	ldrb	r2, [r3, #0]
 800b2c0:	4984      	ldr	r1, [pc, #528]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b2c2:	0013      	movs	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	189b      	adds	r3, r3, r2
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	18cb      	adds	r3, r1, r3
 800b2cc:	3302      	adds	r3, #2
 800b2ce:	2232      	movs	r2, #50	@ 0x32
 800b2d0:	701a      	strb	r2, [r3, #0]
				if ( sOutLock[i].timeOnMax > 0 )sOutLock[i].timeOnMax--;
 800b2d2:	1dfb      	adds	r3, r7, #7
 800b2d4:	781a      	ldrb	r2, [r3, #0]
 800b2d6:	497f      	ldr	r1, [pc, #508]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b2d8:	0013      	movs	r3, r2
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	189b      	adds	r3, r3, r2
 800b2de:	005b      	lsls	r3, r3, #1
 800b2e0:	18cb      	adds	r3, r1, r3
 800b2e2:	3306      	adds	r3, #6
 800b2e4:	881b      	ldrh	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d015      	beq.n	800b316 <outputs_Locks_IT+0x1d6>
 800b2ea:	1dfb      	adds	r3, r7, #7
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	4979      	ldr	r1, [pc, #484]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b2f0:	0013      	movs	r3, r2
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	189b      	adds	r3, r3, r2
 800b2f6:	005b      	lsls	r3, r3, #1
 800b2f8:	18cb      	adds	r3, r1, r3
 800b2fa:	3306      	adds	r3, #6
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	3b01      	subs	r3, #1
 800b300:	b298      	uxth	r0, r3
 800b302:	4974      	ldr	r1, [pc, #464]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b304:	0013      	movs	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	189b      	adds	r3, r3, r2
 800b30a:	005b      	lsls	r3, r3, #1
 800b30c:	18cb      	adds	r3, r1, r3
 800b30e:	3306      	adds	r3, #6
 800b310:	1c02      	adds	r2, r0, #0
 800b312:	801a      	strh	r2, [r3, #0]
 800b314:	e013      	b.n	800b33e <outputs_Locks_IT+0x1fe>
				else {
					sOutLock[i].stateSys = _e_LockState_RampDw;
 800b316:	1dfb      	adds	r3, r7, #7
 800b318:	781a      	ldrb	r2, [r3, #0]
 800b31a:	496e      	ldr	r1, [pc, #440]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b31c:	0013      	movs	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	189b      	adds	r3, r3, r2
 800b322:	005b      	lsls	r3, r3, #1
 800b324:	2204      	movs	r2, #4
 800b326:	545a      	strb	r2, [r3, r1]
					sOutLock[i].rampSpeed = LOCK_SPEED_RAMP_DW;
 800b328:	1dfb      	adds	r3, r7, #7
 800b32a:	781a      	ldrb	r2, [r3, #0]
 800b32c:	4969      	ldr	r1, [pc, #420]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b32e:	0013      	movs	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	189b      	adds	r3, r3, r2
 800b334:	005b      	lsls	r3, r3, #1
 800b336:	18cb      	adds	r3, r1, r3
 800b338:	3308      	adds	r3, #8
 800b33a:	2214      	movs	r2, #20
 800b33c:	701a      	strb	r2, [r3, #0]
				}
				if( sOutLock[i].stateUser == _e_OutLockState_Off )sOutLock[i].stateSys = _e_LockState_Off;
 800b33e:	1dfb      	adds	r3, r7, #7
 800b340:	781a      	ldrb	r2, [r3, #0]
 800b342:	4964      	ldr	r1, [pc, #400]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b344:	0013      	movs	r3, r2
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	189b      	adds	r3, r3, r2
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	18cb      	adds	r3, r1, r3
 800b34e:	3301      	adds	r3, #1
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d000      	beq.n	800b358 <outputs_Locks_IT+0x218>
 800b356:	e09b      	b.n	800b490 <outputs_Locks_IT+0x350>
 800b358:	1dfb      	adds	r3, r7, #7
 800b35a:	781a      	ldrb	r2, [r3, #0]
 800b35c:	495d      	ldr	r1, [pc, #372]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b35e:	0013      	movs	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	189b      	adds	r3, r3, r2
 800b364:	005b      	lsls	r3, r3, #1
 800b366:	2200      	movs	r2, #0
 800b368:	545a      	strb	r2, [r3, r1]
				break;
 800b36a:	e091      	b.n	800b490 <outputs_Locks_IT+0x350>
			
			case _e_LockState_RampDw:
				if( sOutLock[i].rampSpeed > 0 ){
 800b36c:	1dfb      	adds	r3, r7, #7
 800b36e:	781a      	ldrb	r2, [r3, #0]
 800b370:	4958      	ldr	r1, [pc, #352]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b372:	0013      	movs	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	189b      	adds	r3, r3, r2
 800b378:	005b      	lsls	r3, r3, #1
 800b37a:	18cb      	adds	r3, r1, r3
 800b37c:	3308      	adds	r3, #8
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d015      	beq.n	800b3b0 <outputs_Locks_IT+0x270>
					sOutLock[i].rampSpeed--;
 800b384:	1dfb      	adds	r3, r7, #7
 800b386:	781a      	ldrb	r2, [r3, #0]
 800b388:	4952      	ldr	r1, [pc, #328]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b38a:	0013      	movs	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	189b      	adds	r3, r3, r2
 800b390:	005b      	lsls	r3, r3, #1
 800b392:	18cb      	adds	r3, r1, r3
 800b394:	3308      	adds	r3, #8
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	3b01      	subs	r3, #1
 800b39a:	b2d8      	uxtb	r0, r3
 800b39c:	494d      	ldr	r1, [pc, #308]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b39e:	0013      	movs	r3, r2
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	189b      	adds	r3, r3, r2
 800b3a4:	005b      	lsls	r3, r3, #1
 800b3a6:	18cb      	adds	r3, r1, r3
 800b3a8:	3308      	adds	r3, #8
 800b3aa:	1c02      	adds	r2, r0, #0
 800b3ac:	701a      	strb	r2, [r3, #0]
					return;
 800b3ae:	e08e      	b.n	800b4ce <outputs_Locks_IT+0x38e>
				}
				sOutLock[i].rampSpeed = LOCK_SPEED_RAMP_DW;
 800b3b0:	1dfb      	adds	r3, r7, #7
 800b3b2:	781a      	ldrb	r2, [r3, #0]
 800b3b4:	4947      	ldr	r1, [pc, #284]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b3b6:	0013      	movs	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	189b      	adds	r3, r3, r2
 800b3bc:	005b      	lsls	r3, r3, #1
 800b3be:	18cb      	adds	r3, r1, r3
 800b3c0:	3308      	adds	r3, #8
 800b3c2:	2214      	movs	r2, #20
 800b3c4:	701a      	strb	r2, [r3, #0]

				if( sOutLock[i].dutySys > LOCK_PERCENT_MIN )sOutLock[i].dutySys--;
 800b3c6:	1dfb      	adds	r3, r7, #7
 800b3c8:	781a      	ldrb	r2, [r3, #0]
 800b3ca:	4942      	ldr	r1, [pc, #264]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b3cc:	0013      	movs	r3, r2
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	189b      	adds	r3, r3, r2
 800b3d2:	005b      	lsls	r3, r3, #1
 800b3d4:	18cb      	adds	r3, r1, r3
 800b3d6:	3302      	adds	r3, #2
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	2b03      	cmp	r3, #3
 800b3dc:	d915      	bls.n	800b40a <outputs_Locks_IT+0x2ca>
 800b3de:	1dfb      	adds	r3, r7, #7
 800b3e0:	781a      	ldrb	r2, [r3, #0]
 800b3e2:	493c      	ldr	r1, [pc, #240]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b3e4:	0013      	movs	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	189b      	adds	r3, r3, r2
 800b3ea:	005b      	lsls	r3, r3, #1
 800b3ec:	18cb      	adds	r3, r1, r3
 800b3ee:	3302      	adds	r3, #2
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	b2d8      	uxtb	r0, r3
 800b3f6:	4937      	ldr	r1, [pc, #220]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b3f8:	0013      	movs	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	189b      	adds	r3, r3, r2
 800b3fe:	005b      	lsls	r3, r3, #1
 800b400:	18cb      	adds	r3, r1, r3
 800b402:	3302      	adds	r3, #2
 800b404:	1c02      	adds	r2, r0, #0
 800b406:	701a      	strb	r2, [r3, #0]
 800b408:	e008      	b.n	800b41c <outputs_Locks_IT+0x2dc>
				else sOutLock[i].stateSys = _e_LockState_OnMin;
 800b40a:	1dfb      	adds	r3, r7, #7
 800b40c:	781a      	ldrb	r2, [r3, #0]
 800b40e:	4931      	ldr	r1, [pc, #196]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b410:	0013      	movs	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	189b      	adds	r3, r3, r2
 800b416:	005b      	lsls	r3, r3, #1
 800b418:	2203      	movs	r2, #3
 800b41a:	545a      	strb	r2, [r3, r1]
				if( sOutLock[i].stateUser == _e_OutLockState_Off )sOutLock[i].stateSys = _e_LockState_Off;
 800b41c:	1dfb      	adds	r3, r7, #7
 800b41e:	781a      	ldrb	r2, [r3, #0]
 800b420:	492c      	ldr	r1, [pc, #176]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b422:	0013      	movs	r3, r2
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	189b      	adds	r3, r3, r2
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	18cb      	adds	r3, r1, r3
 800b42c:	3301      	adds	r3, #1
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d12f      	bne.n	800b494 <outputs_Locks_IT+0x354>
 800b434:	1dfb      	adds	r3, r7, #7
 800b436:	781a      	ldrb	r2, [r3, #0]
 800b438:	4926      	ldr	r1, [pc, #152]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b43a:	0013      	movs	r3, r2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	189b      	adds	r3, r3, r2
 800b440:	005b      	lsls	r3, r3, #1
 800b442:	2200      	movs	r2, #0
 800b444:	545a      	strb	r2, [r3, r1]
				break;
 800b446:	e025      	b.n	800b494 <outputs_Locks_IT+0x354>
			
			case _e_LockState_OnMin	:
				if( sOutLock[i].stateUser == _e_OutLockState_Off )sOutLock[i].stateSys = _e_LockState_Off;
 800b448:	1dfb      	adds	r3, r7, #7
 800b44a:	781a      	ldrb	r2, [r3, #0]
 800b44c:	4921      	ldr	r1, [pc, #132]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b44e:	0013      	movs	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	189b      	adds	r3, r3, r2
 800b454:	005b      	lsls	r3, r3, #1
 800b456:	18cb      	adds	r3, r1, r3
 800b458:	3301      	adds	r3, #1
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d11b      	bne.n	800b498 <outputs_Locks_IT+0x358>
 800b460:	1dfb      	adds	r3, r7, #7
 800b462:	781a      	ldrb	r2, [r3, #0]
 800b464:	491b      	ldr	r1, [pc, #108]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b466:	0013      	movs	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	189b      	adds	r3, r3, r2
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	2200      	movs	r2, #0
 800b470:	545a      	strb	r2, [r3, r1]
				break;
 800b472:	e011      	b.n	800b498 <outputs_Locks_IT+0x358>

			default:
				sOutLock[i].stateSys = _e_LockState_Off;
 800b474:	1dfb      	adds	r3, r7, #7
 800b476:	781a      	ldrb	r2, [r3, #0]
 800b478:	4916      	ldr	r1, [pc, #88]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b47a:	0013      	movs	r3, r2
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	189b      	adds	r3, r3, r2
 800b480:	005b      	lsls	r3, r3, #1
 800b482:	2200      	movs	r2, #0
 800b484:	545a      	strb	r2, [r3, r1]
				break;
 800b486:	e008      	b.n	800b49a <outputs_Locks_IT+0x35a>
				break;
 800b488:	46c0      	nop			@ (mov r8, r8)
 800b48a:	e006      	b.n	800b49a <outputs_Locks_IT+0x35a>
				break;
 800b48c:	46c0      	nop			@ (mov r8, r8)
 800b48e:	e004      	b.n	800b49a <outputs_Locks_IT+0x35a>
				break;
 800b490:	46c0      	nop			@ (mov r8, r8)
 800b492:	e002      	b.n	800b49a <outputs_Locks_IT+0x35a>
				break;
 800b494:	46c0      	nop			@ (mov r8, r8)
 800b496:	e000      	b.n	800b49a <outputs_Locks_IT+0x35a>
				break;
 800b498:	46c0      	nop			@ (mov r8, r8)
		}
		
		outputs_motor_lock_duty( (tOutMt)i, sOutLock[i].dutySys );
 800b49a:	1dfb      	adds	r3, r7, #7
 800b49c:	781a      	ldrb	r2, [r3, #0]
 800b49e:	490d      	ldr	r1, [pc, #52]	@ (800b4d4 <outputs_Locks_IT+0x394>)
 800b4a0:	0013      	movs	r3, r2
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	189b      	adds	r3, r3, r2
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	18cb      	adds	r3, r1, r3
 800b4aa:	3302      	adds	r3, #2
 800b4ac:	781a      	ldrb	r2, [r3, #0]
 800b4ae:	1dfb      	adds	r3, r7, #7
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	0011      	movs	r1, r2
 800b4b4:	0018      	movs	r0, r3
 800b4b6:	f7ff fe27 	bl	800b108 <outputs_motor_lock_duty>
	for( uint8_t i = 0 ; i < 2 ; i++ )
 800b4ba:	1dfb      	adds	r3, r7, #7
 800b4bc:	781a      	ldrb	r2, [r3, #0]
 800b4be:	1dfb      	adds	r3, r7, #7
 800b4c0:	3201      	adds	r2, #1
 800b4c2:	701a      	strb	r2, [r3, #0]
 800b4c4:	1dfb      	adds	r3, r7, #7
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d800      	bhi.n	800b4ce <outputs_Locks_IT+0x38e>
 800b4cc:	e63f      	b.n	800b14e <outputs_Locks_IT+0xe>
	}
}
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	b002      	add	sp, #8
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	2000022c 	.word	0x2000022c
 800b4d8:	0800ff38 	.word	0x0800ff38

0800b4dc <Outputs_Buzz_Set>:
	_e_BuzzTask_SirenUp,
	_e_BuzzTask_SirenDw,
*/

void Outputs_Buzz_Set( tOutBuzz buzzSet )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	0002      	movs	r2, r0
 800b4e4:	1dfb      	adds	r3, r7, #7
 800b4e6:	701a      	strb	r2, [r3, #0]
	sOutBuzz.cmdCmp = buzzSet;
 800b4e8:	4b1e      	ldr	r3, [pc, #120]	@ (800b564 <Outputs_Buzz_Set+0x88>)
 800b4ea:	1dfa      	adds	r2, r7, #7
 800b4ec:	7812      	ldrb	r2, [r2, #0]
 800b4ee:	711a      	strb	r2, [r3, #4]

	if( sOutBuzz.cmdMem == sOutBuzz.cmdCmp )return;
 800b4f0:	4b1c      	ldr	r3, [pc, #112]	@ (800b564 <Outputs_Buzz_Set+0x88>)
 800b4f2:	78da      	ldrb	r2, [r3, #3]
 800b4f4:	4b1b      	ldr	r3, [pc, #108]	@ (800b564 <Outputs_Buzz_Set+0x88>)
 800b4f6:	791b      	ldrb	r3, [r3, #4]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d02c      	beq.n	800b556 <Outputs_Buzz_Set+0x7a>

	sOutBuzz.cmdMem = sOutBuzz.cmdCmp;
 800b4fc:	4b19      	ldr	r3, [pc, #100]	@ (800b564 <Outputs_Buzz_Set+0x88>)
 800b4fe:	791a      	ldrb	r2, [r3, #4]
 800b500:	4b18      	ldr	r3, [pc, #96]	@ (800b564 <Outputs_Buzz_Set+0x88>)
 800b502:	70da      	strb	r2, [r3, #3]

	switch( (uint8_t)buzzSet )
 800b504:	1dfb      	adds	r3, r7, #7
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b04      	cmp	r3, #4
 800b50a:	d014      	beq.n	800b536 <Outputs_Buzz_Set+0x5a>
 800b50c:	dc1f      	bgt.n	800b54e <Outputs_Buzz_Set+0x72>
 800b50e:	2b03      	cmp	r3, #3
 800b510:	d00d      	beq.n	800b52e <Outputs_Buzz_Set+0x52>
 800b512:	dc1c      	bgt.n	800b54e <Outputs_Buzz_Set+0x72>
 800b514:	2b01      	cmp	r3, #1
 800b516:	d002      	beq.n	800b51e <Outputs_Buzz_Set+0x42>
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d004      	beq.n	800b526 <Outputs_Buzz_Set+0x4a>
 800b51c:	e017      	b.n	800b54e <Outputs_Buzz_Set+0x72>
	{
		case _e_OutBuzz_Off		: sOutBuzz.taskBuzz = _e_BuzzTask_Off;			break;
 800b51e:	4b11      	ldr	r3, [pc, #68]	@ (800b564 <Outputs_Buzz_Set+0x88>)
 800b520:	2201      	movs	r2, #1
 800b522:	701a      	strb	r2, [r3, #0]
 800b524:	e01a      	b.n	800b55c <Outputs_Buzz_Set+0x80>
		case _e_OutBuzz_On		:	sOutBuzz.taskBuzz = _e_BuzzTask_On;				break;
 800b526:	4b0f      	ldr	r3, [pc, #60]	@ (800b564 <Outputs_Buzz_Set+0x88>)
 800b528:	2202      	movs	r2, #2
 800b52a:	701a      	strb	r2, [r3, #0]
 800b52c:	e016      	b.n	800b55c <Outputs_Buzz_Set+0x80>
		case _e_OutBuzz_Beep	:	sOutBuzz.taskBuzz = _e_BuzzTask_BeepIni;	break;
 800b52e:	4b0d      	ldr	r3, [pc, #52]	@ (800b564 <Outputs_Buzz_Set+0x88>)
 800b530:	2203      	movs	r2, #3
 800b532:	701a      	strb	r2, [r3, #0]
 800b534:	e012      	b.n	800b55c <Outputs_Buzz_Set+0x80>
		case _e_OutBuzz_Siren	:	
			if( sOutBuzz.taskBuzz != _e_BuzzTask_SirenUp &&	sOutBuzz.taskBuzz != _e_BuzzTask_SirenDw )
 800b536:	4b0b      	ldr	r3, [pc, #44]	@ (800b564 <Outputs_Buzz_Set+0x88>)
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b05      	cmp	r3, #5
 800b53c:	d00d      	beq.n	800b55a <Outputs_Buzz_Set+0x7e>
 800b53e:	4b09      	ldr	r3, [pc, #36]	@ (800b564 <Outputs_Buzz_Set+0x88>)
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	2b06      	cmp	r3, #6
 800b544:	d009      	beq.n	800b55a <Outputs_Buzz_Set+0x7e>
			{
				sOutBuzz.taskBuzz = _e_BuzzTask_SirenUp;
 800b546:	4b07      	ldr	r3, [pc, #28]	@ (800b564 <Outputs_Buzz_Set+0x88>)
 800b548:	2205      	movs	r2, #5
 800b54a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800b54c:	e005      	b.n	800b55a <Outputs_Buzz_Set+0x7e>
		default:								sOutBuzz.taskBuzz = _e_BuzzTask_Off;			break;
 800b54e:	4b05      	ldr	r3, [pc, #20]	@ (800b564 <Outputs_Buzz_Set+0x88>)
 800b550:	2201      	movs	r2, #1
 800b552:	701a      	strb	r2, [r3, #0]
 800b554:	e002      	b.n	800b55c <Outputs_Buzz_Set+0x80>
	if( sOutBuzz.cmdMem == sOutBuzz.cmdCmp )return;
 800b556:	46c0      	nop			@ (mov r8, r8)
 800b558:	e000      	b.n	800b55c <Outputs_Buzz_Set+0x80>
			break;
 800b55a:	46c0      	nop			@ (mov r8, r8)
	}
	
//#warning "BUZRE DESLIGADO"
	//sOutBuzz.taskBuzz = _e_BuzzTask_Off;
	//sOutBuzz.taskBuzz = (tBuzzTask)buzzSet;
}
 800b55c:	46bd      	mov	sp, r7
 800b55e:	b002      	add	sp, #8
 800b560:	bd80      	pop	{r7, pc}
 800b562:	46c0      	nop			@ (mov r8, r8)
 800b564:	200001f8 	.word	0x200001f8

0800b568 <Outputs_RGB_Set>:
}

//RGB Pic

void Outputs_RGB_Set( tOutPic picNum, tOutPicMode picMode, tOutPicColor picColor, tOutPicSpeed picSpeed )
{
 800b568:	b5b0      	push	{r4, r5, r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	0005      	movs	r5, r0
 800b570:	000c      	movs	r4, r1
 800b572:	0010      	movs	r0, r2
 800b574:	0019      	movs	r1, r3
 800b576:	1dfb      	adds	r3, r7, #7
 800b578:	1c2a      	adds	r2, r5, #0
 800b57a:	701a      	strb	r2, [r3, #0]
 800b57c:	1dbb      	adds	r3, r7, #6
 800b57e:	1c22      	adds	r2, r4, #0
 800b580:	701a      	strb	r2, [r3, #0]
 800b582:	1d7b      	adds	r3, r7, #5
 800b584:	1c02      	adds	r2, r0, #0
 800b586:	701a      	strb	r2, [r3, #0]
 800b588:	1d3b      	adds	r3, r7, #4
 800b58a:	1c0a      	adds	r2, r1, #0
 800b58c:	701a      	strb	r2, [r3, #0]
	if( picNum >= _e_OutPic_Both ){
 800b58e:	1dfb      	adds	r3, r7, #7
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	2b01      	cmp	r3, #1
 800b594:	d951      	bls.n	800b63a <Outputs_RGB_Set+0xd2>
		for( uint8_t x = 0 ; x < _e_OutPic_Both ; x++ ){
 800b596:	230f      	movs	r3, #15
 800b598:	18fb      	adds	r3, r7, r3
 800b59a:	2200      	movs	r2, #0
 800b59c:	701a      	strb	r2, [r3, #0]
 800b59e:	e046      	b.n	800b62e <Outputs_RGB_Set+0xc6>
			sOutRgb[x].mode = picMode;
 800b5a0:	250f      	movs	r5, #15
 800b5a2:	197b      	adds	r3, r7, r5
 800b5a4:	781a      	ldrb	r2, [r3, #0]
 800b5a6:	494a      	ldr	r1, [pc, #296]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b5a8:	0013      	movs	r3, r2
 800b5aa:	011b      	lsls	r3, r3, #4
 800b5ac:	1a9b      	subs	r3, r3, r2
 800b5ae:	18cb      	adds	r3, r1, r3
 800b5b0:	3306      	adds	r3, #6
 800b5b2:	1dba      	adds	r2, r7, #6
 800b5b4:	7812      	ldrb	r2, [r2, #0]
 800b5b6:	701a      	strb	r2, [r3, #0]
			sOutRgb[x].color = picColor;
 800b5b8:	197b      	adds	r3, r7, r5
 800b5ba:	781a      	ldrb	r2, [r3, #0]
 800b5bc:	4944      	ldr	r1, [pc, #272]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b5be:	0013      	movs	r3, r2
 800b5c0:	011b      	lsls	r3, r3, #4
 800b5c2:	1a9b      	subs	r3, r3, r2
 800b5c4:	18cb      	adds	r3, r1, r3
 800b5c6:	330e      	adds	r3, #14
 800b5c8:	1d7a      	adds	r2, r7, #5
 800b5ca:	7812      	ldrb	r2, [r2, #0]
 800b5cc:	701a      	strb	r2, [r3, #0]
			sOutRgb[x].speedUser = picSpeed;
 800b5ce:	197b      	adds	r3, r7, r5
 800b5d0:	781a      	ldrb	r2, [r3, #0]
 800b5d2:	493f      	ldr	r1, [pc, #252]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b5d4:	0013      	movs	r3, r2
 800b5d6:	011b      	lsls	r3, r3, #4
 800b5d8:	1a9b      	subs	r3, r3, r2
 800b5da:	18cb      	adds	r3, r1, r3
 800b5dc:	3308      	adds	r3, #8
 800b5de:	1d3a      	adds	r2, r7, #4
 800b5e0:	7812      	ldrb	r2, [r2, #0]
 800b5e2:	701a      	strb	r2, [r3, #0]
			outputs_RGB_Color_Table( picColor, &sOutRgb[x].dutyUser[_e_Rgb_R], &sOutRgb[x].dutyUser[_e_Rgb_G], &sOutRgb[x].dutyUser[_e_Rgb_B] );
 800b5e4:	197b      	adds	r3, r7, r5
 800b5e6:	781a      	ldrb	r2, [r3, #0]
 800b5e8:	0013      	movs	r3, r2
 800b5ea:	011b      	lsls	r3, r3, #4
 800b5ec:	1a9b      	subs	r3, r3, r2
 800b5ee:	4a38      	ldr	r2, [pc, #224]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b5f0:	189b      	adds	r3, r3, r2
 800b5f2:	1cd9      	adds	r1, r3, #3
 800b5f4:	197b      	adds	r3, r7, r5
 800b5f6:	781a      	ldrb	r2, [r3, #0]
 800b5f8:	0013      	movs	r3, r2
 800b5fa:	011b      	lsls	r3, r3, #4
 800b5fc:	1a9b      	subs	r3, r3, r2
 800b5fe:	1c5a      	adds	r2, r3, #1
 800b600:	4b33      	ldr	r3, [pc, #204]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b602:	18d3      	adds	r3, r2, r3
 800b604:	1cdc      	adds	r4, r3, #3
 800b606:	197b      	adds	r3, r7, r5
 800b608:	781a      	ldrb	r2, [r3, #0]
 800b60a:	0013      	movs	r3, r2
 800b60c:	011b      	lsls	r3, r3, #4
 800b60e:	1a9b      	subs	r3, r3, r2
 800b610:	1c9a      	adds	r2, r3, #2
 800b612:	4b2f      	ldr	r3, [pc, #188]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b614:	18d3      	adds	r3, r2, r3
 800b616:	1cda      	adds	r2, r3, #3
 800b618:	1d7b      	adds	r3, r7, #5
 800b61a:	7818      	ldrb	r0, [r3, #0]
 800b61c:	0013      	movs	r3, r2
 800b61e:	0022      	movs	r2, r4
 800b620:	f7ff fc34 	bl	800ae8c <outputs_RGB_Color_Table>
		for( uint8_t x = 0 ; x < _e_OutPic_Both ; x++ ){
 800b624:	197b      	adds	r3, r7, r5
 800b626:	781a      	ldrb	r2, [r3, #0]
 800b628:	197b      	adds	r3, r7, r5
 800b62a:	3201      	adds	r2, #1
 800b62c:	701a      	strb	r2, [r3, #0]
 800b62e:	230f      	movs	r3, #15
 800b630:	18fb      	adds	r3, r7, r3
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d9b3      	bls.n	800b5a0 <Outputs_RGB_Set+0x38>
		sOutRgb[picNum].mode = picMode;
		sOutRgb[picNum].color = picColor;
		sOutRgb[picNum].speedUser = picSpeed;
		outputs_RGB_Color_Table( sOutRgb[picNum].color, &sOutRgb[picNum].dutyUser[_e_Rgb_R], &sOutRgb[picNum].dutyUser[_e_Rgb_G], &sOutRgb[picNum].dutyUser[_e_Rgb_B] );
	}
}
 800b638:	e046      	b.n	800b6c8 <Outputs_RGB_Set+0x160>
		sOutRgb[picNum].mode = picMode;
 800b63a:	1dfb      	adds	r3, r7, #7
 800b63c:	781a      	ldrb	r2, [r3, #0]
 800b63e:	4924      	ldr	r1, [pc, #144]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b640:	0013      	movs	r3, r2
 800b642:	011b      	lsls	r3, r3, #4
 800b644:	1a9b      	subs	r3, r3, r2
 800b646:	18cb      	adds	r3, r1, r3
 800b648:	3306      	adds	r3, #6
 800b64a:	1dba      	adds	r2, r7, #6
 800b64c:	7812      	ldrb	r2, [r2, #0]
 800b64e:	701a      	strb	r2, [r3, #0]
		sOutRgb[picNum].color = picColor;
 800b650:	1dfb      	adds	r3, r7, #7
 800b652:	781a      	ldrb	r2, [r3, #0]
 800b654:	491e      	ldr	r1, [pc, #120]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b656:	0013      	movs	r3, r2
 800b658:	011b      	lsls	r3, r3, #4
 800b65a:	1a9b      	subs	r3, r3, r2
 800b65c:	18cb      	adds	r3, r1, r3
 800b65e:	330e      	adds	r3, #14
 800b660:	1d7a      	adds	r2, r7, #5
 800b662:	7812      	ldrb	r2, [r2, #0]
 800b664:	701a      	strb	r2, [r3, #0]
		sOutRgb[picNum].speedUser = picSpeed;
 800b666:	1dfb      	adds	r3, r7, #7
 800b668:	781a      	ldrb	r2, [r3, #0]
 800b66a:	4919      	ldr	r1, [pc, #100]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b66c:	0013      	movs	r3, r2
 800b66e:	011b      	lsls	r3, r3, #4
 800b670:	1a9b      	subs	r3, r3, r2
 800b672:	18cb      	adds	r3, r1, r3
 800b674:	3308      	adds	r3, #8
 800b676:	1d3a      	adds	r2, r7, #4
 800b678:	7812      	ldrb	r2, [r2, #0]
 800b67a:	701a      	strb	r2, [r3, #0]
		outputs_RGB_Color_Table( sOutRgb[picNum].color, &sOutRgb[picNum].dutyUser[_e_Rgb_R], &sOutRgb[picNum].dutyUser[_e_Rgb_G], &sOutRgb[picNum].dutyUser[_e_Rgb_B] );
 800b67c:	1dfb      	adds	r3, r7, #7
 800b67e:	781a      	ldrb	r2, [r3, #0]
 800b680:	4913      	ldr	r1, [pc, #76]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b682:	0013      	movs	r3, r2
 800b684:	011b      	lsls	r3, r3, #4
 800b686:	1a9b      	subs	r3, r3, r2
 800b688:	18cb      	adds	r3, r1, r3
 800b68a:	330e      	adds	r3, #14
 800b68c:	7818      	ldrb	r0, [r3, #0]
 800b68e:	1dfb      	adds	r3, r7, #7
 800b690:	781a      	ldrb	r2, [r3, #0]
 800b692:	0013      	movs	r3, r2
 800b694:	011b      	lsls	r3, r3, #4
 800b696:	1a9b      	subs	r3, r3, r2
 800b698:	4a0d      	ldr	r2, [pc, #52]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b69a:	189b      	adds	r3, r3, r2
 800b69c:	1cd9      	adds	r1, r3, #3
 800b69e:	1dfb      	adds	r3, r7, #7
 800b6a0:	781a      	ldrb	r2, [r3, #0]
 800b6a2:	0013      	movs	r3, r2
 800b6a4:	011b      	lsls	r3, r3, #4
 800b6a6:	1a9b      	subs	r3, r3, r2
 800b6a8:	1c5a      	adds	r2, r3, #1
 800b6aa:	4b09      	ldr	r3, [pc, #36]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b6ac:	18d3      	adds	r3, r2, r3
 800b6ae:	1cdc      	adds	r4, r3, #3
 800b6b0:	1dfb      	adds	r3, r7, #7
 800b6b2:	781a      	ldrb	r2, [r3, #0]
 800b6b4:	0013      	movs	r3, r2
 800b6b6:	011b      	lsls	r3, r3, #4
 800b6b8:	1a9b      	subs	r3, r3, r2
 800b6ba:	1c9a      	adds	r2, r3, #2
 800b6bc:	4b04      	ldr	r3, [pc, #16]	@ (800b6d0 <Outputs_RGB_Set+0x168>)
 800b6be:	18d3      	adds	r3, r2, r3
 800b6c0:	3303      	adds	r3, #3
 800b6c2:	0022      	movs	r2, r4
 800b6c4:	f7ff fbe2 	bl	800ae8c <outputs_RGB_Color_Table>
}
 800b6c8:	46c0      	nop			@ (mov r8, r8)
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	b004      	add	sp, #16
 800b6ce:	bdb0      	pop	{r4, r5, r7, pc}
 800b6d0:	20000200 	.word	0x20000200

0800b6d4 <Outputs_Urn_Sol_Set>:

//Urn

void Outputs_Urn_Sol_Set( tOutUrnSol urnSolAct )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	0002      	movs	r2, r0
 800b6dc:	1dfb      	adds	r3, r7, #7
 800b6de:	701a      	strb	r2, [r3, #0]
	sOutUrn.solUser = urnSolAct;
 800b6e0:	4b03      	ldr	r3, [pc, #12]	@ (800b6f0 <Outputs_Urn_Sol_Set+0x1c>)
 800b6e2:	1dfa      	adds	r2, r7, #7
 800b6e4:	7812      	ldrb	r2, [r2, #0]
 800b6e6:	701a      	strb	r2, [r3, #0]
}
 800b6e8:	46c0      	nop			@ (mov r8, r8)
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	b002      	add	sp, #8
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	20000220 	.word	0x20000220

0800b6f4 <Outputs_Urn_Pic_Set>:

void Outputs_Urn_Pic_Set( tOutUrnPic picMOde )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	0002      	movs	r2, r0
 800b6fc:	1dfb      	adds	r3, r7, #7
 800b6fe:	701a      	strb	r2, [r3, #0]
	sOutUrn.picSys = picMOde;
 800b700:	4b03      	ldr	r3, [pc, #12]	@ (800b710 <Outputs_Urn_Pic_Set+0x1c>)
 800b702:	1dfa      	adds	r2, r7, #7
 800b704:	7812      	ldrb	r2, [r2, #0]
 800b706:	719a      	strb	r2, [r3, #6]
}
 800b708:	46c0      	nop			@ (mov r8, r8)
 800b70a:	46bd      	mov	sp, r7
 800b70c:	b002      	add	sp, #8
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	20000220 	.word	0x20000220

0800b714 <Outputs_Com_Pass>:
}

//IO COM

void Outputs_Com_Pass( tOutCom_Pass passState )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	0002      	movs	r2, r0
 800b71c:	1dfb      	adds	r3, r7, #7
 800b71e:	701a      	strb	r2, [r3, #0]
	sOutCom.passSts = passState;
 800b720:	4b09      	ldr	r3, [pc, #36]	@ (800b748 <Outputs_Com_Pass+0x34>)
 800b722:	1dfa      	adds	r2, r7, #7
 800b724:	7812      	ldrb	r2, [r2, #0]
 800b726:	701a      	strb	r2, [r3, #0]
	if( passState == _e_OutCom_Pass_Nop )
 800b728:	1dfb      	adds	r3, r7, #7
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d104      	bne.n	800b73a <Outputs_Com_Pass+0x26>
		COM_IO_PASS_NOP;
 800b730:	4b06      	ldr	r3, [pc, #24]	@ (800b74c <Outputs_Com_Pass+0x38>)
 800b732:	2280      	movs	r2, #128	@ 0x80
 800b734:	02d2      	lsls	r2, r2, #11
 800b736:	619a      	str	r2, [r3, #24]
	else
		COM_IO_PASS_OK;
}
 800b738:	e002      	b.n	800b740 <Outputs_Com_Pass+0x2c>
		COM_IO_PASS_OK;
 800b73a:	4b04      	ldr	r3, [pc, #16]	@ (800b74c <Outputs_Com_Pass+0x38>)
 800b73c:	2204      	movs	r2, #4
 800b73e:	619a      	str	r2, [r3, #24]
}
 800b740:	46c0      	nop			@ (mov r8, r8)
 800b742:	46bd      	mov	sp, r7
 800b744:	b002      	add	sp, #8
 800b746:	bd80      	pop	{r7, pc}
 800b748:	20000240 	.word	0x20000240
 800b74c:	48000800 	.word	0x48000800

0800b750 <Outputs_Com_Cheat>:

void Outputs_Com_Cheat( tOutCom_Cheat cheatState )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	0002      	movs	r2, r0
 800b758:	1dfb      	adds	r3, r7, #7
 800b75a:	701a      	strb	r2, [r3, #0]
	sOutCom.cheatSts = cheatState;
 800b75c:	4b09      	ldr	r3, [pc, #36]	@ (800b784 <Outputs_Com_Cheat+0x34>)
 800b75e:	1dfa      	adds	r2, r7, #7
 800b760:	7812      	ldrb	r2, [r2, #0]
 800b762:	705a      	strb	r2, [r3, #1]
	if( cheatState == _e_OutCom_Cheat_None )COM_IO_CHEAT_NONE;
 800b764:	1dfb      	adds	r3, r7, #7
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d104      	bne.n	800b776 <Outputs_Com_Cheat+0x26>
 800b76c:	4b06      	ldr	r3, [pc, #24]	@ (800b788 <Outputs_Com_Cheat+0x38>)
 800b76e:	2280      	movs	r2, #128	@ 0x80
 800b770:	0312      	lsls	r2, r2, #12
 800b772:	619a      	str	r2, [r3, #24]
	else COM_IO_CHEAT_SHIT;
}
 800b774:	e002      	b.n	800b77c <Outputs_Com_Cheat+0x2c>
	else COM_IO_CHEAT_SHIT;
 800b776:	4b04      	ldr	r3, [pc, #16]	@ (800b788 <Outputs_Com_Cheat+0x38>)
 800b778:	2208      	movs	r2, #8
 800b77a:	619a      	str	r2, [r3, #24]
}
 800b77c:	46c0      	nop			@ (mov r8, r8)
 800b77e:	46bd      	mov	sp, r7
 800b780:	b002      	add	sp, #8
 800b782:	bd80      	pop	{r7, pc}
 800b784:	20000240 	.word	0x20000240
 800b788:	48000800 	.word	0x48000800

0800b78c <Outputs_Com_Cheat_Get>:

tOutCom_Pass Outputs_Com_Pass_Get( void ){
	return sOutCom.passSts;
}

tOutCom_Cheat Outputs_Com_Cheat_Get( void ){
 800b78c:	b580      	push	{r7, lr}
 800b78e:	af00      	add	r7, sp, #0
	return sOutCom.cheatSts;
 800b790:	4b02      	ldr	r3, [pc, #8]	@ (800b79c <Outputs_Com_Cheat_Get+0x10>)
 800b792:	785b      	ldrb	r3, [r3, #1]
}
 800b794:	0018      	movs	r0, r3
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	46c0      	nop			@ (mov r8, r8)
 800b79c:	20000240 	.word	0x20000240

0800b7a0 <Outputs_Task_IT>:

/*** ** * Main Task * ** ***/

void Outputs_Task_IT(void)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	af00      	add	r7, sp, #0
//	outputs_Motor_IT();
	outputs_RGB_IT();
 800b7a4:	f7ff faf4 	bl	800ad90 <outputs_RGB_IT>
	outputs_Urn_IT();
 800b7a8:	f7ff fbe4 	bl	800af74 <outputs_Urn_IT>
	//outputs_DispLed_IT();
	outputs_Locks_IT();
 800b7ac:	f7ff fcc8 	bl	800b140 <outputs_Locks_IT>
}
 800b7b0:	46c0      	nop			@ (mov r8, r8)
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <Outputs_Task>:

void Outputs_Task(void)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	af00      	add	r7, sp, #0
	outputs_Buzz_Task();
 800b7ba:	f7ff f871 	bl	800a8a0 <outputs_Buzz_Task>
	//outputs_Motor_Task();
}
 800b7be:	46c0      	nop			@ (mov r8, r8)
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <_pos_mt_task_init>:

static void _pos_mt_task_init( tPosMtNum posNum );
static void _pos_mt_task_run( tPosMtNum posNum );

static void _pos_mt_task_init( tPosMtNum posNum )
{
 800b7c4:	b590      	push	{r4, r7, lr}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	0002      	movs	r2, r0
 800b7cc:	1dfb      	adds	r3, r7, #7
 800b7ce:	701a      	strb	r2, [r3, #0]
	tTaskManager TMPOSMT = ( TMPOSMT1 + (tTaskManager)posNum );
 800b7d0:	240f      	movs	r4, #15
 800b7d2:	193b      	adds	r3, r7, r4
 800b7d4:	1dfa      	adds	r2, r7, #7
 800b7d6:	7812      	ldrb	r2, [r2, #0]
 800b7d8:	3208      	adds	r2, #8
 800b7da:	701a      	strb	r2, [r3, #0]
	TaskManager_Set( TMPOSMT , _e_pos_mt_task_init );
 800b7dc:	193b      	adds	r3, r7, r4
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	0018      	movs	r0, r3
 800b7e4:	f001 ffd4 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( TMPOSMT ) == false ){
 800b7e8:	193b      	adds	r3, r7, r4
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	0018      	movs	r0, r3
 800b7ee:	f002 f835 	bl	800d85c <TaskManager_First_Get>
 800b7f2:	1e03      	subs	r3, r0, #0
 800b7f4:	d10a      	bne.n	800b80c <_pos_mt_task_init+0x48>
		TaskManager_First_Set( TMPOSMT );
 800b7f6:	193b      	adds	r3, r7, r4
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	0018      	movs	r0, r3
 800b7fc:	f001 ffe4 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( TMPOSMT, 0 );
 800b800:	193b      	adds	r3, r7, r4
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	2100      	movs	r1, #0
 800b806:	0018      	movs	r0, r3
 800b808:	f002 f84a 	bl	800d8a0 <TaskManager_Step_Set>
	}
	switch( TaskManager_Step_Get( TMPOSMT ) )
 800b80c:	240f      	movs	r4, #15
 800b80e:	193b      	adds	r3, r7, r4
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	0018      	movs	r0, r3
 800b814:	f002 f86e 	bl	800d8f4 <TaskManager_Step_Get>
	{
	default:
		TaskManager_Step_Set( TMPOSMT, 0 );
 800b818:	193b      	adds	r3, r7, r4
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	2100      	movs	r1, #0
 800b81e:	0018      	movs	r0, r3
 800b820:	f002 f83e 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800b824:	46c0      	nop			@ (mov r8, r8)
	}
}
 800b826:	46c0      	nop			@ (mov r8, r8)
 800b828:	46bd      	mov	sp, r7
 800b82a:	b005      	add	sp, #20
 800b82c:	bd90      	pop	{r4, r7, pc}
	...

0800b830 <_pos_mt_task_run>:

static void _pos_mt_task_run( tPosMtNum posNum )
{
 800b830:	b590      	push	{r4, r7, lr}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	0002      	movs	r2, r0
 800b838:	1dfb      	adds	r3, r7, #7
 800b83a:	701a      	strb	r2, [r3, #0]
	tTaskManager TMPOSMT = ( TMPOSMT1 + (tTaskManager)posNum );
 800b83c:	240f      	movs	r4, #15
 800b83e:	193b      	adds	r3, r7, r4
 800b840:	1dfa      	adds	r2, r7, #7
 800b842:	7812      	ldrb	r2, [r2, #0]
 800b844:	3208      	adds	r2, #8
 800b846:	701a      	strb	r2, [r3, #0]
	TaskManager_Set( TMPOSMT , _e_pos_mt_task_run );
 800b848:	193b      	adds	r3, r7, r4
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	2101      	movs	r1, #1
 800b84e:	0018      	movs	r0, r3
 800b850:	f001 ff9e 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( TMPOSMT ) == false ){
 800b854:	193b      	adds	r3, r7, r4
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	0018      	movs	r0, r3
 800b85a:	f001 ffff 	bl	800d85c <TaskManager_First_Get>
 800b85e:	1e03      	subs	r3, r0, #0
 800b860:	d11d      	bne.n	800b89e <_pos_mt_task_run+0x6e>
		TaskManager_First_Set( TMPOSMT );
 800b862:	193b      	adds	r3, r7, r4
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	0018      	movs	r0, r3
 800b868:	f001 ffae 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( TMPOSMT, 0 );
 800b86c:	193b      	adds	r3, r7, r4
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	2100      	movs	r1, #0
 800b872:	0018      	movs	r0, r3
 800b874:	f002 f814 	bl	800d8a0 <TaskManager_Step_Set>

		if(sPosRun.valUser[posNum] < 20 )sPosRun.valUser[posNum] = 100;
 800b878:	1dfb      	adds	r3, r7, #7
 800b87a:	781a      	ldrb	r2, [r3, #0]
 800b87c:	4b7e      	ldr	r3, [pc, #504]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b87e:	3206      	adds	r2, #6
 800b880:	0092      	lsls	r2, r2, #2
 800b882:	58d3      	ldr	r3, [r2, r3]
 800b884:	497d      	ldr	r1, [pc, #500]	@ (800ba7c <_pos_mt_task_run+0x24c>)
 800b886:	1c18      	adds	r0, r3, #0
 800b888:	f7f4 fdc6 	bl	8000418 <__aeabi_fcmplt>
 800b88c:	1e03      	subs	r3, r0, #0
 800b88e:	d006      	beq.n	800b89e <_pos_mt_task_run+0x6e>
 800b890:	1dfb      	adds	r3, r7, #7
 800b892:	781a      	ldrb	r2, [r3, #0]
 800b894:	4b78      	ldr	r3, [pc, #480]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b896:	3206      	adds	r2, #6
 800b898:	0092      	lsls	r2, r2, #2
 800b89a:	4979      	ldr	r1, [pc, #484]	@ (800ba80 <_pos_mt_task_run+0x250>)
 800b89c:	50d1      	str	r1, [r2, r3]

		//Timing_Set( _e_Timing_Position_CorrectionTime_Mt1+posNum , 1500 );
	}

	sPosRun.valSys[posNum] = Encoder_Move_Get( (tEncNum) posNum );
 800b89e:	1dfb      	adds	r3, r7, #7
 800b8a0:	781c      	ldrb	r4, [r3, #0]
 800b8a2:	1dfb      	adds	r3, r7, #7
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	f7fe fc76 	bl	800a198 <Encoder_Move_Get>
 800b8ac:	1c01      	adds	r1, r0, #0
 800b8ae:	4b72      	ldr	r3, [pc, #456]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b8b0:	00a2      	lsls	r2, r4, #2
 800b8b2:	50d1      	str	r1, [r2, r3]

	if( sPosRun.valSys[posNum] >= POSITION_ANGPER_TOL ){
 800b8b4:	1dfb      	adds	r3, r7, #7
 800b8b6:	781a      	ldrb	r2, [r3, #0]
 800b8b8:	4b6f      	ldr	r3, [pc, #444]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b8ba:	0092      	lsls	r2, r2, #2
 800b8bc:	58d3      	ldr	r3, [r2, r3]
 800b8be:	4971      	ldr	r1, [pc, #452]	@ (800ba84 <_pos_mt_task_run+0x254>)
 800b8c0:	1c18      	adds	r0, r3, #0
 800b8c2:	f7f4 fdc7 	bl	8000454 <__aeabi_fcmpge>
 800b8c6:	1e03      	subs	r3, r0, #0
 800b8c8:	d011      	beq.n	800b8ee <_pos_mt_task_run+0xbe>
		sPosRun.valSysMin[posNum] = sPosRun.valSys[posNum] - POSITION_ANGPER_TOL;
 800b8ca:	1dfb      	adds	r3, r7, #7
 800b8cc:	781a      	ldrb	r2, [r3, #0]
 800b8ce:	4b6a      	ldr	r3, [pc, #424]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b8d0:	0092      	lsls	r2, r2, #2
 800b8d2:	58d2      	ldr	r2, [r2, r3]
 800b8d4:	1dfb      	adds	r3, r7, #7
 800b8d6:	781c      	ldrb	r4, [r3, #0]
 800b8d8:	496a      	ldr	r1, [pc, #424]	@ (800ba84 <_pos_mt_task_run+0x254>)
 800b8da:	1c10      	adds	r0, r2, #0
 800b8dc:	f7f5 faa8 	bl	8000e30 <__aeabi_fsub>
 800b8e0:	1c03      	adds	r3, r0, #0
 800b8e2:	1c19      	adds	r1, r3, #0
 800b8e4:	4b64      	ldr	r3, [pc, #400]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b8e6:	1ca2      	adds	r2, r4, #2
 800b8e8:	0092      	lsls	r2, r2, #2
 800b8ea:	50d1      	str	r1, [r2, r3]
 800b8ec:	e006      	b.n	800b8fc <_pos_mt_task_run+0xcc>
	}
	else{
		sPosRun.valSysMin[posNum] = 0;
 800b8ee:	1dfb      	adds	r3, r7, #7
 800b8f0:	781a      	ldrb	r2, [r3, #0]
 800b8f2:	4b61      	ldr	r3, [pc, #388]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b8f4:	3202      	adds	r2, #2
 800b8f6:	0092      	lsls	r2, r2, #2
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	50d1      	str	r1, [r2, r3]
	}

	if(sPosRun.valSys[posNum] < (POSITION_MAX_ANG-POSITION_ANGPER_TOL) ){
 800b8fc:	1dfb      	adds	r3, r7, #7
 800b8fe:	781a      	ldrb	r2, [r3, #0]
 800b900:	4b5d      	ldr	r3, [pc, #372]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b902:	0092      	lsls	r2, r2, #2
 800b904:	58d3      	ldr	r3, [r2, r3]
 800b906:	4960      	ldr	r1, [pc, #384]	@ (800ba88 <_pos_mt_task_run+0x258>)
 800b908:	1c18      	adds	r0, r3, #0
 800b90a:	f7f4 fd85 	bl	8000418 <__aeabi_fcmplt>
 800b90e:	1e03      	subs	r3, r0, #0
 800b910:	d011      	beq.n	800b936 <_pos_mt_task_run+0x106>
		sPosRun.valSysMax[posNum] = sPosRun.valSys[posNum] + POSITION_ANGPER_TOL;
 800b912:	1dfb      	adds	r3, r7, #7
 800b914:	781a      	ldrb	r2, [r3, #0]
 800b916:	4b58      	ldr	r3, [pc, #352]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b918:	0092      	lsls	r2, r2, #2
 800b91a:	58d2      	ldr	r2, [r2, r3]
 800b91c:	1dfb      	adds	r3, r7, #7
 800b91e:	781c      	ldrb	r4, [r3, #0]
 800b920:	4958      	ldr	r1, [pc, #352]	@ (800ba84 <_pos_mt_task_run+0x254>)
 800b922:	1c10      	adds	r0, r2, #0
 800b924:	f7f4 fdd6 	bl	80004d4 <__aeabi_fadd>
 800b928:	1c03      	adds	r3, r0, #0
 800b92a:	1c19      	adds	r1, r3, #0
 800b92c:	4b52      	ldr	r3, [pc, #328]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b92e:	1d22      	adds	r2, r4, #4
 800b930:	0092      	lsls	r2, r2, #2
 800b932:	50d1      	str	r1, [r2, r3]
 800b934:	e006      	b.n	800b944 <_pos_mt_task_run+0x114>
	}
	else{
		sPosRun.valSysMax[posNum] = POSITION_MAX_ANG;
 800b936:	1dfb      	adds	r3, r7, #7
 800b938:	781a      	ldrb	r2, [r3, #0]
 800b93a:	4b4f      	ldr	r3, [pc, #316]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b93c:	3204      	adds	r2, #4
 800b93e:	0092      	lsls	r2, r2, #2
 800b940:	494f      	ldr	r1, [pc, #316]	@ (800ba80 <_pos_mt_task_run+0x250>)
 800b942:	50d1      	str	r1, [r2, r3]
	}

	switch( TaskManager_Step_Get( TMPOSMT ) )
 800b944:	230f      	movs	r3, #15
 800b946:	18fb      	adds	r3, r7, r3
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	0018      	movs	r0, r3
 800b94c:	f001 ffd2 	bl	800d8f4 <TaskManager_Step_Get>
 800b950:	1e03      	subs	r3, r0, #0
 800b952:	d002      	beq.n	800b95a <_pos_mt_task_run+0x12a>
 800b954:	2b01      	cmp	r3, #1
 800b956:	d068      	beq.n	800ba2a <_pos_mt_task_run+0x1fa>
 800b958:	e080      	b.n	800ba5c <_pos_mt_task_run+0x22c>
	{
	case 0:
		if( sPosRun.valUser[posNum] != sPosRun.valUserLast[posNum])
 800b95a:	1dfb      	adds	r3, r7, #7
 800b95c:	781a      	ldrb	r2, [r3, #0]
 800b95e:	4b46      	ldr	r3, [pc, #280]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b960:	3206      	adds	r2, #6
 800b962:	0092      	lsls	r2, r2, #2
 800b964:	58d0      	ldr	r0, [r2, r3]
 800b966:	1dfb      	adds	r3, r7, #7
 800b968:	781a      	ldrb	r2, [r3, #0]
 800b96a:	4b43      	ldr	r3, [pc, #268]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b96c:	3208      	adds	r2, #8
 800b96e:	0092      	lsls	r2, r2, #2
 800b970:	58d3      	ldr	r3, [r2, r3]
 800b972:	1c19      	adds	r1, r3, #0
 800b974:	f7f4 fd4a 	bl	800040c <__aeabi_fcmpeq>
 800b978:	1e03      	subs	r3, r0, #0
 800b97a:	d112      	bne.n	800b9a2 <_pos_mt_task_run+0x172>
		{
			sPosRun.valUserLast[posNum] = sPosRun.valUser[posNum];
 800b97c:	1dfb      	adds	r3, r7, #7
 800b97e:	7819      	ldrb	r1, [r3, #0]
 800b980:	1dfb      	adds	r3, r7, #7
 800b982:	781a      	ldrb	r2, [r3, #0]
 800b984:	4b3c      	ldr	r3, [pc, #240]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b986:	3106      	adds	r1, #6
 800b988:	0089      	lsls	r1, r1, #2
 800b98a:	58c9      	ldr	r1, [r1, r3]
 800b98c:	4b3a      	ldr	r3, [pc, #232]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b98e:	3208      	adds	r2, #8
 800b990:	0092      	lsls	r2, r2, #2
 800b992:	50d1      	str	r1, [r2, r3]
			TaskManager_Step_Inc(TMPOSMT);
 800b994:	230f      	movs	r3, #15
 800b996:	18fb      	adds	r3, r7, r3
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	0018      	movs	r0, r3
 800b99c:	f001 ffce 	bl	800d93c <TaskManager_Step_Inc>
					TaskManager_Step_Inc(TMPOSMT);
					Timing_Set( _e_Timing_Position_CorrectionTime_Mt1+posNum , POSITION_CORRECT_TIME );
				}
			}
		}
		break;
 800b9a0:	e064      	b.n	800ba6c <_pos_mt_task_run+0x23c>
			if( Encoder_Stat((tEncNum)posNum) == _e_EncSts_Idle && Timing_Get_Bool( _e_Timing_Position_CorrectionTime_Mt1+posNum ))
 800b9a2:	1dfb      	adds	r3, r7, #7
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	0018      	movs	r0, r3
 800b9a8:	f7fe fc20 	bl	800a1ec <Encoder_Stat>
 800b9ac:	0003      	movs	r3, r0
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d15c      	bne.n	800ba6c <_pos_mt_task_run+0x23c>
 800b9b2:	1dfb      	adds	r3, r7, #7
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	3306      	adds	r3, #6
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	0018      	movs	r0, r3
 800b9bc:	f003 ffa8 	bl	800f910 <Timing_Get_Bool>
 800b9c0:	1e03      	subs	r3, r0, #0
 800b9c2:	d053      	beq.n	800ba6c <_pos_mt_task_run+0x23c>
				if( sPosRun.valUser[posNum] < sPosRun.valSysMin[posNum] ||
 800b9c4:	1dfb      	adds	r3, r7, #7
 800b9c6:	781a      	ldrb	r2, [r3, #0]
 800b9c8:	4b2b      	ldr	r3, [pc, #172]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b9ca:	3206      	adds	r2, #6
 800b9cc:	0092      	lsls	r2, r2, #2
 800b9ce:	58d0      	ldr	r0, [r2, r3]
 800b9d0:	1dfb      	adds	r3, r7, #7
 800b9d2:	781a      	ldrb	r2, [r3, #0]
 800b9d4:	4b28      	ldr	r3, [pc, #160]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b9d6:	3202      	adds	r2, #2
 800b9d8:	0092      	lsls	r2, r2, #2
 800b9da:	58d3      	ldr	r3, [r2, r3]
 800b9dc:	1c19      	adds	r1, r3, #0
 800b9de:	f7f4 fd1b 	bl	8000418 <__aeabi_fcmplt>
 800b9e2:	1e03      	subs	r3, r0, #0
 800b9e4:	d111      	bne.n	800ba0a <_pos_mt_task_run+0x1da>
					sPosRun.valUser[posNum] > sPosRun.valSysMax[posNum]	)
 800b9e6:	1dfb      	adds	r3, r7, #7
 800b9e8:	781a      	ldrb	r2, [r3, #0]
 800b9ea:	4b23      	ldr	r3, [pc, #140]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b9ec:	3206      	adds	r2, #6
 800b9ee:	0092      	lsls	r2, r2, #2
 800b9f0:	58d0      	ldr	r0, [r2, r3]
 800b9f2:	1dfb      	adds	r3, r7, #7
 800b9f4:	781a      	ldrb	r2, [r3, #0]
 800b9f6:	4b20      	ldr	r3, [pc, #128]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800b9f8:	3204      	adds	r2, #4
 800b9fa:	0092      	lsls	r2, r2, #2
 800b9fc:	58d3      	ldr	r3, [r2, r3]
				if( sPosRun.valUser[posNum] < sPosRun.valSysMin[posNum] ||
 800b9fe:	1c19      	adds	r1, r3, #0
 800ba00:	f7f4 fd1e 	bl	8000440 <__aeabi_fcmpgt>
 800ba04:	1e03      	subs	r3, r0, #0
 800ba06:	d100      	bne.n	800ba0a <_pos_mt_task_run+0x1da>
		break;
 800ba08:	e030      	b.n	800ba6c <_pos_mt_task_run+0x23c>
					TaskManager_Step_Inc(TMPOSMT);
 800ba0a:	230f      	movs	r3, #15
 800ba0c:	18fb      	adds	r3, r7, r3
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	0018      	movs	r0, r3
 800ba12:	f001 ff93 	bl	800d93c <TaskManager_Step_Inc>
					Timing_Set( _e_Timing_Position_CorrectionTime_Mt1+posNum , POSITION_CORRECT_TIME );
 800ba16:	1dfb      	adds	r3, r7, #7
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	3306      	adds	r3, #6
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	4a1b      	ldr	r2, [pc, #108]	@ (800ba8c <_pos_mt_task_run+0x25c>)
 800ba20:	0011      	movs	r1, r2
 800ba22:	0018      	movs	r0, r3
 800ba24:	f003 ff5e 	bl	800f8e4 <Timing_Set>
		break;
 800ba28:	e020      	b.n	800ba6c <_pos_mt_task_run+0x23c>

	case 1:
		Encoder_Move_Set( (tEncNum)posNum , sPosRun.valUser[posNum] , _e_EncStopMode_On );
 800ba2a:	1dfb      	adds	r3, r7, #7
 800ba2c:	781a      	ldrb	r2, [r3, #0]
 800ba2e:	4b12      	ldr	r3, [pc, #72]	@ (800ba78 <_pos_mt_task_run+0x248>)
 800ba30:	3206      	adds	r2, #6
 800ba32:	0092      	lsls	r2, r2, #2
 800ba34:	58d3      	ldr	r3, [r2, r3]
 800ba36:	1c18      	adds	r0, r3, #0
 800ba38:	f7f4 fd16 	bl	8000468 <__aeabi_f2uiz>
 800ba3c:	0003      	movs	r3, r0
 800ba3e:	b2d9      	uxtb	r1, r3
 800ba40:	1dfb      	adds	r3, r7, #7
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	2201      	movs	r2, #1
 800ba46:	0018      	movs	r0, r3
 800ba48:	f7fe fada 	bl	800a000 <Encoder_Move_Set>
		TaskManager_Step_Set( TMPOSMT, 0 );
 800ba4c:	230f      	movs	r3, #15
 800ba4e:	18fb      	adds	r3, r7, r3
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	2100      	movs	r1, #0
 800ba54:	0018      	movs	r0, r3
 800ba56:	f001 ff23 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800ba5a:	e008      	b.n	800ba6e <_pos_mt_task_run+0x23e>

	default:
		TaskManager_Step_Set( TMPOSMT, 0 );
 800ba5c:	230f      	movs	r3, #15
 800ba5e:	18fb      	adds	r3, r7, r3
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	2100      	movs	r1, #0
 800ba64:	0018      	movs	r0, r3
 800ba66:	f001 ff1b 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800ba6a:	e000      	b.n	800ba6e <_pos_mt_task_run+0x23e>
		break;
 800ba6c:	46c0      	nop			@ (mov r8, r8)
	}
}
 800ba6e:	46c0      	nop			@ (mov r8, r8)
 800ba70:	46bd      	mov	sp, r7
 800ba72:	b005      	add	sp, #20
 800ba74:	bd90      	pop	{r4, r7, pc}
 800ba76:	46c0      	nop			@ (mov r8, r8)
 800ba78:	20000254 	.word	0x20000254
 800ba7c:	41a00000 	.word	0x41a00000
 800ba80:	42c80000 	.word	0x42c80000
 800ba84:	40400000 	.word	0x40400000
 800ba88:	42c20000 	.word	0x42c20000
 800ba8c:	000009c4 	.word	0x000009c4

0800ba90 <_Pos_TASK>:

//MAIN ENC MOTOR TASK

void _Pos_TASK(void)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	af00      	add	r7, sp, #0
	sPosMtTask[_e_PosMtNum_Pri].TASK(_e_PosMtNum_Pri);
 800ba94:	4b07      	ldr	r3, [pc, #28]	@ (800bab4 <_Pos_TASK+0x24>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2000      	movs	r0, #0
 800ba9a:	4798      	blx	r3
	if( sPosConf.cfgMotor == _e_PosMtCfg_Dual ){
 800ba9c:	4b06      	ldr	r3, [pc, #24]	@ (800bab8 <_Pos_TASK+0x28>)
 800ba9e:	789b      	ldrb	r3, [r3, #2]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d103      	bne.n	800baac <_Pos_TASK+0x1c>
		sPosMtTask[_e_PosMtNum_Sec].TASK(_e_PosMtNum_Sec);
 800baa4:	4b03      	ldr	r3, [pc, #12]	@ (800bab4 <_Pos_TASK+0x24>)
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	2001      	movs	r0, #1
 800baaa:	4798      	blx	r3
	}
}
 800baac:	46c0      	nop			@ (mov r8, r8)
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	46c0      	nop			@ (mov r8, r8)
 800bab4:	20000244 	.word	0x20000244
 800bab8:	2000024c 	.word	0x2000024c

0800babc <_pos_task_init>:
	_e_pos_task_init_calib_OK,
	_e_pos_task_init_calib_ERROR,
}t_pos_task_init;

static void _pos_task_init(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	af00      	add	r7, sp, #0
	TaskManager_Set( TMPOS , _e_pos_task_init );
 800bac0:	2100      	movs	r1, #0
 800bac2:	200b      	movs	r0, #11
 800bac4:	f001 fe64 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( TMPOS ) == false ){
 800bac8:	200b      	movs	r0, #11
 800baca:	f001 fec7 	bl	800d85c <TaskManager_First_Get>
 800bace:	1e03      	subs	r3, r0, #0
 800bad0:	d10c      	bne.n	800baec <_pos_task_init+0x30>
		TaskManager_First_Set( TMPOS );
 800bad2:	200b      	movs	r0, #11
 800bad4:	f001 fe78 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( TMPOS, _e_pos_task_init_wait_cmd );
 800bad8:	2100      	movs	r1, #0
 800bada:	200b      	movs	r0, #11
 800badc:	f001 fee0 	bl	800d8a0 <TaskManager_Step_Set>
		sPosSts.calibAttempts = 0;
 800bae0:	4b67      	ldr	r3, [pc, #412]	@ (800bc80 <_pos_task_init+0x1c4>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	705a      	strb	r2, [r3, #1]
		sPosSts.status = _e_PosSts_WaitCfgMotor;
 800bae6:	4b66      	ldr	r3, [pc, #408]	@ (800bc80 <_pos_task_init+0x1c4>)
 800bae8:	2200      	movs	r2, #0
 800baea:	701a      	strb	r2, [r3, #0]
	}

	switch( TaskManager_Step_Get( TMPOS ) )
 800baec:	200b      	movs	r0, #11
 800baee:	f001 ff01 	bl	800d8f4 <TaskManager_Step_Get>
 800baf2:	0003      	movs	r3, r0
 800baf4:	2b0a      	cmp	r3, #10
 800baf6:	d900      	bls.n	800bafa <_pos_task_init+0x3e>
 800baf8:	e0b2      	b.n	800bc60 <_pos_task_init+0x1a4>
 800bafa:	009a      	lsls	r2, r3, #2
 800bafc:	4b61      	ldr	r3, [pc, #388]	@ (800bc84 <_pos_task_init+0x1c8>)
 800bafe:	18d3      	adds	r3, r2, r3
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	469f      	mov	pc, r3
	{
	case _e_pos_task_init_wait_cmd:
		if( sPosConf.cfgMotor != _e_PosMtCfg_Unknown )
 800bb04:	4b60      	ldr	r3, [pc, #384]	@ (800bc88 <_pos_task_init+0x1cc>)
 800bb06:	789b      	ldrb	r3, [r3, #2]
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d100      	bne.n	800bb0e <_pos_task_init+0x52>
 800bb0c:	e0ad      	b.n	800bc6a <_pos_task_init+0x1ae>
		{
			if( sPosConf.cfgMotor == _e_PosMtCfg_Single ){
 800bb0e:	4b5e      	ldr	r3, [pc, #376]	@ (800bc88 <_pos_task_init+0x1cc>)
 800bb10:	789b      	ldrb	r3, [r3, #2]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d104      	bne.n	800bb20 <_pos_task_init+0x64>
				TaskManager_Step_Set( TMPOS , _e_pos_task_init_calib_mt1_start );
 800bb16:	2103      	movs	r1, #3
 800bb18:	200b      	movs	r0, #11
 800bb1a:	f001 fec1 	bl	800d8a0 <TaskManager_Step_Set>
 800bb1e:	e003      	b.n	800bb28 <_pos_task_init+0x6c>
			}
			else{
				TaskManager_Step_Set( TMPOS ,_e_pos_task_init_calib_mt_dual_align );
 800bb20:	2101      	movs	r1, #1
 800bb22:	200b      	movs	r0, #11
 800bb24:	f001 febc 	bl	800d8a0 <TaskManager_Step_Set>
			}
			sPosSts.status = _e_PosSts_CalibRunning;
 800bb28:	4b55      	ldr	r3, [pc, #340]	@ (800bc80 <_pos_task_init+0x1c4>)
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800bb2e:	e09c      	b.n	800bc6a <_pos_task_init+0x1ae>

	case _e_pos_task_init_calib_mt_dual_align:
//		Encoder_Move_ToStop( _e_EncNum_Pri , _e_EncDir_Left );
//		Encoder_Move_ToStop( _e_EncNum_Sec , _e_EncDir_Right );
		TaskManager_Step_Inc( TMPOS );
 800bb30:	200b      	movs	r0, #11
 800bb32:	f001 ff03 	bl	800d93c <TaskManager_Step_Inc>
		break;
 800bb36:	e09f      	b.n	800bc78 <_pos_task_init+0x1bc>

	case _e_pos_task_init_calib_mt_dual_align_wait:
		if( Encoder_Stat( _e_EncNum_Pri ) == _e_EncSts_Idle &&
 800bb38:	2000      	movs	r0, #0
 800bb3a:	f7fe fb57 	bl	800a1ec <Encoder_Stat>
 800bb3e:	0003      	movs	r3, r0
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d000      	beq.n	800bb46 <_pos_task_init+0x8a>
 800bb44:	e093      	b.n	800bc6e <_pos_task_init+0x1b2>
			Encoder_Stat( _e_EncNum_Sec ) == _e_EncSts_Idle	)
 800bb46:	2001      	movs	r0, #1
 800bb48:	f7fe fb50 	bl	800a1ec <Encoder_Stat>
 800bb4c:	0003      	movs	r3, r0
		if( Encoder_Stat( _e_EncNum_Pri ) == _e_EncSts_Idle &&
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d000      	beq.n	800bb54 <_pos_task_init+0x98>
 800bb52:	e08c      	b.n	800bc6e <_pos_task_init+0x1b2>
		{
			TaskManager_Step_Set( TMPOS , _e_pos_task_init_calib_mt1_start );
 800bb54:	2103      	movs	r1, #3
 800bb56:	200b      	movs	r0, #11
 800bb58:	f001 fea2 	bl	800d8a0 <TaskManager_Step_Set>
		}
		break;
 800bb5c:	e087      	b.n	800bc6e <_pos_task_init+0x1b2>

	case _e_pos_task_init_calib_mt1_start:
		Encoder_Cali_Set( _e_EncNum_Pri , _e_EncStopMode_On );
 800bb5e:	2101      	movs	r1, #1
 800bb60:	2000      	movs	r0, #0
 800bb62:	f7fe fa0f 	bl	8009f84 <Encoder_Cali_Set>
		TaskManager_Step_Inc( TMPOS );
 800bb66:	200b      	movs	r0, #11
 800bb68:	f001 fee8 	bl	800d93c <TaskManager_Step_Inc>
		break;
 800bb6c:	e084      	b.n	800bc78 <_pos_task_init+0x1bc>

	case _e_pos_task_init_calib_mt1_wait:
		if( Encoder_Cali_Get(_e_EncNum_Pri) != _e_EncCalib_Running )
 800bb6e:	2000      	movs	r0, #0
 800bb70:	f7fe f9f0 	bl	8009f54 <Encoder_Cali_Get>
 800bb74:	0003      	movs	r3, r0
 800bb76:	2b05      	cmp	r3, #5
 800bb78:	d100      	bne.n	800bb7c <_pos_task_init+0xc0>
 800bb7a:	e07a      	b.n	800bc72 <_pos_task_init+0x1b6>
		{
			if( sPosConf.cfgMotor == _e_PosMtCfg_Single ){
 800bb7c:	4b42      	ldr	r3, [pc, #264]	@ (800bc88 <_pos_task_init+0x1cc>)
 800bb7e:	789b      	ldrb	r3, [r3, #2]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d103      	bne.n	800bb8c <_pos_task_init+0xd0>
				TaskManager_Step_Inc( TMPOS );
 800bb84:	200b      	movs	r0, #11
 800bb86:	f001 fed9 	bl	800d93c <TaskManager_Step_Inc>
			}
			else{
				TaskManager_Step_Set( TMPOS, _e_pos_task_init_calib_mt2_start );
			}
		}
		break;
 800bb8a:	e072      	b.n	800bc72 <_pos_task_init+0x1b6>
				TaskManager_Step_Set( TMPOS, _e_pos_task_init_calib_mt2_start );
 800bb8c:	2106      	movs	r1, #6
 800bb8e:	200b      	movs	r0, #11
 800bb90:	f001 fe86 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800bb94:	e06d      	b.n	800bc72 <_pos_task_init+0x1b6>

	case _e_pos_task_init_calib_mt1_check:
		if( Encoder_Cali_Get(_e_EncNum_Pri) == _e_EncCalib_Ok ){
 800bb96:	2000      	movs	r0, #0
 800bb98:	f7fe f9dc 	bl	8009f54 <Encoder_Cali_Get>
 800bb9c:	1e03      	subs	r3, r0, #0
 800bb9e:	d104      	bne.n	800bbaa <_pos_task_init+0xee>
			TaskManager_Step_Set( TMPOS, _e_pos_task_init_calib_OK );
 800bba0:	2109      	movs	r1, #9
 800bba2:	200b      	movs	r0, #11
 800bba4:	f001 fe7c 	bl	800d8a0 <TaskManager_Step_Set>
			}
			else{
				TaskManager_Step_Set( TMPOS, _e_pos_task_init_calib_mt1_start );
			}
		}
		break;
 800bba8:	e066      	b.n	800bc78 <_pos_task_init+0x1bc>
			sPosSts.calibAttempts++;
 800bbaa:	4b35      	ldr	r3, [pc, #212]	@ (800bc80 <_pos_task_init+0x1c4>)
 800bbac:	785b      	ldrb	r3, [r3, #1]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	4b33      	ldr	r3, [pc, #204]	@ (800bc80 <_pos_task_init+0x1c4>)
 800bbb4:	705a      	strb	r2, [r3, #1]
			if( sPosSts.calibAttempts >= POS_CALIB_ATTEMPTS){
 800bbb6:	4b32      	ldr	r3, [pc, #200]	@ (800bc80 <_pos_task_init+0x1c4>)
 800bbb8:	785b      	ldrb	r3, [r3, #1]
 800bbba:	2b04      	cmp	r3, #4
 800bbbc:	d904      	bls.n	800bbc8 <_pos_task_init+0x10c>
				TaskManager_Step_Set( TMPOS, _e_pos_task_init_calib_ERROR );
 800bbbe:	210a      	movs	r1, #10
 800bbc0:	200b      	movs	r0, #11
 800bbc2:	f001 fe6d 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800bbc6:	e057      	b.n	800bc78 <_pos_task_init+0x1bc>
				TaskManager_Step_Set( TMPOS, _e_pos_task_init_calib_mt1_start );
 800bbc8:	2103      	movs	r1, #3
 800bbca:	200b      	movs	r0, #11
 800bbcc:	f001 fe68 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800bbd0:	e052      	b.n	800bc78 <_pos_task_init+0x1bc>

	case _e_pos_task_init_calib_mt2_start:
		Encoder_Cali_Set( _e_EncNum_Sec , _e_EncStopMode_On );
 800bbd2:	2101      	movs	r1, #1
 800bbd4:	2001      	movs	r0, #1
 800bbd6:	f7fe f9d5 	bl	8009f84 <Encoder_Cali_Set>
		TaskManager_Step_Inc( TMPOS );
 800bbda:	200b      	movs	r0, #11
 800bbdc:	f001 feae 	bl	800d93c <TaskManager_Step_Inc>
		break;
 800bbe0:	e04a      	b.n	800bc78 <_pos_task_init+0x1bc>

	case _e_pos_task_init_calib_mt2_wait:
		if( Encoder_Cali_Get(_e_EncNum_Sec) != _e_EncCalib_Running ){
 800bbe2:	2001      	movs	r0, #1
 800bbe4:	f7fe f9b6 	bl	8009f54 <Encoder_Cali_Get>
 800bbe8:	0003      	movs	r3, r0
 800bbea:	2b05      	cmp	r3, #5
 800bbec:	d043      	beq.n	800bc76 <_pos_task_init+0x1ba>
			TaskManager_Step_Set( TMPOS, _e_pos_task_init_calib_mt2_check );
 800bbee:	2108      	movs	r1, #8
 800bbf0:	200b      	movs	r0, #11
 800bbf2:	f001 fe55 	bl	800d8a0 <TaskManager_Step_Set>
		}
		break;
 800bbf6:	e03e      	b.n	800bc76 <_pos_task_init+0x1ba>

	case _e_pos_task_init_calib_mt2_check:
		if( Encoder_Cali_Get(_e_EncNum_Pri) == _e_EncCalib_Ok &&
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	f7fe f9ab 	bl	8009f54 <Encoder_Cali_Get>
 800bbfe:	1e03      	subs	r3, r0, #0
 800bc00:	d109      	bne.n	800bc16 <_pos_task_init+0x15a>
			Encoder_Cali_Get(_e_EncNum_Sec) == _e_EncCalib_Ok	)
 800bc02:	2001      	movs	r0, #1
 800bc04:	f7fe f9a6 	bl	8009f54 <Encoder_Cali_Get>
 800bc08:	1e03      	subs	r3, r0, #0
		if( Encoder_Cali_Get(_e_EncNum_Pri) == _e_EncCalib_Ok &&
 800bc0a:	d104      	bne.n	800bc16 <_pos_task_init+0x15a>
		{
			TaskManager_Step_Set( TMPOS, _e_pos_task_init_calib_OK );
 800bc0c:	2109      	movs	r1, #9
 800bc0e:	200b      	movs	r0, #11
 800bc10:	f001 fe46 	bl	800d8a0 <TaskManager_Step_Set>
			else{
				//TaskManager_Step_Set( TMPOS, _e_pos_task_init_calib_mt1_start );
				TaskManager_Step_Set( TMPOS, _e_pos_task_init_wait_cmd );
			}
		}
		break;
 800bc14:	e030      	b.n	800bc78 <_pos_task_init+0x1bc>
			sPosSts.calibAttempts++;
 800bc16:	4b1a      	ldr	r3, [pc, #104]	@ (800bc80 <_pos_task_init+0x1c4>)
 800bc18:	785b      	ldrb	r3, [r3, #1]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	b2da      	uxtb	r2, r3
 800bc1e:	4b18      	ldr	r3, [pc, #96]	@ (800bc80 <_pos_task_init+0x1c4>)
 800bc20:	705a      	strb	r2, [r3, #1]
			if( sPosSts.calibAttempts >= POS_CALIB_ATTEMPTS){
 800bc22:	4b17      	ldr	r3, [pc, #92]	@ (800bc80 <_pos_task_init+0x1c4>)
 800bc24:	785b      	ldrb	r3, [r3, #1]
 800bc26:	2b04      	cmp	r3, #4
 800bc28:	d904      	bls.n	800bc34 <_pos_task_init+0x178>
				TaskManager_Step_Set( TMPOS, _e_pos_task_init_calib_ERROR );
 800bc2a:	210a      	movs	r1, #10
 800bc2c:	200b      	movs	r0, #11
 800bc2e:	f001 fe37 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800bc32:	e021      	b.n	800bc78 <_pos_task_init+0x1bc>
				TaskManager_Step_Set( TMPOS, _e_pos_task_init_wait_cmd );
 800bc34:	2100      	movs	r1, #0
 800bc36:	200b      	movs	r0, #11
 800bc38:	f001 fe32 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800bc3c:	e01c      	b.n	800bc78 <_pos_task_init+0x1bc>

	case _e_pos_task_init_calib_OK:
		TaskManager_Go( TMPOS  , _pos_task_mode );
 800bc3e:	4b13      	ldr	r3, [pc, #76]	@ (800bc8c <_pos_task_init+0x1d0>)
 800bc40:	0019      	movs	r1, r3
 800bc42:	200b      	movs	r0, #11
 800bc44:	f001 fd56 	bl	800d6f4 <TaskManager_Go>
		break;
 800bc48:	e016      	b.n	800bc78 <_pos_task_init+0x1bc>

	case _e_pos_task_init_calib_ERROR:
		sPosConf.cfgMotor = _e_PosMtCfg_Unknown;
 800bc4a:	4b0f      	ldr	r3, [pc, #60]	@ (800bc88 <_pos_task_init+0x1cc>)
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	709a      	strb	r2, [r3, #2]
		sPosSts.status = _e_PosSts_CalibERROR_WaitCfgMotor;
 800bc50:	4b0b      	ldr	r3, [pc, #44]	@ (800bc80 <_pos_task_init+0x1c4>)
 800bc52:	2202      	movs	r2, #2
 800bc54:	701a      	strb	r2, [r3, #0]
		TaskManager_Step_Set( TMPOS, _e_pos_task_init_wait_cmd );
 800bc56:	2100      	movs	r1, #0
 800bc58:	200b      	movs	r0, #11
 800bc5a:	f001 fe21 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800bc5e:	e00b      	b.n	800bc78 <_pos_task_init+0x1bc>

	default:
		TaskManager_Step_Set( TMPOS, _e_pos_task_init_wait_cmd );
 800bc60:	2100      	movs	r1, #0
 800bc62:	200b      	movs	r0, #11
 800bc64:	f001 fe1c 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800bc68:	e006      	b.n	800bc78 <_pos_task_init+0x1bc>
		break;
 800bc6a:	46c0      	nop			@ (mov r8, r8)
 800bc6c:	e004      	b.n	800bc78 <_pos_task_init+0x1bc>
		break;
 800bc6e:	46c0      	nop			@ (mov r8, r8)
 800bc70:	e002      	b.n	800bc78 <_pos_task_init+0x1bc>
		break;
 800bc72:	46c0      	nop			@ (mov r8, r8)
 800bc74:	e000      	b.n	800bc78 <_pos_task_init+0x1bc>
		break;
 800bc76:	46c0      	nop			@ (mov r8, r8)
	}
}
 800bc78:	46c0      	nop			@ (mov r8, r8)
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	46c0      	nop			@ (mov r8, r8)
 800bc80:	20000250 	.word	0x20000250
 800bc84:	0800ff4c 	.word	0x0800ff4c
 800bc88:	2000024c 	.word	0x2000024c
 800bc8c:	0800bc91 	.word	0x0800bc91

0800bc90 <_pos_task_mode>:

static void _pos_task_mode(void)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	af00      	add	r7, sp, #0
	TaskManager_Set( TMPOS , _e_pos_task_mode );
 800bc94:	2101      	movs	r1, #1
 800bc96:	200b      	movs	r0, #11
 800bc98:	f001 fd7a 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( TMPOS ) == false ){
 800bc9c:	200b      	movs	r0, #11
 800bc9e:	f001 fddd 	bl	800d85c <TaskManager_First_Get>
 800bca2:	1e03      	subs	r3, r0, #0
 800bca4:	d10c      	bne.n	800bcc0 <_pos_task_mode+0x30>
		TaskManager_First_Set( TMPOS );
 800bca6:	200b      	movs	r0, #11
 800bca8:	f001 fd8e 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( TMPOS, 0 );
 800bcac:	2100      	movs	r1, #0
 800bcae:	200b      	movs	r0, #11
 800bcb0:	f001 fdf6 	bl	800d8a0 <TaskManager_Step_Set>
		sPosMtTask[_e_PosMtNum_Pri].TASK = _pos_mt_task_init;
 800bcb4:	4b22      	ldr	r3, [pc, #136]	@ (800bd40 <_pos_task_mode+0xb0>)
 800bcb6:	4a23      	ldr	r2, [pc, #140]	@ (800bd44 <_pos_task_mode+0xb4>)
 800bcb8:	601a      	str	r2, [r3, #0]
		sPosMtTask[_e_PosMtNum_Sec].TASK = _pos_mt_task_init;
 800bcba:	4b21      	ldr	r3, [pc, #132]	@ (800bd40 <_pos_task_mode+0xb0>)
 800bcbc:	4a21      	ldr	r2, [pc, #132]	@ (800bd44 <_pos_task_mode+0xb4>)
 800bcbe:	605a      	str	r2, [r3, #4]
	}

	switch( TaskManager_Step_Get( TMPOS ) )
 800bcc0:	200b      	movs	r0, #11
 800bcc2:	f001 fe17 	bl	800d8f4 <TaskManager_Step_Get>
 800bcc6:	1e03      	subs	r3, r0, #0
 800bcc8:	d002      	beq.n	800bcd0 <_pos_task_mode+0x40>
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d00c      	beq.n	800bce8 <_pos_task_mode+0x58>
 800bcce:	e02e      	b.n	800bd2e <_pos_task_mode+0x9e>
	{
	case 0:
		if( sPosConf.cfgMode != _e_PosModCfg_Unknown ){
 800bcd0:	4b1d      	ldr	r3, [pc, #116]	@ (800bd48 <_pos_task_mode+0xb8>)
 800bcd2:	78db      	ldrb	r3, [r3, #3]
 800bcd4:	2b03      	cmp	r3, #3
 800bcd6:	d003      	beq.n	800bce0 <_pos_task_mode+0x50>
			TaskManager_Step_Inc( TMPOS );
 800bcd8:	200b      	movs	r0, #11
 800bcda:	f001 fe2f 	bl	800d93c <TaskManager_Step_Inc>
		}
		else{
			sPosSts.status = _e_PosSts_WaitCfgMode;
		}
		break;
 800bcde:	e02b      	b.n	800bd38 <_pos_task_mode+0xa8>
			sPosSts.status = _e_PosSts_WaitCfgMode;
 800bce0:	4b1a      	ldr	r3, [pc, #104]	@ (800bd4c <_pos_task_mode+0xbc>)
 800bce2:	2203      	movs	r2, #3
 800bce4:	701a      	strb	r2, [r3, #0]
		break;
 800bce6:	e027      	b.n	800bd38 <_pos_task_mode+0xa8>

	case 1:
		if( sPosConf.cfgMode == _e_PosModCfg_PC )
 800bce8:	4b17      	ldr	r3, [pc, #92]	@ (800bd48 <_pos_task_mode+0xb8>)
 800bcea:	78db      	ldrb	r3, [r3, #3]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d105      	bne.n	800bcfc <_pos_task_mode+0x6c>
			TaskManager_Go( TMPOS  , _pos_task_mode_pc );
 800bcf0:	4b17      	ldr	r3, [pc, #92]	@ (800bd50 <_pos_task_mode+0xc0>)
 800bcf2:	0019      	movs	r1, r3
 800bcf4:	200b      	movs	r0, #11
 800bcf6:	f001 fcfd 	bl	800d6f4 <TaskManager_Go>
			TaskManager_Go( TMPOS  , _pos_task_mode_nf );
		else if( sPosConf.cfgMode == _e_PosModCfg_NA )
			TaskManager_Go( TMPOS  , _pos_task_mode_na );
		else
			TaskManager_Step_Set( TMPOS, 0 );
		break;
 800bcfa:	e01d      	b.n	800bd38 <_pos_task_mode+0xa8>
		else if( sPosConf.cfgMode == _e_PosModCfg_NF )
 800bcfc:	4b12      	ldr	r3, [pc, #72]	@ (800bd48 <_pos_task_mode+0xb8>)
 800bcfe:	78db      	ldrb	r3, [r3, #3]
 800bd00:	2b02      	cmp	r3, #2
 800bd02:	d105      	bne.n	800bd10 <_pos_task_mode+0x80>
			TaskManager_Go( TMPOS  , _pos_task_mode_nf );
 800bd04:	4b13      	ldr	r3, [pc, #76]	@ (800bd54 <_pos_task_mode+0xc4>)
 800bd06:	0019      	movs	r1, r3
 800bd08:	200b      	movs	r0, #11
 800bd0a:	f001 fcf3 	bl	800d6f4 <TaskManager_Go>
		break;
 800bd0e:	e013      	b.n	800bd38 <_pos_task_mode+0xa8>
		else if( sPosConf.cfgMode == _e_PosModCfg_NA )
 800bd10:	4b0d      	ldr	r3, [pc, #52]	@ (800bd48 <_pos_task_mode+0xb8>)
 800bd12:	78db      	ldrb	r3, [r3, #3]
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d105      	bne.n	800bd24 <_pos_task_mode+0x94>
			TaskManager_Go( TMPOS  , _pos_task_mode_na );
 800bd18:	4b0f      	ldr	r3, [pc, #60]	@ (800bd58 <_pos_task_mode+0xc8>)
 800bd1a:	0019      	movs	r1, r3
 800bd1c:	200b      	movs	r0, #11
 800bd1e:	f001 fce9 	bl	800d6f4 <TaskManager_Go>
		break;
 800bd22:	e009      	b.n	800bd38 <_pos_task_mode+0xa8>
			TaskManager_Step_Set( TMPOS, 0 );
 800bd24:	2100      	movs	r1, #0
 800bd26:	200b      	movs	r0, #11
 800bd28:	f001 fdba 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800bd2c:	e004      	b.n	800bd38 <_pos_task_mode+0xa8>

	default:
		TaskManager_Step_Set( TMPOS, 0 );
 800bd2e:	2100      	movs	r1, #0
 800bd30:	200b      	movs	r0, #11
 800bd32:	f001 fdb5 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800bd36:	46c0      	nop			@ (mov r8, r8)
	}
}
 800bd38:	46c0      	nop			@ (mov r8, r8)
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	46c0      	nop			@ (mov r8, r8)
 800bd40:	20000244 	.word	0x20000244
 800bd44:	0800b7c5 	.word	0x0800b7c5
 800bd48:	2000024c 	.word	0x2000024c
 800bd4c:	20000250 	.word	0x20000250
 800bd50:	0800bd5d 	.word	0x0800bd5d
 800bd54:	0800bdf5 	.word	0x0800bdf5
 800bd58:	0800be8d 	.word	0x0800be8d

0800bd5c <_pos_task_mode_pc>:

static void _pos_task_mode_pc(void)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	af00      	add	r7, sp, #0
	TaskManager_Set( TMPOS , _e_pos_task_mode_pc );
 800bd60:	2102      	movs	r1, #2
 800bd62:	200b      	movs	r0, #11
 800bd64:	f001 fd14 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( TMPOS ) == false ){
 800bd68:	200b      	movs	r0, #11
 800bd6a:	f001 fd77 	bl	800d85c <TaskManager_First_Get>
 800bd6e:	1e03      	subs	r3, r0, #0
 800bd70:	d109      	bne.n	800bd86 <_pos_task_mode_pc+0x2a>
		TaskManager_First_Set( TMPOS );
 800bd72:	200b      	movs	r0, #11
 800bd74:	f001 fd28 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( TMPOS, 0 );
 800bd78:	2100      	movs	r1, #0
 800bd7a:	200b      	movs	r0, #11
 800bd7c:	f001 fd90 	bl	800d8a0 <TaskManager_Step_Set>
		sPosSts.status = _e_PosSts_ModePcRunning;
 800bd80:	4b18      	ldr	r3, [pc, #96]	@ (800bde4 <_pos_task_mode_pc+0x88>)
 800bd82:	2204      	movs	r2, #4
 800bd84:	701a      	strb	r2, [r3, #0]
	}

	switch( TaskManager_Step_Get( TMPOS ) )
 800bd86:	200b      	movs	r0, #11
 800bd88:	f001 fdb4 	bl	800d8f4 <TaskManager_Step_Get>
 800bd8c:	0003      	movs	r3, r0
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d024      	beq.n	800bddc <_pos_task_mode_pc+0x80>
 800bd92:	dc1e      	bgt.n	800bdd2 <_pos_task_mode_pc+0x76>
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d002      	beq.n	800bd9e <_pos_task_mode_pc+0x42>
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d010      	beq.n	800bdbe <_pos_task_mode_pc+0x62>
 800bd9c:	e019      	b.n	800bdd2 <_pos_task_mode_pc+0x76>
	{
	case 0:
		sPosRun.valSys[_e_PosMtNum_Pri] = Encoder_Move_Get( _e_EncNum_Pri );
 800bd9e:	2000      	movs	r0, #0
 800bda0:	f7fe f9fa 	bl	800a198 <Encoder_Move_Get>
 800bda4:	1c02      	adds	r2, r0, #0
 800bda6:	4b10      	ldr	r3, [pc, #64]	@ (800bde8 <_pos_task_mode_pc+0x8c>)
 800bda8:	601a      	str	r2, [r3, #0]
		sPosRun.valSys[_e_PosMtNum_Sec] = Encoder_Move_Get( _e_EncNum_Sec );
 800bdaa:	2001      	movs	r0, #1
 800bdac:	f7fe f9f4 	bl	800a198 <Encoder_Move_Get>
 800bdb0:	1c02      	adds	r2, r0, #0
 800bdb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bde8 <_pos_task_mode_pc+0x8c>)
 800bdb4:	605a      	str	r2, [r3, #4]
		TaskManager_Step_Inc(TMPOS);
 800bdb6:	200b      	movs	r0, #11
 800bdb8:	f001 fdc0 	bl	800d93c <TaskManager_Step_Inc>
		break;
 800bdbc:	e00f      	b.n	800bdde <_pos_task_mode_pc+0x82>
	case 1:
		sPosMtTask[_e_PosMtNum_Pri].TASK = _pos_mt_task_run;
 800bdbe:	4b0b      	ldr	r3, [pc, #44]	@ (800bdec <_pos_task_mode_pc+0x90>)
 800bdc0:	4a0b      	ldr	r2, [pc, #44]	@ (800bdf0 <_pos_task_mode_pc+0x94>)
 800bdc2:	601a      	str	r2, [r3, #0]
		sPosMtTask[_e_PosMtNum_Sec].TASK = _pos_mt_task_run;
 800bdc4:	4b09      	ldr	r3, [pc, #36]	@ (800bdec <_pos_task_mode_pc+0x90>)
 800bdc6:	4a0a      	ldr	r2, [pc, #40]	@ (800bdf0 <_pos_task_mode_pc+0x94>)
 800bdc8:	605a      	str	r2, [r3, #4]
		TaskManager_Step_Inc(TMPOS);
 800bdca:	200b      	movs	r0, #11
 800bdcc:	f001 fdb6 	bl	800d93c <TaskManager_Step_Inc>
		break;
 800bdd0:	e005      	b.n	800bdde <_pos_task_mode_pc+0x82>
	case 2:
		break;

	default:
		TaskManager_Step_Set( TMPOS, 0 );
 800bdd2:	2100      	movs	r1, #0
 800bdd4:	200b      	movs	r0, #11
 800bdd6:	f001 fd63 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800bdda:	e000      	b.n	800bdde <_pos_task_mode_pc+0x82>
		break;
 800bddc:	46c0      	nop			@ (mov r8, r8)
	}
}
 800bdde:	46c0      	nop			@ (mov r8, r8)
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	20000250 	.word	0x20000250
 800bde8:	20000254 	.word	0x20000254
 800bdec:	20000244 	.word	0x20000244
 800bdf0:	0800b831 	.word	0x0800b831

0800bdf4 <_pos_task_mode_nf>:

static void _pos_task_mode_nf(void)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	af00      	add	r7, sp, #0
	TaskManager_Set( TMPOS , _e_pos_task_mode_nf );
 800bdf8:	2103      	movs	r1, #3
 800bdfa:	200b      	movs	r0, #11
 800bdfc:	f001 fcc8 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( TMPOS ) == false ){
 800be00:	200b      	movs	r0, #11
 800be02:	f001 fd2b 	bl	800d85c <TaskManager_First_Get>
 800be06:	1e03      	subs	r3, r0, #0
 800be08:	d109      	bne.n	800be1e <_pos_task_mode_nf+0x2a>
		TaskManager_First_Set( TMPOS );
 800be0a:	200b      	movs	r0, #11
 800be0c:	f001 fcdc 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( TMPOS, 0 );
 800be10:	2100      	movs	r1, #0
 800be12:	200b      	movs	r0, #11
 800be14:	f001 fd44 	bl	800d8a0 <TaskManager_Step_Set>
		sPosSts.status = _e_PosSts_ModeNfRunning;
 800be18:	4b18      	ldr	r3, [pc, #96]	@ (800be7c <_pos_task_mode_nf+0x88>)
 800be1a:	2206      	movs	r2, #6
 800be1c:	701a      	strb	r2, [r3, #0]
	}

	switch( TaskManager_Step_Get( TMPOS ) )
 800be1e:	200b      	movs	r0, #11
 800be20:	f001 fd68 	bl	800d8f4 <TaskManager_Step_Get>
 800be24:	0003      	movs	r3, r0
 800be26:	2b02      	cmp	r3, #2
 800be28:	d024      	beq.n	800be74 <_pos_task_mode_nf+0x80>
 800be2a:	dc1e      	bgt.n	800be6a <_pos_task_mode_nf+0x76>
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <_pos_task_mode_nf+0x42>
 800be30:	2b01      	cmp	r3, #1
 800be32:	d010      	beq.n	800be56 <_pos_task_mode_nf+0x62>
 800be34:	e019      	b.n	800be6a <_pos_task_mode_nf+0x76>
	{
	case 0:
		sPosRun.valSys[_e_PosMtNum_Pri] = Encoder_Move_Get( _e_EncNum_Pri );
 800be36:	2000      	movs	r0, #0
 800be38:	f7fe f9ae 	bl	800a198 <Encoder_Move_Get>
 800be3c:	1c02      	adds	r2, r0, #0
 800be3e:	4b10      	ldr	r3, [pc, #64]	@ (800be80 <_pos_task_mode_nf+0x8c>)
 800be40:	601a      	str	r2, [r3, #0]
		sPosRun.valSys[_e_PosMtNum_Sec] = Encoder_Move_Get( _e_EncNum_Sec );
 800be42:	2001      	movs	r0, #1
 800be44:	f7fe f9a8 	bl	800a198 <Encoder_Move_Get>
 800be48:	1c02      	adds	r2, r0, #0
 800be4a:	4b0d      	ldr	r3, [pc, #52]	@ (800be80 <_pos_task_mode_nf+0x8c>)
 800be4c:	605a      	str	r2, [r3, #4]
		TaskManager_Step_Inc(TMPOS);
 800be4e:	200b      	movs	r0, #11
 800be50:	f001 fd74 	bl	800d93c <TaskManager_Step_Inc>
		break;
 800be54:	e00f      	b.n	800be76 <_pos_task_mode_nf+0x82>
	case 1:
		sPosMtTask[_e_PosMtNum_Pri].TASK = _pos_mt_task_run;
 800be56:	4b0b      	ldr	r3, [pc, #44]	@ (800be84 <_pos_task_mode_nf+0x90>)
 800be58:	4a0b      	ldr	r2, [pc, #44]	@ (800be88 <_pos_task_mode_nf+0x94>)
 800be5a:	601a      	str	r2, [r3, #0]
		sPosMtTask[_e_PosMtNum_Sec].TASK = _pos_mt_task_run;
 800be5c:	4b09      	ldr	r3, [pc, #36]	@ (800be84 <_pos_task_mode_nf+0x90>)
 800be5e:	4a0a      	ldr	r2, [pc, #40]	@ (800be88 <_pos_task_mode_nf+0x94>)
 800be60:	605a      	str	r2, [r3, #4]
		TaskManager_Step_Inc(TMPOS);
 800be62:	200b      	movs	r0, #11
 800be64:	f001 fd6a 	bl	800d93c <TaskManager_Step_Inc>
		break;
 800be68:	e005      	b.n	800be76 <_pos_task_mode_nf+0x82>
	case 2:
		break;
	default:
		TaskManager_Step_Set( TMPOS, 0 );
 800be6a:	2100      	movs	r1, #0
 800be6c:	200b      	movs	r0, #11
 800be6e:	f001 fd17 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800be72:	e000      	b.n	800be76 <_pos_task_mode_nf+0x82>
		break;
 800be74:	46c0      	nop			@ (mov r8, r8)
	}
}
 800be76:	46c0      	nop			@ (mov r8, r8)
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	20000250 	.word	0x20000250
 800be80:	20000254 	.word	0x20000254
 800be84:	20000244 	.word	0x20000244
 800be88:	0800b831 	.word	0x0800b831

0800be8c <_pos_task_mode_na>:

static void _pos_task_mode_na(void)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	af00      	add	r7, sp, #0
	TaskManager_Set( TMPOS , _e_pos_task_mode_na );
 800be90:	2104      	movs	r1, #4
 800be92:	200b      	movs	r0, #11
 800be94:	f001 fc7c 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( TMPOS ) == false ){
 800be98:	200b      	movs	r0, #11
 800be9a:	f001 fcdf 	bl	800d85c <TaskManager_First_Get>
 800be9e:	1e03      	subs	r3, r0, #0
 800bea0:	d109      	bne.n	800beb6 <_pos_task_mode_na+0x2a>
		TaskManager_First_Set( TMPOS );
 800bea2:	200b      	movs	r0, #11
 800bea4:	f001 fc90 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( TMPOS, 0 );
 800bea8:	2100      	movs	r1, #0
 800beaa:	200b      	movs	r0, #11
 800beac:	f001 fcf8 	bl	800d8a0 <TaskManager_Step_Set>
		sPosSts.status = _e_PosSts_ModeNaRunning;
 800beb0:	4b18      	ldr	r3, [pc, #96]	@ (800bf14 <_pos_task_mode_na+0x88>)
 800beb2:	2205      	movs	r2, #5
 800beb4:	701a      	strb	r2, [r3, #0]
	}

	switch( TaskManager_Step_Get( TMPOS ) )
 800beb6:	200b      	movs	r0, #11
 800beb8:	f001 fd1c 	bl	800d8f4 <TaskManager_Step_Get>
 800bebc:	0003      	movs	r3, r0
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d024      	beq.n	800bf0c <_pos_task_mode_na+0x80>
 800bec2:	dc1e      	bgt.n	800bf02 <_pos_task_mode_na+0x76>
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d002      	beq.n	800bece <_pos_task_mode_na+0x42>
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d010      	beq.n	800beee <_pos_task_mode_na+0x62>
 800becc:	e019      	b.n	800bf02 <_pos_task_mode_na+0x76>
	{
	case 0:
		sPosRun.valSys[_e_PosMtNum_Pri] = Encoder_Move_Get( _e_EncNum_Pri );
 800bece:	2000      	movs	r0, #0
 800bed0:	f7fe f962 	bl	800a198 <Encoder_Move_Get>
 800bed4:	1c02      	adds	r2, r0, #0
 800bed6:	4b10      	ldr	r3, [pc, #64]	@ (800bf18 <_pos_task_mode_na+0x8c>)
 800bed8:	601a      	str	r2, [r3, #0]
		sPosRun.valSys[_e_PosMtNum_Sec] = Encoder_Move_Get( _e_EncNum_Sec );
 800beda:	2001      	movs	r0, #1
 800bedc:	f7fe f95c 	bl	800a198 <Encoder_Move_Get>
 800bee0:	1c02      	adds	r2, r0, #0
 800bee2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf18 <_pos_task_mode_na+0x8c>)
 800bee4:	605a      	str	r2, [r3, #4]
		TaskManager_Step_Inc(TMPOS);
 800bee6:	200b      	movs	r0, #11
 800bee8:	f001 fd28 	bl	800d93c <TaskManager_Step_Inc>
		break;
 800beec:	e00f      	b.n	800bf0e <_pos_task_mode_na+0x82>
	case 1:
		sPosMtTask[_e_PosMtNum_Pri].TASK = _pos_mt_task_run;
 800beee:	4b0b      	ldr	r3, [pc, #44]	@ (800bf1c <_pos_task_mode_na+0x90>)
 800bef0:	4a0b      	ldr	r2, [pc, #44]	@ (800bf20 <_pos_task_mode_na+0x94>)
 800bef2:	601a      	str	r2, [r3, #0]
		sPosMtTask[_e_PosMtNum_Sec].TASK = _pos_mt_task_run;
 800bef4:	4b09      	ldr	r3, [pc, #36]	@ (800bf1c <_pos_task_mode_na+0x90>)
 800bef6:	4a0a      	ldr	r2, [pc, #40]	@ (800bf20 <_pos_task_mode_na+0x94>)
 800bef8:	605a      	str	r2, [r3, #4]
		TaskManager_Step_Inc(TMPOS);
 800befa:	200b      	movs	r0, #11
 800befc:	f001 fd1e 	bl	800d93c <TaskManager_Step_Inc>
		break;
 800bf00:	e005      	b.n	800bf0e <_pos_task_mode_na+0x82>
	case 2:
		break;
	default:
		TaskManager_Step_Set( TMPOS, 0 );
 800bf02:	2100      	movs	r1, #0
 800bf04:	200b      	movs	r0, #11
 800bf06:	f001 fccb 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800bf0a:	e000      	b.n	800bf0e <_pos_task_mode_na+0x82>
		break;
 800bf0c:	46c0      	nop			@ (mov r8, r8)
	}
}
 800bf0e:	46c0      	nop			@ (mov r8, r8)
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	20000250 	.word	0x20000250
 800bf18:	20000254 	.word	0x20000254
 800bf1c:	20000244 	.word	0x20000244
 800bf20:	0800b831 	.word	0x0800b831

0800bf24 <Position_Init>:


/*** ** * Exported Functions * ** ***/

void Position_Init(void)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	af00      	add	r7, sp, #0
	TaskManager_Clear( TMPOSMT1 );
 800bf28:	2008      	movs	r0, #8
 800bf2a:	f001 fbfb 	bl	800d724 <TaskManager_Clear>
	TaskManager_Clear( TMPOSMT2 );
 800bf2e:	2009      	movs	r0, #9
 800bf30:	f001 fbf8 	bl	800d724 <TaskManager_Clear>
	TaskManager_Clear( TMPOSMTX );
 800bf34:	200a      	movs	r0, #10
 800bf36:	f001 fbf5 	bl	800d724 <TaskManager_Clear>
	TaskManager_Clear( TMPOS  );
 800bf3a:	200b      	movs	r0, #11
 800bf3c:	f001 fbf2 	bl	800d724 <TaskManager_Clear>

	TaskManager_Go( TMPOSMT1 , NULL );
 800bf40:	2100      	movs	r1, #0
 800bf42:	2008      	movs	r0, #8
 800bf44:	f001 fbd6 	bl	800d6f4 <TaskManager_Go>
	TaskManager_Go( TMPOSMT2 , NULL );
 800bf48:	2100      	movs	r1, #0
 800bf4a:	2009      	movs	r0, #9
 800bf4c:	f001 fbd2 	bl	800d6f4 <TaskManager_Go>
	TaskManager_Go( TMPOSMTX , _Pos_TASK );
 800bf50:	4b0e      	ldr	r3, [pc, #56]	@ (800bf8c <Position_Init+0x68>)
 800bf52:	0019      	movs	r1, r3
 800bf54:	200a      	movs	r0, #10
 800bf56:	f001 fbcd 	bl	800d6f4 <TaskManager_Go>
	TaskManager_Go( TMPOS  , _pos_task_init );
 800bf5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bf90 <Position_Init+0x6c>)
 800bf5c:	0019      	movs	r1, r3
 800bf5e:	200b      	movs	r0, #11
 800bf60:	f001 fbc8 	bl	800d6f4 <TaskManager_Go>

	sPosMtTask[_e_PosMtNum_Pri].TASK = _pos_mt_task_init;
 800bf64:	4b0b      	ldr	r3, [pc, #44]	@ (800bf94 <Position_Init+0x70>)
 800bf66:	4a0c      	ldr	r2, [pc, #48]	@ (800bf98 <Position_Init+0x74>)
 800bf68:	601a      	str	r2, [r3, #0]
	sPosMtTask[_e_PosMtNum_Sec].TASK = _pos_mt_task_init;
 800bf6a:	4b0a      	ldr	r3, [pc, #40]	@ (800bf94 <Position_Init+0x70>)
 800bf6c:	4a0a      	ldr	r2, [pc, #40]	@ (800bf98 <Position_Init+0x74>)
 800bf6e:	605a      	str	r2, [r3, #4]

	Encoder_Init();
 800bf70:	f7fd fc66 	bl	8009840 <Encoder_Init>

	sPosConf.cfgMotorCalibFlag = false;
 800bf74:	4b09      	ldr	r3, [pc, #36]	@ (800bf9c <Position_Init+0x78>)
 800bf76:	2200      	movs	r2, #0
 800bf78:	701a      	strb	r2, [r3, #0]
	sPosConf.cfgMotor = _e_PosMtCfg_Unknown;
 800bf7a:	4b08      	ldr	r3, [pc, #32]	@ (800bf9c <Position_Init+0x78>)
 800bf7c:	2202      	movs	r2, #2
 800bf7e:	709a      	strb	r2, [r3, #2]
	sPosConf.cfgMode = _e_PosModCfg_Unknown;
 800bf80:	4b06      	ldr	r3, [pc, #24]	@ (800bf9c <Position_Init+0x78>)
 800bf82:	2203      	movs	r2, #3
 800bf84:	70da      	strb	r2, [r3, #3]
}
 800bf86:	46c0      	nop			@ (mov r8, r8)
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	0800ba91 	.word	0x0800ba91
 800bf90:	0800babd 	.word	0x0800babd
 800bf94:	20000244 	.word	0x20000244
 800bf98:	0800b7c5 	.word	0x0800b7c5
 800bf9c:	2000024c 	.word	0x2000024c

0800bfa0 <Position_Config_Motor>:


tPosRet Position_Config_Motor( tPosMtCfg motorQty )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	0002      	movs	r2, r0
 800bfa8:	1dfb      	adds	r3, r7, #7
 800bfaa:	701a      	strb	r2, [r3, #0]
	if( motorQty < _e_PosMtCfg_Unknown ){
 800bfac:	1dfb      	adds	r3, r7, #7
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d80d      	bhi.n	800bfd0 <Position_Config_Motor+0x30>
		sPosConf.cfgMotorCalibFlag = true;
 800bfb4:	4b09      	ldr	r3, [pc, #36]	@ (800bfdc <Position_Config_Motor+0x3c>)
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	701a      	strb	r2, [r3, #0]
		sPosConf.cfgMotor = motorQty;
 800bfba:	4b08      	ldr	r3, [pc, #32]	@ (800bfdc <Position_Config_Motor+0x3c>)
 800bfbc:	1dfa      	adds	r2, r7, #7
 800bfbe:	7812      	ldrb	r2, [r2, #0]
 800bfc0:	709a      	strb	r2, [r3, #2]
		TaskManager_Go( TMPOS  , _pos_task_init );
 800bfc2:	4b07      	ldr	r3, [pc, #28]	@ (800bfe0 <Position_Config_Motor+0x40>)
 800bfc4:	0019      	movs	r1, r3
 800bfc6:	200b      	movs	r0, #11
 800bfc8:	f001 fb94 	bl	800d6f4 <TaskManager_Go>
	}
	else{
		return _e_PosRet_MotorCfgNotExist;
	}
	return _e_PosRet_Ok;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	e000      	b.n	800bfd2 <Position_Config_Motor+0x32>
		return _e_PosRet_MotorCfgNotExist;
 800bfd0:	2301      	movs	r3, #1
}
 800bfd2:	0018      	movs	r0, r3
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	b002      	add	sp, #8
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	46c0      	nop			@ (mov r8, r8)
 800bfdc:	2000024c 	.word	0x2000024c
 800bfe0:	0800babd 	.word	0x0800babd

0800bfe4 <Position_Config_Mode>:
{
	return sPosConf.cfgMode;
}

tPosRet Position_Config_Mode( tPosModCfg modeConfig )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	0002      	movs	r2, r0
 800bfec:	1dfb      	adds	r3, r7, #7
 800bfee:	701a      	strb	r2, [r3, #0]
	if( modeConfig < _e_PosModCfg_Unknown ){
 800bff0:	1dfb      	adds	r3, r7, #7
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d837      	bhi.n	800c068 <Position_Config_Mode+0x84>
		sPosConf.cgfModeChangeFlag = true;
 800bff8:	4b1f      	ldr	r3, [pc, #124]	@ (800c078 <Position_Config_Mode+0x94>)
 800bffa:	2201      	movs	r2, #1
 800bffc:	705a      	strb	r2, [r3, #1]
		sPosConf.cfgMode = modeConfig;
 800bffe:	4b1e      	ldr	r3, [pc, #120]	@ (800c078 <Position_Config_Mode+0x94>)
 800c000:	1dfa      	adds	r2, r7, #7
 800c002:	7812      	ldrb	r2, [r2, #0]
 800c004:	70da      	strb	r2, [r3, #3]

		if( sPosConf.cfgMotor == _e_PosMtCfg_Single ){
 800c006:	4b1c      	ldr	r3, [pc, #112]	@ (800c078 <Position_Config_Mode+0x94>)
 800c008:	789b      	ldrb	r3, [r3, #2]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d110      	bne.n	800c030 <Position_Config_Mode+0x4c>
			if( Encoder_Cali_Get(_e_EncNum_Pri) == _e_EncCalib_Ok ){
 800c00e:	2000      	movs	r0, #0
 800c010:	f7fd ffa0 	bl	8009f54 <Encoder_Cali_Get>
 800c014:	1e03      	subs	r3, r0, #0
 800c016:	d105      	bne.n	800c024 <Position_Config_Mode+0x40>
				TaskManager_Go( TMPOS  , _pos_task_mode );
 800c018:	4b18      	ldr	r3, [pc, #96]	@ (800c07c <Position_Config_Mode+0x98>)
 800c01a:	0019      	movs	r1, r3
 800c01c:	200b      	movs	r0, #11
 800c01e:	f001 fb69 	bl	800d6f4 <TaskManager_Go>
 800c022:	e023      	b.n	800c06c <Position_Config_Mode+0x88>
			}
			else{
				TaskManager_Go( TMPOS  , _pos_task_init );
 800c024:	4b16      	ldr	r3, [pc, #88]	@ (800c080 <Position_Config_Mode+0x9c>)
 800c026:	0019      	movs	r1, r3
 800c028:	200b      	movs	r0, #11
 800c02a:	f001 fb63 	bl	800d6f4 <TaskManager_Go>
 800c02e:	e01d      	b.n	800c06c <Position_Config_Mode+0x88>
			}
		}
		else if( sPosConf.cfgMotor == _e_PosMtCfg_Dual ){
 800c030:	4b11      	ldr	r3, [pc, #68]	@ (800c078 <Position_Config_Mode+0x94>)
 800c032:	789b      	ldrb	r3, [r3, #2]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d115      	bne.n	800c064 <Position_Config_Mode+0x80>
			if( Encoder_Cali_Get(_e_EncNum_Pri) == _e_EncCalib_Ok &&
 800c038:	2000      	movs	r0, #0
 800c03a:	f7fd ff8b 	bl	8009f54 <Encoder_Cali_Get>
 800c03e:	1e03      	subs	r3, r0, #0
 800c040:	d10a      	bne.n	800c058 <Position_Config_Mode+0x74>
				Encoder_Cali_Get(_e_EncNum_Sec) == _e_EncCalib_Ok	){
 800c042:	2001      	movs	r0, #1
 800c044:	f7fd ff86 	bl	8009f54 <Encoder_Cali_Get>
 800c048:	1e03      	subs	r3, r0, #0
			if( Encoder_Cali_Get(_e_EncNum_Pri) == _e_EncCalib_Ok &&
 800c04a:	d105      	bne.n	800c058 <Position_Config_Mode+0x74>
				TaskManager_Go( TMPOS  , _pos_task_mode );
 800c04c:	4b0b      	ldr	r3, [pc, #44]	@ (800c07c <Position_Config_Mode+0x98>)
 800c04e:	0019      	movs	r1, r3
 800c050:	200b      	movs	r0, #11
 800c052:	f001 fb4f 	bl	800d6f4 <TaskManager_Go>
 800c056:	e009      	b.n	800c06c <Position_Config_Mode+0x88>
			}
			else{
				TaskManager_Go( TMPOS  , _pos_task_init );
 800c058:	4b09      	ldr	r3, [pc, #36]	@ (800c080 <Position_Config_Mode+0x9c>)
 800c05a:	0019      	movs	r1, r3
 800c05c:	200b      	movs	r0, #11
 800c05e:	f001 fb49 	bl	800d6f4 <TaskManager_Go>
 800c062:	e003      	b.n	800c06c <Position_Config_Mode+0x88>
			}
		}
		else{
			return _e_PosRet_MotorNotConfig;
 800c064:	2302      	movs	r3, #2
 800c066:	e002      	b.n	800c06e <Position_Config_Mode+0x8a>
		}
	}
	else{
		return _e_PosRet_ModeNotExist;
 800c068:	2303      	movs	r3, #3
 800c06a:	e000      	b.n	800c06e <Position_Config_Mode+0x8a>
	}
	return _e_PosRet_Ok;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	0018      	movs	r0, r3
 800c070:	46bd      	mov	sp, r7
 800c072:	b002      	add	sp, #8
 800c074:	bd80      	pop	{r7, pc}
 800c076:	46c0      	nop			@ (mov r8, r8)
 800c078:	2000024c 	.word	0x2000024c
 800c07c:	0800bc91 	.word	0x0800bc91
 800c080:	0800babd 	.word	0x0800babd

0800c084 <Position_Status>:

tPosSts	Position_Status(void)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	af00      	add	r7, sp, #0
	return sPosSts.status;
 800c088:	4b02      	ldr	r3, [pc, #8]	@ (800c094 <Position_Status+0x10>)
 800c08a:	781b      	ldrb	r3, [r3, #0]
}
 800c08c:	0018      	movs	r0, r3
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	46c0      	nop			@ (mov r8, r8)
 800c094:	20000250 	.word	0x20000250

0800c098 <Position_PC_Set>:


tPosRet	Position_PC_Set(uint8_t valMt1 , uint8_t valMt2 )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	0002      	movs	r2, r0
 800c0a0:	1dfb      	adds	r3, r7, #7
 800c0a2:	701a      	strb	r2, [r3, #0]
 800c0a4:	1dbb      	adds	r3, r7, #6
 800c0a6:	1c0a      	adds	r2, r1, #0
 800c0a8:	701a      	strb	r2, [r3, #0]
	if( sPosConf.cfgMode != _e_PosModCfg_PC ){
 800c0aa:	4b35      	ldr	r3, [pc, #212]	@ (800c180 <Position_PC_Set+0xe8>)
 800c0ac:	78db      	ldrb	r3, [r3, #3]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d02c      	beq.n	800c10c <Position_PC_Set+0x74>
		sPosConf.cfgMode = _e_PosModCfg_PC;
 800c0b2:	4b33      	ldr	r3, [pc, #204]	@ (800c180 <Position_PC_Set+0xe8>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	70da      	strb	r2, [r3, #3]
		sPosRun.valUser[_e_PosMtNum_Pri] = 100 - ( valMt1 * POSITION_PC_MAX_ANG / 100 );
 800c0b8:	1dfb      	adds	r3, r7, #7
 800c0ba:	781a      	ldrb	r2, [r3, #0]
 800c0bc:	0013      	movs	r3, r2
 800c0be:	005b      	lsls	r3, r3, #1
 800c0c0:	189b      	adds	r3, r3, r2
 800c0c2:	011b      	lsls	r3, r3, #4
 800c0c4:	001a      	movs	r2, r3
 800c0c6:	2364      	movs	r3, #100	@ 0x64
 800c0c8:	4259      	negs	r1, r3
 800c0ca:	0010      	movs	r0, r2
 800c0cc:	f7f4 f8a6 	bl	800021c <__divsi3>
 800c0d0:	0003      	movs	r3, r0
 800c0d2:	3364      	adds	r3, #100	@ 0x64
 800c0d4:	0018      	movs	r0, r3
 800c0d6:	f7f5 f86f 	bl	80011b8 <__aeabi_i2f>
 800c0da:	1c02      	adds	r2, r0, #0
 800c0dc:	4b29      	ldr	r3, [pc, #164]	@ (800c184 <Position_PC_Set+0xec>)
 800c0de:	619a      	str	r2, [r3, #24]
		sPosRun.valUser[_e_PosMtNum_Sec] = 100 - ( valMt2 * POSITION_PC_MAX_ANG / 100 );
 800c0e0:	1dbb      	adds	r3, r7, #6
 800c0e2:	781a      	ldrb	r2, [r3, #0]
 800c0e4:	0013      	movs	r3, r2
 800c0e6:	005b      	lsls	r3, r3, #1
 800c0e8:	189b      	adds	r3, r3, r2
 800c0ea:	011b      	lsls	r3, r3, #4
 800c0ec:	001a      	movs	r2, r3
 800c0ee:	2364      	movs	r3, #100	@ 0x64
 800c0f0:	4259      	negs	r1, r3
 800c0f2:	0010      	movs	r0, r2
 800c0f4:	f7f4 f892 	bl	800021c <__divsi3>
 800c0f8:	0003      	movs	r3, r0
 800c0fa:	3364      	adds	r3, #100	@ 0x64
 800c0fc:	0018      	movs	r0, r3
 800c0fe:	f7f5 f85b 	bl	80011b8 <__aeabi_i2f>
 800c102:	1c02      	adds	r2, r0, #0
 800c104:	4b1f      	ldr	r3, [pc, #124]	@ (800c184 <Position_PC_Set+0xec>)
 800c106:	61da      	str	r2, [r3, #28]
		return _e_PosRet_ModeWrong;
 800c108:	2304      	movs	r3, #4
 800c10a:	e034      	b.n	800c176 <Position_PC_Set+0xde>
	}

	if( valMt1 > 100 )return _e_PosRet_ValueOutOfLimit;
 800c10c:	1dfb      	adds	r3, r7, #7
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	2b64      	cmp	r3, #100	@ 0x64
 800c112:	d901      	bls.n	800c118 <Position_PC_Set+0x80>
 800c114:	2305      	movs	r3, #5
 800c116:	e02e      	b.n	800c176 <Position_PC_Set+0xde>
	if( valMt2 > 100 )return _e_PosRet_ValueOutOfLimit;
 800c118:	1dbb      	adds	r3, r7, #6
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b64      	cmp	r3, #100	@ 0x64
 800c11e:	d901      	bls.n	800c124 <Position_PC_Set+0x8c>
 800c120:	2305      	movs	r3, #5
 800c122:	e028      	b.n	800c176 <Position_PC_Set+0xde>

	sPosRun.valUser[_e_PosMtNum_Pri] = 100 - ( valMt1 * POSITION_PC_MAX_ANG / 100 );
 800c124:	1dfb      	adds	r3, r7, #7
 800c126:	781a      	ldrb	r2, [r3, #0]
 800c128:	0013      	movs	r3, r2
 800c12a:	005b      	lsls	r3, r3, #1
 800c12c:	189b      	adds	r3, r3, r2
 800c12e:	011b      	lsls	r3, r3, #4
 800c130:	001a      	movs	r2, r3
 800c132:	2364      	movs	r3, #100	@ 0x64
 800c134:	4259      	negs	r1, r3
 800c136:	0010      	movs	r0, r2
 800c138:	f7f4 f870 	bl	800021c <__divsi3>
 800c13c:	0003      	movs	r3, r0
 800c13e:	3364      	adds	r3, #100	@ 0x64
 800c140:	0018      	movs	r0, r3
 800c142:	f7f5 f839 	bl	80011b8 <__aeabi_i2f>
 800c146:	1c02      	adds	r2, r0, #0
 800c148:	4b0e      	ldr	r3, [pc, #56]	@ (800c184 <Position_PC_Set+0xec>)
 800c14a:	619a      	str	r2, [r3, #24]
	sPosRun.valUser[_e_PosMtNum_Sec] = 100 - ( valMt2 * POSITION_PC_MAX_ANG / 100 );
 800c14c:	1dbb      	adds	r3, r7, #6
 800c14e:	781a      	ldrb	r2, [r3, #0]
 800c150:	0013      	movs	r3, r2
 800c152:	005b      	lsls	r3, r3, #1
 800c154:	189b      	adds	r3, r3, r2
 800c156:	011b      	lsls	r3, r3, #4
 800c158:	001a      	movs	r2, r3
 800c15a:	2364      	movs	r3, #100	@ 0x64
 800c15c:	4259      	negs	r1, r3
 800c15e:	0010      	movs	r0, r2
 800c160:	f7f4 f85c 	bl	800021c <__divsi3>
 800c164:	0003      	movs	r3, r0
 800c166:	3364      	adds	r3, #100	@ 0x64
 800c168:	0018      	movs	r0, r3
 800c16a:	f7f5 f825 	bl	80011b8 <__aeabi_i2f>
 800c16e:	1c02      	adds	r2, r0, #0
 800c170:	4b04      	ldr	r3, [pc, #16]	@ (800c184 <Position_PC_Set+0xec>)
 800c172:	61da      	str	r2, [r3, #28]

	//Timing_Set( _e_Timing_Position_CorrectionTime_Mt1+_e_PosMtNum_Pri , POSITION_CORRECT_TIME_M );
	//Timing_Set( _e_Timing_Position_CorrectionTime_Mt1+_e_PosMtNum_Sec , POSITION_CORRECT_TIME_M );

	return _e_PosRet_Ok;
 800c174:	2300      	movs	r3, #0
}
 800c176:	0018      	movs	r0, r3
 800c178:	46bd      	mov	sp, r7
 800c17a:	b002      	add	sp, #8
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	46c0      	nop			@ (mov r8, r8)
 800c180:	2000024c 	.word	0x2000024c
 800c184:	20000254 	.word	0x20000254

0800c188 <Position_NA_Entrance_Set>:
	return _e_PosRet_Ok;
}

//*******************************************************************************
tPosRet	Position_NA_Entrance_Set(tPosModeNaSts stsEntrance )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	0002      	movs	r2, r0
 800c190:	1dfb      	adds	r3, r7, #7
 800c192:	701a      	strb	r2, [r3, #0]
	uint8_t valMt1;

	if( sPosConf.cfgMode != _e_PosModCfg_NA ){
 800c194:	4b1a      	ldr	r3, [pc, #104]	@ (800c200 <Position_NA_Entrance_Set+0x78>)
 800c196:	78db      	ldrb	r3, [r3, #3]
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d001      	beq.n	800c1a0 <Position_NA_Entrance_Set+0x18>
		return _e_PosRet_ModeWrong;
 800c19c:	2304      	movs	r3, #4
 800c19e:	e02a      	b.n	800c1f6 <Position_NA_Entrance_Set+0x6e>
	}

	if( Encoder_Stat( _e_EncNum_Sec ) != _e_EncSts_Idle	) {
 800c1a0:	2001      	movs	r0, #1
 800c1a2:	f7fe f823 	bl	800a1ec <Encoder_Stat>
 800c1a6:	0003      	movs	r3, r0
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d001      	beq.n	800c1b0 <Position_NA_Entrance_Set+0x28>
		return _e_PosRet_FlagAlreadyClosed;
 800c1ac:	2306      	movs	r3, #6
 800c1ae:	e022      	b.n	800c1f6 <Position_NA_Entrance_Set+0x6e>
	}

	if( stsEntrance == _e_PosModeNfSts_Free )
 800c1b0:	1dfb      	adds	r3, r7, #7
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d104      	bne.n	800c1c2 <Position_NA_Entrance_Set+0x3a>
		valMt1 = 0;
 800c1b8:	230f      	movs	r3, #15
 800c1ba:	18fb      	adds	r3, r7, r3
 800c1bc:	2200      	movs	r2, #0
 800c1be:	701a      	strb	r2, [r3, #0]
 800c1c0:	e003      	b.n	800c1ca <Position_NA_Entrance_Set+0x42>
	else
		valMt1 = 100;
 800c1c2:	230f      	movs	r3, #15
 800c1c4:	18fb      	adds	r3, r7, r3
 800c1c6:	2264      	movs	r2, #100	@ 0x64
 800c1c8:	701a      	strb	r2, [r3, #0]

	sPosRun.valUser[_e_PosMtNum_Pri] = 100 - ( valMt1 * POSITION_PC_MAX_ANG / 100 );
 800c1ca:	230f      	movs	r3, #15
 800c1cc:	18fb      	adds	r3, r7, r3
 800c1ce:	781a      	ldrb	r2, [r3, #0]
 800c1d0:	0013      	movs	r3, r2
 800c1d2:	005b      	lsls	r3, r3, #1
 800c1d4:	189b      	adds	r3, r3, r2
 800c1d6:	011b      	lsls	r3, r3, #4
 800c1d8:	001a      	movs	r2, r3
 800c1da:	2364      	movs	r3, #100	@ 0x64
 800c1dc:	4259      	negs	r1, r3
 800c1de:	0010      	movs	r0, r2
 800c1e0:	f7f4 f81c 	bl	800021c <__divsi3>
 800c1e4:	0003      	movs	r3, r0
 800c1e6:	3364      	adds	r3, #100	@ 0x64
 800c1e8:	0018      	movs	r0, r3
 800c1ea:	f7f4 ffe5 	bl	80011b8 <__aeabi_i2f>
 800c1ee:	1c02      	adds	r2, r0, #0
 800c1f0:	4b04      	ldr	r3, [pc, #16]	@ (800c204 <Position_NA_Entrance_Set+0x7c>)
 800c1f2:	619a      	str	r2, [r3, #24]

	//Timing_Set( _e_Timing_Position_CorrectionTime_Mt1+_e_PosMtNum_Pri , POSITION_CORRECT_TIME_M );
	//Timing_Set( _e_Timing_Position_CorrectionTime_Mt1+_e_PosMtNum_Sec , POSITION_CORRECT_TIME_M );

	return _e_PosRet_Ok;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	0018      	movs	r0, r3
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	b004      	add	sp, #16
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	46c0      	nop			@ (mov r8, r8)
 800c200:	2000024c 	.word	0x2000024c
 800c204:	20000254 	.word	0x20000254

0800c208 <Position_NA_Exit_Set>:

tPosRet	Position_NA_Exit_Set(tPosModeNaSts stsExit )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	0002      	movs	r2, r0
 800c210:	1dfb      	adds	r3, r7, #7
 800c212:	701a      	strb	r2, [r3, #0]
	uint8_t valMt2;

	if( sPosConf.cfgMode != _e_PosModCfg_NA ){
 800c214:	4b1a      	ldr	r3, [pc, #104]	@ (800c280 <Position_NA_Exit_Set+0x78>)
 800c216:	78db      	ldrb	r3, [r3, #3]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d001      	beq.n	800c220 <Position_NA_Exit_Set+0x18>
		return _e_PosRet_ModeWrong;
 800c21c:	2304      	movs	r3, #4
 800c21e:	e02a      	b.n	800c276 <Position_NA_Exit_Set+0x6e>
	}

	if( Encoder_Stat( _e_EncNum_Pri ) != _e_EncSts_Idle	) {
 800c220:	2000      	movs	r0, #0
 800c222:	f7fd ffe3 	bl	800a1ec <Encoder_Stat>
 800c226:	0003      	movs	r3, r0
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d001      	beq.n	800c230 <Position_NA_Exit_Set+0x28>
		return _e_PosRet_FlagAlreadyClosed;
 800c22c:	2306      	movs	r3, #6
 800c22e:	e022      	b.n	800c276 <Position_NA_Exit_Set+0x6e>
	}

	if( stsExit == _e_PosModeNfSts_Free )
 800c230:	1dfb      	adds	r3, r7, #7
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d104      	bne.n	800c242 <Position_NA_Exit_Set+0x3a>
		valMt2 = 0;
 800c238:	230f      	movs	r3, #15
 800c23a:	18fb      	adds	r3, r7, r3
 800c23c:	2200      	movs	r2, #0
 800c23e:	701a      	strb	r2, [r3, #0]
 800c240:	e003      	b.n	800c24a <Position_NA_Exit_Set+0x42>
	else
		valMt2 = 100;
 800c242:	230f      	movs	r3, #15
 800c244:	18fb      	adds	r3, r7, r3
 800c246:	2264      	movs	r2, #100	@ 0x64
 800c248:	701a      	strb	r2, [r3, #0]

	sPosRun.valUser[_e_PosMtNum_Sec] = 100 - ( valMt2 * POSITION_PC_MAX_ANG / 100 );
 800c24a:	230f      	movs	r3, #15
 800c24c:	18fb      	adds	r3, r7, r3
 800c24e:	781a      	ldrb	r2, [r3, #0]
 800c250:	0013      	movs	r3, r2
 800c252:	005b      	lsls	r3, r3, #1
 800c254:	189b      	adds	r3, r3, r2
 800c256:	011b      	lsls	r3, r3, #4
 800c258:	001a      	movs	r2, r3
 800c25a:	2364      	movs	r3, #100	@ 0x64
 800c25c:	4259      	negs	r1, r3
 800c25e:	0010      	movs	r0, r2
 800c260:	f7f3 ffdc 	bl	800021c <__divsi3>
 800c264:	0003      	movs	r3, r0
 800c266:	3364      	adds	r3, #100	@ 0x64
 800c268:	0018      	movs	r0, r3
 800c26a:	f7f4 ffa5 	bl	80011b8 <__aeabi_i2f>
 800c26e:	1c02      	adds	r2, r0, #0
 800c270:	4b04      	ldr	r3, [pc, #16]	@ (800c284 <Position_NA_Exit_Set+0x7c>)
 800c272:	61da      	str	r2, [r3, #28]

	//Timing_Set( _e_Timing_Position_CorrectionTime_Mt1+_e_PosMtNum_Pri , POSITION_CORRECT_TIME_M );
	//Timing_Set( _e_Timing_Position_CorrectionTime_Mt1+_e_PosMtNum_Sec , POSITION_CORRECT_TIME_M );

	return _e_PosRet_Ok;
 800c274:	2300      	movs	r3, #0
}
 800c276:	0018      	movs	r0, r3
 800c278:	46bd      	mov	sp, r7
 800c27a:	b004      	add	sp, #16
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	46c0      	nop			@ (mov r8, r8)
 800c280:	2000024c 	.word	0x2000024c
 800c284:	20000254 	.word	0x20000254

0800c288 <Position_NF_Set>:

//*******************************************************************************

tPosRet	Position_NF_Set(tPosModeNfSts sts)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	0002      	movs	r2, r0
 800c290:	1dfb      	adds	r3, r7, #7
 800c292:	701a      	strb	r2, [r3, #0]
	if( sPosConf.cfgMode != _e_PosModCfg_NF )
 800c294:	4b15      	ldr	r3, [pc, #84]	@ (800c2ec <Position_NF_Set+0x64>)
 800c296:	78db      	ldrb	r3, [r3, #3]
 800c298:	2b02      	cmp	r3, #2
 800c29a:	d001      	beq.n	800c2a0 <Position_NF_Set+0x18>
	{
		return _e_PosRet_ModeWrong;
 800c29c:	2304      	movs	r3, #4
 800c29e:	e021      	b.n	800c2e4 <Position_NF_Set+0x5c>
	}

	switch( (uint8_t)sts)
 800c2a0:	1dfb      	adds	r3, r7, #7
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d013      	beq.n	800c2d0 <Position_NF_Set+0x48>
 800c2a8:	dc19      	bgt.n	800c2de <Position_NF_Set+0x56>
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <Position_NF_Set+0x2c>
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d007      	beq.n	800c2c2 <Position_NF_Set+0x3a>
 800c2b2:	e014      	b.n	800c2de <Position_NF_Set+0x56>
	{
		case _e_PosModeNfSts_Close:
			sPosRun.valUser[_e_PosMtNum_Pri] = 50;
 800c2b4:	4b0e      	ldr	r3, [pc, #56]	@ (800c2f0 <Position_NF_Set+0x68>)
 800c2b6:	4a0f      	ldr	r2, [pc, #60]	@ (800c2f4 <Position_NF_Set+0x6c>)
 800c2b8:	619a      	str	r2, [r3, #24]
			sPosRun.valUser[_e_PosMtNum_Sec] = 50;
 800c2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c2f0 <Position_NF_Set+0x68>)
 800c2bc:	4a0d      	ldr	r2, [pc, #52]	@ (800c2f4 <Position_NF_Set+0x6c>)
 800c2be:	61da      	str	r2, [r3, #28]
		break;
 800c2c0:	e00f      	b.n	800c2e2 <Position_NF_Set+0x5a>

		case _e_PosModeNfSts_Entrance:
			sPosRun.valUser[_e_PosMtNum_Pri] = 100;
 800c2c2:	4b0b      	ldr	r3, [pc, #44]	@ (800c2f0 <Position_NF_Set+0x68>)
 800c2c4:	4a0c      	ldr	r2, [pc, #48]	@ (800c2f8 <Position_NF_Set+0x70>)
 800c2c6:	619a      	str	r2, [r3, #24]
			sPosRun.valUser[_e_PosMtNum_Sec] = 0;
 800c2c8:	4b09      	ldr	r3, [pc, #36]	@ (800c2f0 <Position_NF_Set+0x68>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	61da      	str	r2, [r3, #28]
		break;
 800c2ce:	e008      	b.n	800c2e2 <Position_NF_Set+0x5a>

		case _e_PosModeNfSts_Exit:
			sPosRun.valUser[_e_PosMtNum_Pri] = 0;
 800c2d0:	4b07      	ldr	r3, [pc, #28]	@ (800c2f0 <Position_NF_Set+0x68>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	619a      	str	r2, [r3, #24]
			sPosRun.valUser[_e_PosMtNum_Sec] = 100;
 800c2d6:	4b06      	ldr	r3, [pc, #24]	@ (800c2f0 <Position_NF_Set+0x68>)
 800c2d8:	4a07      	ldr	r2, [pc, #28]	@ (800c2f8 <Position_NF_Set+0x70>)
 800c2da:	61da      	str	r2, [r3, #28]
		break;
 800c2dc:	e001      	b.n	800c2e2 <Position_NF_Set+0x5a>

		default:
			return _e_PosRet_ModeWrong;
 800c2de:	2304      	movs	r3, #4
 800c2e0:	e000      	b.n	800c2e4 <Position_NF_Set+0x5c>
		break;
	}

	//Timing_Set( _e_Timing_Position_CorrectionTime_Mt1+_e_PosMtNum_Pri , POSITION_CORRECT_TIME_M );
	//Timing_Set( _e_Timing_Position_CorrectionTime_Mt1+_e_PosMtNum_Sec , POSITION_CORRECT_TIME_M );
	return _e_PosRet_Ok;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	0018      	movs	r0, r3
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	b002      	add	sp, #8
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	2000024c 	.word	0x2000024c
 800c2f0:	20000254 	.word	0x20000254
 800c2f4:	42480000 	.word	0x42480000
 800c2f8:	42c80000 	.word	0x42c80000

0800c2fc <Package_ChecksumCalc>:
#include "protocolo_swing.h"
//#include "usart.h"
#include <stddef.h>

static uint8_t Package_ChecksumCalc(uint8_t *p_pu8Buffer, uint8_t p_u8QuantBufferCalc)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	000a      	movs	r2, r1
 800c306:	1cfb      	adds	r3, r7, #3
 800c308:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800c30a:	210f      	movs	r1, #15
 800c30c:	187b      	adds	r3, r7, r1
 800c30e:	2200      	movs	r2, #0
 800c310:	701a      	strb	r2, [r3, #0]
	uint8_t u8Checksum = 0;
 800c312:	230e      	movs	r3, #14
 800c314:	18fb      	adds	r3, r7, r3
 800c316:	2200      	movs	r2, #0
 800c318:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < p_u8QuantBufferCalc; i++)
 800c31a:	187b      	adds	r3, r7, r1
 800c31c:	2200      	movs	r2, #0
 800c31e:	701a      	strb	r2, [r3, #0]
 800c320:	e010      	b.n	800c344 <Package_ChecksumCalc+0x48>
	{
		u8Checksum ^= p_pu8Buffer[i];
 800c322:	200f      	movs	r0, #15
 800c324:	183b      	adds	r3, r7, r0
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	18d3      	adds	r3, r2, r3
 800c32c:	7819      	ldrb	r1, [r3, #0]
 800c32e:	220e      	movs	r2, #14
 800c330:	18bb      	adds	r3, r7, r2
 800c332:	18ba      	adds	r2, r7, r2
 800c334:	7812      	ldrb	r2, [r2, #0]
 800c336:	404a      	eors	r2, r1
 800c338:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < p_u8QuantBufferCalc; i++)
 800c33a:	183b      	adds	r3, r7, r0
 800c33c:	781a      	ldrb	r2, [r3, #0]
 800c33e:	183b      	adds	r3, r7, r0
 800c340:	3201      	adds	r2, #1
 800c342:	701a      	strb	r2, [r3, #0]
 800c344:	230f      	movs	r3, #15
 800c346:	18fa      	adds	r2, r7, r3
 800c348:	1cfb      	adds	r3, r7, #3
 800c34a:	7812      	ldrb	r2, [r2, #0]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d3e7      	bcc.n	800c322 <Package_ChecksumCalc+0x26>
	}

	return(u8Checksum);
 800c352:	230e      	movs	r3, #14
 800c354:	18fb      	adds	r3, r7, r3
 800c356:	781b      	ldrb	r3, [r3, #0]
}
 800c358:	0018      	movs	r0, r3
 800c35a:	46bd      	mov	sp, r7
 800c35c:	b004      	add	sp, #16
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <Package_Dismount>:


uint8_t Package_Dismount(uint8_t *p_pu8Buffer, uint8_t p_u8Qtd, PortocolPack_t *p_psPacket)
{
 800c360:	b5b0      	push	{r4, r5, r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	607a      	str	r2, [r7, #4]
 800c36a:	230b      	movs	r3, #11
 800c36c:	18fb      	adds	r3, r7, r3
 800c36e:	1c0a      	adds	r2, r1, #0
 800c370:	701a      	strb	r2, [r3, #0]

	uint8_t checksum = 0;
 800c372:	2317      	movs	r3, #23
 800c374:	18fb      	adds	r3, r7, r3
 800c376:	2200      	movs	r2, #0
 800c378:	701a      	strb	r2, [r3, #0]

	if(p_pu8Buffer == NULL || p_psPacket == NULL){
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <Package_Dismount+0x26>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <Package_Dismount+0x2a>
		return(1);
 800c386:	2301      	movs	r3, #1
 800c388:	e04e      	b.n	800c428 <Package_Dismount+0xc8>
	}

	if(p_u8Qtd != PACKET_SIZE){
 800c38a:	230b      	movs	r3, #11
 800c38c:	18fb      	adds	r3, r7, r3
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	2b0c      	cmp	r3, #12
 800c392:	d001      	beq.n	800c398 <Package_Dismount+0x38>
		return(2);
 800c394:	2302      	movs	r3, #2
 800c396:	e047      	b.n	800c428 <Package_Dismount+0xc8>
	}

	if(p_pu8Buffer[INDEX_STX] != STX || p_pu8Buffer[INDEX_ETX] != ETX){
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	781b      	ldrb	r3, [r3, #0]
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	d104      	bne.n	800c3aa <Package_Dismount+0x4a>
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	330b      	adds	r3, #11
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	2b03      	cmp	r3, #3
 800c3a8:	d001      	beq.n	800c3ae <Package_Dismount+0x4e>
		return(3);
 800c3aa:	2303      	movs	r3, #3
 800c3ac:	e03c      	b.n	800c428 <Package_Dismount+0xc8>
	}

	checksum = Package_ChecksumCalc(&p_pu8Buffer[INDEX_CMD], p_u8Qtd - 3);		// STX, CHECKSUM e ETX nao entram no calculo do checksum
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	1c5a      	adds	r2, r3, #1
 800c3b2:	230b      	movs	r3, #11
 800c3b4:	18fb      	adds	r3, r7, r3
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	3b03      	subs	r3, #3
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	2517      	movs	r5, #23
 800c3be:	197c      	adds	r4, r7, r5
 800c3c0:	0019      	movs	r1, r3
 800c3c2:	0010      	movs	r0, r2
 800c3c4:	f7ff ff9a 	bl	800c2fc <Package_ChecksumCalc>
 800c3c8:	0003      	movs	r3, r0
 800c3ca:	7023      	strb	r3, [r4, #0]

	if (p_pu8Buffer[INDEX_BCC] != checksum){
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	330a      	adds	r3, #10
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	197a      	adds	r2, r7, r5
 800c3d4:	7812      	ldrb	r2, [r2, #0]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d001      	beq.n	800c3de <Package_Dismount+0x7e>
		return(4);
 800c3da:	2304      	movs	r3, #4
 800c3dc:	e024      	b.n	800c428 <Package_Dismount+0xc8>
	}

	p_psPacket->u8Cmd 			=	p_pu8Buffer[INDEX_CMD];
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	785a      	ldrb	r2, [r3, #1]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	701a      	strb	r2, [r3, #0]
	p_psPacket->u8Sentido_1 	=	p_pu8Buffer[INDEX_SENTIDO_1];
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	789a      	ldrb	r2, [r3, #2]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	705a      	strb	r2, [r3, #1]
	p_psPacket->u8Posicao_1 	=	p_pu8Buffer[INDEX_POSICAO_1];
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	78da      	ldrb	r2, [r3, #3]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	709a      	strb	r2, [r3, #2]
	p_psPacket->u8Velocidade_1 	=	p_pu8Buffer[INDEX_VELOCIDADE_1];
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	791a      	ldrb	r2, [r3, #4]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	70da      	strb	r2, [r3, #3]
	p_psPacket->u8Sentido_2 	=	p_pu8Buffer[INDEX_SENTIDO_2];
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	795a      	ldrb	r2, [r3, #5]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	711a      	strb	r2, [r3, #4]
	p_psPacket->u8Posicao_2 	=	p_pu8Buffer[INDEX_POSICAO_2];
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	799a      	ldrb	r2, [r3, #6]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	715a      	strb	r2, [r3, #5]
	p_psPacket->u8Velocidade_2 	=	p_pu8Buffer[INDEX_VELOCIDADE_2];
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	79da      	ldrb	r2, [r3, #7]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	719a      	strb	r2, [r3, #6]
	p_psPacket->u8AcessoIn 		=	p_pu8Buffer[INDEX_ACESSO_IN];
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	7a1a      	ldrb	r2, [r3, #8]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	71da      	strb	r2, [r3, #7]
	p_psPacket->u8AcessoOut		=	p_pu8Buffer[INDEX_ACESSO_OUT];
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	7a5a      	ldrb	r2, [r3, #9]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	721a      	strb	r2, [r3, #8]

	return(0);
 800c426:	2300      	movs	r3, #0
}
 800c428:	0018      	movs	r0, r3
 800c42a:	46bd      	mov	sp, r7
 800c42c:	b006      	add	sp, #24
 800c42e:	bdb0      	pop	{r4, r5, r7, pc}

0800c430 <Package_Mount>:

uint8_t Package_Mount(uint8_t *p_pu8Buffer, uint8_t p_u8Qtd, PortocolPack_t p_sPacket)
{
 800c430:	b082      	sub	sp, #8
 800c432:	b5b0      	push	{r4, r5, r7, lr}
 800c434:	b084      	sub	sp, #16
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
 800c43a:	0008      	movs	r0, r1
 800c43c:	2120      	movs	r1, #32
 800c43e:	1879      	adds	r1, r7, r1
 800c440:	600a      	str	r2, [r1, #0]
 800c442:	604b      	str	r3, [r1, #4]
 800c444:	1cfb      	adds	r3, r7, #3
 800c446:	1c02      	adds	r2, r0, #0
 800c448:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0;
 800c44a:	230f      	movs	r3, #15
 800c44c:	18fb      	adds	r3, r7, r3
 800c44e:	2200      	movs	r2, #0
 800c450:	701a      	strb	r2, [r3, #0]

	if(p_pu8Buffer == NULL){
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d101      	bne.n	800c45c <Package_Mount+0x2c>
		return(0);
 800c458:	2300      	movs	r3, #0
 800c45a:	e090      	b.n	800c57e <Package_Mount+0x14e>
	}

	if(p_u8Qtd < PACKET_SIZE){
 800c45c:	1cfb      	adds	r3, r7, #3
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	2b0b      	cmp	r3, #11
 800c462:	d801      	bhi.n	800c468 <Package_Mount+0x38>
		return(0);
 800c464:	2300      	movs	r3, #0
 800c466:	e08a      	b.n	800c57e <Package_Mount+0x14e>
	}

	p_pu8Buffer[i++] = STX;
 800c468:	240f      	movs	r4, #15
 800c46a:	193b      	adds	r3, r7, r4
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	193a      	adds	r2, r7, r4
 800c470:	1c59      	adds	r1, r3, #1
 800c472:	7011      	strb	r1, [r2, #0]
 800c474:	001a      	movs	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	189b      	adds	r3, r3, r2
 800c47a:	2202      	movs	r2, #2
 800c47c:	701a      	strb	r2, [r3, #0]
	p_pu8Buffer[i++] = p_sPacket.u8Cmd;
 800c47e:	193b      	adds	r3, r7, r4
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	193a      	adds	r2, r7, r4
 800c484:	1c59      	adds	r1, r3, #1
 800c486:	7011      	strb	r1, [r2, #0]
 800c488:	001a      	movs	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	189a      	adds	r2, r3, r2
 800c48e:	2020      	movs	r0, #32
 800c490:	183b      	adds	r3, r7, r0
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	7013      	strb	r3, [r2, #0]
	p_pu8Buffer[i++] = p_sPacket.u8Sentido_1;
 800c496:	193b      	adds	r3, r7, r4
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	193a      	adds	r2, r7, r4
 800c49c:	1c59      	adds	r1, r3, #1
 800c49e:	7011      	strb	r1, [r2, #0]
 800c4a0:	001a      	movs	r2, r3
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	189a      	adds	r2, r3, r2
 800c4a6:	183b      	adds	r3, r7, r0
 800c4a8:	785b      	ldrb	r3, [r3, #1]
 800c4aa:	7013      	strb	r3, [r2, #0]
	p_pu8Buffer[i++] = p_sPacket.u8Posicao_1;
 800c4ac:	193b      	adds	r3, r7, r4
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	193a      	adds	r2, r7, r4
 800c4b2:	1c59      	adds	r1, r3, #1
 800c4b4:	7011      	strb	r1, [r2, #0]
 800c4b6:	001a      	movs	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	189a      	adds	r2, r3, r2
 800c4bc:	183b      	adds	r3, r7, r0
 800c4be:	789b      	ldrb	r3, [r3, #2]
 800c4c0:	7013      	strb	r3, [r2, #0]
	p_pu8Buffer[i++] = p_sPacket.u8Velocidade_1;
 800c4c2:	193b      	adds	r3, r7, r4
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	193a      	adds	r2, r7, r4
 800c4c8:	1c59      	adds	r1, r3, #1
 800c4ca:	7011      	strb	r1, [r2, #0]
 800c4cc:	001a      	movs	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	189a      	adds	r2, r3, r2
 800c4d2:	183b      	adds	r3, r7, r0
 800c4d4:	78db      	ldrb	r3, [r3, #3]
 800c4d6:	7013      	strb	r3, [r2, #0]
	p_pu8Buffer[i++] = p_sPacket.u8Sentido_2;
 800c4d8:	193b      	adds	r3, r7, r4
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	193a      	adds	r2, r7, r4
 800c4de:	1c59      	adds	r1, r3, #1
 800c4e0:	7011      	strb	r1, [r2, #0]
 800c4e2:	001a      	movs	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	189a      	adds	r2, r3, r2
 800c4e8:	183b      	adds	r3, r7, r0
 800c4ea:	791b      	ldrb	r3, [r3, #4]
 800c4ec:	7013      	strb	r3, [r2, #0]
	p_pu8Buffer[i++] = p_sPacket.u8Posicao_2;
 800c4ee:	193b      	adds	r3, r7, r4
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	193a      	adds	r2, r7, r4
 800c4f4:	1c59      	adds	r1, r3, #1
 800c4f6:	7011      	strb	r1, [r2, #0]
 800c4f8:	001a      	movs	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	189a      	adds	r2, r3, r2
 800c4fe:	183b      	adds	r3, r7, r0
 800c500:	795b      	ldrb	r3, [r3, #5]
 800c502:	7013      	strb	r3, [r2, #0]
	p_pu8Buffer[i++] = p_sPacket.u8Velocidade_2;
 800c504:	193b      	adds	r3, r7, r4
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	193a      	adds	r2, r7, r4
 800c50a:	1c59      	adds	r1, r3, #1
 800c50c:	7011      	strb	r1, [r2, #0]
 800c50e:	001a      	movs	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	189a      	adds	r2, r3, r2
 800c514:	183b      	adds	r3, r7, r0
 800c516:	799b      	ldrb	r3, [r3, #6]
 800c518:	7013      	strb	r3, [r2, #0]
	p_pu8Buffer[i++] = p_sPacket.u8AcessoIn;
 800c51a:	193b      	adds	r3, r7, r4
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	193a      	adds	r2, r7, r4
 800c520:	1c59      	adds	r1, r3, #1
 800c522:	7011      	strb	r1, [r2, #0]
 800c524:	001a      	movs	r2, r3
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	189a      	adds	r2, r3, r2
 800c52a:	183b      	adds	r3, r7, r0
 800c52c:	79db      	ldrb	r3, [r3, #7]
 800c52e:	7013      	strb	r3, [r2, #0]
	p_pu8Buffer[i++] = p_sPacket.u8AcessoOut;
 800c530:	193b      	adds	r3, r7, r4
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	193a      	adds	r2, r7, r4
 800c536:	1c59      	adds	r1, r3, #1
 800c538:	7011      	strb	r1, [r2, #0]
 800c53a:	001a      	movs	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	189a      	adds	r2, r3, r2
 800c540:	183b      	adds	r3, r7, r0
 800c542:	7a1b      	ldrb	r3, [r3, #8]
 800c544:	7013      	strb	r3, [r2, #0]
	p_pu8Buffer[i++] = Package_ChecksumCalc(&p_pu8Buffer[INDEX_CMD], PACKET_SIZE - 3);	// STX, CHECKSUM e ETX nao entram no calculo do checksum
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	1c58      	adds	r0, r3, #1
 800c54a:	193b      	adds	r3, r7, r4
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	0025      	movs	r5, r4
 800c550:	193a      	adds	r2, r7, r4
 800c552:	1c59      	adds	r1, r3, #1
 800c554:	7011      	strb	r1, [r2, #0]
 800c556:	001a      	movs	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	189c      	adds	r4, r3, r2
 800c55c:	2109      	movs	r1, #9
 800c55e:	f7ff fecd 	bl	800c2fc <Package_ChecksumCalc>
 800c562:	0003      	movs	r3, r0
 800c564:	7023      	strb	r3, [r4, #0]
	p_pu8Buffer[i++] = ETX;
 800c566:	197b      	adds	r3, r7, r5
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	197a      	adds	r2, r7, r5
 800c56c:	1c59      	adds	r1, r3, #1
 800c56e:	7011      	strb	r1, [r2, #0]
 800c570:	001a      	movs	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	189b      	adds	r3, r3, r2
 800c576:	2203      	movs	r2, #3
 800c578:	701a      	strb	r2, [r3, #0]

	return(i);
 800c57a:	197b      	adds	r3, r7, r5
 800c57c:	781b      	ldrb	r3, [r3, #0]

}
 800c57e:	0018      	movs	r0, r3
 800c580:	46bd      	mov	sp, r7
 800c582:	b004      	add	sp, #16
 800c584:	bcb0      	pop	{r4, r5, r7}
 800c586:	bc08      	pop	{r3}
 800c588:	b002      	add	sp, #8
 800c58a:	4718      	bx	r3

0800c58c <_sensor_get_sensor>:

}sSensor;

/*** ** * Local Funcs * ** ***/
uint8_t _sensor_get_sensor(void)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b082      	sub	sp, #8
 800c590:	af00      	add	r7, sp, #0
	uint8_t sensorReturn = _e_SensorSts_None;
 800c592:	1dfb      	adds	r3, r7, #7
 800c594:	2200      	movs	r2, #0
 800c596:	701a      	strb	r2, [r3, #0]

	bool senIn    = (bool)!Inputs_Get( _e_Inputs_SenIn   );
 800c598:	2000      	movs	r0, #0
 800c59a:	f7fe f91d 	bl	800a7d8 <Inputs_Get>
 800c59e:	0003      	movs	r3, r0
 800c5a0:	425a      	negs	r2, r3
 800c5a2:	4153      	adcs	r3, r2
 800c5a4:	b2da      	uxtb	r2, r3
 800c5a6:	1dbb      	adds	r3, r7, #6
 800c5a8:	701a      	strb	r2, [r3, #0]
	bool senOut   = (bool)!Inputs_Get( _e_Inputs_SenOut  );
 800c5aa:	2001      	movs	r0, #1
 800c5ac:	f7fe f914 	bl	800a7d8 <Inputs_Get>
 800c5b0:	0003      	movs	r3, r0
 800c5b2:	425a      	negs	r2, r3
 800c5b4:	4153      	adcs	r3, r2
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	1d7b      	adds	r3, r7, #5
 800c5ba:	701a      	strb	r2, [r3, #0]
	bool senMidUp = (bool)!Inputs_Get( _e_Inputs_SenMidU );
 800c5bc:	2002      	movs	r0, #2
 800c5be:	f7fe f90b 	bl	800a7d8 <Inputs_Get>
 800c5c2:	0003      	movs	r3, r0
 800c5c4:	425a      	negs	r2, r3
 800c5c6:	4153      	adcs	r3, r2
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	1d3b      	adds	r3, r7, #4
 800c5cc:	701a      	strb	r2, [r3, #0]
	bool senMidDw = (bool)!Inputs_Get( _e_Inputs_SenMidD );
 800c5ce:	2003      	movs	r0, #3
 800c5d0:	f7fe f902 	bl	800a7d8 <Inputs_Get>
 800c5d4:	0003      	movs	r3, r0
 800c5d6:	425a      	negs	r2, r3
 800c5d8:	4153      	adcs	r3, r2
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	1cfb      	adds	r3, r7, #3
 800c5de:	701a      	strb	r2, [r3, #0]
	sensorReturn  = (uint8_t)( senIn + (senMidUp << 1) + (senMidDw << 2) + (senOut << 3) );
 800c5e0:	1d3b      	adds	r3, r7, #4
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	18db      	adds	r3, r3, r3
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	1dbb      	adds	r3, r7, #6
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	18d3      	adds	r3, r2, r3
 800c5ee:	b2da      	uxtb	r2, r3
 800c5f0:	1cfb      	adds	r3, r7, #3
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	18d3      	adds	r3, r2, r3
 800c5fa:	b2d9      	uxtb	r1, r3
 800c5fc:	1d7b      	adds	r3, r7, #5
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	00db      	lsls	r3, r3, #3
 800c602:	b2da      	uxtb	r2, r3
 800c604:	1dfb      	adds	r3, r7, #7
 800c606:	188a      	adds	r2, r1, r2
 800c608:	701a      	strb	r2, [r3, #0]

	return sensorReturn;
 800c60a:	1dfb      	adds	r3, r7, #7
 800c60c:	781b      	ldrb	r3, [r3, #0]
}
 800c60e:	0018      	movs	r0, r3
 800c610:	46bd      	mov	sp, r7
 800c612:	b002      	add	sp, #8
 800c614:	bd80      	pop	{r7, pc}
	...

0800c618 <_sensor_task_idle>:
void _sensor_task_alarm(void);
void _sensor_task_entrance(void);
void _sensor_task_exit(void);

void _sensor_task_idle(void)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	af00      	add	r7, sp, #0
	TaskManager_Set( TMSEN , _e_sensor_task_idle );
 800c61c:	2100      	movs	r1, #0
 800c61e:	200c      	movs	r0, #12
 800c620:	f001 f8b6 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( TMSEN ) == false )
 800c624:	200c      	movs	r0, #12
 800c626:	f001 f919 	bl	800d85c <TaskManager_First_Get>
 800c62a:	1e03      	subs	r3, r0, #0
 800c62c:	d109      	bne.n	800c642 <_sensor_task_idle+0x2a>
	{
		TaskManager_First_Set( TMSEN );
 800c62e:	200c      	movs	r0, #12
 800c630:	f001 f8ca 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( TMSEN, 0 );
 800c634:	2100      	movs	r1, #0
 800c636:	200c      	movs	r0, #12
 800c638:	f001 f932 	bl	800d8a0 <TaskManager_Step_Set>
		sSensor.mode = _e_SensorMode_Idle;
 800c63c:	4b02      	ldr	r3, [pc, #8]	@ (800c648 <_sensor_task_idle+0x30>)
 800c63e:	2200      	movs	r2, #0
 800c640:	701a      	strb	r2, [r3, #0]
	}
}
 800c642:	46c0      	nop			@ (mov r8, r8)
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	2000027c 	.word	0x2000027c

0800c64c <_sensor_task_alarm>:

void _sensor_task_alarm(void)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	af00      	add	r7, sp, #0
	TaskManager_Set( TMSEN , _e_sensor_task_alarm );
 800c650:	2101      	movs	r1, #1
 800c652:	200c      	movs	r0, #12
 800c654:	f001 f89c 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( TMSEN ) == false )
 800c658:	200c      	movs	r0, #12
 800c65a:	f001 f8ff 	bl	800d85c <TaskManager_First_Get>
 800c65e:	1e03      	subs	r3, r0, #0
 800c660:	d109      	bne.n	800c676 <_sensor_task_alarm+0x2a>
	{
		TaskManager_First_Set( TMSEN );
 800c662:	200c      	movs	r0, #12
 800c664:	f001 f8b0 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( TMSEN, 0 );
 800c668:	2100      	movs	r1, #0
 800c66a:	200c      	movs	r0, #12
 800c66c:	f001 f918 	bl	800d8a0 <TaskManager_Step_Set>
		sSensor.mode = _e_SensorMode_Alarm;
 800c670:	4b1e      	ldr	r3, [pc, #120]	@ (800c6ec <_sensor_task_alarm+0xa0>)
 800c672:	2201      	movs	r2, #1
 800c674:	701a      	strb	r2, [r3, #0]
	}

	sSensor.senByte[_e_SensorBit_Read].senGroup = _sensor_get_sensor();
 800c676:	f7ff ff89 	bl	800c58c <_sensor_get_sensor>
 800c67a:	0003      	movs	r3, r0
 800c67c:	001a      	movs	r2, r3
 800c67e:	4b1b      	ldr	r3, [pc, #108]	@ (800c6ec <_sensor_task_alarm+0xa0>)
 800c680:	709a      	strb	r2, [r3, #2]

	if( sSensor.senByte[_e_SensorBit_Read].senGroup > 0 )
 800c682:	4b1a      	ldr	r3, [pc, #104]	@ (800c6ec <_sensor_task_alarm+0xa0>)
 800c684:	789b      	ldrb	r3, [r3, #2]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d02b      	beq.n	800c6e2 <_sensor_task_alarm+0x96>
	{
		if( (sSensor.senByte[_e_SensorBit_Read].senbit.out == true ) &&
 800c68a:	4b18      	ldr	r3, [pc, #96]	@ (800c6ec <_sensor_task_alarm+0xa0>)
 800c68c:	789b      	ldrb	r3, [r3, #2]
 800c68e:	2208      	movs	r2, #8
 800c690:	4013      	ands	r3, r2
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b00      	cmp	r3, #0
 800c696:	d00a      	beq.n	800c6ae <_sensor_task_alarm+0x62>
			( sSensor.senByte[_e_SensorBit_Read].senbit.in == true ) ) {
 800c698:	4b14      	ldr	r3, [pc, #80]	@ (800c6ec <_sensor_task_alarm+0xa0>)
 800c69a:	789b      	ldrb	r3, [r3, #2]
 800c69c:	2201      	movs	r2, #1
 800c69e:	4013      	ands	r3, r2
 800c6a0:	b2db      	uxtb	r3, r3
		if( (sSensor.senByte[_e_SensorBit_Read].senbit.out == true ) &&
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d003      	beq.n	800c6ae <_sensor_task_alarm+0x62>
			sSensor.status =  _e_SensorSts_Both;
 800c6a6:	4b11      	ldr	r3, [pc, #68]	@ (800c6ec <_sensor_task_alarm+0xa0>)
 800c6a8:	2203      	movs	r2, #3
 800c6aa:	705a      	strb	r2, [r3, #1]
			return;
 800c6ac:	e01c      	b.n	800c6e8 <_sensor_task_alarm+0x9c>
		}

		if( sSensor.senByte[_e_SensorBit_Read].senbit.out == true ){
 800c6ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c6ec <_sensor_task_alarm+0xa0>)
 800c6b0:	789b      	ldrb	r3, [r3, #2]
 800c6b2:	2208      	movs	r2, #8
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d003      	beq.n	800c6c4 <_sensor_task_alarm+0x78>
			sSensor.status =  _e_SensorSts_AlarmExit;
 800c6bc:	4b0b      	ldr	r3, [pc, #44]	@ (800c6ec <_sensor_task_alarm+0xa0>)
 800c6be:	2202      	movs	r2, #2
 800c6c0:	705a      	strb	r2, [r3, #1]
 800c6c2:	e011      	b.n	800c6e8 <_sensor_task_alarm+0x9c>
		}
		else if( sSensor.senByte[_e_SensorBit_Read].senbit.in == true ){
 800c6c4:	4b09      	ldr	r3, [pc, #36]	@ (800c6ec <_sensor_task_alarm+0xa0>)
 800c6c6:	789b      	ldrb	r3, [r3, #2]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d003      	beq.n	800c6da <_sensor_task_alarm+0x8e>
			sSensor.status =  _e_SensorSts_AlarmEntrance;
 800c6d2:	4b06      	ldr	r3, [pc, #24]	@ (800c6ec <_sensor_task_alarm+0xa0>)
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	705a      	strb	r2, [r3, #1]
 800c6d8:	e006      	b.n	800c6e8 <_sensor_task_alarm+0x9c>
		}
		else{
			sSensor.status =  _E_SensorSts_AlarmMid;
 800c6da:	4b04      	ldr	r3, [pc, #16]	@ (800c6ec <_sensor_task_alarm+0xa0>)
 800c6dc:	2204      	movs	r2, #4
 800c6de:	705a      	strb	r2, [r3, #1]
 800c6e0:	e002      	b.n	800c6e8 <_sensor_task_alarm+0x9c>
		}
	}
	else{
		sSensor.status =   _e_SensorSts_None;
 800c6e2:	4b02      	ldr	r3, [pc, #8]	@ (800c6ec <_sensor_task_alarm+0xa0>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	705a      	strb	r2, [r3, #1]
	}
}
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	2000027c 	.word	0x2000027c

0800c6f0 <_sensor_task_entrance>:

void _sensor_task_entrance(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0
	TaskManager_Set( TMSEN , _e_sensor_task_entrance );
 800c6f4:	2102      	movs	r1, #2
 800c6f6:	200c      	movs	r0, #12
 800c6f8:	f001 f84a 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( TMSEN ) == false )
 800c6fc:	200c      	movs	r0, #12
 800c6fe:	f001 f8ad 	bl	800d85c <TaskManager_First_Get>
 800c702:	1e03      	subs	r3, r0, #0
 800c704:	d112      	bne.n	800c72c <_sensor_task_entrance+0x3c>
	{
		TaskManager_First_Set( TMSEN );
 800c706:	200c      	movs	r0, #12
 800c708:	f001 f85e 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( TMSEN, 0 );
 800c70c:	2100      	movs	r1, #0
 800c70e:	200c      	movs	r0, #12
 800c710:	f001 f8c6 	bl	800d8a0 <TaskManager_Step_Set>

		sSensor.senByte[_e_SensorBit_Read].senGroup = 0;
 800c714:	4b26      	ldr	r3, [pc, #152]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c716:	2200      	movs	r2, #0
 800c718:	709a      	strb	r2, [r3, #2]
		sSensor.senByte[_e_SensorBit_Mem].senGroup = 0;
 800c71a:	4b25      	ldr	r3, [pc, #148]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	70da      	strb	r2, [r3, #3]
		sSensor.status =  _e_SensorSts_PassWait;
 800c720:	4b23      	ldr	r3, [pc, #140]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c722:	2206      	movs	r2, #6
 800c724:	705a      	strb	r2, [r3, #1]
		sSensor.mode = _e_SensorMode_Entrance;
 800c726:	4b22      	ldr	r3, [pc, #136]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c728:	2202      	movs	r2, #2
 800c72a:	701a      	strb	r2, [r3, #0]
	}

	sSensor.senByte[_e_SensorBit_Read].senGroup = _sensor_get_sensor();
 800c72c:	f7ff ff2e 	bl	800c58c <_sensor_get_sensor>
 800c730:	0003      	movs	r3, r0
 800c732:	001a      	movs	r2, r3
 800c734:	4b1e      	ldr	r3, [pc, #120]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c736:	709a      	strb	r2, [r3, #2]

	// DSB/LBM - 24/07/2024: Considera acesso passagem OKAY apenas após passar pelo ultimo sensor
	switch( TaskManager_Step_Get( TMSEN ) )
 800c738:	200c      	movs	r0, #12
 800c73a:	f001 f8db 	bl	800d8f4 <TaskManager_Step_Get>
 800c73e:	1e03      	subs	r3, r0, #0
 800c740:	d002      	beq.n	800c748 <_sensor_task_entrance+0x58>
 800c742:	2b01      	cmp	r3, #1
 800c744:	d01b      	beq.n	800c77e <_sensor_task_entrance+0x8e>
 800c746:	e027      	b.n	800c798 <_sensor_task_entrance+0xa8>
	{
		case 0:
			if (sSensor.senByte[_e_SensorBit_Mem].senGroup == 8)
 800c748:	4b19      	ldr	r3, [pc, #100]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c74a:	78db      	ldrb	r3, [r3, #3]
 800c74c:	2b08      	cmp	r3, #8
 800c74e:	d103      	bne.n	800c758 <_sensor_task_entrance+0x68>
			{
				sSensor.status =  _e_SensorSts_AlarmExit;
 800c750:	4b17      	ldr	r3, [pc, #92]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c752:	2202      	movs	r2, #2
 800c754:	705a      	strb	r2, [r3, #1]
 800c756:	e00a      	b.n	800c76e <_sensor_task_entrance+0x7e>
			}
			else
			{
				sSensor.senByte[_e_SensorBit_Mem].senGroup |= sSensor.senByte[_e_SensorBit_Read].senGroup;
 800c758:	4b15      	ldr	r3, [pc, #84]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c75a:	78da      	ldrb	r2, [r3, #3]
 800c75c:	4b14      	ldr	r3, [pc, #80]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c75e:	789b      	ldrb	r3, [r3, #2]
 800c760:	4313      	orrs	r3, r2
 800c762:	b2da      	uxtb	r2, r3
 800c764:	4b12      	ldr	r3, [pc, #72]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c766:	70da      	strb	r2, [r3, #3]
				sSensor.status =  _e_SensorSts_PassWait;
 800c768:	4b11      	ldr	r3, [pc, #68]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c76a:	2206      	movs	r2, #6
 800c76c:	705a      	strb	r2, [r3, #1]
			}

			if(sSensor.senByte[_e_SensorBit_Mem].senGroup >= 15)
 800c76e:	4b10      	ldr	r3, [pc, #64]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c770:	78db      	ldrb	r3, [r3, #3]
 800c772:	2b0e      	cmp	r3, #14
 800c774:	d915      	bls.n	800c7a2 <_sensor_task_entrance+0xb2>
			{
				TaskManager_Step_Inc( TMSEN );
 800c776:	200c      	movs	r0, #12
 800c778:	f001 f8e0 	bl	800d93c <TaskManager_Step_Inc>
			}
		break;
 800c77c:	e011      	b.n	800c7a2 <_sensor_task_entrance+0xb2>

		case 1:
			if(sSensor.senByte[_e_SensorBit_Read].senGroup == 0)
 800c77e:	4b0c      	ldr	r3, [pc, #48]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c780:	789b      	ldrb	r3, [r3, #2]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10f      	bne.n	800c7a6 <_sensor_task_entrance+0xb6>
			{
				sSensor.status =  _e_SensorSts_PassOk;
 800c786:	4b0a      	ldr	r3, [pc, #40]	@ (800c7b0 <_sensor_task_entrance+0xc0>)
 800c788:	2205      	movs	r2, #5
 800c78a:	705a      	strb	r2, [r3, #1]
				TaskManager_Go(TMSEN, _sensor_task_idle);
 800c78c:	4b09      	ldr	r3, [pc, #36]	@ (800c7b4 <_sensor_task_entrance+0xc4>)
 800c78e:	0019      	movs	r1, r3
 800c790:	200c      	movs	r0, #12
 800c792:	f000 ffaf 	bl	800d6f4 <TaskManager_Go>
			}
		break;
 800c796:	e006      	b.n	800c7a6 <_sensor_task_entrance+0xb6>

		default:
			TaskManager_Step_Set(TMSEN, 0);
 800c798:	2100      	movs	r1, #0
 800c79a:	200c      	movs	r0, #12
 800c79c:	f001 f880 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800c7a0:	e002      	b.n	800c7a8 <_sensor_task_entrance+0xb8>
		break;
 800c7a2:	46c0      	nop			@ (mov r8, r8)
 800c7a4:	e000      	b.n	800c7a8 <_sensor_task_entrance+0xb8>
		break;
 800c7a6:	46c0      	nop			@ (mov r8, r8)
	}

}
 800c7a8:	46c0      	nop			@ (mov r8, r8)
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	46c0      	nop			@ (mov r8, r8)
 800c7b0:	2000027c 	.word	0x2000027c
 800c7b4:	0800c619 	.word	0x0800c619

0800c7b8 <_sensor_task_exit>:

void _sensor_task_exit(void)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	af00      	add	r7, sp, #0
	TaskManager_Set( TMSEN , _e_sensor_task_exit );
 800c7bc:	2103      	movs	r1, #3
 800c7be:	200c      	movs	r0, #12
 800c7c0:	f000 ffe6 	bl	800d790 <TaskManager_Set>

	if( TaskManager_First_Get( TMSEN ) == false )
 800c7c4:	200c      	movs	r0, #12
 800c7c6:	f001 f849 	bl	800d85c <TaskManager_First_Get>
 800c7ca:	1e03      	subs	r3, r0, #0
 800c7cc:	d112      	bne.n	800c7f4 <_sensor_task_exit+0x3c>
	{
		TaskManager_First_Set( TMSEN );
 800c7ce:	200c      	movs	r0, #12
 800c7d0:	f000 fffa 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( TMSEN, 0 );
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	200c      	movs	r0, #12
 800c7d8:	f001 f862 	bl	800d8a0 <TaskManager_Step_Set>

		sSensor.senByte[_e_SensorBit_Read].senGroup = 0;
 800c7dc:	4b26      	ldr	r3, [pc, #152]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c7de:	2200      	movs	r2, #0
 800c7e0:	709a      	strb	r2, [r3, #2]
		sSensor.senByte[_e_SensorBit_Mem].senGroup = 0;
 800c7e2:	4b25      	ldr	r3, [pc, #148]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	70da      	strb	r2, [r3, #3]
		sSensor.status =  _e_SensorSts_PassWait;
 800c7e8:	4b23      	ldr	r3, [pc, #140]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c7ea:	2206      	movs	r2, #6
 800c7ec:	705a      	strb	r2, [r3, #1]
		sSensor.mode = _e_SensorMode_Exit;
 800c7ee:	4b22      	ldr	r3, [pc, #136]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c7f0:	2203      	movs	r2, #3
 800c7f2:	701a      	strb	r2, [r3, #0]
	}

	sSensor.senByte[_e_SensorBit_Read].senGroup = _sensor_get_sensor();
 800c7f4:	f7ff feca 	bl	800c58c <_sensor_get_sensor>
 800c7f8:	0003      	movs	r3, r0
 800c7fa:	001a      	movs	r2, r3
 800c7fc:	4b1e      	ldr	r3, [pc, #120]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c7fe:	709a      	strb	r2, [r3, #2]

	// DSB/LBM - 24/07/2024: Considera acesso passagem OKAY apenas após passar pelo ultimo sensor
	switch( TaskManager_Step_Get( TMSEN ) )
 800c800:	200c      	movs	r0, #12
 800c802:	f001 f877 	bl	800d8f4 <TaskManager_Step_Get>
 800c806:	1e03      	subs	r3, r0, #0
 800c808:	d002      	beq.n	800c810 <_sensor_task_exit+0x58>
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d01b      	beq.n	800c846 <_sensor_task_exit+0x8e>
 800c80e:	e027      	b.n	800c860 <_sensor_task_exit+0xa8>
	{
		case 0:
			if (sSensor.senByte[_e_SensorBit_Mem].senGroup == 1)
 800c810:	4b19      	ldr	r3, [pc, #100]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c812:	78db      	ldrb	r3, [r3, #3]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d103      	bne.n	800c820 <_sensor_task_exit+0x68>
			{
				//sSensor.senByte[_e_SensorBit_Mem].senGroup = 0;
				sSensor.status =  _e_SensorSts_AlarmEntrance;
 800c818:	4b17      	ldr	r3, [pc, #92]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c81a:	2201      	movs	r2, #1
 800c81c:	705a      	strb	r2, [r3, #1]
 800c81e:	e00a      	b.n	800c836 <_sensor_task_exit+0x7e>
			}
			else
			{
				sSensor.senByte[_e_SensorBit_Mem].senGroup |= sSensor.senByte[_e_SensorBit_Read].senGroup;
 800c820:	4b15      	ldr	r3, [pc, #84]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c822:	78da      	ldrb	r2, [r3, #3]
 800c824:	4b14      	ldr	r3, [pc, #80]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c826:	789b      	ldrb	r3, [r3, #2]
 800c828:	4313      	orrs	r3, r2
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	4b12      	ldr	r3, [pc, #72]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c82e:	70da      	strb	r2, [r3, #3]
				sSensor.status =  _e_SensorSts_PassWait;
 800c830:	4b11      	ldr	r3, [pc, #68]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c832:	2206      	movs	r2, #6
 800c834:	705a      	strb	r2, [r3, #1]
			}

			if( sSensor.senByte[_e_SensorBit_Mem].senGroup >= 15)
 800c836:	4b10      	ldr	r3, [pc, #64]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c838:	78db      	ldrb	r3, [r3, #3]
 800c83a:	2b0e      	cmp	r3, #14
 800c83c:	d915      	bls.n	800c86a <_sensor_task_exit+0xb2>
			{
				TaskManager_Step_Inc( TMSEN );
 800c83e:	200c      	movs	r0, #12
 800c840:	f001 f87c 	bl	800d93c <TaskManager_Step_Inc>
			}
		break;
 800c844:	e011      	b.n	800c86a <_sensor_task_exit+0xb2>

		case 1:
			if( sSensor.senByte[_e_SensorBit_Read].senGroup == 0 )
 800c846:	4b0c      	ldr	r3, [pc, #48]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c848:	789b      	ldrb	r3, [r3, #2]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10f      	bne.n	800c86e <_sensor_task_exit+0xb6>
			{
				sSensor.status =  _e_SensorSts_PassOk;
 800c84e:	4b0a      	ldr	r3, [pc, #40]	@ (800c878 <_sensor_task_exit+0xc0>)
 800c850:	2205      	movs	r2, #5
 800c852:	705a      	strb	r2, [r3, #1]
				TaskManager_Go( TMSEN  , _sensor_task_idle );
 800c854:	4b09      	ldr	r3, [pc, #36]	@ (800c87c <_sensor_task_exit+0xc4>)
 800c856:	0019      	movs	r1, r3
 800c858:	200c      	movs	r0, #12
 800c85a:	f000 ff4b 	bl	800d6f4 <TaskManager_Go>
			}
		break;
 800c85e:	e006      	b.n	800c86e <_sensor_task_exit+0xb6>

		default:
			TaskManager_Step_Set( TMSEN, 0 );
 800c860:	2100      	movs	r1, #0
 800c862:	200c      	movs	r0, #12
 800c864:	f001 f81c 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800c868:	e002      	b.n	800c870 <_sensor_task_exit+0xb8>
		break;
 800c86a:	46c0      	nop			@ (mov r8, r8)
 800c86c:	e000      	b.n	800c870 <_sensor_task_exit+0xb8>
		break;
 800c86e:	46c0      	nop			@ (mov r8, r8)
	}
}
 800c870:	46c0      	nop			@ (mov r8, r8)
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}
 800c876:	46c0      	nop			@ (mov r8, r8)
 800c878:	2000027c 	.word	0x2000027c
 800c87c:	0800c619 	.word	0x0800c619

0800c880 <Sensor_Init>:

/*** ** * EXT Funcs * ** ***/
void Sensor_Init(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
	TaskManager_Clear( TMSEN );
 800c884:	200c      	movs	r0, #12
 800c886:	f000 ff4d 	bl	800d724 <TaskManager_Clear>
	TaskManager_Go( TMSEN  , _sensor_task_idle );
 800c88a:	4b04      	ldr	r3, [pc, #16]	@ (800c89c <Sensor_Init+0x1c>)
 800c88c:	0019      	movs	r1, r3
 800c88e:	200c      	movs	r0, #12
 800c890:	f000 ff30 	bl	800d6f4 <TaskManager_Go>
}
 800c894:	46c0      	nop			@ (mov r8, r8)
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	46c0      	nop			@ (mov r8, r8)
 800c89c:	0800c619 	.word	0x0800c619

0800c8a0 <Sensor_Get>:

tSensorSts Sensor_Get(void)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	af00      	add	r7, sp, #0
	return sSensor.status;
 800c8a4:	4b02      	ldr	r3, [pc, #8]	@ (800c8b0 <Sensor_Get+0x10>)
 800c8a6:	785b      	ldrb	r3, [r3, #1]
}
 800c8a8:	0018      	movs	r0, r3
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	46c0      	nop			@ (mov r8, r8)
 800c8b0:	2000027c 	.word	0x2000027c

0800c8b4 <Sensor_Set>:

void Sensor_Set( tSensorMode senMode )
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	0002      	movs	r2, r0
 800c8bc:	1dfb      	adds	r3, r7, #7
 800c8be:	701a      	strb	r2, [r3, #0]
	switch( (uint8_t)senMode )
 800c8c0:	1dfb      	adds	r3, r7, #7
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	2b03      	cmp	r3, #3
 800c8c6:	d00d      	beq.n	800c8e4 <Sensor_Set+0x30>
 800c8c8:	dc1e      	bgt.n	800c908 <Sensor_Set+0x54>
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d013      	beq.n	800c8f6 <Sensor_Set+0x42>
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d11a      	bne.n	800c908 <Sensor_Set+0x54>
	{
		case _e_SensorMode_Entrance:
			sSensor.mode = _e_SensorMode_Entrance;
 800c8d2:	4b14      	ldr	r3, [pc, #80]	@ (800c924 <Sensor_Set+0x70>)
 800c8d4:	2202      	movs	r2, #2
 800c8d6:	701a      	strb	r2, [r3, #0]
			TaskManager_Go( TMSEN  , _sensor_task_entrance );
 800c8d8:	4b13      	ldr	r3, [pc, #76]	@ (800c928 <Sensor_Set+0x74>)
 800c8da:	0019      	movs	r1, r3
 800c8dc:	200c      	movs	r0, #12
 800c8de:	f000 ff09 	bl	800d6f4 <TaskManager_Go>
		break;
 800c8e2:	e01a      	b.n	800c91a <Sensor_Set+0x66>

		case _e_SensorMode_Exit:
			sSensor.mode = _e_SensorMode_Exit;
 800c8e4:	4b0f      	ldr	r3, [pc, #60]	@ (800c924 <Sensor_Set+0x70>)
 800c8e6:	2203      	movs	r2, #3
 800c8e8:	701a      	strb	r2, [r3, #0]
			TaskManager_Go( TMSEN  , _sensor_task_exit );
 800c8ea:	4b10      	ldr	r3, [pc, #64]	@ (800c92c <Sensor_Set+0x78>)
 800c8ec:	0019      	movs	r1, r3
 800c8ee:	200c      	movs	r0, #12
 800c8f0:	f000 ff00 	bl	800d6f4 <TaskManager_Go>
		break;
 800c8f4:	e011      	b.n	800c91a <Sensor_Set+0x66>

		case _e_SensorMode_Alarm:
			sSensor.mode = _e_SensorMode_Alarm;
 800c8f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c924 <Sensor_Set+0x70>)
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	701a      	strb	r2, [r3, #0]
			TaskManager_Go( TMSEN  , _sensor_task_alarm );
 800c8fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c930 <Sensor_Set+0x7c>)
 800c8fe:	0019      	movs	r1, r3
 800c900:	200c      	movs	r0, #12
 800c902:	f000 fef7 	bl	800d6f4 <TaskManager_Go>
		break;
 800c906:	e008      	b.n	800c91a <Sensor_Set+0x66>

		default:
			sSensor.mode = _e_SensorMode_Idle;
 800c908:	4b06      	ldr	r3, [pc, #24]	@ (800c924 <Sensor_Set+0x70>)
 800c90a:	2200      	movs	r2, #0
 800c90c:	701a      	strb	r2, [r3, #0]
			TaskManager_Go( TMSEN  , _sensor_task_idle );
 800c90e:	4b09      	ldr	r3, [pc, #36]	@ (800c934 <Sensor_Set+0x80>)
 800c910:	0019      	movs	r1, r3
 800c912:	200c      	movs	r0, #12
 800c914:	f000 feee 	bl	800d6f4 <TaskManager_Go>
		break;
 800c918:	46c0      	nop			@ (mov r8, r8)
	}
}
 800c91a:	46c0      	nop			@ (mov r8, r8)
 800c91c:	46bd      	mov	sp, r7
 800c91e:	b002      	add	sp, #8
 800c920:	bd80      	pop	{r7, pc}
 800c922:	46c0      	nop			@ (mov r8, r8)
 800c924:	2000027c 	.word	0x2000027c
 800c928:	0800c6f1 	.word	0x0800c6f1
 800c92c:	0800c7b9 	.word	0x0800c7b9
 800c930:	0800c64d 	.word	0x0800c64d
 800c934:	0800c619 	.word	0x0800c619

0800c938 <_stpmt_func_motor_stop>:
}sMtEncoder[_e_StpMt_Qty];

/*** ** * Local Funcs * ** ***/

void _stpmt_func_motor_stop(tStpMtNum stpMtNum)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	0002      	movs	r2, r0
 800c940:	1dfb      	adds	r3, r7, #7
 800c942:	701a      	strb	r2, [r3, #0]
	TIM_STPMT_STOP((uint8_t)stpMtNum);
 800c944:	1dfb      	adds	r3, r7, #7
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	0018      	movs	r0, r3
 800c94a:	f002 fef5 	bl	800f738 <TIM_STPMT_STOP>
}
 800c94e:	46c0      	nop			@ (mov r8, r8)
 800c950:	46bd      	mov	sp, r7
 800c952:	b002      	add	sp, #8
 800c954:	bd80      	pop	{r7, pc}
	...

0800c958 <_stpmt_func_motor_start>:

void _stpmt_func_motor_start(tStpMtNum stpMtNum , tStpMtDir stpMtDir)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	0002      	movs	r2, r0
 800c960:	1dfb      	adds	r3, r7, #7
 800c962:	701a      	strb	r2, [r3, #0]
 800c964:	1dbb      	adds	r3, r7, #6
 800c966:	1c0a      	adds	r2, r1, #0
 800c968:	701a      	strb	r2, [r3, #0]
	STPMT_MT_ENABLE();
 800c96a:	4b08      	ldr	r3, [pc, #32]	@ (800c98c <_stpmt_func_motor_start+0x34>)
 800c96c:	2280      	movs	r2, #128	@ 0x80
 800c96e:	0592      	lsls	r2, r2, #22
 800c970:	619a      	str	r2, [r3, #24]
	TIM_STPMT_START((uint8_t)stpMtNum , (uint8_t)stpMtDir);
 800c972:	1dbb      	adds	r3, r7, #6
 800c974:	781a      	ldrb	r2, [r3, #0]
 800c976:	1dfb      	adds	r3, r7, #7
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	0011      	movs	r1, r2
 800c97c:	0018      	movs	r0, r3
 800c97e:	f002 ff13 	bl	800f7a8 <TIM_STPMT_START>
}
 800c982:	46c0      	nop			@ (mov r8, r8)
 800c984:	46bd      	mov	sp, r7
 800c986:	b002      	add	sp, #8
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	46c0      	nop			@ (mov r8, r8)
 800c98c:	48000400 	.word	0x48000400

0800c990 <_stpmt_func_motor_set>:

void _stpmt_func_motor_set(tStpMtNum stpMtNum , uint16_t period )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	0002      	movs	r2, r0
 800c998:	1dfb      	adds	r3, r7, #7
 800c99a:	701a      	strb	r2, [r3, #0]
 800c99c:	1d3b      	adds	r3, r7, #4
 800c99e:	1c0a      	adds	r2, r1, #0
 800c9a0:	801a      	strh	r2, [r3, #0]
	TIM_STPMT_SET((uint8_t)stpMtNum, period);
 800c9a2:	1d3b      	adds	r3, r7, #4
 800c9a4:	881a      	ldrh	r2, [r3, #0]
 800c9a6:	1dfb      	adds	r3, r7, #7
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	0011      	movs	r1, r2
 800c9ac:	0018      	movs	r0, r3
 800c9ae:	f002 ff47 	bl	800f840 <TIM_STPMT_SET>
}
 800c9b2:	46c0      	nop			@ (mov r8, r8)
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	b002      	add	sp, #8
 800c9b8:	bd80      	pop	{r7, pc}
	...

0800c9bc <_stpmt_func_motor_move>:

void _stpmt_func_motor_move( tStpMtNum stpMtNum, tStpMtDir stpMtDir, float ang, uint16_t speed , uint16_t accel )
{
 800c9bc:	b590      	push	{r4, r7, lr}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	0004      	movs	r4, r0
 800c9c4:	0008      	movs	r0, r1
 800c9c6:	603a      	str	r2, [r7, #0]
 800c9c8:	0019      	movs	r1, r3
 800c9ca:	1dfb      	adds	r3, r7, #7
 800c9cc:	1c22      	adds	r2, r4, #0
 800c9ce:	701a      	strb	r2, [r3, #0]
 800c9d0:	1dbb      	adds	r3, r7, #6
 800c9d2:	1c02      	adds	r2, r0, #0
 800c9d4:	701a      	strb	r2, [r3, #0]
 800c9d6:	1d3b      	adds	r3, r7, #4
 800c9d8:	1c0a      	adds	r2, r1, #0
 800c9da:	801a      	strh	r2, [r3, #0]
	uint16_t periodDelta, accTot;


	//Degrees in steps
	sMtSys[stpMtNum].stepTot = STPMT_PARAM_STEPS_PER_REV / 360 * ang;
 800c9dc:	6838      	ldr	r0, [r7, #0]
 800c9de:	f7f5 fad7 	bl	8001f90 <__aeabi_f2d>
 800c9e2:	4aca      	ldr	r2, [pc, #808]	@ (800cd0c <_stpmt_func_motor_move+0x350>)
 800c9e4:	4bca      	ldr	r3, [pc, #808]	@ (800cd10 <_stpmt_func_motor_move+0x354>)
 800c9e6:	f7f4 fc33 	bl	8001250 <__aeabi_dmul>
 800c9ea:	0002      	movs	r2, r0
 800c9ec:	000b      	movs	r3, r1
 800c9ee:	1df9      	adds	r1, r7, #7
 800c9f0:	780c      	ldrb	r4, [r1, #0]
 800c9f2:	0010      	movs	r0, r2
 800c9f4:	0019      	movs	r1, r3
 800c9f6:	f7f3 fd4f 	bl	8000498 <__aeabi_d2uiz>
 800c9fa:	0001      	movs	r1, r0
 800c9fc:	4ac5      	ldr	r2, [pc, #788]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800c9fe:	0023      	movs	r3, r4
 800ca00:	00db      	lsls	r3, r3, #3
 800ca02:	1b1b      	subs	r3, r3, r4
 800ca04:	00db      	lsls	r3, r3, #3
 800ca06:	18d3      	adds	r3, r2, r3
 800ca08:	3304      	adds	r3, #4
 800ca0a:	6019      	str	r1, [r3, #0]
	sMtSys[stpMtNum].stepSys = sMtSys[stpMtNum].stepTot;
 800ca0c:	1dfb      	adds	r3, r7, #7
 800ca0e:	7819      	ldrb	r1, [r3, #0]
 800ca10:	1dfb      	adds	r3, r7, #7
 800ca12:	781a      	ldrb	r2, [r3, #0]
 800ca14:	48bf      	ldr	r0, [pc, #764]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800ca16:	000b      	movs	r3, r1
 800ca18:	00db      	lsls	r3, r3, #3
 800ca1a:	1a5b      	subs	r3, r3, r1
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	18c3      	adds	r3, r0, r3
 800ca20:	3304      	adds	r3, #4
 800ca22:	6819      	ldr	r1, [r3, #0]
 800ca24:	48bb      	ldr	r0, [pc, #748]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800ca26:	0013      	movs	r3, r2
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	1a9b      	subs	r3, r3, r2
 800ca2c:	00db      	lsls	r3, r3, #3
 800ca2e:	18c3      	adds	r3, r0, r3
 800ca30:	3308      	adds	r3, #8
 800ca32:	6019      	str	r1, [r3, #0]

	//Speed Verification
	if( speed > STPMT_MT_SPEED_MAX ){
 800ca34:	1d3b      	adds	r3, r7, #4
 800ca36:	881b      	ldrh	r3, [r3, #0]
 800ca38:	4ab7      	ldr	r2, [pc, #732]	@ (800cd18 <_stpmt_func_motor_move+0x35c>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d916      	bls.n	800ca6c <_stpmt_func_motor_move+0xb0>
		//sMtSys[stpMtNum].speed = STPMT_TIM_PERIOD - STPMT_MT_SPEED_MAX;
		sMtSys[stpMtNum].speed = sMtSys[stpMtNum].speedStart - STPMT_MT_SPEED_MAX;
 800ca3e:	1dfb      	adds	r3, r7, #7
 800ca40:	781a      	ldrb	r2, [r3, #0]
 800ca42:	49b4      	ldr	r1, [pc, #720]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800ca44:	0013      	movs	r3, r2
 800ca46:	00db      	lsls	r3, r3, #3
 800ca48:	1a9b      	subs	r3, r3, r2
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	18cb      	adds	r3, r1, r3
 800ca4e:	3330      	adds	r3, #48	@ 0x30
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	1dfa      	adds	r2, r7, #7
 800ca54:	7812      	ldrb	r2, [r2, #0]
 800ca56:	49b1      	ldr	r1, [pc, #708]	@ (800cd1c <_stpmt_func_motor_move+0x360>)
 800ca58:	1859      	adds	r1, r3, r1
 800ca5a:	48ae      	ldr	r0, [pc, #696]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800ca5c:	0013      	movs	r3, r2
 800ca5e:	00db      	lsls	r3, r3, #3
 800ca60:	1a9b      	subs	r3, r3, r2
 800ca62:	00db      	lsls	r3, r3, #3
 800ca64:	18c3      	adds	r3, r0, r3
 800ca66:	332c      	adds	r3, #44	@ 0x2c
 800ca68:	6019      	str	r1, [r3, #0]
 800ca6a:	e016      	b.n	800ca9a <_stpmt_func_motor_move+0xde>
	}
	else{
		//sMtSys[stpMtNum].speed = STPMT_TIM_PERIOD - speed;
		sMtSys[stpMtNum].speed = sMtSys[stpMtNum].speedStart - speed;
 800ca6c:	1dfb      	adds	r3, r7, #7
 800ca6e:	781a      	ldrb	r2, [r3, #0]
 800ca70:	49a8      	ldr	r1, [pc, #672]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800ca72:	0013      	movs	r3, r2
 800ca74:	00db      	lsls	r3, r3, #3
 800ca76:	1a9b      	subs	r3, r3, r2
 800ca78:	00db      	lsls	r3, r3, #3
 800ca7a:	18cb      	adds	r3, r1, r3
 800ca7c:	3330      	adds	r3, #48	@ 0x30
 800ca7e:	6819      	ldr	r1, [r3, #0]
 800ca80:	1d3b      	adds	r3, r7, #4
 800ca82:	881b      	ldrh	r3, [r3, #0]
 800ca84:	1dfa      	adds	r2, r7, #7
 800ca86:	7812      	ldrb	r2, [r2, #0]
 800ca88:	1ac9      	subs	r1, r1, r3
 800ca8a:	48a2      	ldr	r0, [pc, #648]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800ca8c:	0013      	movs	r3, r2
 800ca8e:	00db      	lsls	r3, r3, #3
 800ca90:	1a9b      	subs	r3, r3, r2
 800ca92:	00db      	lsls	r3, r3, #3
 800ca94:	18c3      	adds	r3, r0, r3
 800ca96:	332c      	adds	r3, #44	@ 0x2c
 800ca98:	6019      	str	r1, [r3, #0]
	}

	//Acceleration Verification
	if( accel > STPMT_MT_ACC_MAX )
 800ca9a:	2320      	movs	r3, #32
 800ca9c:	18fb      	adds	r3, r7, r3
 800ca9e:	881b      	ldrh	r3, [r3, #0]
 800caa0:	2b32      	cmp	r3, #50	@ 0x32
 800caa2:	d90b      	bls.n	800cabc <_stpmt_func_motor_move+0x100>
		sMtSys[stpMtNum].accel = STPMT_MT_ACC_MAX;
 800caa4:	1dfb      	adds	r3, r7, #7
 800caa6:	781a      	ldrb	r2, [r3, #0]
 800caa8:	499a      	ldr	r1, [pc, #616]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800caaa:	0013      	movs	r3, r2
 800caac:	00db      	lsls	r3, r3, #3
 800caae:	1a9b      	subs	r3, r3, r2
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	18cb      	adds	r3, r1, r3
 800cab4:	3334      	adds	r3, #52	@ 0x34
 800cab6:	2232      	movs	r2, #50	@ 0x32
 800cab8:	801a      	strh	r2, [r3, #0]
 800caba:	e00d      	b.n	800cad8 <_stpmt_func_motor_move+0x11c>
	else
		sMtSys[stpMtNum].accel = accel;
 800cabc:	1dfb      	adds	r3, r7, #7
 800cabe:	781a      	ldrb	r2, [r3, #0]
 800cac0:	4994      	ldr	r1, [pc, #592]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cac2:	0013      	movs	r3, r2
 800cac4:	00db      	lsls	r3, r3, #3
 800cac6:	1a9b      	subs	r3, r3, r2
 800cac8:	00db      	lsls	r3, r3, #3
 800caca:	18cb      	adds	r3, r1, r3
 800cacc:	3334      	adds	r3, #52	@ 0x34
 800cace:	001a      	movs	r2, r3
 800cad0:	2320      	movs	r3, #32
 800cad2:	18fb      	adds	r3, r7, r3
 800cad4:	881b      	ldrh	r3, [r3, #0]
 800cad6:	8013      	strh	r3, [r2, #0]

	//Acc Calc
	if( sMtSys[stpMtNum].period >= sMtSys[stpMtNum].speed )
 800cad8:	1dfb      	adds	r3, r7, #7
 800cada:	781a      	ldrb	r2, [r3, #0]
 800cadc:	498d      	ldr	r1, [pc, #564]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cade:	0013      	movs	r3, r2
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	1a9b      	subs	r3, r3, r2
 800cae4:	00db      	lsls	r3, r3, #3
 800cae6:	18cb      	adds	r3, r1, r3
 800cae8:	3328      	adds	r3, #40	@ 0x28
 800caea:	6819      	ldr	r1, [r3, #0]
 800caec:	1dfb      	adds	r3, r7, #7
 800caee:	781a      	ldrb	r2, [r3, #0]
 800caf0:	4888      	ldr	r0, [pc, #544]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800caf2:	0013      	movs	r3, r2
 800caf4:	00db      	lsls	r3, r3, #3
 800caf6:	1a9b      	subs	r3, r3, r2
 800caf8:	00db      	lsls	r3, r3, #3
 800cafa:	18c3      	adds	r3, r0, r3
 800cafc:	332c      	adds	r3, #44	@ 0x2c
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4299      	cmp	r1, r3
 800cb02:	d326      	bcc.n	800cb52 <_stpmt_func_motor_move+0x196>
	{	//accel in first ramp
		sMtSys[stpMtNum].firstRampFlag = false;
 800cb04:	1dfb      	adds	r3, r7, #7
 800cb06:	781a      	ldrb	r2, [r3, #0]
 800cb08:	4982      	ldr	r1, [pc, #520]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cb0a:	2024      	movs	r0, #36	@ 0x24
 800cb0c:	0013      	movs	r3, r2
 800cb0e:	00db      	lsls	r3, r3, #3
 800cb10:	1a9b      	subs	r3, r3, r2
 800cb12:	00db      	lsls	r3, r3, #3
 800cb14:	18cb      	adds	r3, r1, r3
 800cb16:	181b      	adds	r3, r3, r0
 800cb18:	2200      	movs	r2, #0
 800cb1a:	701a      	strb	r2, [r3, #0]
		periodDelta = sMtSys[stpMtNum].period - sMtSys[stpMtNum].speed;
 800cb1c:	1dfb      	adds	r3, r7, #7
 800cb1e:	781a      	ldrb	r2, [r3, #0]
 800cb20:	497c      	ldr	r1, [pc, #496]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cb22:	0013      	movs	r3, r2
 800cb24:	00db      	lsls	r3, r3, #3
 800cb26:	1a9b      	subs	r3, r3, r2
 800cb28:	00db      	lsls	r3, r3, #3
 800cb2a:	18cb      	adds	r3, r1, r3
 800cb2c:	3328      	adds	r3, #40	@ 0x28
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	b299      	uxth	r1, r3
 800cb32:	1dfb      	adds	r3, r7, #7
 800cb34:	781a      	ldrb	r2, [r3, #0]
 800cb36:	4877      	ldr	r0, [pc, #476]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cb38:	0013      	movs	r3, r2
 800cb3a:	00db      	lsls	r3, r3, #3
 800cb3c:	1a9b      	subs	r3, r3, r2
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	18c3      	adds	r3, r0, r3
 800cb42:	332c      	adds	r3, #44	@ 0x2c
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	230e      	movs	r3, #14
 800cb4a:	18fb      	adds	r3, r7, r3
 800cb4c:	1a8a      	subs	r2, r1, r2
 800cb4e:	801a      	strh	r2, [r3, #0]
 800cb50:	e025      	b.n	800cb9e <_stpmt_func_motor_move+0x1e2>
	}
	else
	{	//deaccel in first ramp
		sMtSys[stpMtNum].firstRampFlag = true;
 800cb52:	1dfb      	adds	r3, r7, #7
 800cb54:	781a      	ldrb	r2, [r3, #0]
 800cb56:	496f      	ldr	r1, [pc, #444]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cb58:	2024      	movs	r0, #36	@ 0x24
 800cb5a:	0013      	movs	r3, r2
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	1a9b      	subs	r3, r3, r2
 800cb60:	00db      	lsls	r3, r3, #3
 800cb62:	18cb      	adds	r3, r1, r3
 800cb64:	181b      	adds	r3, r3, r0
 800cb66:	2201      	movs	r2, #1
 800cb68:	701a      	strb	r2, [r3, #0]
		periodDelta = sMtSys[stpMtNum].speed - sMtSys[stpMtNum].period;
 800cb6a:	1dfb      	adds	r3, r7, #7
 800cb6c:	781a      	ldrb	r2, [r3, #0]
 800cb6e:	4969      	ldr	r1, [pc, #420]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cb70:	0013      	movs	r3, r2
 800cb72:	00db      	lsls	r3, r3, #3
 800cb74:	1a9b      	subs	r3, r3, r2
 800cb76:	00db      	lsls	r3, r3, #3
 800cb78:	18cb      	adds	r3, r1, r3
 800cb7a:	332c      	adds	r3, #44	@ 0x2c
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	b299      	uxth	r1, r3
 800cb80:	1dfb      	adds	r3, r7, #7
 800cb82:	781a      	ldrb	r2, [r3, #0]
 800cb84:	4863      	ldr	r0, [pc, #396]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cb86:	0013      	movs	r3, r2
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	1a9b      	subs	r3, r3, r2
 800cb8c:	00db      	lsls	r3, r3, #3
 800cb8e:	18c3      	adds	r3, r0, r3
 800cb90:	3328      	adds	r3, #40	@ 0x28
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	230e      	movs	r3, #14
 800cb98:	18fb      	adds	r3, r7, r3
 800cb9a:	1a8a      	subs	r2, r1, r2
 800cb9c:	801a      	strh	r2, [r3, #0]
	}
		//first ramp
	sMtSys[stpMtNum].stepSysRampCounter[0] = 0;
 800cb9e:	1dfb      	adds	r3, r7, #7
 800cba0:	781a      	ldrb	r2, [r3, #0]
 800cba2:	495c      	ldr	r1, [pc, #368]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cba4:	0013      	movs	r3, r2
 800cba6:	00db      	lsls	r3, r3, #3
 800cba8:	1a9b      	subs	r3, r3, r2
 800cbaa:	00db      	lsls	r3, r3, #3
 800cbac:	18cb      	adds	r3, r1, r3
 800cbae:	330c      	adds	r3, #12
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	601a      	str	r2, [r3, #0]
	sMtSys[stpMtNum].stepSysRampCompare[0] = periodDelta / sMtSys[stpMtNum].accel;
 800cbb4:	1dfb      	adds	r3, r7, #7
 800cbb6:	781a      	ldrb	r2, [r3, #0]
 800cbb8:	4956      	ldr	r1, [pc, #344]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cbba:	0013      	movs	r3, r2
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	1a9b      	subs	r3, r3, r2
 800cbc0:	00db      	lsls	r3, r3, #3
 800cbc2:	18cb      	adds	r3, r1, r3
 800cbc4:	3334      	adds	r3, #52	@ 0x34
 800cbc6:	881a      	ldrh	r2, [r3, #0]
 800cbc8:	240e      	movs	r4, #14
 800cbca:	193b      	adds	r3, r7, r4
 800cbcc:	881b      	ldrh	r3, [r3, #0]
 800cbce:	0011      	movs	r1, r2
 800cbd0:	0018      	movs	r0, r3
 800cbd2:	f7f3 fa99 	bl	8000108 <__udivsi3>
 800cbd6:	0003      	movs	r3, r0
 800cbd8:	b299      	uxth	r1, r3
 800cbda:	1dfb      	adds	r3, r7, #7
 800cbdc:	781a      	ldrb	r2, [r3, #0]
 800cbde:	0008      	movs	r0, r1
 800cbe0:	494c      	ldr	r1, [pc, #304]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cbe2:	0013      	movs	r3, r2
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	1a9b      	subs	r3, r3, r2
 800cbe8:	00db      	lsls	r3, r3, #3
 800cbea:	18cb      	adds	r3, r1, r3
 800cbec:	3318      	adds	r3, #24
 800cbee:	6018      	str	r0, [r3, #0]
		//deaccel raamp
	sMtSys[stpMtNum].stepSysRampCounter[2] = 0;
 800cbf0:	1dfb      	adds	r3, r7, #7
 800cbf2:	781a      	ldrb	r2, [r3, #0]
 800cbf4:	4947      	ldr	r1, [pc, #284]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cbf6:	0013      	movs	r3, r2
 800cbf8:	00db      	lsls	r3, r3, #3
 800cbfa:	1a9b      	subs	r3, r3, r2
 800cbfc:	00db      	lsls	r3, r3, #3
 800cbfe:	18cb      	adds	r3, r1, r3
 800cc00:	3314      	adds	r3, #20
 800cc02:	2200      	movs	r2, #0
 800cc04:	601a      	str	r2, [r3, #0]
	//sMtSys[stpMtNum].stepSysRampCompare[2] = sMtSys[stpMtNum].speed / sMtSys[stpMtNum].accel;
	sMtSys[stpMtNum].stepSysRampCompare[2] = periodDelta / sMtSys[stpMtNum].accel;
 800cc06:	1dfb      	adds	r3, r7, #7
 800cc08:	781a      	ldrb	r2, [r3, #0]
 800cc0a:	4942      	ldr	r1, [pc, #264]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cc0c:	0013      	movs	r3, r2
 800cc0e:	00db      	lsls	r3, r3, #3
 800cc10:	1a9b      	subs	r3, r3, r2
 800cc12:	00db      	lsls	r3, r3, #3
 800cc14:	18cb      	adds	r3, r1, r3
 800cc16:	3334      	adds	r3, #52	@ 0x34
 800cc18:	881a      	ldrh	r2, [r3, #0]
 800cc1a:	193b      	adds	r3, r7, r4
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	0011      	movs	r1, r2
 800cc20:	0018      	movs	r0, r3
 800cc22:	f7f3 fa71 	bl	8000108 <__udivsi3>
 800cc26:	0003      	movs	r3, r0
 800cc28:	b299      	uxth	r1, r3
 800cc2a:	1dfb      	adds	r3, r7, #7
 800cc2c:	781a      	ldrb	r2, [r3, #0]
 800cc2e:	0008      	movs	r0, r1
 800cc30:	4938      	ldr	r1, [pc, #224]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cc32:	0013      	movs	r3, r2
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	1a9b      	subs	r3, r3, r2
 800cc38:	00db      	lsls	r3, r3, #3
 800cc3a:	18cb      	adds	r3, r1, r3
 800cc3c:	3320      	adds	r3, #32
 800cc3e:	6018      	str	r0, [r3, #0]
		//plateau ramp
	accTot = sMtSys[stpMtNum].stepSysRampCompare[0] + sMtSys[stpMtNum].stepSysRampCompare[2];
 800cc40:	1dfb      	adds	r3, r7, #7
 800cc42:	781a      	ldrb	r2, [r3, #0]
 800cc44:	4933      	ldr	r1, [pc, #204]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cc46:	0013      	movs	r3, r2
 800cc48:	00db      	lsls	r3, r3, #3
 800cc4a:	1a9b      	subs	r3, r3, r2
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	18cb      	adds	r3, r1, r3
 800cc50:	3318      	adds	r3, #24
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	b299      	uxth	r1, r3
 800cc56:	1dfb      	adds	r3, r7, #7
 800cc58:	781a      	ldrb	r2, [r3, #0]
 800cc5a:	482e      	ldr	r0, [pc, #184]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cc5c:	0013      	movs	r3, r2
 800cc5e:	00db      	lsls	r3, r3, #3
 800cc60:	1a9b      	subs	r3, r3, r2
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	18c3      	adds	r3, r0, r3
 800cc66:	3320      	adds	r3, #32
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	200c      	movs	r0, #12
 800cc6e:	183b      	adds	r3, r7, r0
 800cc70:	188a      	adds	r2, r1, r2
 800cc72:	801a      	strh	r2, [r3, #0]
	sMtSys[stpMtNum].stepSysRampCounter[1] = 0;
 800cc74:	1dfb      	adds	r3, r7, #7
 800cc76:	781a      	ldrb	r2, [r3, #0]
 800cc78:	4926      	ldr	r1, [pc, #152]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cc7a:	0013      	movs	r3, r2
 800cc7c:	00db      	lsls	r3, r3, #3
 800cc7e:	1a9b      	subs	r3, r3, r2
 800cc80:	00db      	lsls	r3, r3, #3
 800cc82:	18cb      	adds	r3, r1, r3
 800cc84:	3310      	adds	r3, #16
 800cc86:	2200      	movs	r2, #0
 800cc88:	601a      	str	r2, [r3, #0]
	sMtSys[stpMtNum].stepSysRampCompare[1] = sMtSys[stpMtNum].stepTot - accTot;
 800cc8a:	1dfb      	adds	r3, r7, #7
 800cc8c:	781a      	ldrb	r2, [r3, #0]
 800cc8e:	4921      	ldr	r1, [pc, #132]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cc90:	0013      	movs	r3, r2
 800cc92:	00db      	lsls	r3, r3, #3
 800cc94:	1a9b      	subs	r3, r3, r2
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	18cb      	adds	r3, r1, r3
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	6819      	ldr	r1, [r3, #0]
 800cc9e:	183b      	adds	r3, r7, r0
 800cca0:	881b      	ldrh	r3, [r3, #0]
 800cca2:	1dfa      	adds	r2, r7, #7
 800cca4:	7812      	ldrb	r2, [r2, #0]
 800cca6:	1ac9      	subs	r1, r1, r3
 800cca8:	481a      	ldr	r0, [pc, #104]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800ccaa:	0013      	movs	r3, r2
 800ccac:	00db      	lsls	r3, r3, #3
 800ccae:	1a9b      	subs	r3, r3, r2
 800ccb0:	00db      	lsls	r3, r3, #3
 800ccb2:	18c3      	adds	r3, r0, r3
 800ccb4:	331c      	adds	r3, #28
 800ccb6:	6019      	str	r1, [r3, #0]

	//START
	sMtSys[stpMtNum].stsRun = _e_StpMtSts_Acce;
 800ccb8:	1dfb      	adds	r3, r7, #7
 800ccba:	781a      	ldrb	r2, [r3, #0]
 800ccbc:	4915      	ldr	r1, [pc, #84]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800ccbe:	0013      	movs	r3, r2
 800ccc0:	00db      	lsls	r3, r3, #3
 800ccc2:	1a9b      	subs	r3, r3, r2
 800ccc4:	00db      	lsls	r3, r3, #3
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	545a      	strb	r2, [r3, r1]
	sMtSys[stpMtNum].direction = stpMtDir;
 800ccca:	1dfb      	adds	r3, r7, #7
 800cccc:	781a      	ldrb	r2, [r3, #0]
 800ccce:	4911      	ldr	r1, [pc, #68]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800ccd0:	0013      	movs	r3, r2
 800ccd2:	00db      	lsls	r3, r3, #3
 800ccd4:	1a9b      	subs	r3, r3, r2
 800ccd6:	00db      	lsls	r3, r3, #3
 800ccd8:	18cb      	adds	r3, r1, r3
 800ccda:	3302      	adds	r3, #2
 800ccdc:	1dba      	adds	r2, r7, #6
 800ccde:	7812      	ldrb	r2, [r2, #0]
 800cce0:	701a      	strb	r2, [r3, #0]
	_stpmt_func_motor_start(stpMtNum , sMtSys[stpMtNum].direction);
 800cce2:	1dfb      	adds	r3, r7, #7
 800cce4:	781a      	ldrb	r2, [r3, #0]
 800cce6:	490b      	ldr	r1, [pc, #44]	@ (800cd14 <_stpmt_func_motor_move+0x358>)
 800cce8:	0013      	movs	r3, r2
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	1a9b      	subs	r3, r3, r2
 800ccee:	00db      	lsls	r3, r3, #3
 800ccf0:	18cb      	adds	r3, r1, r3
 800ccf2:	3302      	adds	r3, #2
 800ccf4:	781a      	ldrb	r2, [r3, #0]
 800ccf6:	1dfb      	adds	r3, r7, #7
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	0011      	movs	r1, r2
 800ccfc:	0018      	movs	r0, r3
 800ccfe:	f7ff fe2b 	bl	800c958 <_stpmt_func_motor_start>
}
 800cd02:	46c0      	nop			@ (mov r8, r8)
 800cd04:	46bd      	mov	sp, r7
 800cd06:	b005      	add	sp, #20
 800cd08:	bd90      	pop	{r4, r7, pc}
 800cd0a:	46c0      	nop			@ (mov r8, r8)
 800cd0c:	71c71c72 	.word	0x71c71c72
 800cd10:	4071c71c 	.word	0x4071c71c
 800cd14:	20000288 	.word	0x20000288
 800cd18:	0000445c 	.word	0x0000445c
 800cd1c:	ffffbba4 	.word	0xffffbba4

0800cd20 <_stpmt_task_ctrl>:
{
	_e_stpmt_task_ctrl,
}t_stpmt_task_ctrl;

static void _stpmt_task_ctrl( tStpMtNum stpMtNum )
{
 800cd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af02      	add	r7, sp, #8
 800cd26:	0002      	movs	r2, r0
 800cd28:	1dfb      	adds	r3, r7, #7
 800cd2a:	701a      	strb	r2, [r3, #0]
	tTaskManager STPMTASK = ( STPMT1 + (tTaskManager)stpMtNum );
 800cd2c:	240f      	movs	r4, #15
 800cd2e:	193b      	adds	r3, r7, r4
 800cd30:	1dfa      	adds	r2, r7, #7
 800cd32:	7812      	ldrb	r2, [r2, #0]
 800cd34:	701a      	strb	r2, [r3, #0]
	TaskManager_Set( STPMTASK , _e_stpmt_task_ctrl );
 800cd36:	193b      	adds	r3, r7, r4
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	0018      	movs	r0, r3
 800cd3e:	f000 fd27 	bl	800d790 <TaskManager_Set>
	if( TaskManager_First_Get( STPMTASK ) == false ){
 800cd42:	193b      	adds	r3, r7, r4
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	0018      	movs	r0, r3
 800cd48:	f000 fd88 	bl	800d85c <TaskManager_First_Get>
 800cd4c:	1e03      	subs	r3, r0, #0
 800cd4e:	d10a      	bne.n	800cd66 <_stpmt_task_ctrl+0x46>
		TaskManager_First_Set( STPMTASK );
 800cd50:	193b      	adds	r3, r7, r4
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	0018      	movs	r0, r3
 800cd56:	f000 fd37 	bl	800d7c8 <TaskManager_First_Set>
		TaskManager_Step_Set( STPMTASK, 0 );
 800cd5a:	193b      	adds	r3, r7, r4
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	2100      	movs	r1, #0
 800cd60:	0018      	movs	r0, r3
 800cd62:	f000 fd9d 	bl	800d8a0 <TaskManager_Step_Set>
	}

	switch( (uint8_t)TaskManager_Step_Get( STPMTASK ) )
 800cd66:	230f      	movs	r3, #15
 800cd68:	18fb      	adds	r3, r7, r3
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	0018      	movs	r0, r3
 800cd6e:	f000 fdc1 	bl	800d8f4 <TaskManager_Step_Get>
 800cd72:	0003      	movs	r3, r0
 800cd74:	2b02      	cmp	r3, #2
 800cd76:	d100      	bne.n	800cd7a <_stpmt_task_ctrl+0x5a>
 800cd78:	e0d3      	b.n	800cf22 <_stpmt_task_ctrl+0x202>
 800cd7a:	dd00      	ble.n	800cd7e <_stpmt_task_ctrl+0x5e>
 800cd7c:	e0e3      	b.n	800cf46 <_stpmt_task_ctrl+0x226>
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d003      	beq.n	800cd8a <_stpmt_task_ctrl+0x6a>
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d100      	bne.n	800cd88 <_stpmt_task_ctrl+0x68>
 800cd86:	e0a8      	b.n	800ceda <_stpmt_task_ctrl+0x1ba>
 800cd88:	e0dd      	b.n	800cf46 <_stpmt_task_ctrl+0x226>
	{

	case 0://_e_stpmt_task_ctrl_idle

		if( sMtCtrl[stpMtNum].ActionRequest == true )
 800cd8a:	1dfb      	adds	r3, r7, #7
 800cd8c:	781a      	ldrb	r2, [r3, #0]
 800cd8e:	4975      	ldr	r1, [pc, #468]	@ (800cf64 <_stpmt_task_ctrl+0x244>)
 800cd90:	0013      	movs	r3, r2
 800cd92:	005b      	lsls	r3, r3, #1
 800cd94:	189b      	adds	r3, r3, r2
 800cd96:	00db      	lsls	r3, r3, #3
 800cd98:	5c5b      	ldrb	r3, [r3, r1]
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d000      	beq.n	800cda0 <_stpmt_task_ctrl+0x80>
 800cd9e:	e0da      	b.n	800cf56 <_stpmt_task_ctrl+0x236>
		{
			if( sMtSys[stpMtNum].stsRun == _e_StpMtSts_Stop )
 800cda0:	1dfb      	adds	r3, r7, #7
 800cda2:	781a      	ldrb	r2, [r3, #0]
 800cda4:	4970      	ldr	r1, [pc, #448]	@ (800cf68 <_stpmt_task_ctrl+0x248>)
 800cda6:	0013      	movs	r3, r2
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	1a9b      	subs	r3, r3, r2
 800cdac:	00db      	lsls	r3, r3, #3
 800cdae:	5c5b      	ldrb	r3, [r3, r1]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d13a      	bne.n	800ce2a <_stpmt_task_ctrl+0x10a>
			{
				_stpmt_func_motor_move(stpMtNum,sMtCtrl[stpMtNum].stpMtDir,sMtCtrl[stpMtNum].ang,sMtCtrl[stpMtNum].speed,sMtCtrl[stpMtNum].accel);
 800cdb4:	1dfb      	adds	r3, r7, #7
 800cdb6:	781a      	ldrb	r2, [r3, #0]
 800cdb8:	496a      	ldr	r1, [pc, #424]	@ (800cf64 <_stpmt_task_ctrl+0x244>)
 800cdba:	0013      	movs	r3, r2
 800cdbc:	005b      	lsls	r3, r3, #1
 800cdbe:	189b      	adds	r3, r3, r2
 800cdc0:	00db      	lsls	r3, r3, #3
 800cdc2:	18cb      	adds	r3, r1, r3
 800cdc4:	3309      	adds	r3, #9
 800cdc6:	781c      	ldrb	r4, [r3, #0]
 800cdc8:	1dfb      	adds	r3, r7, #7
 800cdca:	781a      	ldrb	r2, [r3, #0]
 800cdcc:	4965      	ldr	r1, [pc, #404]	@ (800cf64 <_stpmt_task_ctrl+0x244>)
 800cdce:	0013      	movs	r3, r2
 800cdd0:	005b      	lsls	r3, r3, #1
 800cdd2:	189b      	adds	r3, r3, r2
 800cdd4:	00db      	lsls	r3, r3, #3
 800cdd6:	18cb      	adds	r3, r1, r3
 800cdd8:	330c      	adds	r3, #12
 800cdda:	681d      	ldr	r5, [r3, #0]
 800cddc:	1dfb      	adds	r3, r7, #7
 800cdde:	781a      	ldrb	r2, [r3, #0]
 800cde0:	4960      	ldr	r1, [pc, #384]	@ (800cf64 <_stpmt_task_ctrl+0x244>)
 800cde2:	0013      	movs	r3, r2
 800cde4:	005b      	lsls	r3, r3, #1
 800cde6:	189b      	adds	r3, r3, r2
 800cde8:	00db      	lsls	r3, r3, #3
 800cdea:	18cb      	adds	r3, r1, r3
 800cdec:	3310      	adds	r3, #16
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	b29e      	uxth	r6, r3
 800cdf2:	1dfb      	adds	r3, r7, #7
 800cdf4:	781a      	ldrb	r2, [r3, #0]
 800cdf6:	495b      	ldr	r1, [pc, #364]	@ (800cf64 <_stpmt_task_ctrl+0x244>)
 800cdf8:	0013      	movs	r3, r2
 800cdfa:	005b      	lsls	r3, r3, #1
 800cdfc:	189b      	adds	r3, r3, r2
 800cdfe:	00db      	lsls	r3, r3, #3
 800ce00:	18cb      	adds	r3, r1, r3
 800ce02:	3314      	adds	r3, #20
 800ce04:	881b      	ldrh	r3, [r3, #0]
 800ce06:	1dfa      	adds	r2, r7, #7
 800ce08:	7810      	ldrb	r0, [r2, #0]
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	0033      	movs	r3, r6
 800ce0e:	1c2a      	adds	r2, r5, #0
 800ce10:	0021      	movs	r1, r4
 800ce12:	f7ff fdd3 	bl	800c9bc <_stpmt_func_motor_move>
				sMtCtrl[stpMtNum].ActionRequest = false;
 800ce16:	1dfb      	adds	r3, r7, #7
 800ce18:	781a      	ldrb	r2, [r3, #0]
 800ce1a:	4952      	ldr	r1, [pc, #328]	@ (800cf64 <_stpmt_task_ctrl+0x244>)
 800ce1c:	0013      	movs	r3, r2
 800ce1e:	005b      	lsls	r3, r3, #1
 800ce20:	189b      	adds	r3, r3, r2
 800ce22:	00db      	lsls	r3, r3, #3
 800ce24:	2200      	movs	r2, #0
 800ce26:	545a      	strb	r2, [r3, r1]
					sMtCtrl[stpMtNum].ActionRequest = false;
				}
			}
		}

		break;
 800ce28:	e095      	b.n	800cf56 <_stpmt_task_ctrl+0x236>
				if( sMtCtrl[stpMtNum].stpMtDir != sMtSys[stpMtNum].direction )
 800ce2a:	1dfb      	adds	r3, r7, #7
 800ce2c:	781a      	ldrb	r2, [r3, #0]
 800ce2e:	494d      	ldr	r1, [pc, #308]	@ (800cf64 <_stpmt_task_ctrl+0x244>)
 800ce30:	0013      	movs	r3, r2
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	189b      	adds	r3, r3, r2
 800ce36:	00db      	lsls	r3, r3, #3
 800ce38:	18cb      	adds	r3, r1, r3
 800ce3a:	3309      	adds	r3, #9
 800ce3c:	7819      	ldrb	r1, [r3, #0]
 800ce3e:	1dfb      	adds	r3, r7, #7
 800ce40:	781a      	ldrb	r2, [r3, #0]
 800ce42:	4849      	ldr	r0, [pc, #292]	@ (800cf68 <_stpmt_task_ctrl+0x248>)
 800ce44:	0013      	movs	r3, r2
 800ce46:	00db      	lsls	r3, r3, #3
 800ce48:	1a9b      	subs	r3, r3, r2
 800ce4a:	00db      	lsls	r3, r3, #3
 800ce4c:	18c3      	adds	r3, r0, r3
 800ce4e:	3302      	adds	r3, #2
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	4299      	cmp	r1, r3
 800ce54:	d006      	beq.n	800ce64 <_stpmt_task_ctrl+0x144>
					TaskManager_Step_Inc(STPMTASK);
 800ce56:	230f      	movs	r3, #15
 800ce58:	18fb      	adds	r3, r7, r3
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	0018      	movs	r0, r3
 800ce5e:	f000 fd6d 	bl	800d93c <TaskManager_Step_Inc>
		break;
 800ce62:	e078      	b.n	800cf56 <_stpmt_task_ctrl+0x236>
					_stpmt_func_motor_move(stpMtNum,sMtCtrl[stpMtNum].stpMtDir,sMtCtrl[stpMtNum].ang,sMtCtrl[stpMtNum].speed,sMtCtrl[stpMtNum].accel);
 800ce64:	1dfb      	adds	r3, r7, #7
 800ce66:	781a      	ldrb	r2, [r3, #0]
 800ce68:	493e      	ldr	r1, [pc, #248]	@ (800cf64 <_stpmt_task_ctrl+0x244>)
 800ce6a:	0013      	movs	r3, r2
 800ce6c:	005b      	lsls	r3, r3, #1
 800ce6e:	189b      	adds	r3, r3, r2
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	18cb      	adds	r3, r1, r3
 800ce74:	3309      	adds	r3, #9
 800ce76:	781c      	ldrb	r4, [r3, #0]
 800ce78:	1dfb      	adds	r3, r7, #7
 800ce7a:	781a      	ldrb	r2, [r3, #0]
 800ce7c:	4939      	ldr	r1, [pc, #228]	@ (800cf64 <_stpmt_task_ctrl+0x244>)
 800ce7e:	0013      	movs	r3, r2
 800ce80:	005b      	lsls	r3, r3, #1
 800ce82:	189b      	adds	r3, r3, r2
 800ce84:	00db      	lsls	r3, r3, #3
 800ce86:	18cb      	adds	r3, r1, r3
 800ce88:	330c      	adds	r3, #12
 800ce8a:	681d      	ldr	r5, [r3, #0]
 800ce8c:	1dfb      	adds	r3, r7, #7
 800ce8e:	781a      	ldrb	r2, [r3, #0]
 800ce90:	4934      	ldr	r1, [pc, #208]	@ (800cf64 <_stpmt_task_ctrl+0x244>)
 800ce92:	0013      	movs	r3, r2
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	189b      	adds	r3, r3, r2
 800ce98:	00db      	lsls	r3, r3, #3
 800ce9a:	18cb      	adds	r3, r1, r3
 800ce9c:	3310      	adds	r3, #16
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	b29e      	uxth	r6, r3
 800cea2:	1dfb      	adds	r3, r7, #7
 800cea4:	781a      	ldrb	r2, [r3, #0]
 800cea6:	492f      	ldr	r1, [pc, #188]	@ (800cf64 <_stpmt_task_ctrl+0x244>)
 800cea8:	0013      	movs	r3, r2
 800ceaa:	005b      	lsls	r3, r3, #1
 800ceac:	189b      	adds	r3, r3, r2
 800ceae:	00db      	lsls	r3, r3, #3
 800ceb0:	18cb      	adds	r3, r1, r3
 800ceb2:	3314      	adds	r3, #20
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	1dfa      	adds	r2, r7, #7
 800ceb8:	7810      	ldrb	r0, [r2, #0]
 800ceba:	9300      	str	r3, [sp, #0]
 800cebc:	0033      	movs	r3, r6
 800cebe:	1c2a      	adds	r2, r5, #0
 800cec0:	0021      	movs	r1, r4
 800cec2:	f7ff fd7b 	bl	800c9bc <_stpmt_func_motor_move>
					sMtCtrl[stpMtNum].ActionRequest = false;
 800cec6:	1dfb      	adds	r3, r7, #7
 800cec8:	781a      	ldrb	r2, [r3, #0]
 800ceca:	4926      	ldr	r1, [pc, #152]	@ (800cf64 <_stpmt_task_ctrl+0x244>)
 800cecc:	0013      	movs	r3, r2
 800cece:	005b      	lsls	r3, r3, #1
 800ced0:	189b      	adds	r3, r3, r2
 800ced2:	00db      	lsls	r3, r3, #3
 800ced4:	2200      	movs	r2, #0
 800ced6:	545a      	strb	r2, [r3, r1]
		break;
 800ced8:	e03d      	b.n	800cf56 <_stpmt_task_ctrl+0x236>

	case 1://reverse direction
		sMtSys[stpMtNum].stsRun = _e_StpMtSts_Deac;
 800ceda:	1dfb      	adds	r3, r7, #7
 800cedc:	781a      	ldrb	r2, [r3, #0]
 800cede:	4922      	ldr	r1, [pc, #136]	@ (800cf68 <_stpmt_task_ctrl+0x248>)
 800cee0:	0013      	movs	r3, r2
 800cee2:	00db      	lsls	r3, r3, #3
 800cee4:	1a9b      	subs	r3, r3, r2
 800cee6:	00db      	lsls	r3, r3, #3
 800cee8:	2203      	movs	r2, #3
 800ceea:	545a      	strb	r2, [r3, r1]
		sMtSys[stpMtNum].stepSys = sMtSys[stpMtNum].stepSysRampCompare[2];
 800ceec:	1dfb      	adds	r3, r7, #7
 800ceee:	7819      	ldrb	r1, [r3, #0]
 800cef0:	1dfb      	adds	r3, r7, #7
 800cef2:	781a      	ldrb	r2, [r3, #0]
 800cef4:	481c      	ldr	r0, [pc, #112]	@ (800cf68 <_stpmt_task_ctrl+0x248>)
 800cef6:	000b      	movs	r3, r1
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	1a5b      	subs	r3, r3, r1
 800cefc:	00db      	lsls	r3, r3, #3
 800cefe:	18c3      	adds	r3, r0, r3
 800cf00:	3320      	adds	r3, #32
 800cf02:	6819      	ldr	r1, [r3, #0]
 800cf04:	4818      	ldr	r0, [pc, #96]	@ (800cf68 <_stpmt_task_ctrl+0x248>)
 800cf06:	0013      	movs	r3, r2
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	1a9b      	subs	r3, r3, r2
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	18c3      	adds	r3, r0, r3
 800cf10:	3308      	adds	r3, #8
 800cf12:	6019      	str	r1, [r3, #0]
		TaskManager_Step_Inc(STPMTASK);
 800cf14:	230f      	movs	r3, #15
 800cf16:	18fb      	adds	r3, r7, r3
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	0018      	movs	r0, r3
 800cf1c:	f000 fd0e 	bl	800d93c <TaskManager_Step_Inc>
		break;
 800cf20:	e01c      	b.n	800cf5c <_stpmt_task_ctrl+0x23c>

	case 2://wait stop
		if( sMtSys[stpMtNum].stsRun == _e_StpMtSts_Stop )
 800cf22:	1dfb      	adds	r3, r7, #7
 800cf24:	781a      	ldrb	r2, [r3, #0]
 800cf26:	4910      	ldr	r1, [pc, #64]	@ (800cf68 <_stpmt_task_ctrl+0x248>)
 800cf28:	0013      	movs	r3, r2
 800cf2a:	00db      	lsls	r3, r3, #3
 800cf2c:	1a9b      	subs	r3, r3, r2
 800cf2e:	00db      	lsls	r3, r3, #3
 800cf30:	5c5b      	ldrb	r3, [r3, r1]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d111      	bne.n	800cf5a <_stpmt_task_ctrl+0x23a>
		{
			TaskManager_Step_Set( STPMTASK, 0 );
 800cf36:	230f      	movs	r3, #15
 800cf38:	18fb      	adds	r3, r7, r3
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	0018      	movs	r0, r3
 800cf40:	f000 fcae 	bl	800d8a0 <TaskManager_Step_Set>
		}
		break;
 800cf44:	e009      	b.n	800cf5a <_stpmt_task_ctrl+0x23a>

	default:
		TaskManager_Step_Set( STPMTASK , 0 );
 800cf46:	230f      	movs	r3, #15
 800cf48:	18fb      	adds	r3, r7, r3
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	0018      	movs	r0, r3
 800cf50:	f000 fca6 	bl	800d8a0 <TaskManager_Step_Set>
		break;
 800cf54:	e002      	b.n	800cf5c <_stpmt_task_ctrl+0x23c>
		break;
 800cf56:	46c0      	nop			@ (mov r8, r8)
 800cf58:	e000      	b.n	800cf5c <_stpmt_task_ctrl+0x23c>
		break;
 800cf5a:	46c0      	nop			@ (mov r8, r8)

	}
}
 800cf5c:	46c0      	nop			@ (mov r8, r8)
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	b005      	add	sp, #20
 800cf62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf64:	200002f8 	.word	0x200002f8
 800cf68:	20000288 	.word	0x20000288

0800cf6c <_stpmt_TASK>:

//STEP MOTOR MAIN TASK

static void _stpmt_TASK(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	af00      	add	r7, sp, #0
	sMtask[_e_StpMt_Pri].TASK(_e_StpMt_Pri);
 800cf70:	4b05      	ldr	r3, [pc, #20]	@ (800cf88 <_stpmt_TASK+0x1c>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2000      	movs	r0, #0
 800cf76:	4798      	blx	r3
	sMtask[_e_StpMt_Sec].TASK(_e_StpMt_Sec);
 800cf78:	4b03      	ldr	r3, [pc, #12]	@ (800cf88 <_stpmt_TASK+0x1c>)
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	2001      	movs	r0, #1
 800cf7e:	4798      	blx	r3
}
 800cf80:	46c0      	nop			@ (mov r8, r8)
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	46c0      	nop			@ (mov r8, r8)
 800cf88:	20000280 	.word	0x20000280

0800cf8c <StepMotor_IT>:

/*** ** * IRQ Funcs * ** ***/

void StepMotor_IT(tStpMtNum stpMtNum)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	0002      	movs	r2, r0
 800cf94:	1dfb      	adds	r3, r7, #7
 800cf96:	701a      	strb	r2, [r3, #0]
	if( sMtSys[stpMtNum].stepSys > 0 )
 800cf98:	1dfb      	adds	r3, r7, #7
 800cf9a:	781a      	ldrb	r2, [r3, #0]
 800cf9c:	49d1      	ldr	r1, [pc, #836]	@ (800d2e4 <StepMotor_IT+0x358>)
 800cf9e:	0013      	movs	r3, r2
 800cfa0:	00db      	lsls	r3, r3, #3
 800cfa2:	1a9b      	subs	r3, r3, r2
 800cfa4:	00db      	lsls	r3, r3, #3
 800cfa6:	18cb      	adds	r3, r1, r3
 800cfa8:	3308      	adds	r3, #8
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d100      	bne.n	800cfb2 <StepMotor_IT+0x26>
 800cfb0:	e1e2      	b.n	800d378 <StepMotor_IT+0x3ec>
	{
		//ramp0 (acc/deac)
		if( sMtSys[stpMtNum].stsRun == _e_StpMtSts_Acce )
 800cfb2:	1dfb      	adds	r3, r7, #7
 800cfb4:	781a      	ldrb	r2, [r3, #0]
 800cfb6:	49cb      	ldr	r1, [pc, #812]	@ (800d2e4 <StepMotor_IT+0x358>)
 800cfb8:	0013      	movs	r3, r2
 800cfba:	00db      	lsls	r3, r3, #3
 800cfbc:	1a9b      	subs	r3, r3, r2
 800cfbe:	00db      	lsls	r3, r3, #3
 800cfc0:	5c5b      	ldrb	r3, [r3, r1]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d000      	beq.n	800cfc8 <StepMotor_IT+0x3c>
 800cfc6:	e0e1      	b.n	800d18c <StepMotor_IT+0x200>
		{
			sMtSys[stpMtNum].stsRunRet = _e_StpMtSts_Acce;
 800cfc8:	1dfb      	adds	r3, r7, #7
 800cfca:	781a      	ldrb	r2, [r3, #0]
 800cfcc:	49c5      	ldr	r1, [pc, #788]	@ (800d2e4 <StepMotor_IT+0x358>)
 800cfce:	0013      	movs	r3, r2
 800cfd0:	00db      	lsls	r3, r3, #3
 800cfd2:	1a9b      	subs	r3, r3, r2
 800cfd4:	00db      	lsls	r3, r3, #3
 800cfd6:	18cb      	adds	r3, r1, r3
 800cfd8:	3301      	adds	r3, #1
 800cfda:	2201      	movs	r2, #1
 800cfdc:	701a      	strb	r2, [r3, #0]
			//ramp step control
			sMtSys[stpMtNum].stepSysRampCounter[0]++;
 800cfde:	1dfb      	adds	r3, r7, #7
 800cfe0:	781a      	ldrb	r2, [r3, #0]
 800cfe2:	49c0      	ldr	r1, [pc, #768]	@ (800d2e4 <StepMotor_IT+0x358>)
 800cfe4:	0013      	movs	r3, r2
 800cfe6:	00db      	lsls	r3, r3, #3
 800cfe8:	1a9b      	subs	r3, r3, r2
 800cfea:	00db      	lsls	r3, r3, #3
 800cfec:	18cb      	adds	r3, r1, r3
 800cfee:	330c      	adds	r3, #12
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	1c59      	adds	r1, r3, #1
 800cff4:	48bb      	ldr	r0, [pc, #748]	@ (800d2e4 <StepMotor_IT+0x358>)
 800cff6:	0013      	movs	r3, r2
 800cff8:	00db      	lsls	r3, r3, #3
 800cffa:	1a9b      	subs	r3, r3, r2
 800cffc:	00db      	lsls	r3, r3, #3
 800cffe:	18c3      	adds	r3, r0, r3
 800d000:	330c      	adds	r3, #12
 800d002:	6019      	str	r1, [r3, #0]
			if( sMtSys[stpMtNum].stepSysRampCounter[0] >= sMtSys[stpMtNum].stepSysRampCompare[0] ){
 800d004:	1dfb      	adds	r3, r7, #7
 800d006:	781a      	ldrb	r2, [r3, #0]
 800d008:	49b6      	ldr	r1, [pc, #728]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d00a:	0013      	movs	r3, r2
 800d00c:	00db      	lsls	r3, r3, #3
 800d00e:	1a9b      	subs	r3, r3, r2
 800d010:	00db      	lsls	r3, r3, #3
 800d012:	18cb      	adds	r3, r1, r3
 800d014:	330c      	adds	r3, #12
 800d016:	6819      	ldr	r1, [r3, #0]
 800d018:	1dfb      	adds	r3, r7, #7
 800d01a:	781a      	ldrb	r2, [r3, #0]
 800d01c:	48b1      	ldr	r0, [pc, #708]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d01e:	0013      	movs	r3, r2
 800d020:	00db      	lsls	r3, r3, #3
 800d022:	1a9b      	subs	r3, r3, r2
 800d024:	00db      	lsls	r3, r3, #3
 800d026:	18c3      	adds	r3, r0, r3
 800d028:	3318      	adds	r3, #24
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4299      	cmp	r1, r3
 800d02e:	d308      	bcc.n	800d042 <StepMotor_IT+0xb6>
				sMtSys[stpMtNum].stsRun = _e_StpMtSts_Plat;
 800d030:	1dfb      	adds	r3, r7, #7
 800d032:	781a      	ldrb	r2, [r3, #0]
 800d034:	49ab      	ldr	r1, [pc, #684]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d036:	0013      	movs	r3, r2
 800d038:	00db      	lsls	r3, r3, #3
 800d03a:	1a9b      	subs	r3, r3, r2
 800d03c:	00db      	lsls	r3, r3, #3
 800d03e:	2202      	movs	r2, #2
 800d040:	545a      	strb	r2, [r3, r1]
			}
			//period
			if( sMtSys[stpMtNum].firstRampFlag == false )//accel
 800d042:	1dfb      	adds	r3, r7, #7
 800d044:	781a      	ldrb	r2, [r3, #0]
 800d046:	49a7      	ldr	r1, [pc, #668]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d048:	2024      	movs	r0, #36	@ 0x24
 800d04a:	0013      	movs	r3, r2
 800d04c:	00db      	lsls	r3, r3, #3
 800d04e:	1a9b      	subs	r3, r3, r2
 800d050:	00db      	lsls	r3, r3, #3
 800d052:	18cb      	adds	r3, r1, r3
 800d054:	181b      	adds	r3, r3, r0
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d14b      	bne.n	800d0f4 <StepMotor_IT+0x168>
			{
				if( sMtSys[stpMtNum].period > sMtSys[stpMtNum].speed ){
 800d05c:	1dfb      	adds	r3, r7, #7
 800d05e:	781a      	ldrb	r2, [r3, #0]
 800d060:	49a0      	ldr	r1, [pc, #640]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d062:	0013      	movs	r3, r2
 800d064:	00db      	lsls	r3, r3, #3
 800d066:	1a9b      	subs	r3, r3, r2
 800d068:	00db      	lsls	r3, r3, #3
 800d06a:	18cb      	adds	r3, r1, r3
 800d06c:	3328      	adds	r3, #40	@ 0x28
 800d06e:	6819      	ldr	r1, [r3, #0]
 800d070:	1dfb      	adds	r3, r7, #7
 800d072:	781a      	ldrb	r2, [r3, #0]
 800d074:	489b      	ldr	r0, [pc, #620]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d076:	0013      	movs	r3, r2
 800d078:	00db      	lsls	r3, r3, #3
 800d07a:	1a9b      	subs	r3, r3, r2
 800d07c:	00db      	lsls	r3, r3, #3
 800d07e:	18c3      	adds	r3, r0, r3
 800d080:	332c      	adds	r3, #44	@ 0x2c
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4299      	cmp	r1, r3
 800d086:	d920      	bls.n	800d0ca <StepMotor_IT+0x13e>
					sMtSys[stpMtNum].period -= sMtSys[stpMtNum].accel;
 800d088:	1dfb      	adds	r3, r7, #7
 800d08a:	781a      	ldrb	r2, [r3, #0]
 800d08c:	4995      	ldr	r1, [pc, #596]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d08e:	0013      	movs	r3, r2
 800d090:	00db      	lsls	r3, r3, #3
 800d092:	1a9b      	subs	r3, r3, r2
 800d094:	00db      	lsls	r3, r3, #3
 800d096:	18cb      	adds	r3, r1, r3
 800d098:	3328      	adds	r3, #40	@ 0x28
 800d09a:	6819      	ldr	r1, [r3, #0]
 800d09c:	1dfb      	adds	r3, r7, #7
 800d09e:	781a      	ldrb	r2, [r3, #0]
 800d0a0:	4890      	ldr	r0, [pc, #576]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d0a2:	0013      	movs	r3, r2
 800d0a4:	00db      	lsls	r3, r3, #3
 800d0a6:	1a9b      	subs	r3, r3, r2
 800d0a8:	00db      	lsls	r3, r3, #3
 800d0aa:	18c3      	adds	r3, r0, r3
 800d0ac:	3334      	adds	r3, #52	@ 0x34
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	0018      	movs	r0, r3
 800d0b2:	1dfb      	adds	r3, r7, #7
 800d0b4:	781a      	ldrb	r2, [r3, #0]
 800d0b6:	1a09      	subs	r1, r1, r0
 800d0b8:	488a      	ldr	r0, [pc, #552]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d0ba:	0013      	movs	r3, r2
 800d0bc:	00db      	lsls	r3, r3, #3
 800d0be:	1a9b      	subs	r3, r3, r2
 800d0c0:	00db      	lsls	r3, r3, #3
 800d0c2:	18c3      	adds	r3, r0, r3
 800d0c4:	3328      	adds	r3, #40	@ 0x28
 800d0c6:	6019      	str	r1, [r3, #0]
 800d0c8:	e11b      	b.n	800d302 <StepMotor_IT+0x376>
				}
				else{
					sMtSys[stpMtNum].period = sMtSys[stpMtNum].speed;
 800d0ca:	1dfb      	adds	r3, r7, #7
 800d0cc:	7819      	ldrb	r1, [r3, #0]
 800d0ce:	1dfb      	adds	r3, r7, #7
 800d0d0:	781a      	ldrb	r2, [r3, #0]
 800d0d2:	4884      	ldr	r0, [pc, #528]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d0d4:	000b      	movs	r3, r1
 800d0d6:	00db      	lsls	r3, r3, #3
 800d0d8:	1a5b      	subs	r3, r3, r1
 800d0da:	00db      	lsls	r3, r3, #3
 800d0dc:	18c3      	adds	r3, r0, r3
 800d0de:	332c      	adds	r3, #44	@ 0x2c
 800d0e0:	6819      	ldr	r1, [r3, #0]
 800d0e2:	4880      	ldr	r0, [pc, #512]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d0e4:	0013      	movs	r3, r2
 800d0e6:	00db      	lsls	r3, r3, #3
 800d0e8:	1a9b      	subs	r3, r3, r2
 800d0ea:	00db      	lsls	r3, r3, #3
 800d0ec:	18c3      	adds	r3, r0, r3
 800d0ee:	3328      	adds	r3, #40	@ 0x28
 800d0f0:	6019      	str	r1, [r3, #0]
 800d0f2:	e106      	b.n	800d302 <StepMotor_IT+0x376>
				}
			}
			else//deaccel
			{
				if( sMtSys[stpMtNum].period < sMtSys[stpMtNum].speed ){
 800d0f4:	1dfb      	adds	r3, r7, #7
 800d0f6:	781a      	ldrb	r2, [r3, #0]
 800d0f8:	497a      	ldr	r1, [pc, #488]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d0fa:	0013      	movs	r3, r2
 800d0fc:	00db      	lsls	r3, r3, #3
 800d0fe:	1a9b      	subs	r3, r3, r2
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	18cb      	adds	r3, r1, r3
 800d104:	3328      	adds	r3, #40	@ 0x28
 800d106:	6819      	ldr	r1, [r3, #0]
 800d108:	1dfb      	adds	r3, r7, #7
 800d10a:	781a      	ldrb	r2, [r3, #0]
 800d10c:	4875      	ldr	r0, [pc, #468]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d10e:	0013      	movs	r3, r2
 800d110:	00db      	lsls	r3, r3, #3
 800d112:	1a9b      	subs	r3, r3, r2
 800d114:	00db      	lsls	r3, r3, #3
 800d116:	18c3      	adds	r3, r0, r3
 800d118:	332c      	adds	r3, #44	@ 0x2c
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4299      	cmp	r1, r3
 800d11e:	d220      	bcs.n	800d162 <StepMotor_IT+0x1d6>
					sMtSys[stpMtNum].period += sMtSys[stpMtNum].accel;
 800d120:	1dfb      	adds	r3, r7, #7
 800d122:	781a      	ldrb	r2, [r3, #0]
 800d124:	496f      	ldr	r1, [pc, #444]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d126:	0013      	movs	r3, r2
 800d128:	00db      	lsls	r3, r3, #3
 800d12a:	1a9b      	subs	r3, r3, r2
 800d12c:	00db      	lsls	r3, r3, #3
 800d12e:	18cb      	adds	r3, r1, r3
 800d130:	3328      	adds	r3, #40	@ 0x28
 800d132:	6819      	ldr	r1, [r3, #0]
 800d134:	1dfb      	adds	r3, r7, #7
 800d136:	781a      	ldrb	r2, [r3, #0]
 800d138:	486a      	ldr	r0, [pc, #424]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d13a:	0013      	movs	r3, r2
 800d13c:	00db      	lsls	r3, r3, #3
 800d13e:	1a9b      	subs	r3, r3, r2
 800d140:	00db      	lsls	r3, r3, #3
 800d142:	18c3      	adds	r3, r0, r3
 800d144:	3334      	adds	r3, #52	@ 0x34
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	0018      	movs	r0, r3
 800d14a:	1dfb      	adds	r3, r7, #7
 800d14c:	781a      	ldrb	r2, [r3, #0]
 800d14e:	1809      	adds	r1, r1, r0
 800d150:	4864      	ldr	r0, [pc, #400]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d152:	0013      	movs	r3, r2
 800d154:	00db      	lsls	r3, r3, #3
 800d156:	1a9b      	subs	r3, r3, r2
 800d158:	00db      	lsls	r3, r3, #3
 800d15a:	18c3      	adds	r3, r0, r3
 800d15c:	3328      	adds	r3, #40	@ 0x28
 800d15e:	6019      	str	r1, [r3, #0]
 800d160:	e0cf      	b.n	800d302 <StepMotor_IT+0x376>
				}
				else{
					sMtSys[stpMtNum].period = sMtSys[stpMtNum].speed;
 800d162:	1dfb      	adds	r3, r7, #7
 800d164:	7819      	ldrb	r1, [r3, #0]
 800d166:	1dfb      	adds	r3, r7, #7
 800d168:	781a      	ldrb	r2, [r3, #0]
 800d16a:	485e      	ldr	r0, [pc, #376]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d16c:	000b      	movs	r3, r1
 800d16e:	00db      	lsls	r3, r3, #3
 800d170:	1a5b      	subs	r3, r3, r1
 800d172:	00db      	lsls	r3, r3, #3
 800d174:	18c3      	adds	r3, r0, r3
 800d176:	332c      	adds	r3, #44	@ 0x2c
 800d178:	6819      	ldr	r1, [r3, #0]
 800d17a:	485a      	ldr	r0, [pc, #360]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d17c:	0013      	movs	r3, r2
 800d17e:	00db      	lsls	r3, r3, #3
 800d180:	1a9b      	subs	r3, r3, r2
 800d182:	00db      	lsls	r3, r3, #3
 800d184:	18c3      	adds	r3, r0, r3
 800d186:	3328      	adds	r3, #40	@ 0x28
 800d188:	6019      	str	r1, [r3, #0]
 800d18a:	e0ba      	b.n	800d302 <StepMotor_IT+0x376>
				}
			}
		}
		//ramp1 (plateau)
		else if( sMtSys[stpMtNum].stsRun == _e_StpMtSts_Plat )
 800d18c:	1dfb      	adds	r3, r7, #7
 800d18e:	781a      	ldrb	r2, [r3, #0]
 800d190:	4954      	ldr	r1, [pc, #336]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d192:	0013      	movs	r3, r2
 800d194:	00db      	lsls	r3, r3, #3
 800d196:	1a9b      	subs	r3, r3, r2
 800d198:	00db      	lsls	r3, r3, #3
 800d19a:	5c5b      	ldrb	r3, [r3, r1]
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d13e      	bne.n	800d21e <StepMotor_IT+0x292>
		{
			sMtSys[stpMtNum].stsRunRet = _e_StpMtSts_Plat;
 800d1a0:	1dfb      	adds	r3, r7, #7
 800d1a2:	781a      	ldrb	r2, [r3, #0]
 800d1a4:	494f      	ldr	r1, [pc, #316]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d1a6:	0013      	movs	r3, r2
 800d1a8:	00db      	lsls	r3, r3, #3
 800d1aa:	1a9b      	subs	r3, r3, r2
 800d1ac:	00db      	lsls	r3, r3, #3
 800d1ae:	18cb      	adds	r3, r1, r3
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	2202      	movs	r2, #2
 800d1b4:	701a      	strb	r2, [r3, #0]
			//ramp step control
			sMtSys[stpMtNum].stepSysRampCounter[1]++;
 800d1b6:	1dfb      	adds	r3, r7, #7
 800d1b8:	781a      	ldrb	r2, [r3, #0]
 800d1ba:	494a      	ldr	r1, [pc, #296]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d1bc:	0013      	movs	r3, r2
 800d1be:	00db      	lsls	r3, r3, #3
 800d1c0:	1a9b      	subs	r3, r3, r2
 800d1c2:	00db      	lsls	r3, r3, #3
 800d1c4:	18cb      	adds	r3, r1, r3
 800d1c6:	3310      	adds	r3, #16
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	1c59      	adds	r1, r3, #1
 800d1cc:	4845      	ldr	r0, [pc, #276]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d1ce:	0013      	movs	r3, r2
 800d1d0:	00db      	lsls	r3, r3, #3
 800d1d2:	1a9b      	subs	r3, r3, r2
 800d1d4:	00db      	lsls	r3, r3, #3
 800d1d6:	18c3      	adds	r3, r0, r3
 800d1d8:	3310      	adds	r3, #16
 800d1da:	6019      	str	r1, [r3, #0]
			if( sMtSys[stpMtNum].stepSysRampCounter[1] >= sMtSys[stpMtNum].stepSysRampCompare[1] ){
 800d1dc:	1dfb      	adds	r3, r7, #7
 800d1de:	781a      	ldrb	r2, [r3, #0]
 800d1e0:	4940      	ldr	r1, [pc, #256]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d1e2:	0013      	movs	r3, r2
 800d1e4:	00db      	lsls	r3, r3, #3
 800d1e6:	1a9b      	subs	r3, r3, r2
 800d1e8:	00db      	lsls	r3, r3, #3
 800d1ea:	18cb      	adds	r3, r1, r3
 800d1ec:	3310      	adds	r3, #16
 800d1ee:	6819      	ldr	r1, [r3, #0]
 800d1f0:	1dfb      	adds	r3, r7, #7
 800d1f2:	781a      	ldrb	r2, [r3, #0]
 800d1f4:	483b      	ldr	r0, [pc, #236]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d1f6:	0013      	movs	r3, r2
 800d1f8:	00db      	lsls	r3, r3, #3
 800d1fa:	1a9b      	subs	r3, r3, r2
 800d1fc:	00db      	lsls	r3, r3, #3
 800d1fe:	18c3      	adds	r3, r0, r3
 800d200:	331c      	adds	r3, #28
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4299      	cmp	r1, r3
 800d206:	d200      	bcs.n	800d20a <StepMotor_IT+0x27e>
 800d208:	e07b      	b.n	800d302 <StepMotor_IT+0x376>
				sMtSys[stpMtNum].stsRun = _e_StpMtSts_Deac;
 800d20a:	1dfb      	adds	r3, r7, #7
 800d20c:	781a      	ldrb	r2, [r3, #0]
 800d20e:	4935      	ldr	r1, [pc, #212]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d210:	0013      	movs	r3, r2
 800d212:	00db      	lsls	r3, r3, #3
 800d214:	1a9b      	subs	r3, r3, r2
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	2203      	movs	r2, #3
 800d21a:	545a      	strb	r2, [r3, r1]
 800d21c:	e071      	b.n	800d302 <StepMotor_IT+0x376>
			}
		}
		//ramp2 (deac)
		else
		{
			sMtSys[stpMtNum].stsRunRet = _e_StpMtSts_Deac;
 800d21e:	1dfb      	adds	r3, r7, #7
 800d220:	781a      	ldrb	r2, [r3, #0]
 800d222:	4930      	ldr	r1, [pc, #192]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d224:	0013      	movs	r3, r2
 800d226:	00db      	lsls	r3, r3, #3
 800d228:	1a9b      	subs	r3, r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	18cb      	adds	r3, r1, r3
 800d22e:	3301      	adds	r3, #1
 800d230:	2203      	movs	r2, #3
 800d232:	701a      	strb	r2, [r3, #0]
			//ramp step control
			sMtSys[stpMtNum].stepSysRampCounter[2]++;
 800d234:	1dfb      	adds	r3, r7, #7
 800d236:	781a      	ldrb	r2, [r3, #0]
 800d238:	492a      	ldr	r1, [pc, #168]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d23a:	0013      	movs	r3, r2
 800d23c:	00db      	lsls	r3, r3, #3
 800d23e:	1a9b      	subs	r3, r3, r2
 800d240:	00db      	lsls	r3, r3, #3
 800d242:	18cb      	adds	r3, r1, r3
 800d244:	3314      	adds	r3, #20
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	1c59      	adds	r1, r3, #1
 800d24a:	4826      	ldr	r0, [pc, #152]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d24c:	0013      	movs	r3, r2
 800d24e:	00db      	lsls	r3, r3, #3
 800d250:	1a9b      	subs	r3, r3, r2
 800d252:	00db      	lsls	r3, r3, #3
 800d254:	18c3      	adds	r3, r0, r3
 800d256:	3314      	adds	r3, #20
 800d258:	6019      	str	r1, [r3, #0]
			if( sMtSys[stpMtNum].stepSysRampCounter[2] >= sMtSys[stpMtNum].stepSysRampCompare[2] ){
 800d25a:	1dfb      	adds	r3, r7, #7
 800d25c:	781a      	ldrb	r2, [r3, #0]
 800d25e:	4921      	ldr	r1, [pc, #132]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d260:	0013      	movs	r3, r2
 800d262:	00db      	lsls	r3, r3, #3
 800d264:	1a9b      	subs	r3, r3, r2
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	18cb      	adds	r3, r1, r3
 800d26a:	3314      	adds	r3, #20
 800d26c:	6819      	ldr	r1, [r3, #0]
 800d26e:	1dfb      	adds	r3, r7, #7
 800d270:	781a      	ldrb	r2, [r3, #0]
 800d272:	481c      	ldr	r0, [pc, #112]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d274:	0013      	movs	r3, r2
 800d276:	00db      	lsls	r3, r3, #3
 800d278:	1a9b      	subs	r3, r3, r2
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	18c3      	adds	r3, r0, r3
 800d27e:	3320      	adds	r3, #32
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4299      	cmp	r1, r3
 800d284:	d300      	bcc.n	800d288 <StepMotor_IT+0x2fc>
				//sMtSys[stpMtNum].stsRun = _e_StpMtSts_Stop;
				__NOP();
 800d286:	46c0      	nop			@ (mov r8, r8)
			}
			//period
			if( sMtSys[stpMtNum].period < STPMT_TIM_PERIOD ){
 800d288:	1dfb      	adds	r3, r7, #7
 800d28a:	781a      	ldrb	r2, [r3, #0]
 800d28c:	4915      	ldr	r1, [pc, #84]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d28e:	0013      	movs	r3, r2
 800d290:	00db      	lsls	r3, r3, #3
 800d292:	1a9b      	subs	r3, r3, r2
 800d294:	00db      	lsls	r3, r3, #3
 800d296:	18cb      	adds	r3, r1, r3
 800d298:	3328      	adds	r3, #40	@ 0x28
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a12      	ldr	r2, [pc, #72]	@ (800d2e8 <StepMotor_IT+0x35c>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d824      	bhi.n	800d2ec <StepMotor_IT+0x360>
				sMtSys[stpMtNum].period += sMtSys[stpMtNum].accel;
 800d2a2:	1dfb      	adds	r3, r7, #7
 800d2a4:	781a      	ldrb	r2, [r3, #0]
 800d2a6:	490f      	ldr	r1, [pc, #60]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d2a8:	0013      	movs	r3, r2
 800d2aa:	00db      	lsls	r3, r3, #3
 800d2ac:	1a9b      	subs	r3, r3, r2
 800d2ae:	00db      	lsls	r3, r3, #3
 800d2b0:	18cb      	adds	r3, r1, r3
 800d2b2:	3328      	adds	r3, #40	@ 0x28
 800d2b4:	6819      	ldr	r1, [r3, #0]
 800d2b6:	1dfb      	adds	r3, r7, #7
 800d2b8:	781a      	ldrb	r2, [r3, #0]
 800d2ba:	480a      	ldr	r0, [pc, #40]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d2bc:	0013      	movs	r3, r2
 800d2be:	00db      	lsls	r3, r3, #3
 800d2c0:	1a9b      	subs	r3, r3, r2
 800d2c2:	00db      	lsls	r3, r3, #3
 800d2c4:	18c3      	adds	r3, r0, r3
 800d2c6:	3334      	adds	r3, #52	@ 0x34
 800d2c8:	881b      	ldrh	r3, [r3, #0]
 800d2ca:	0018      	movs	r0, r3
 800d2cc:	1dfb      	adds	r3, r7, #7
 800d2ce:	781a      	ldrb	r2, [r3, #0]
 800d2d0:	1809      	adds	r1, r1, r0
 800d2d2:	4804      	ldr	r0, [pc, #16]	@ (800d2e4 <StepMotor_IT+0x358>)
 800d2d4:	0013      	movs	r3, r2
 800d2d6:	00db      	lsls	r3, r3, #3
 800d2d8:	1a9b      	subs	r3, r3, r2
 800d2da:	00db      	lsls	r3, r3, #3
 800d2dc:	18c3      	adds	r3, r0, r3
 800d2de:	3328      	adds	r3, #40	@ 0x28
 800d2e0:	6019      	str	r1, [r3, #0]
 800d2e2:	e00e      	b.n	800d302 <StepMotor_IT+0x376>
 800d2e4:	20000288 	.word	0x20000288
 800d2e8:	00004e1f 	.word	0x00004e1f
			}
			else{
				sMtSys[stpMtNum].period = STPMT_TIM_PERIOD;
 800d2ec:	1dfb      	adds	r3, r7, #7
 800d2ee:	781a      	ldrb	r2, [r3, #0]
 800d2f0:	4943      	ldr	r1, [pc, #268]	@ (800d400 <StepMotor_IT+0x474>)
 800d2f2:	0013      	movs	r3, r2
 800d2f4:	00db      	lsls	r3, r3, #3
 800d2f6:	1a9b      	subs	r3, r3, r2
 800d2f8:	00db      	lsls	r3, r3, #3
 800d2fa:	18cb      	adds	r3, r1, r3
 800d2fc:	3328      	adds	r3, #40	@ 0x28
 800d2fe:	4a41      	ldr	r2, [pc, #260]	@ (800d404 <StepMotor_IT+0x478>)
 800d300:	601a      	str	r2, [r3, #0]
			}
		}

		sMtSys[stpMtNum].stepSys--;
 800d302:	1dfb      	adds	r3, r7, #7
 800d304:	781a      	ldrb	r2, [r3, #0]
 800d306:	493e      	ldr	r1, [pc, #248]	@ (800d400 <StepMotor_IT+0x474>)
 800d308:	0013      	movs	r3, r2
 800d30a:	00db      	lsls	r3, r3, #3
 800d30c:	1a9b      	subs	r3, r3, r2
 800d30e:	00db      	lsls	r3, r3, #3
 800d310:	18cb      	adds	r3, r1, r3
 800d312:	3308      	adds	r3, #8
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	1e59      	subs	r1, r3, #1
 800d318:	4839      	ldr	r0, [pc, #228]	@ (800d400 <StepMotor_IT+0x474>)
 800d31a:	0013      	movs	r3, r2
 800d31c:	00db      	lsls	r3, r3, #3
 800d31e:	1a9b      	subs	r3, r3, r2
 800d320:	00db      	lsls	r3, r3, #3
 800d322:	18c3      	adds	r3, r0, r3
 800d324:	3308      	adds	r3, #8
 800d326:	6019      	str	r1, [r3, #0]

		_stpmt_func_motor_set( stpMtNum , sMtSys[stpMtNum].period );
 800d328:	1dfb      	adds	r3, r7, #7
 800d32a:	781a      	ldrb	r2, [r3, #0]
 800d32c:	4934      	ldr	r1, [pc, #208]	@ (800d400 <StepMotor_IT+0x474>)
 800d32e:	0013      	movs	r3, r2
 800d330:	00db      	lsls	r3, r3, #3
 800d332:	1a9b      	subs	r3, r3, r2
 800d334:	00db      	lsls	r3, r3, #3
 800d336:	18cb      	adds	r3, r1, r3
 800d338:	3328      	adds	r3, #40	@ 0x28
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	b29a      	uxth	r2, r3
 800d33e:	1dfb      	adds	r3, r7, #7
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	0011      	movs	r1, r2
 800d344:	0018      	movs	r0, r3
 800d346:	f7ff fb23 	bl	800c990 <_stpmt_func_motor_set>

		sMtEncoder[stpMtNum].stepEncAcc++;
 800d34a:	1dfb      	adds	r3, r7, #7
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	4a2e      	ldr	r2, [pc, #184]	@ (800d408 <StepMotor_IT+0x47c>)
 800d350:	00d9      	lsls	r1, r3, #3
 800d352:	588a      	ldr	r2, [r1, r2]
 800d354:	1c51      	adds	r1, r2, #1
 800d356:	4a2c      	ldr	r2, [pc, #176]	@ (800d408 <StepMotor_IT+0x47c>)
 800d358:	00db      	lsls	r3, r3, #3
 800d35a:	5099      	str	r1, [r3, r2]
		sMtEncoder[stpMtNum].stepPosAcc++;
 800d35c:	1dfb      	adds	r3, r7, #7
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	4929      	ldr	r1, [pc, #164]	@ (800d408 <StepMotor_IT+0x47c>)
 800d362:	00da      	lsls	r2, r3, #3
 800d364:	188a      	adds	r2, r1, r2
 800d366:	3204      	adds	r2, #4
 800d368:	6812      	ldr	r2, [r2, #0]
 800d36a:	3201      	adds	r2, #1
 800d36c:	4926      	ldr	r1, [pc, #152]	@ (800d408 <StepMotor_IT+0x47c>)
 800d36e:	00db      	lsls	r3, r3, #3
 800d370:	18cb      	adds	r3, r1, r3
 800d372:	3304      	adds	r3, #4
 800d374:	601a      	str	r2, [r3, #0]
		_stpmt_func_motor_stop(stpMtNum);
		sMtSys[stpMtNum].stsRun = _e_StpMtSts_Stop;
		sMtSys[stpMtNum].stsRunRet = _e_StpMtSts_Stop;
		__NOP();
	}
}
 800d376:	e03e      	b.n	800d3f6 <StepMotor_IT+0x46a>
		sMtSys[stpMtNum].period = sMtSys[stpMtNum].speedStart;
 800d378:	1dfb      	adds	r3, r7, #7
 800d37a:	7819      	ldrb	r1, [r3, #0]
 800d37c:	1dfb      	adds	r3, r7, #7
 800d37e:	781a      	ldrb	r2, [r3, #0]
 800d380:	481f      	ldr	r0, [pc, #124]	@ (800d400 <StepMotor_IT+0x474>)
 800d382:	000b      	movs	r3, r1
 800d384:	00db      	lsls	r3, r3, #3
 800d386:	1a5b      	subs	r3, r3, r1
 800d388:	00db      	lsls	r3, r3, #3
 800d38a:	18c3      	adds	r3, r0, r3
 800d38c:	3330      	adds	r3, #48	@ 0x30
 800d38e:	6819      	ldr	r1, [r3, #0]
 800d390:	481b      	ldr	r0, [pc, #108]	@ (800d400 <StepMotor_IT+0x474>)
 800d392:	0013      	movs	r3, r2
 800d394:	00db      	lsls	r3, r3, #3
 800d396:	1a9b      	subs	r3, r3, r2
 800d398:	00db      	lsls	r3, r3, #3
 800d39a:	18c3      	adds	r3, r0, r3
 800d39c:	3328      	adds	r3, #40	@ 0x28
 800d39e:	6019      	str	r1, [r3, #0]
		_stpmt_func_motor_set( stpMtNum , sMtSys[stpMtNum].period );
 800d3a0:	1dfb      	adds	r3, r7, #7
 800d3a2:	781a      	ldrb	r2, [r3, #0]
 800d3a4:	4916      	ldr	r1, [pc, #88]	@ (800d400 <StepMotor_IT+0x474>)
 800d3a6:	0013      	movs	r3, r2
 800d3a8:	00db      	lsls	r3, r3, #3
 800d3aa:	1a9b      	subs	r3, r3, r2
 800d3ac:	00db      	lsls	r3, r3, #3
 800d3ae:	18cb      	adds	r3, r1, r3
 800d3b0:	3328      	adds	r3, #40	@ 0x28
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	1dfb      	adds	r3, r7, #7
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	0011      	movs	r1, r2
 800d3bc:	0018      	movs	r0, r3
 800d3be:	f7ff fae7 	bl	800c990 <_stpmt_func_motor_set>
		_stpmt_func_motor_stop(stpMtNum);
 800d3c2:	1dfb      	adds	r3, r7, #7
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	0018      	movs	r0, r3
 800d3c8:	f7ff fab6 	bl	800c938 <_stpmt_func_motor_stop>
		sMtSys[stpMtNum].stsRun = _e_StpMtSts_Stop;
 800d3cc:	1dfb      	adds	r3, r7, #7
 800d3ce:	781a      	ldrb	r2, [r3, #0]
 800d3d0:	490b      	ldr	r1, [pc, #44]	@ (800d400 <StepMotor_IT+0x474>)
 800d3d2:	0013      	movs	r3, r2
 800d3d4:	00db      	lsls	r3, r3, #3
 800d3d6:	1a9b      	subs	r3, r3, r2
 800d3d8:	00db      	lsls	r3, r3, #3
 800d3da:	2200      	movs	r2, #0
 800d3dc:	545a      	strb	r2, [r3, r1]
		sMtSys[stpMtNum].stsRunRet = _e_StpMtSts_Stop;
 800d3de:	1dfb      	adds	r3, r7, #7
 800d3e0:	781a      	ldrb	r2, [r3, #0]
 800d3e2:	4907      	ldr	r1, [pc, #28]	@ (800d400 <StepMotor_IT+0x474>)
 800d3e4:	0013      	movs	r3, r2
 800d3e6:	00db      	lsls	r3, r3, #3
 800d3e8:	1a9b      	subs	r3, r3, r2
 800d3ea:	00db      	lsls	r3, r3, #3
 800d3ec:	18cb      	adds	r3, r1, r3
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	701a      	strb	r2, [r3, #0]
		__NOP();
 800d3f4:	46c0      	nop			@ (mov r8, r8)
}
 800d3f6:	46c0      	nop			@ (mov r8, r8)
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	b002      	add	sp, #8
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	46c0      	nop			@ (mov r8, r8)
 800d400:	20000288 	.word	0x20000288
 800d404:	00004e20 	.word	0x00004e20
 800d408:	20000328 	.word	0x20000328

0800d40c <StepMotor_Init>:

/*** ** * Exported Funcs * ** ***/

void StepMotor_Init(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	af00      	add	r7, sp, #0
	sMtSys[_e_StpMt_Pri].period = STPMT_TIM_PERIOD;
 800d410:	4b1b      	ldr	r3, [pc, #108]	@ (800d480 <StepMotor_Init+0x74>)
 800d412:	4a1c      	ldr	r2, [pc, #112]	@ (800d484 <StepMotor_Init+0x78>)
 800d414:	629a      	str	r2, [r3, #40]	@ 0x28
	sMtSys[_e_StpMt_Sec].period = STPMT_TIM_PERIOD;
 800d416:	4b1a      	ldr	r3, [pc, #104]	@ (800d480 <StepMotor_Init+0x74>)
 800d418:	4a1a      	ldr	r2, [pc, #104]	@ (800d484 <StepMotor_Init+0x78>)
 800d41a:	661a      	str	r2, [r3, #96]	@ 0x60

	sMtask[_e_StpMt_Pri].TASK = _stpmt_task_ctrl;
 800d41c:	4b1a      	ldr	r3, [pc, #104]	@ (800d488 <StepMotor_Init+0x7c>)
 800d41e:	4a1b      	ldr	r2, [pc, #108]	@ (800d48c <StepMotor_Init+0x80>)
 800d420:	601a      	str	r2, [r3, #0]
	sMtask[_e_StpMt_Sec].TASK = _stpmt_task_ctrl;
 800d422:	4b19      	ldr	r3, [pc, #100]	@ (800d488 <StepMotor_Init+0x7c>)
 800d424:	4a19      	ldr	r2, [pc, #100]	@ (800d48c <StepMotor_Init+0x80>)
 800d426:	605a      	str	r2, [r3, #4]

	TaskManager_Clear( STPMT1 );
 800d428:	2000      	movs	r0, #0
 800d42a:	f000 f97b 	bl	800d724 <TaskManager_Clear>
	TaskManager_Clear( STPMT2 );
 800d42e:	2001      	movs	r0, #1
 800d430:	f000 f978 	bl	800d724 <TaskManager_Clear>
	TaskManager_Clear( STPMTX);
 800d434:	2002      	movs	r0, #2
 800d436:	f000 f975 	bl	800d724 <TaskManager_Clear>

	TaskManager_Go( STPMT1 , NULL );
 800d43a:	2100      	movs	r1, #0
 800d43c:	2000      	movs	r0, #0
 800d43e:	f000 f959 	bl	800d6f4 <TaskManager_Go>
	TaskManager_Go( STPMT2 , NULL );
 800d442:	2100      	movs	r1, #0
 800d444:	2001      	movs	r0, #1
 800d446:	f000 f955 	bl	800d6f4 <TaskManager_Go>
	TaskManager_Go( STPMTX , _stpmt_TASK );
 800d44a:	4b11      	ldr	r3, [pc, #68]	@ (800d490 <StepMotor_Init+0x84>)
 800d44c:	0019      	movs	r1, r3
 800d44e:	2002      	movs	r0, #2
 800d450:	f000 f950 	bl	800d6f4 <TaskManager_Go>

	_stpmt_func_motor_stop(_e_StpMt_Pri);
 800d454:	2000      	movs	r0, #0
 800d456:	f7ff fa6f 	bl	800c938 <_stpmt_func_motor_stop>
	_stpmt_func_motor_stop(_e_StpMt_Sec);
 800d45a:	2001      	movs	r0, #1
 800d45c:	f7ff fa6c 	bl	800c938 <_stpmt_func_motor_stop>

	sMtEncoder[_e_StpMt_Pri].stepEncAcc = 0;
 800d460:	4b0c      	ldr	r3, [pc, #48]	@ (800d494 <StepMotor_Init+0x88>)
 800d462:	2200      	movs	r2, #0
 800d464:	601a      	str	r2, [r3, #0]
	sMtEncoder[_e_StpMt_Sec].stepEncAcc = 0;
 800d466:	4b0b      	ldr	r3, [pc, #44]	@ (800d494 <StepMotor_Init+0x88>)
 800d468:	2200      	movs	r2, #0
 800d46a:	609a      	str	r2, [r3, #8]

	sMtEncoder[_e_StpMt_Pri].stepPosAcc = 0;
 800d46c:	4b09      	ldr	r3, [pc, #36]	@ (800d494 <StepMotor_Init+0x88>)
 800d46e:	2200      	movs	r2, #0
 800d470:	605a      	str	r2, [r3, #4]
	sMtEncoder[_e_StpMt_Sec].stepPosAcc = 0;
 800d472:	4b08      	ldr	r3, [pc, #32]	@ (800d494 <StepMotor_Init+0x88>)
 800d474:	2200      	movs	r2, #0
 800d476:	60da      	str	r2, [r3, #12]
}
 800d478:	46c0      	nop			@ (mov r8, r8)
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	46c0      	nop			@ (mov r8, r8)
 800d480:	20000288 	.word	0x20000288
 800d484:	00004e20 	.word	0x00004e20
 800d488:	20000280 	.word	0x20000280
 800d48c:	0800cd21 	.word	0x0800cd21
 800d490:	0800cf6d 	.word	0x0800cf6d
 800d494:	20000328 	.word	0x20000328

0800d498 <StepMotor_GetSts>:

tStpMtSts StepMotor_GetSts( tStpMtNum stpMtNum )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	0002      	movs	r2, r0
 800d4a0:	1dfb      	adds	r3, r7, #7
 800d4a2:	701a      	strb	r2, [r3, #0]
	return sMtSys[stpMtNum].stsRunRet;
 800d4a4:	1dfb      	adds	r3, r7, #7
 800d4a6:	781a      	ldrb	r2, [r3, #0]
 800d4a8:	4905      	ldr	r1, [pc, #20]	@ (800d4c0 <StepMotor_GetSts+0x28>)
 800d4aa:	0013      	movs	r3, r2
 800d4ac:	00db      	lsls	r3, r3, #3
 800d4ae:	1a9b      	subs	r3, r3, r2
 800d4b0:	00db      	lsls	r3, r3, #3
 800d4b2:	18cb      	adds	r3, r1, r3
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	781b      	ldrb	r3, [r3, #0]
}
 800d4b8:	0018      	movs	r0, r3
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	b002      	add	sp, #8
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	20000288 	.word	0x20000288

0800d4c4 <StepMotor_GO>:

void StepMotor_GO( tStpMtNum stpMtNum , tStpMtDir stpMtDir , float ang , uint16_t speed , uint8_t accel , uint16_t speedStart )
{
 800d4c4:	b590      	push	{r4, r7, lr}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	0004      	movs	r4, r0
 800d4cc:	0008      	movs	r0, r1
 800d4ce:	603a      	str	r2, [r7, #0]
 800d4d0:	0019      	movs	r1, r3
 800d4d2:	1dfb      	adds	r3, r7, #7
 800d4d4:	1c22      	adds	r2, r4, #0
 800d4d6:	701a      	strb	r2, [r3, #0]
 800d4d8:	1dbb      	adds	r3, r7, #6
 800d4da:	1c02      	adds	r2, r0, #0
 800d4dc:	701a      	strb	r2, [r3, #0]
 800d4de:	1d3b      	adds	r3, r7, #4
 800d4e0:	1c0a      	adds	r2, r1, #0
 800d4e2:	801a      	strh	r2, [r3, #0]
	if( sMtCtrl[stpMtNum].ActionRequest == true )return;
 800d4e4:	1dfb      	adds	r3, r7, #7
 800d4e6:	781a      	ldrb	r2, [r3, #0]
 800d4e8:	4931      	ldr	r1, [pc, #196]	@ (800d5b0 <StepMotor_GO+0xec>)
 800d4ea:	0013      	movs	r3, r2
 800d4ec:	005b      	lsls	r3, r3, #1
 800d4ee:	189b      	adds	r3, r3, r2
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	5c5b      	ldrb	r3, [r3, r1]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d056      	beq.n	800d5a6 <StepMotor_GO+0xe2>

	sMtCtrl[stpMtNum].ActionRequest = true;
 800d4f8:	1dfb      	adds	r3, r7, #7
 800d4fa:	781a      	ldrb	r2, [r3, #0]
 800d4fc:	492c      	ldr	r1, [pc, #176]	@ (800d5b0 <StepMotor_GO+0xec>)
 800d4fe:	0013      	movs	r3, r2
 800d500:	005b      	lsls	r3, r3, #1
 800d502:	189b      	adds	r3, r3, r2
 800d504:	00db      	lsls	r3, r3, #3
 800d506:	2201      	movs	r2, #1
 800d508:	545a      	strb	r2, [r3, r1]
	sMtCtrl[stpMtNum].stpMtDir = stpMtDir;
 800d50a:	1dfb      	adds	r3, r7, #7
 800d50c:	781a      	ldrb	r2, [r3, #0]
 800d50e:	4928      	ldr	r1, [pc, #160]	@ (800d5b0 <StepMotor_GO+0xec>)
 800d510:	0013      	movs	r3, r2
 800d512:	005b      	lsls	r3, r3, #1
 800d514:	189b      	adds	r3, r3, r2
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	18cb      	adds	r3, r1, r3
 800d51a:	3309      	adds	r3, #9
 800d51c:	1dba      	adds	r2, r7, #6
 800d51e:	7812      	ldrb	r2, [r2, #0]
 800d520:	701a      	strb	r2, [r3, #0]
	sMtCtrl[stpMtNum].ang = ang;
 800d522:	1dfb      	adds	r3, r7, #7
 800d524:	781a      	ldrb	r2, [r3, #0]
 800d526:	4922      	ldr	r1, [pc, #136]	@ (800d5b0 <StepMotor_GO+0xec>)
 800d528:	0013      	movs	r3, r2
 800d52a:	005b      	lsls	r3, r3, #1
 800d52c:	189b      	adds	r3, r3, r2
 800d52e:	00db      	lsls	r3, r3, #3
 800d530:	18cb      	adds	r3, r1, r3
 800d532:	330c      	adds	r3, #12
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	601a      	str	r2, [r3, #0]
	sMtCtrl[stpMtNum].speed = speed;
 800d538:	1dfb      	adds	r3, r7, #7
 800d53a:	781a      	ldrb	r2, [r3, #0]
 800d53c:	1d3b      	adds	r3, r7, #4
 800d53e:	8819      	ldrh	r1, [r3, #0]
 800d540:	481b      	ldr	r0, [pc, #108]	@ (800d5b0 <StepMotor_GO+0xec>)
 800d542:	0013      	movs	r3, r2
 800d544:	005b      	lsls	r3, r3, #1
 800d546:	189b      	adds	r3, r3, r2
 800d548:	00db      	lsls	r3, r3, #3
 800d54a:	18c3      	adds	r3, r0, r3
 800d54c:	3310      	adds	r3, #16
 800d54e:	6019      	str	r1, [r3, #0]
	sMtCtrl[stpMtNum].accel = accel;
 800d550:	1dfb      	adds	r3, r7, #7
 800d552:	781a      	ldrb	r2, [r3, #0]
 800d554:	2318      	movs	r3, #24
 800d556:	18fb      	adds	r3, r7, r3
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	b298      	uxth	r0, r3
 800d55c:	4914      	ldr	r1, [pc, #80]	@ (800d5b0 <StepMotor_GO+0xec>)
 800d55e:	0013      	movs	r3, r2
 800d560:	005b      	lsls	r3, r3, #1
 800d562:	189b      	adds	r3, r3, r2
 800d564:	00db      	lsls	r3, r3, #3
 800d566:	18cb      	adds	r3, r1, r3
 800d568:	3314      	adds	r3, #20
 800d56a:	1c02      	adds	r2, r0, #0
 800d56c:	801a      	strh	r2, [r3, #0]
	sMtSys[stpMtNum].stsRunRet = _e_StpMtSts_Acce;
 800d56e:	1dfb      	adds	r3, r7, #7
 800d570:	781a      	ldrb	r2, [r3, #0]
 800d572:	4910      	ldr	r1, [pc, #64]	@ (800d5b4 <StepMotor_GO+0xf0>)
 800d574:	0013      	movs	r3, r2
 800d576:	00db      	lsls	r3, r3, #3
 800d578:	1a9b      	subs	r3, r3, r2
 800d57a:	00db      	lsls	r3, r3, #3
 800d57c:	18cb      	adds	r3, r1, r3
 800d57e:	3301      	adds	r3, #1
 800d580:	2201      	movs	r2, #1
 800d582:	701a      	strb	r2, [r3, #0]
	sMtSys[stpMtNum].speedStart = STPMT_TIM_PERIOD - speedStart;
 800d584:	231c      	movs	r3, #28
 800d586:	18fb      	adds	r3, r7, r3
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	4a0b      	ldr	r2, [pc, #44]	@ (800d5b8 <StepMotor_GO+0xf4>)
 800d58c:	1ad1      	subs	r1, r2, r3
 800d58e:	1dfb      	adds	r3, r7, #7
 800d590:	781a      	ldrb	r2, [r3, #0]
 800d592:	0008      	movs	r0, r1
 800d594:	4907      	ldr	r1, [pc, #28]	@ (800d5b4 <StepMotor_GO+0xf0>)
 800d596:	0013      	movs	r3, r2
 800d598:	00db      	lsls	r3, r3, #3
 800d59a:	1a9b      	subs	r3, r3, r2
 800d59c:	00db      	lsls	r3, r3, #3
 800d59e:	18cb      	adds	r3, r1, r3
 800d5a0:	3330      	adds	r3, #48	@ 0x30
 800d5a2:	6018      	str	r0, [r3, #0]
 800d5a4:	e000      	b.n	800d5a8 <StepMotor_GO+0xe4>
	if( sMtCtrl[stpMtNum].ActionRequest == true )return;
 800d5a6:	46c0      	nop			@ (mov r8, r8)
}
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	b003      	add	sp, #12
 800d5ac:	bd90      	pop	{r4, r7, pc}
 800d5ae:	46c0      	nop			@ (mov r8, r8)
 800d5b0:	200002f8 	.word	0x200002f8
 800d5b4:	20000288 	.word	0x20000288
 800d5b8:	00004e20 	.word	0x00004e20

0800d5bc <StepMotor_STOP>:

void StepMotor_STOP( tStpMtNum stpMtNum )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	0002      	movs	r2, r0
 800d5c4:	1dfb      	adds	r3, r7, #7
 800d5c6:	701a      	strb	r2, [r3, #0]
	sMtSys[stpMtNum].stepSys = 0;
 800d5c8:	1dfb      	adds	r3, r7, #7
 800d5ca:	781a      	ldrb	r2, [r3, #0]
 800d5cc:	4906      	ldr	r1, [pc, #24]	@ (800d5e8 <StepMotor_STOP+0x2c>)
 800d5ce:	0013      	movs	r3, r2
 800d5d0:	00db      	lsls	r3, r3, #3
 800d5d2:	1a9b      	subs	r3, r3, r2
 800d5d4:	00db      	lsls	r3, r3, #3
 800d5d6:	18cb      	adds	r3, r1, r3
 800d5d8:	3308      	adds	r3, #8
 800d5da:	2200      	movs	r2, #0
 800d5dc:	601a      	str	r2, [r3, #0]
//	if( sMtSys[stpMtNum].stsRun != _e_StpMtSts_Deac )
//	{
//		sMtSys[stpMtNum].stepSys = sMtSys[stpMtNum].stepSysRampCompare[2];
//	}
}
 800d5de:	46c0      	nop			@ (mov r8, r8)
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	b002      	add	sp, #8
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	46c0      	nop			@ (mov r8, r8)
 800d5e8:	20000288 	.word	0x20000288

0800d5ec <StepMotor_POWER>:

void StepMotor_POWER( tStpMtPower power )
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	0002      	movs	r2, r0
 800d5f4:	1dfb      	adds	r3, r7, #7
 800d5f6:	701a      	strb	r2, [r3, #0]
	if( power == _e_StpMtPower_ON ){
 800d5f8:	1dfb      	adds	r3, r7, #7
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d104      	bne.n	800d60a <StepMotor_POWER+0x1e>
		ENABLE_MOTORS();
 800d600:	4b06      	ldr	r3, [pc, #24]	@ (800d61c <StepMotor_POWER+0x30>)
 800d602:	2280      	movs	r2, #128	@ 0x80
 800d604:	0592      	lsls	r2, r2, #22
 800d606:	619a      	str	r2, [r3, #24]
	}
	else{
		DISABLE_MOTORS();
	}
}
 800d608:	e003      	b.n	800d612 <StepMotor_POWER+0x26>
		DISABLE_MOTORS();
 800d60a:	4b04      	ldr	r3, [pc, #16]	@ (800d61c <StepMotor_POWER+0x30>)
 800d60c:	2280      	movs	r2, #128	@ 0x80
 800d60e:	0192      	lsls	r2, r2, #6
 800d610:	619a      	str	r2, [r3, #24]
}
 800d612:	46c0      	nop			@ (mov r8, r8)
 800d614:	46bd      	mov	sp, r7
 800d616:	b002      	add	sp, #8
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	46c0      	nop			@ (mov r8, r8)
 800d61c:	48000400 	.word	0x48000400

0800d620 <StepMotor_GetStepEnc>:

uint16_t StepMotor_GetStepEnc( tStpMtNum stpMtNum )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	0002      	movs	r2, r0
 800d628:	1dfb      	adds	r3, r7, #7
 800d62a:	701a      	strb	r2, [r3, #0]
	uint16_t stepEncAcc = sMtEncoder[stpMtNum].stepEncAcc;
 800d62c:	1dfb      	adds	r3, r7, #7
 800d62e:	781a      	ldrb	r2, [r3, #0]
 800d630:	4b08      	ldr	r3, [pc, #32]	@ (800d654 <StepMotor_GetStepEnc+0x34>)
 800d632:	00d2      	lsls	r2, r2, #3
 800d634:	58d2      	ldr	r2, [r2, r3]
 800d636:	200e      	movs	r0, #14
 800d638:	183b      	adds	r3, r7, r0
 800d63a:	801a      	strh	r2, [r3, #0]
	sMtEncoder[stpMtNum].stepEncAcc = 0;
 800d63c:	1dfb      	adds	r3, r7, #7
 800d63e:	781a      	ldrb	r2, [r3, #0]
 800d640:	4b04      	ldr	r3, [pc, #16]	@ (800d654 <StepMotor_GetStepEnc+0x34>)
 800d642:	00d2      	lsls	r2, r2, #3
 800d644:	2100      	movs	r1, #0
 800d646:	50d1      	str	r1, [r2, r3]
	return stepEncAcc;
 800d648:	183b      	adds	r3, r7, r0
 800d64a:	881b      	ldrh	r3, [r3, #0]
}
 800d64c:	0018      	movs	r0, r3
 800d64e:	46bd      	mov	sp, r7
 800d650:	b004      	add	sp, #16
 800d652:	bd80      	pop	{r7, pc}
 800d654:	20000328 	.word	0x20000328

0800d658 <StepMotor_GetStepPos>:

uint16_t StepMotor_GetStepPos( tStpMtNum stpMtNum )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	0002      	movs	r2, r0
 800d660:	1dfb      	adds	r3, r7, #7
 800d662:	701a      	strb	r2, [r3, #0]
	uint16_t stepPosAcc = sMtEncoder[stpMtNum].stepPosAcc;
 800d664:	1dfb      	adds	r3, r7, #7
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	4a0a      	ldr	r2, [pc, #40]	@ (800d694 <StepMotor_GetStepPos+0x3c>)
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	18d3      	adds	r3, r2, r3
 800d66e:	3304      	adds	r3, #4
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	210e      	movs	r1, #14
 800d674:	187b      	adds	r3, r7, r1
 800d676:	801a      	strh	r2, [r3, #0]
	sMtEncoder[stpMtNum].stepPosAcc = 0;
 800d678:	1dfb      	adds	r3, r7, #7
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	4a05      	ldr	r2, [pc, #20]	@ (800d694 <StepMotor_GetStepPos+0x3c>)
 800d67e:	00db      	lsls	r3, r3, #3
 800d680:	18d3      	adds	r3, r2, r3
 800d682:	3304      	adds	r3, #4
 800d684:	2200      	movs	r2, #0
 800d686:	601a      	str	r2, [r3, #0]
	return stepPosAcc;
 800d688:	187b      	adds	r3, r7, r1
 800d68a:	881b      	ldrh	r3, [r3, #0]
}
 800d68c:	0018      	movs	r0, r3
 800d68e:	46bd      	mov	sp, r7
 800d690:	b004      	add	sp, #16
 800d692:	bd80      	pop	{r7, pc}
 800d694:	20000328 	.word	0x20000328

0800d698 <TaskManager>:

/*** ** * Funcs Ext * ** ***/

//Roda as funcoes carregadas, nao esquecer de carregar antes de executar
void TaskManager(void)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
	for( uint8_t i = 0 ; i < _e_TaskManager_Qty ; i++ ){
 800d69e:	1dfb      	adds	r3, r7, #7
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	701a      	strb	r2, [r3, #0]
 800d6a4:	e01b      	b.n	800d6de <TaskManager+0x46>
		if( sTask[i].taskToRun != NULL ){
 800d6a6:	1dfb      	adds	r3, r7, #7
 800d6a8:	781a      	ldrb	r2, [r3, #0]
 800d6aa:	4911      	ldr	r1, [pc, #68]	@ (800d6f0 <TaskManager+0x58>)
 800d6ac:	0013      	movs	r3, r2
 800d6ae:	005b      	lsls	r3, r3, #1
 800d6b0:	189b      	adds	r3, r3, r2
 800d6b2:	011b      	lsls	r3, r3, #4
 800d6b4:	18cb      	adds	r3, r1, r3
 800d6b6:	332c      	adds	r3, #44	@ 0x2c
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00a      	beq.n	800d6d4 <TaskManager+0x3c>
			sTask[i].taskToRun();
 800d6be:	1dfb      	adds	r3, r7, #7
 800d6c0:	781a      	ldrb	r2, [r3, #0]
 800d6c2:	490b      	ldr	r1, [pc, #44]	@ (800d6f0 <TaskManager+0x58>)
 800d6c4:	0013      	movs	r3, r2
 800d6c6:	005b      	lsls	r3, r3, #1
 800d6c8:	189b      	adds	r3, r3, r2
 800d6ca:	011b      	lsls	r3, r3, #4
 800d6cc:	18cb      	adds	r3, r1, r3
 800d6ce:	332c      	adds	r3, #44	@ 0x2c
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4798      	blx	r3
	for( uint8_t i = 0 ; i < _e_TaskManager_Qty ; i++ ){
 800d6d4:	1dfb      	adds	r3, r7, #7
 800d6d6:	781a      	ldrb	r2, [r3, #0]
 800d6d8:	1dfb      	adds	r3, r7, #7
 800d6da:	3201      	adds	r2, #1
 800d6dc:	701a      	strb	r2, [r3, #0]
 800d6de:	1dfb      	adds	r3, r7, #7
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	2b0f      	cmp	r3, #15
 800d6e4:	d9df      	bls.n	800d6a6 <TaskManager+0xe>
		}
	}
}
 800d6e6:	46c0      	nop			@ (mov r8, r8)
 800d6e8:	46c0      	nop			@ (mov r8, r8)
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	b002      	add	sp, #8
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	20000338 	.word	0x20000338

0800d6f4 <TaskManager_Go>:

//Carrega ponteiro de funcao a ser executada
void TaskManager_Go( tTaskManager taskMod , _TaskManager_t taskToGo )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	0002      	movs	r2, r0
 800d6fc:	6039      	str	r1, [r7, #0]
 800d6fe:	1dfb      	adds	r3, r7, #7
 800d700:	701a      	strb	r2, [r3, #0]
	sTask[taskMod].taskToRun = taskToGo;
 800d702:	1dfb      	adds	r3, r7, #7
 800d704:	781a      	ldrb	r2, [r3, #0]
 800d706:	4906      	ldr	r1, [pc, #24]	@ (800d720 <TaskManager_Go+0x2c>)
 800d708:	0013      	movs	r3, r2
 800d70a:	005b      	lsls	r3, r3, #1
 800d70c:	189b      	adds	r3, r3, r2
 800d70e:	011b      	lsls	r3, r3, #4
 800d710:	18cb      	adds	r3, r1, r3
 800d712:	332c      	adds	r3, #44	@ 0x2c
 800d714:	683a      	ldr	r2, [r7, #0]
 800d716:	601a      	str	r2, [r3, #0]
}
 800d718:	46c0      	nop			@ (mov r8, r8)
 800d71a:	46bd      	mov	sp, r7
 800d71c:	b002      	add	sp, #8
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	20000338 	.word	0x20000338

0800d724 <TaskManager_Clear>:

//Apaga flags de primeira entrada das tasks e seta 0 pra task que esta rodando
void TaskManager_Clear(tTaskManager taskMod )
{
 800d724:	b590      	push	{r4, r7, lr}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
 800d72a:	0002      	movs	r2, r0
 800d72c:	1dfb      	adds	r3, r7, #7
 800d72e:	701a      	strb	r2, [r3, #0]
	for( uint8_t i = 0 ; i < TASK_MAX ; i++ ){
 800d730:	230f      	movs	r3, #15
 800d732:	18fb      	adds	r3, r7, r3
 800d734:	2200      	movs	r2, #0
 800d736:	701a      	strb	r2, [r3, #0]
 800d738:	e012      	b.n	800d760 <TaskManager_Clear+0x3c>
		sTask[taskMod].sTaskCtrl[i].flag = false;
 800d73a:	1dfb      	adds	r3, r7, #7
 800d73c:	781a      	ldrb	r2, [r3, #0]
 800d73e:	240f      	movs	r4, #15
 800d740:	193b      	adds	r3, r7, r4
 800d742:	7818      	ldrb	r0, [r3, #0]
 800d744:	4911      	ldr	r1, [pc, #68]	@ (800d78c <TaskManager_Clear+0x68>)
 800d746:	0013      	movs	r3, r2
 800d748:	005b      	lsls	r3, r3, #1
 800d74a:	189b      	adds	r3, r3, r2
 800d74c:	00db      	lsls	r3, r3, #3
 800d74e:	181b      	adds	r3, r3, r0
 800d750:	005b      	lsls	r3, r3, #1
 800d752:	2200      	movs	r2, #0
 800d754:	545a      	strb	r2, [r3, r1]
	for( uint8_t i = 0 ; i < TASK_MAX ; i++ ){
 800d756:	193b      	adds	r3, r7, r4
 800d758:	781a      	ldrb	r2, [r3, #0]
 800d75a:	193b      	adds	r3, r7, r4
 800d75c:	3201      	adds	r2, #1
 800d75e:	701a      	strb	r2, [r3, #0]
 800d760:	230f      	movs	r3, #15
 800d762:	18fb      	adds	r3, r7, r3
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	2b13      	cmp	r3, #19
 800d768:	d9e7      	bls.n	800d73a <TaskManager_Clear+0x16>
	}
	sTask[taskMod].taskNum = 0;
 800d76a:	1dfb      	adds	r3, r7, #7
 800d76c:	781a      	ldrb	r2, [r3, #0]
 800d76e:	4907      	ldr	r1, [pc, #28]	@ (800d78c <TaskManager_Clear+0x68>)
 800d770:	2028      	movs	r0, #40	@ 0x28
 800d772:	0013      	movs	r3, r2
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	189b      	adds	r3, r3, r2
 800d778:	011b      	lsls	r3, r3, #4
 800d77a:	18cb      	adds	r3, r1, r3
 800d77c:	181b      	adds	r3, r3, r0
 800d77e:	2200      	movs	r2, #0
 800d780:	701a      	strb	r2, [r3, #0]
}
 800d782:	46c0      	nop			@ (mov r8, r8)
 800d784:	46bd      	mov	sp, r7
 800d786:	b005      	add	sp, #20
 800d788:	bd90      	pop	{r4, r7, pc}
 800d78a:	46c0      	nop			@ (mov r8, r8)
 800d78c:	20000338 	.word	0x20000338

0800d790 <TaskManager_Set>:

//Seta task atual - Colocar na primeira linha da funcao
void TaskManager_Set( tTaskManager taskMod , uint8_t taskRun )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	0002      	movs	r2, r0
 800d798:	1dfb      	adds	r3, r7, #7
 800d79a:	701a      	strb	r2, [r3, #0]
 800d79c:	1dbb      	adds	r3, r7, #6
 800d79e:	1c0a      	adds	r2, r1, #0
 800d7a0:	701a      	strb	r2, [r3, #0]
	sTask[taskMod].taskNum = taskRun;
 800d7a2:	1dfb      	adds	r3, r7, #7
 800d7a4:	781a      	ldrb	r2, [r3, #0]
 800d7a6:	4907      	ldr	r1, [pc, #28]	@ (800d7c4 <TaskManager_Set+0x34>)
 800d7a8:	2028      	movs	r0, #40	@ 0x28
 800d7aa:	0013      	movs	r3, r2
 800d7ac:	005b      	lsls	r3, r3, #1
 800d7ae:	189b      	adds	r3, r3, r2
 800d7b0:	011b      	lsls	r3, r3, #4
 800d7b2:	18cb      	adds	r3, r1, r3
 800d7b4:	181b      	adds	r3, r3, r0
 800d7b6:	1dba      	adds	r2, r7, #6
 800d7b8:	7812      	ldrb	r2, [r2, #0]
 800d7ba:	701a      	strb	r2, [r3, #0]
}
 800d7bc:	46c0      	nop			@ (mov r8, r8)
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	b002      	add	sp, #8
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	20000338 	.word	0x20000338

0800d7c8 <TaskManager_First_Set>:
	return sTask[taskMod].taskNum;
}

//Seta primeira entrada na task
void TaskManager_First_Set( tTaskManager taskMod )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	0002      	movs	r2, r0
 800d7d0:	1dfb      	adds	r3, r7, #7
 800d7d2:	701a      	strb	r2, [r3, #0]
  for( uint8_t i = 0 ; i < TASK_MAX ; i++ ){
 800d7d4:	230f      	movs	r3, #15
 800d7d6:	18fb      	adds	r3, r7, r3
 800d7d8:	2200      	movs	r2, #0
 800d7da:	701a      	strb	r2, [r3, #0]
 800d7dc:	e031      	b.n	800d842 <TaskManager_First_Set+0x7a>
    if( i == sTask[taskMod].taskNum ) sTask[taskMod].sTaskCtrl[i].flag = true;
 800d7de:	1dfb      	adds	r3, r7, #7
 800d7e0:	781a      	ldrb	r2, [r3, #0]
 800d7e2:	491d      	ldr	r1, [pc, #116]	@ (800d858 <TaskManager_First_Set+0x90>)
 800d7e4:	2028      	movs	r0, #40	@ 0x28
 800d7e6:	0013      	movs	r3, r2
 800d7e8:	005b      	lsls	r3, r3, #1
 800d7ea:	189b      	adds	r3, r3, r2
 800d7ec:	011b      	lsls	r3, r3, #4
 800d7ee:	18cb      	adds	r3, r1, r3
 800d7f0:	181b      	adds	r3, r3, r0
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	210f      	movs	r1, #15
 800d7f6:	187a      	adds	r2, r7, r1
 800d7f8:	7812      	ldrb	r2, [r2, #0]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d10d      	bne.n	800d81a <TaskManager_First_Set+0x52>
 800d7fe:	1dfb      	adds	r3, r7, #7
 800d800:	781a      	ldrb	r2, [r3, #0]
 800d802:	187b      	adds	r3, r7, r1
 800d804:	7818      	ldrb	r0, [r3, #0]
 800d806:	4914      	ldr	r1, [pc, #80]	@ (800d858 <TaskManager_First_Set+0x90>)
 800d808:	0013      	movs	r3, r2
 800d80a:	005b      	lsls	r3, r3, #1
 800d80c:	189b      	adds	r3, r3, r2
 800d80e:	00db      	lsls	r3, r3, #3
 800d810:	181b      	adds	r3, r3, r0
 800d812:	005b      	lsls	r3, r3, #1
 800d814:	2201      	movs	r2, #1
 800d816:	545a      	strb	r2, [r3, r1]
 800d818:	e00d      	b.n	800d836 <TaskManager_First_Set+0x6e>
    else sTask[taskMod].sTaskCtrl[i].flag = false;
 800d81a:	1dfb      	adds	r3, r7, #7
 800d81c:	781a      	ldrb	r2, [r3, #0]
 800d81e:	230f      	movs	r3, #15
 800d820:	18fb      	adds	r3, r7, r3
 800d822:	7818      	ldrb	r0, [r3, #0]
 800d824:	490c      	ldr	r1, [pc, #48]	@ (800d858 <TaskManager_First_Set+0x90>)
 800d826:	0013      	movs	r3, r2
 800d828:	005b      	lsls	r3, r3, #1
 800d82a:	189b      	adds	r3, r3, r2
 800d82c:	00db      	lsls	r3, r3, #3
 800d82e:	181b      	adds	r3, r3, r0
 800d830:	005b      	lsls	r3, r3, #1
 800d832:	2200      	movs	r2, #0
 800d834:	545a      	strb	r2, [r3, r1]
  for( uint8_t i = 0 ; i < TASK_MAX ; i++ ){
 800d836:	210f      	movs	r1, #15
 800d838:	187b      	adds	r3, r7, r1
 800d83a:	781a      	ldrb	r2, [r3, #0]
 800d83c:	187b      	adds	r3, r7, r1
 800d83e:	3201      	adds	r2, #1
 800d840:	701a      	strb	r2, [r3, #0]
 800d842:	230f      	movs	r3, #15
 800d844:	18fb      	adds	r3, r7, r3
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	2b13      	cmp	r3, #19
 800d84a:	d9c8      	bls.n	800d7de <TaskManager_First_Set+0x16>
  }
}
 800d84c:	46c0      	nop			@ (mov r8, r8)
 800d84e:	46c0      	nop			@ (mov r8, r8)
 800d850:	46bd      	mov	sp, r7
 800d852:	b004      	add	sp, #16
 800d854:	bd80      	pop	{r7, pc}
 800d856:	46c0      	nop			@ (mov r8, r8)
 800d858:	20000338 	.word	0x20000338

0800d85c <TaskManager_First_Get>:
   sTask[taskMod].sTaskCtrl[sTask[taskMod].taskNum].flag = false;
}

//Pega primeira entrada na task
bool TaskManager_First_Get( tTaskManager taskMod )
{
 800d85c:	b590      	push	{r4, r7, lr}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	0002      	movs	r2, r0
 800d864:	1dfb      	adds	r3, r7, #7
 800d866:	701a      	strb	r2, [r3, #0]
  return sTask[taskMod].sTaskCtrl[sTask[taskMod].taskNum].flag;
 800d868:	1dfb      	adds	r3, r7, #7
 800d86a:	781a      	ldrb	r2, [r3, #0]
 800d86c:	1dfb      	adds	r3, r7, #7
 800d86e:	7819      	ldrb	r1, [r3, #0]
 800d870:	480a      	ldr	r0, [pc, #40]	@ (800d89c <TaskManager_First_Get+0x40>)
 800d872:	2428      	movs	r4, #40	@ 0x28
 800d874:	000b      	movs	r3, r1
 800d876:	005b      	lsls	r3, r3, #1
 800d878:	185b      	adds	r3, r3, r1
 800d87a:	011b      	lsls	r3, r3, #4
 800d87c:	18c3      	adds	r3, r0, r3
 800d87e:	191b      	adds	r3, r3, r4
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	0018      	movs	r0, r3
 800d884:	4905      	ldr	r1, [pc, #20]	@ (800d89c <TaskManager_First_Get+0x40>)
 800d886:	0013      	movs	r3, r2
 800d888:	005b      	lsls	r3, r3, #1
 800d88a:	189b      	adds	r3, r3, r2
 800d88c:	00db      	lsls	r3, r3, #3
 800d88e:	181b      	adds	r3, r3, r0
 800d890:	005b      	lsls	r3, r3, #1
 800d892:	5c5b      	ldrb	r3, [r3, r1]
}
 800d894:	0018      	movs	r0, r3
 800d896:	46bd      	mov	sp, r7
 800d898:	b003      	add	sp, #12
 800d89a:	bd90      	pop	{r4, r7, pc}
 800d89c:	20000338 	.word	0x20000338

0800d8a0 <TaskManager_Step_Set>:

//Seta step da task
void TaskManager_Step_Set( tTaskManager taskMod, uint8_t taskStep )
{
 800d8a0:	b590      	push	{r4, r7, lr}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	0002      	movs	r2, r0
 800d8a8:	1dfb      	adds	r3, r7, #7
 800d8aa:	701a      	strb	r2, [r3, #0]
 800d8ac:	1dbb      	adds	r3, r7, #6
 800d8ae:	1c0a      	adds	r2, r1, #0
 800d8b0:	701a      	strb	r2, [r3, #0]
	sTask[taskMod].sTaskCtrl[sTask[taskMod].taskNum].step = taskStep;
 800d8b2:	1dfb      	adds	r3, r7, #7
 800d8b4:	781a      	ldrb	r2, [r3, #0]
 800d8b6:	1dfb      	adds	r3, r7, #7
 800d8b8:	7819      	ldrb	r1, [r3, #0]
 800d8ba:	480d      	ldr	r0, [pc, #52]	@ (800d8f0 <TaskManager_Step_Set+0x50>)
 800d8bc:	2428      	movs	r4, #40	@ 0x28
 800d8be:	000b      	movs	r3, r1
 800d8c0:	005b      	lsls	r3, r3, #1
 800d8c2:	185b      	adds	r3, r3, r1
 800d8c4:	011b      	lsls	r3, r3, #4
 800d8c6:	18c3      	adds	r3, r0, r3
 800d8c8:	191b      	adds	r3, r3, r4
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	0018      	movs	r0, r3
 800d8ce:	4908      	ldr	r1, [pc, #32]	@ (800d8f0 <TaskManager_Step_Set+0x50>)
 800d8d0:	0013      	movs	r3, r2
 800d8d2:	005b      	lsls	r3, r3, #1
 800d8d4:	189b      	adds	r3, r3, r2
 800d8d6:	00db      	lsls	r3, r3, #3
 800d8d8:	181b      	adds	r3, r3, r0
 800d8da:	005b      	lsls	r3, r3, #1
 800d8dc:	18cb      	adds	r3, r1, r3
 800d8de:	3301      	adds	r3, #1
 800d8e0:	1dba      	adds	r2, r7, #6
 800d8e2:	7812      	ldrb	r2, [r2, #0]
 800d8e4:	701a      	strb	r2, [r3, #0]
}
 800d8e6:	46c0      	nop			@ (mov r8, r8)
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	b003      	add	sp, #12
 800d8ec:	bd90      	pop	{r4, r7, pc}
 800d8ee:	46c0      	nop			@ (mov r8, r8)
 800d8f0:	20000338 	.word	0x20000338

0800d8f4 <TaskManager_Step_Get>:

//Pega step da task
uint8_t TaskManager_Step_Get( tTaskManager taskMod )
{
 800d8f4:	b590      	push	{r4, r7, lr}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	0002      	movs	r2, r0
 800d8fc:	1dfb      	adds	r3, r7, #7
 800d8fe:	701a      	strb	r2, [r3, #0]
	return sTask[taskMod].sTaskCtrl[sTask[taskMod].taskNum].step;
 800d900:	1dfb      	adds	r3, r7, #7
 800d902:	781a      	ldrb	r2, [r3, #0]
 800d904:	1dfb      	adds	r3, r7, #7
 800d906:	7819      	ldrb	r1, [r3, #0]
 800d908:	480b      	ldr	r0, [pc, #44]	@ (800d938 <TaskManager_Step_Get+0x44>)
 800d90a:	2428      	movs	r4, #40	@ 0x28
 800d90c:	000b      	movs	r3, r1
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	185b      	adds	r3, r3, r1
 800d912:	011b      	lsls	r3, r3, #4
 800d914:	18c3      	adds	r3, r0, r3
 800d916:	191b      	adds	r3, r3, r4
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	0018      	movs	r0, r3
 800d91c:	4906      	ldr	r1, [pc, #24]	@ (800d938 <TaskManager_Step_Get+0x44>)
 800d91e:	0013      	movs	r3, r2
 800d920:	005b      	lsls	r3, r3, #1
 800d922:	189b      	adds	r3, r3, r2
 800d924:	00db      	lsls	r3, r3, #3
 800d926:	181b      	adds	r3, r3, r0
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	18cb      	adds	r3, r1, r3
 800d92c:	3301      	adds	r3, #1
 800d92e:	781b      	ldrb	r3, [r3, #0]
}
 800d930:	0018      	movs	r0, r3
 800d932:	46bd      	mov	sp, r7
 800d934:	b003      	add	sp, #12
 800d936:	bd90      	pop	{r4, r7, pc}
 800d938:	20000338 	.word	0x20000338

0800d93c <TaskManager_Step_Inc>:

//Incrementa step da task
void TaskManager_Step_Inc( tTaskManager taskMod )
{
 800d93c:	b590      	push	{r4, r7, lr}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	0002      	movs	r2, r0
 800d944:	1dfb      	adds	r3, r7, #7
 800d946:	701a      	strb	r2, [r3, #0]
	sTask[taskMod].sTaskCtrl[sTask[taskMod].taskNum].step++;
 800d948:	1dfb      	adds	r3, r7, #7
 800d94a:	781a      	ldrb	r2, [r3, #0]
 800d94c:	1dfb      	adds	r3, r7, #7
 800d94e:	7819      	ldrb	r1, [r3, #0]
 800d950:	4812      	ldr	r0, [pc, #72]	@ (800d99c <TaskManager_Step_Inc+0x60>)
 800d952:	2428      	movs	r4, #40	@ 0x28
 800d954:	000b      	movs	r3, r1
 800d956:	005b      	lsls	r3, r3, #1
 800d958:	185b      	adds	r3, r3, r1
 800d95a:	011b      	lsls	r3, r3, #4
 800d95c:	18c3      	adds	r3, r0, r3
 800d95e:	191b      	adds	r3, r3, r4
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	0019      	movs	r1, r3
 800d964:	480d      	ldr	r0, [pc, #52]	@ (800d99c <TaskManager_Step_Inc+0x60>)
 800d966:	0013      	movs	r3, r2
 800d968:	005b      	lsls	r3, r3, #1
 800d96a:	189b      	adds	r3, r3, r2
 800d96c:	00db      	lsls	r3, r3, #3
 800d96e:	185b      	adds	r3, r3, r1
 800d970:	005b      	lsls	r3, r3, #1
 800d972:	18c3      	adds	r3, r0, r3
 800d974:	3301      	adds	r3, #1
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	3301      	adds	r3, #1
 800d97a:	b2dc      	uxtb	r4, r3
 800d97c:	4807      	ldr	r0, [pc, #28]	@ (800d99c <TaskManager_Step_Inc+0x60>)
 800d97e:	0013      	movs	r3, r2
 800d980:	005b      	lsls	r3, r3, #1
 800d982:	189b      	adds	r3, r3, r2
 800d984:	00db      	lsls	r3, r3, #3
 800d986:	185b      	adds	r3, r3, r1
 800d988:	005b      	lsls	r3, r3, #1
 800d98a:	18c3      	adds	r3, r0, r3
 800d98c:	3301      	adds	r3, #1
 800d98e:	1c22      	adds	r2, r4, #0
 800d990:	701a      	strb	r2, [r3, #0]
}
 800d992:	46c0      	nop			@ (mov r8, r8)
 800d994:	46bd      	mov	sp, r7
 800d996:	b003      	add	sp, #12
 800d998:	bd90      	pop	{r4, r7, pc}
 800d99a:	46c0      	nop			@ (mov r8, r8)
 800d99c:	20000338 	.word	0x20000338

0800d9a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800d9a6:	4b0c      	ldr	r3, [pc, #48]	@ (800d9d8 <MX_DMA_Init+0x38>)
 800d9a8:	695a      	ldr	r2, [r3, #20]
 800d9aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d9d8 <MX_DMA_Init+0x38>)
 800d9ac:	2101      	movs	r1, #1
 800d9ae:	430a      	orrs	r2, r1
 800d9b0:	615a      	str	r2, [r3, #20]
 800d9b2:	4b09      	ldr	r3, [pc, #36]	@ (800d9d8 <MX_DMA_Init+0x38>)
 800d9b4:	695b      	ldr	r3, [r3, #20]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	4013      	ands	r3, r2
 800d9ba:	607b      	str	r3, [r7, #4]
 800d9bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 3, 3);
 800d9be:	2203      	movs	r2, #3
 800d9c0:	2103      	movs	r1, #3
 800d9c2:	200b      	movs	r0, #11
 800d9c4:	f7f4 fdf6 	bl	80025b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800d9c8:	200b      	movs	r0, #11
 800d9ca:	f7f4 fe08 	bl	80025de <HAL_NVIC_EnableIRQ>

}
 800d9ce:	46c0      	nop			@ (mov r8, r8)
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	b002      	add	sp, #8
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	46c0      	nop			@ (mov r8, r8)
 800d9d8:	40021000 	.word	0x40021000

0800d9dc <GPIO_Init_RS485>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void GPIO_Init_RS485(tGpio_Conf gpioConf )
{
 800d9dc:	b590      	push	{r4, r7, lr}
 800d9de:	b089      	sub	sp, #36	@ 0x24
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	0002      	movs	r2, r0
 800d9e4:	1dfb      	adds	r3, r7, #7
 800d9e6:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800d9e8:	240c      	movs	r4, #12
 800d9ea:	193b      	adds	r3, r7, r4
 800d9ec:	0018      	movs	r0, r3
 800d9ee:	2314      	movs	r3, #20
 800d9f0:	001a      	movs	r2, r3
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	f002 f92d 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init ){
 800d9f8:	1dfb      	adds	r3, r7, #7
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d145      	bne.n	800da8c <GPIO_Init_RS485+0xb0>
		_pin_set_l(						GPIO_COM_RS485_RTS_Port,
 800da00:	2390      	movs	r3, #144	@ 0x90
 800da02:	05db      	lsls	r3, r3, #23
 800da04:	2280      	movs	r2, #128	@ 0x80
 800da06:	0292      	lsls	r2, r2, #10
 800da08:	619a      	str	r2, [r3, #24]
													GPIO_COM_RS485_RTS_Pin);
		GPIO_Init.Pin 			= GPIO_COM_RS485_RTS_Pin;
 800da0a:	193b      	adds	r3, r7, r4
 800da0c:	2202      	movs	r2, #2
 800da0e:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_COM_RS485_RTS_Mode;
 800da10:	193b      	adds	r3, r7, r4
 800da12:	2201      	movs	r2, #1
 800da14:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_COM_RS485_RTS_Pull;
 800da16:	193b      	adds	r3, r7, r4
 800da18:	2200      	movs	r2, #0
 800da1a:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_COM_RS485_RTS_Speed;
 800da1c:	193b      	adds	r3, r7, r4
 800da1e:	2200      	movs	r2, #0
 800da20:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(				GPIO_COM_RS485_RTS_Port, &GPIO_Init);
 800da22:	193a      	adds	r2, r7, r4
 800da24:	2390      	movs	r3, #144	@ 0x90
 800da26:	05db      	lsls	r3, r3, #23
 800da28:	0011      	movs	r1, r2
 800da2a:	0018      	movs	r0, r3
 800da2c:	f7f5 f81e 	bl	8002a6c <HAL_GPIO_Init>

		GPIO_Init.Pin 			= GPIO_COM_RS485_TX_Pin;
 800da30:	193b      	adds	r3, r7, r4
 800da32:	2204      	movs	r2, #4
 800da34:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_COM_RS485_TX_Mode;
 800da36:	193b      	adds	r3, r7, r4
 800da38:	2202      	movs	r2, #2
 800da3a:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_COM_RS485_TX_Pull;
 800da3c:	193b      	adds	r3, r7, r4
 800da3e:	2201      	movs	r2, #1
 800da40:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_COM_RS485_TX_Speed;
 800da42:	193b      	adds	r3, r7, r4
 800da44:	2203      	movs	r2, #3
 800da46:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate = GPIO_COM_RS485_TX_Alt;
 800da48:	193b      	adds	r3, r7, r4
 800da4a:	2201      	movs	r2, #1
 800da4c:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(				GPIO_COM_RS485_TX_Port, &GPIO_Init);
 800da4e:	193a      	adds	r2, r7, r4
 800da50:	2390      	movs	r3, #144	@ 0x90
 800da52:	05db      	lsls	r3, r3, #23
 800da54:	0011      	movs	r1, r2
 800da56:	0018      	movs	r0, r3
 800da58:	f7f5 f808 	bl	8002a6c <HAL_GPIO_Init>

		GPIO_Init.Pin 			= GPIO_COM_RS485_RX_Pin;
 800da5c:	0021      	movs	r1, r4
 800da5e:	187b      	adds	r3, r7, r1
 800da60:	2208      	movs	r2, #8
 800da62:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_COM_RS485_RX_Mode;
 800da64:	187b      	adds	r3, r7, r1
 800da66:	2202      	movs	r2, #2
 800da68:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_COM_RS485_RX_Pull;
 800da6a:	187b      	adds	r3, r7, r1
 800da6c:	2201      	movs	r2, #1
 800da6e:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_COM_RS485_RX_Speed;
 800da70:	187b      	adds	r3, r7, r1
 800da72:	2203      	movs	r2, #3
 800da74:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate = GPIO_COM_RS485_RX_Alt;
 800da76:	187b      	adds	r3, r7, r1
 800da78:	2201      	movs	r2, #1
 800da7a:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(				GPIO_COM_RS485_RX_Port, &GPIO_Init);
 800da7c:	187a      	adds	r2, r7, r1
 800da7e:	2390      	movs	r3, #144	@ 0x90
 800da80:	05db      	lsls	r3, r3, #23
 800da82:	0011      	movs	r1, r2
 800da84:	0018      	movs	r0, r3
 800da86:	f7f4 fff1 	bl	8002a6c <HAL_GPIO_Init>
	else if( gpioConf == _e_Gpio_DeInit ){
		HAL_GPIO_DeInit(	GPIO_COM_RS485_RTS_Port, 	GPIO_COM_RS485_RTS_Pin 	);
		HAL_GPIO_DeInit(	GPIO_COM_RS485_TX_Port, 	GPIO_COM_RS485_TX_Pin		);
		HAL_GPIO_DeInit(	GPIO_COM_RS485_RX_Port, 	GPIO_COM_RS485_RX_Pin		);
	}
}
 800da8a:	e015      	b.n	800dab8 <GPIO_Init_RS485+0xdc>
	else if( gpioConf == _e_Gpio_DeInit ){
 800da8c:	1dfb      	adds	r3, r7, #7
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d111      	bne.n	800dab8 <GPIO_Init_RS485+0xdc>
		HAL_GPIO_DeInit(	GPIO_COM_RS485_RTS_Port, 	GPIO_COM_RS485_RTS_Pin 	);
 800da94:	2390      	movs	r3, #144	@ 0x90
 800da96:	05db      	lsls	r3, r3, #23
 800da98:	2102      	movs	r1, #2
 800da9a:	0018      	movs	r0, r3
 800da9c:	f7f5 f956 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_COM_RS485_TX_Port, 	GPIO_COM_RS485_TX_Pin		);
 800daa0:	2390      	movs	r3, #144	@ 0x90
 800daa2:	05db      	lsls	r3, r3, #23
 800daa4:	2104      	movs	r1, #4
 800daa6:	0018      	movs	r0, r3
 800daa8:	f7f5 f950 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_COM_RS485_RX_Port, 	GPIO_COM_RS485_RX_Pin		);
 800daac:	2390      	movs	r3, #144	@ 0x90
 800daae:	05db      	lsls	r3, r3, #23
 800dab0:	2108      	movs	r1, #8
 800dab2:	0018      	movs	r0, r3
 800dab4:	f7f5 f94a 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800dab8:	46c0      	nop			@ (mov r8, r8)
 800daba:	46bd      	mov	sp, r7
 800dabc:	b009      	add	sp, #36	@ 0x24
 800dabe:	bd90      	pop	{r4, r7, pc}

0800dac0 <GPIO_Init_Buzzer>:

void GPIO_Init_Buzzer(tGpio_Conf gpioConf )
{
 800dac0:	b590      	push	{r4, r7, lr}
 800dac2:	b089      	sub	sp, #36	@ 0x24
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	0002      	movs	r2, r0
 800dac8:	1dfb      	adds	r3, r7, #7
 800daca:	701a      	strb	r2, [r3, #0]
#if(SWCFG_BUZZER)
	GPIO_InitTypeDef GPIO_Init = {0};
 800dacc:	240c      	movs	r4, #12
 800dace:	193b      	adds	r3, r7, r4
 800dad0:	0018      	movs	r0, r3
 800dad2:	2314      	movs	r3, #20
 800dad4:	001a      	movs	r2, r3
 800dad6:	2100      	movs	r1, #0
 800dad8:	f002 f8bb 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init )
 800dadc:	1dfb      	adds	r3, r7, #7
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d117      	bne.n	800db14 <GPIO_Init_Buzzer+0x54>
	{
		_pin_set_l(GPIO_HMI_Buzz_Port, GPIO_HMI_Buzz_Pin);
 800dae4:	4b12      	ldr	r3, [pc, #72]	@ (800db30 <GPIO_Init_Buzzer+0x70>)
 800dae6:	2280      	movs	r2, #128	@ 0x80
 800dae8:	0392      	lsls	r2, r2, #14
 800daea:	619a      	str	r2, [r3, #24]
		GPIO_Init.Pin 	= GPIO_HMI_Buzz_Pin;
 800daec:	0021      	movs	r1, r4
 800daee:	187b      	adds	r3, r7, r1
 800daf0:	2220      	movs	r2, #32
 800daf2:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 	= GPIO_HMI_Buzz_Mode;
 800daf4:	187b      	adds	r3, r7, r1
 800daf6:	2201      	movs	r2, #1
 800daf8:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 	= GPIO_HMI_Buzz_Pull;
 800dafa:	187b      	adds	r3, r7, r1
 800dafc:	2200      	movs	r2, #0
 800dafe:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed = GPIO_HMI_Buzz_Speed;
 800db00:	187b      	adds	r3, r7, r1
 800db02:	2203      	movs	r2, #3
 800db04:	60da      	str	r2, [r3, #12]
		//GPIO_Init.Alternate = GPIO_HMI_Buzz_Alt;
		HAL_GPIO_Init(GPIO_HMI_Buzz_Port, &GPIO_Init);
 800db06:	187b      	adds	r3, r7, r1
 800db08:	4a09      	ldr	r2, [pc, #36]	@ (800db30 <GPIO_Init_Buzzer+0x70>)
 800db0a:	0019      	movs	r1, r3
 800db0c:	0010      	movs	r0, r2
 800db0e:	f7f4 ffad 	bl	8002a6c <HAL_GPIO_Init>
	}
	#warning "Buzzer Ligado"
#else
	#warning "Buzzer Desligado"
#endif
}
 800db12:	e008      	b.n	800db26 <GPIO_Init_Buzzer+0x66>
	else if( gpioConf == _e_Gpio_DeInit )
 800db14:	1dfb      	adds	r3, r7, #7
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d104      	bne.n	800db26 <GPIO_Init_Buzzer+0x66>
		HAL_GPIO_DeInit(GPIO_HMI_Buzz_Port, GPIO_HMI_Buzz_Pin);
 800db1c:	4b04      	ldr	r3, [pc, #16]	@ (800db30 <GPIO_Init_Buzzer+0x70>)
 800db1e:	2120      	movs	r1, #32
 800db20:	0018      	movs	r0, r3
 800db22:	f7f5 f913 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800db26:	46c0      	nop			@ (mov r8, r8)
 800db28:	46bd      	mov	sp, r7
 800db2a:	b009      	add	sp, #36	@ 0x24
 800db2c:	bd90      	pop	{r4, r7, pc}
 800db2e:	46c0      	nop			@ (mov r8, r8)
 800db30:	48001400 	.word	0x48001400

0800db34 <GPIO_Init_Disp_Led>:

void GPIO_Init_Disp_Led(tGpio_Conf gpioConf )
{
 800db34:	b590      	push	{r4, r7, lr}
 800db36:	b089      	sub	sp, #36	@ 0x24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	0002      	movs	r2, r0
 800db3c:	1dfb      	adds	r3, r7, #7
 800db3e:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800db40:	240c      	movs	r4, #12
 800db42:	193b      	adds	r3, r7, r4
 800db44:	0018      	movs	r0, r3
 800db46:	2314      	movs	r3, #20
 800db48:	001a      	movs	r2, r3
 800db4a:	2100      	movs	r1, #0
 800db4c:	f002 f881 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init ){
 800db50:	1dfb      	adds	r3, r7, #7
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d117      	bne.n	800db88 <GPIO_Init_Disp_Led+0x54>
		_pin_set_l(	GPIO_HMI_Disp_Led_Port, GPIO_HMI_Disp_Led_Pin );
 800db58:	4b12      	ldr	r3, [pc, #72]	@ (800dba4 <GPIO_Init_Disp_Led+0x70>)
 800db5a:	2280      	movs	r2, #128	@ 0x80
 800db5c:	0352      	lsls	r2, r2, #13
 800db5e:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_HMI_Disp_Led_Pin;
 800db60:	0021      	movs	r1, r4
 800db62:	187b      	adds	r3, r7, r1
 800db64:	2210      	movs	r2, #16
 800db66:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_HMI_Disp_Led_Mode;
 800db68:	187b      	adds	r3, r7, r1
 800db6a:	2201      	movs	r2, #1
 800db6c:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_HMI_Disp_Led_Pull;
 800db6e:	187b      	adds	r3, r7, r1
 800db70:	2200      	movs	r2, #0
 800db72:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_HMI_Disp_Led_Speed;
 800db74:	187b      	adds	r3, r7, r1
 800db76:	2203      	movs	r2, #3
 800db78:	60da      	str	r2, [r3, #12]
		//GPIO_Init.Alternate = GPIO_HMI_Disp_Led_Alt;
		HAL_GPIO_Init( GPIO_HMI_Disp_Led_Port, &GPIO_Init );
 800db7a:	187b      	adds	r3, r7, r1
 800db7c:	4a09      	ldr	r2, [pc, #36]	@ (800dba4 <GPIO_Init_Disp_Led+0x70>)
 800db7e:	0019      	movs	r1, r3
 800db80:	0010      	movs	r0, r2
 800db82:	f7f4 ff73 	bl	8002a6c <HAL_GPIO_Init>
	}
	else if( gpioConf == _e_Gpio_DeInit ){
		HAL_GPIO_DeInit(	GPIO_HMI_Disp_Led_Port, 	GPIO_HMI_Disp_Led_Pin 	);
	}
}
 800db86:	e008      	b.n	800db9a <GPIO_Init_Disp_Led+0x66>
	else if( gpioConf == _e_Gpio_DeInit ){
 800db88:	1dfb      	adds	r3, r7, #7
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d104      	bne.n	800db9a <GPIO_Init_Disp_Led+0x66>
		HAL_GPIO_DeInit(	GPIO_HMI_Disp_Led_Port, 	GPIO_HMI_Disp_Led_Pin 	);
 800db90:	4b04      	ldr	r3, [pc, #16]	@ (800dba4 <GPIO_Init_Disp_Led+0x70>)
 800db92:	2110      	movs	r1, #16
 800db94:	0018      	movs	r0, r3
 800db96:	f7f5 f8d9 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800db9a:	46c0      	nop			@ (mov r8, r8)
 800db9c:	46bd      	mov	sp, r7
 800db9e:	b009      	add	sp, #36	@ 0x24
 800dba0:	bd90      	pop	{r4, r7, pc}
 800dba2:	46c0      	nop			@ (mov r8, r8)
 800dba4:	48001400 	.word	0x48001400

0800dba8 <GPIO_Init_PictoInOut_Part1>:

void GPIO_Init_PictoInOut_Part1(tGpio_Conf gpioConf )
{
 800dba8:	b590      	push	{r4, r7, lr}
 800dbaa:	b089      	sub	sp, #36	@ 0x24
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	0002      	movs	r2, r0
 800dbb0:	1dfb      	adds	r3, r7, #7
 800dbb2:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800dbb4:	240c      	movs	r4, #12
 800dbb6:	193b      	adds	r3, r7, r4
 800dbb8:	0018      	movs	r0, r3
 800dbba:	2314      	movs	r3, #20
 800dbbc:	001a      	movs	r2, r3
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	f002 f847 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init ){
 800dbc4:	1dfb      	adds	r3, r7, #7
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d137      	bne.n	800dc3c <GPIO_Init_PictoInOut_Part1+0x94>
		_pin_set_l(						GPIO_IOs_Pic_Out_G_Port,
 800dbcc:	4b27      	ldr	r3, [pc, #156]	@ (800dc6c <GPIO_Init_PictoInOut_Part1+0xc4>)
 800dbce:	2280      	movs	r2, #128	@ 0x80
 800dbd0:	0492      	lsls	r2, r2, #18
 800dbd2:	619a      	str	r2, [r3, #24]
													GPIO_IOs_Pic_Out_G_Pin);
		GPIO_Init.Pin 			= GPIO_IOs_Pic_Out_G_Pin;
 800dbd4:	193b      	adds	r3, r7, r4
 800dbd6:	2280      	movs	r2, #128	@ 0x80
 800dbd8:	0092      	lsls	r2, r2, #2
 800dbda:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_IOs_Pic_Out_G_Mode;
 800dbdc:	193b      	adds	r3, r7, r4
 800dbde:	2202      	movs	r2, #2
 800dbe0:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_IOs_Pic_Out_G_Pull;
 800dbe2:	193b      	adds	r3, r7, r4
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_IOs_Pic_Out_G_Speed;
 800dbe8:	193b      	adds	r3, r7, r4
 800dbea:	2203      	movs	r2, #3
 800dbec:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate = GPIO_IOs_Pic_Out_G_Alt;
 800dbee:	193b      	adds	r3, r7, r4
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(				GPIO_IOs_Pic_Out_G_Port, &GPIO_Init);
 800dbf4:	193b      	adds	r3, r7, r4
 800dbf6:	4a1d      	ldr	r2, [pc, #116]	@ (800dc6c <GPIO_Init_PictoInOut_Part1+0xc4>)
 800dbf8:	0019      	movs	r1, r3
 800dbfa:	0010      	movs	r0, r2
 800dbfc:	f7f4 ff36 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_IOs_Pic_Out_B_Port,
 800dc00:	2390      	movs	r3, #144	@ 0x90
 800dc02:	05db      	lsls	r3, r3, #23
 800dc04:	2280      	movs	r2, #128	@ 0x80
 800dc06:	0452      	lsls	r2, r2, #17
 800dc08:	619a      	str	r2, [r3, #24]
													GPIO_IOs_Pic_Out_B_Pin);
		GPIO_Init.Pin 			= GPIO_IOs_Pic_Out_B_Pin;
 800dc0a:	193b      	adds	r3, r7, r4
 800dc0c:	2280      	movs	r2, #128	@ 0x80
 800dc0e:	0052      	lsls	r2, r2, #1
 800dc10:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_IOs_Pic_Out_B_Mode;
 800dc12:	0021      	movs	r1, r4
 800dc14:	187b      	adds	r3, r7, r1
 800dc16:	2202      	movs	r2, #2
 800dc18:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_IOs_Pic_Out_B_Pull;
 800dc1a:	187b      	adds	r3, r7, r1
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_IOs_Pic_Out_B_Speed;
 800dc20:	187b      	adds	r3, r7, r1
 800dc22:	2203      	movs	r2, #3
 800dc24:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate = GPIO_IOs_Pic_Out_B_Alt;
 800dc26:	187b      	adds	r3, r7, r1
 800dc28:	2202      	movs	r2, #2
 800dc2a:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(				GPIO_IOs_Pic_Out_B_Port, &GPIO_Init);
 800dc2c:	187a      	adds	r2, r7, r1
 800dc2e:	2390      	movs	r3, #144	@ 0x90
 800dc30:	05db      	lsls	r3, r3, #23
 800dc32:	0011      	movs	r1, r2
 800dc34:	0018      	movs	r0, r3
 800dc36:	f7f4 ff19 	bl	8002a6c <HAL_GPIO_Init>
	}
	else if( gpioConf == _e_Gpio_DeInit ){
		HAL_GPIO_DeInit(	GPIO_IOs_Pic_Out_G_Port, 	GPIO_IOs_Pic_Out_G_Pin 	);
		HAL_GPIO_DeInit(	GPIO_IOs_Pic_Out_B_Port, 	GPIO_IOs_Pic_Out_B_Pin 	);
	}
}
 800dc3a:	e012      	b.n	800dc62 <GPIO_Init_PictoInOut_Part1+0xba>
	else if( gpioConf == _e_Gpio_DeInit ){
 800dc3c:	1dfb      	adds	r3, r7, #7
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d10e      	bne.n	800dc62 <GPIO_Init_PictoInOut_Part1+0xba>
		HAL_GPIO_DeInit(	GPIO_IOs_Pic_Out_G_Port, 	GPIO_IOs_Pic_Out_G_Pin 	);
 800dc44:	2380      	movs	r3, #128	@ 0x80
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	4a08      	ldr	r2, [pc, #32]	@ (800dc6c <GPIO_Init_PictoInOut_Part1+0xc4>)
 800dc4a:	0019      	movs	r1, r3
 800dc4c:	0010      	movs	r0, r2
 800dc4e:	f7f5 f87d 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_IOs_Pic_Out_B_Port, 	GPIO_IOs_Pic_Out_B_Pin 	);
 800dc52:	2380      	movs	r3, #128	@ 0x80
 800dc54:	005a      	lsls	r2, r3, #1
 800dc56:	2390      	movs	r3, #144	@ 0x90
 800dc58:	05db      	lsls	r3, r3, #23
 800dc5a:	0011      	movs	r1, r2
 800dc5c:	0018      	movs	r0, r3
 800dc5e:	f7f5 f875 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800dc62:	46c0      	nop			@ (mov r8, r8)
 800dc64:	46bd      	mov	sp, r7
 800dc66:	b009      	add	sp, #36	@ 0x24
 800dc68:	bd90      	pop	{r4, r7, pc}
 800dc6a:	46c0      	nop			@ (mov r8, r8)
 800dc6c:	48000800 	.word	0x48000800

0800dc70 <GPIO_Init_PictoInOut_Part2>:

void GPIO_Init_PictoInOut_Part2(tGpio_Conf gpioConf )
{
 800dc70:	b590      	push	{r4, r7, lr}
 800dc72:	b089      	sub	sp, #36	@ 0x24
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	0002      	movs	r2, r0
 800dc78:	1dfb      	adds	r3, r7, #7
 800dc7a:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800dc7c:	240c      	movs	r4, #12
 800dc7e:	193b      	adds	r3, r7, r4
 800dc80:	0018      	movs	r0, r3
 800dc82:	2314      	movs	r3, #20
 800dc84:	001a      	movs	r2, r3
 800dc86:	2100      	movs	r1, #0
 800dc88:	f001 ffe3 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init ){
 800dc8c:	1dfb      	adds	r3, r7, #7
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d16f      	bne.n	800dd74 <GPIO_Init_PictoInOut_Part2+0x104>
		_pin_set_l(						GPIO_IOs_Pic_Out_R_Port,
 800dc94:	4b4b      	ldr	r3, [pc, #300]	@ (800ddc4 <GPIO_Init_PictoInOut_Part2+0x154>)
 800dc96:	2280      	movs	r2, #128	@ 0x80
 800dc98:	0452      	lsls	r2, r2, #17
 800dc9a:	619a      	str	r2, [r3, #24]
													GPIO_IOs_Pic_Out_R_Pin);
		GPIO_Init.Pin 			= GPIO_IOs_Pic_Out_R_Pin;
 800dc9c:	193b      	adds	r3, r7, r4
 800dc9e:	2280      	movs	r2, #128	@ 0x80
 800dca0:	0052      	lsls	r2, r2, #1
 800dca2:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_IOs_Pic_Out_R_Mode;
 800dca4:	193b      	adds	r3, r7, r4
 800dca6:	2202      	movs	r2, #2
 800dca8:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_IOs_Pic_Out_R_Pull;
 800dcaa:	193b      	adds	r3, r7, r4
 800dcac:	2200      	movs	r2, #0
 800dcae:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_IOs_Pic_Out_R_Speed;
 800dcb0:	193b      	adds	r3, r7, r4
 800dcb2:	2203      	movs	r2, #3
 800dcb4:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate = GPIO_IOs_Pic_Out_R_Alt;
 800dcb6:	193b      	adds	r3, r7, r4
 800dcb8:	2201      	movs	r2, #1
 800dcba:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(				GPIO_IOs_Pic_Out_R_Port, &GPIO_Init);
 800dcbc:	193b      	adds	r3, r7, r4
 800dcbe:	4a41      	ldr	r2, [pc, #260]	@ (800ddc4 <GPIO_Init_PictoInOut_Part2+0x154>)
 800dcc0:	0019      	movs	r1, r3
 800dcc2:	0010      	movs	r0, r2
 800dcc4:	f7f4 fed2 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_IOs_Pic_In_B_Port,
 800dcc8:	2390      	movs	r3, #144	@ 0x90
 800dcca:	05db      	lsls	r3, r3, #23
 800dccc:	2280      	movs	r2, #128	@ 0x80
 800dcce:	0512      	lsls	r2, r2, #20
 800dcd0:	619a      	str	r2, [r3, #24]
													GPIO_IOs_Pic_In_B_Pin);
		GPIO_Init.Pin 			= GPIO_IOs_Pic_In_B_Pin;
 800dcd2:	193b      	adds	r3, r7, r4
 800dcd4:	2280      	movs	r2, #128	@ 0x80
 800dcd6:	0112      	lsls	r2, r2, #4
 800dcd8:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_IOs_Pic_In_B_Mode;
 800dcda:	193b      	adds	r3, r7, r4
 800dcdc:	2202      	movs	r2, #2
 800dcde:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_IOs_Pic_In_B_Pull;
 800dce0:	193b      	adds	r3, r7, r4
 800dce2:	2200      	movs	r2, #0
 800dce4:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_IOs_Pic_In_B_Speed;
 800dce6:	193b      	adds	r3, r7, r4
 800dce8:	2203      	movs	r2, #3
 800dcea:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate = GPIO_IOs_Pic_In_B_Alt;
 800dcec:	193b      	adds	r3, r7, r4
 800dcee:	2202      	movs	r2, #2
 800dcf0:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(				GPIO_IOs_Pic_In_B_Port, &GPIO_Init);
 800dcf2:	193a      	adds	r2, r7, r4
 800dcf4:	2390      	movs	r3, #144	@ 0x90
 800dcf6:	05db      	lsls	r3, r3, #23
 800dcf8:	0011      	movs	r1, r2
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	f7f4 feb6 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_IOs_Pic_In_G_Port,
 800dd00:	2390      	movs	r3, #144	@ 0x90
 800dd02:	05db      	lsls	r3, r3, #23
 800dd04:	2280      	movs	r2, #128	@ 0x80
 800dd06:	04d2      	lsls	r2, r2, #19
 800dd08:	619a      	str	r2, [r3, #24]
													GPIO_IOs_Pic_In_G_Pin);
		GPIO_Init.Pin 			= GPIO_IOs_Pic_In_G_Pin;
 800dd0a:	193b      	adds	r3, r7, r4
 800dd0c:	2280      	movs	r2, #128	@ 0x80
 800dd0e:	00d2      	lsls	r2, r2, #3
 800dd10:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_IOs_Pic_In_G_Mode;
 800dd12:	193b      	adds	r3, r7, r4
 800dd14:	2202      	movs	r2, #2
 800dd16:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_IOs_Pic_In_G_Pull;
 800dd18:	193b      	adds	r3, r7, r4
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_IOs_Pic_In_G_Speed;
 800dd1e:	193b      	adds	r3, r7, r4
 800dd20:	2203      	movs	r2, #3
 800dd22:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate = GPIO_IOs_Pic_In_G_Alt;
 800dd24:	193b      	adds	r3, r7, r4
 800dd26:	2202      	movs	r2, #2
 800dd28:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(				GPIO_IOs_Pic_In_G_Port, &GPIO_Init);
 800dd2a:	193a      	adds	r2, r7, r4
 800dd2c:	2390      	movs	r3, #144	@ 0x90
 800dd2e:	05db      	lsls	r3, r3, #23
 800dd30:	0011      	movs	r1, r2
 800dd32:	0018      	movs	r0, r3
 800dd34:	f7f4 fe9a 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_IOs_Pic_In_R_Port,
 800dd38:	2390      	movs	r3, #144	@ 0x90
 800dd3a:	05db      	lsls	r3, r3, #23
 800dd3c:	2280      	movs	r2, #128	@ 0x80
 800dd3e:	0492      	lsls	r2, r2, #18
 800dd40:	619a      	str	r2, [r3, #24]
													GPIO_IOs_Pic_In_R_Pin);
		GPIO_Init.Pin 			= GPIO_IOs_Pic_In_R_Pin;
 800dd42:	193b      	adds	r3, r7, r4
 800dd44:	2280      	movs	r2, #128	@ 0x80
 800dd46:	0092      	lsls	r2, r2, #2
 800dd48:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_IOs_Pic_In_R_Mode;
 800dd4a:	0021      	movs	r1, r4
 800dd4c:	187b      	adds	r3, r7, r1
 800dd4e:	2202      	movs	r2, #2
 800dd50:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_IOs_Pic_In_R_Pull;
 800dd52:	187b      	adds	r3, r7, r1
 800dd54:	2200      	movs	r2, #0
 800dd56:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_IOs_Pic_In_R_Speed;
 800dd58:	187b      	adds	r3, r7, r1
 800dd5a:	2203      	movs	r2, #3
 800dd5c:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate = GPIO_IOs_Pic_In_R_Alt;
 800dd5e:	187b      	adds	r3, r7, r1
 800dd60:	2202      	movs	r2, #2
 800dd62:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(				GPIO_IOs_Pic_In_R_Port, &GPIO_Init);
 800dd64:	187a      	adds	r2, r7, r1
 800dd66:	2390      	movs	r3, #144	@ 0x90
 800dd68:	05db      	lsls	r3, r3, #23
 800dd6a:	0011      	movs	r1, r2
 800dd6c:	0018      	movs	r0, r3
 800dd6e:	f7f4 fe7d 	bl	8002a6c <HAL_GPIO_Init>
		HAL_GPIO_DeInit(	GPIO_IOs_Pic_Out_R_Port, 	GPIO_IOs_Pic_Out_R_Pin 	);
		HAL_GPIO_DeInit(	GPIO_IOs_Pic_In_B_Port, 	GPIO_IOs_Pic_In_B_Pin 	);
		HAL_GPIO_DeInit(	GPIO_IOs_Pic_In_G_Port, 	GPIO_IOs_Pic_In_G_Pin 	);
		HAL_GPIO_DeInit(	GPIO_IOs_Pic_In_R_Port, 	GPIO_IOs_Pic_In_R_Pin 	);
	}
}
 800dd72:	e022      	b.n	800ddba <GPIO_Init_PictoInOut_Part2+0x14a>
	else if( gpioConf == _e_Gpio_DeInit ){
 800dd74:	1dfb      	adds	r3, r7, #7
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d11e      	bne.n	800ddba <GPIO_Init_PictoInOut_Part2+0x14a>
		HAL_GPIO_DeInit(	GPIO_IOs_Pic_Out_R_Port, 	GPIO_IOs_Pic_Out_R_Pin 	);
 800dd7c:	2380      	movs	r3, #128	@ 0x80
 800dd7e:	005b      	lsls	r3, r3, #1
 800dd80:	4a10      	ldr	r2, [pc, #64]	@ (800ddc4 <GPIO_Init_PictoInOut_Part2+0x154>)
 800dd82:	0019      	movs	r1, r3
 800dd84:	0010      	movs	r0, r2
 800dd86:	f7f4 ffe1 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_IOs_Pic_In_B_Port, 	GPIO_IOs_Pic_In_B_Pin 	);
 800dd8a:	2380      	movs	r3, #128	@ 0x80
 800dd8c:	011a      	lsls	r2, r3, #4
 800dd8e:	2390      	movs	r3, #144	@ 0x90
 800dd90:	05db      	lsls	r3, r3, #23
 800dd92:	0011      	movs	r1, r2
 800dd94:	0018      	movs	r0, r3
 800dd96:	f7f4 ffd9 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_IOs_Pic_In_G_Port, 	GPIO_IOs_Pic_In_G_Pin 	);
 800dd9a:	2380      	movs	r3, #128	@ 0x80
 800dd9c:	00da      	lsls	r2, r3, #3
 800dd9e:	2390      	movs	r3, #144	@ 0x90
 800dda0:	05db      	lsls	r3, r3, #23
 800dda2:	0011      	movs	r1, r2
 800dda4:	0018      	movs	r0, r3
 800dda6:	f7f4 ffd1 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_IOs_Pic_In_R_Port, 	GPIO_IOs_Pic_In_R_Pin 	);
 800ddaa:	2380      	movs	r3, #128	@ 0x80
 800ddac:	009a      	lsls	r2, r3, #2
 800ddae:	2390      	movs	r3, #144	@ 0x90
 800ddb0:	05db      	lsls	r3, r3, #23
 800ddb2:	0011      	movs	r1, r2
 800ddb4:	0018      	movs	r0, r3
 800ddb6:	f7f4 ffc9 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800ddba:	46c0      	nop			@ (mov r8, r8)
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	b009      	add	sp, #36	@ 0x24
 800ddc0:	bd90      	pop	{r4, r7, pc}
 800ddc2:	46c0      	nop			@ (mov r8, r8)
 800ddc4:	48000800 	.word	0x48000800

0800ddc8 <GPIO_Init_Urn_Sol>:

void GPIO_Init_Urn_Sol(tGpio_Conf gpioConf)
{
 800ddc8:	b590      	push	{r4, r7, lr}
 800ddca:	b089      	sub	sp, #36	@ 0x24
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	0002      	movs	r2, r0
 800ddd0:	1dfb      	adds	r3, r7, #7
 800ddd2:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800ddd4:	240c      	movs	r4, #12
 800ddd6:	193b      	adds	r3, r7, r4
 800ddd8:	0018      	movs	r0, r3
 800ddda:	2314      	movs	r3, #20
 800dddc:	001a      	movs	r2, r3
 800ddde:	2100      	movs	r1, #0
 800dde0:	f001 ff37 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init ){
 800dde4:	1dfb      	adds	r3, r7, #7
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d11a      	bne.n	800de22 <GPIO_Init_Urn_Sol+0x5a>
		_pin_set_l(						GPIO_IOs_Urn_Sol_Port,
 800ddec:	4b13      	ldr	r3, [pc, #76]	@ (800de3c <GPIO_Init_Urn_Sol+0x74>)
 800ddee:	2280      	movs	r2, #128	@ 0x80
 800ddf0:	0292      	lsls	r2, r2, #10
 800ddf2:	619a      	str	r2, [r3, #24]
													GPIO_IOs_Urn_Sol_Pin);
		GPIO_Init.Pin 			= GPIO_IOs_Urn_Sol_Pin;
 800ddf4:	0021      	movs	r1, r4
 800ddf6:	187b      	adds	r3, r7, r1
 800ddf8:	2202      	movs	r2, #2
 800ddfa:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_IOs_Urn_Sol_Mode;
 800ddfc:	187b      	adds	r3, r7, r1
 800ddfe:	2202      	movs	r2, #2
 800de00:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_IOs_Urn_Sol_Pull;
 800de02:	187b      	adds	r3, r7, r1
 800de04:	2200      	movs	r2, #0
 800de06:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_IOs_Urn_Sol_Speed;
 800de08:	187b      	adds	r3, r7, r1
 800de0a:	2200      	movs	r2, #0
 800de0c:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate = GPIO_IOs_Urn_Sol_Alt;
 800de0e:	187b      	adds	r3, r7, r1
 800de10:	2204      	movs	r2, #4
 800de12:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(				GPIO_IOs_Urn_Sol_Port, &GPIO_Init);
 800de14:	187b      	adds	r3, r7, r1
 800de16:	4a09      	ldr	r2, [pc, #36]	@ (800de3c <GPIO_Init_Urn_Sol+0x74>)
 800de18:	0019      	movs	r1, r3
 800de1a:	0010      	movs	r0, r2
 800de1c:	f7f4 fe26 	bl	8002a6c <HAL_GPIO_Init>
	}
	else if( gpioConf == _e_Gpio_DeInit ){
		HAL_GPIO_DeInit(	GPIO_IOs_Urn_Sol_Port, 	GPIO_IOs_Urn_Sol_Pin 	);
	}
}
 800de20:	e008      	b.n	800de34 <GPIO_Init_Urn_Sol+0x6c>
	else if( gpioConf == _e_Gpio_DeInit ){
 800de22:	1dfb      	adds	r3, r7, #7
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	2b01      	cmp	r3, #1
 800de28:	d104      	bne.n	800de34 <GPIO_Init_Urn_Sol+0x6c>
		HAL_GPIO_DeInit(	GPIO_IOs_Urn_Sol_Port, 	GPIO_IOs_Urn_Sol_Pin 	);
 800de2a:	4b04      	ldr	r3, [pc, #16]	@ (800de3c <GPIO_Init_Urn_Sol+0x74>)
 800de2c:	2102      	movs	r1, #2
 800de2e:	0018      	movs	r0, r3
 800de30:	f7f4 ff8c 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800de34:	46c0      	nop			@ (mov r8, r8)
 800de36:	46bd      	mov	sp, r7
 800de38:	b009      	add	sp, #36	@ 0x24
 800de3a:	bd90      	pop	{r4, r7, pc}
 800de3c:	48000400 	.word	0x48000400

0800de40 <GPIO_Init_Motors>:

void GPIO_Init_Motors(tGpio_Conf gpioConf )
{
 800de40:	b590      	push	{r4, r7, lr}
 800de42:	b089      	sub	sp, #36	@ 0x24
 800de44:	af00      	add	r7, sp, #0
 800de46:	0002      	movs	r2, r0
 800de48:	1dfb      	adds	r3, r7, #7
 800de4a:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800de4c:	240c      	movs	r4, #12
 800de4e:	193b      	adds	r3, r7, r4
 800de50:	0018      	movs	r0, r3
 800de52:	2314      	movs	r3, #20
 800de54:	001a      	movs	r2, r3
 800de56:	2100      	movs	r1, #0
 800de58:	f001 fefb 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init ){
 800de5c:	1dfb      	adds	r3, r7, #7
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d179      	bne.n	800df58 <GPIO_Init_Motors+0x118>
		_pin_set_l( GPIO_MT1_DIR_Port, GPIO_MT1_DIR_Pin);
 800de64:	4b4e      	ldr	r3, [pc, #312]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800de66:	2280      	movs	r2, #128	@ 0x80
 800de68:	0612      	lsls	r2, r2, #24
 800de6a:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_MT1_DIR_Pin;
 800de6c:	193b      	adds	r3, r7, r4
 800de6e:	2280      	movs	r2, #128	@ 0x80
 800de70:	0212      	lsls	r2, r2, #8
 800de72:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT1_DIR_Mode;
 800de74:	193b      	adds	r3, r7, r4
 800de76:	2201      	movs	r2, #1
 800de78:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT1_DIR_Pull;
 800de7a:	193b      	adds	r3, r7, r4
 800de7c:	2200      	movs	r2, #0
 800de7e:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_MT1_DIR_Speed;
 800de80:	193b      	adds	r3, r7, r4
 800de82:	2203      	movs	r2, #3
 800de84:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_MT1_DIR_Port, &GPIO_Init);
 800de86:	193b      	adds	r3, r7, r4
 800de88:	4a45      	ldr	r2, [pc, #276]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800de8a:	0019      	movs	r1, r3
 800de8c:	0010      	movs	r0, r2
 800de8e:	f7f4 fded 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l( GPIO_MT1_STEP_Port, GPIO_MT1_STEP_Pin);
 800de92:	4b43      	ldr	r3, [pc, #268]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800de94:	2280      	movs	r2, #128	@ 0x80
 800de96:	05d2      	lsls	r2, r2, #23
 800de98:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_MT1_STEP_Pin;
 800de9a:	193b      	adds	r3, r7, r4
 800de9c:	2280      	movs	r2, #128	@ 0x80
 800de9e:	01d2      	lsls	r2, r2, #7
 800dea0:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT1_STEP_Mode;
 800dea2:	193b      	adds	r3, r7, r4
 800dea4:	2202      	movs	r2, #2
 800dea6:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT1_STEP_Pull;
 800dea8:	193b      	adds	r3, r7, r4
 800deaa:	2200      	movs	r2, #0
 800deac:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_MT1_STEP_Speed;
 800deae:	193b      	adds	r3, r7, r4
 800deb0:	2203      	movs	r2, #3
 800deb2:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate 	= GPIO_MT1_STEP_Alt;
 800deb4:	193b      	adds	r3, r7, r4
 800deb6:	2201      	movs	r2, #1
 800deb8:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init( GPIO_MT1_STEP_Port, &GPIO_Init);
 800deba:	193b      	adds	r3, r7, r4
 800debc:	4a38      	ldr	r2, [pc, #224]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800debe:	0019      	movs	r1, r3
 800dec0:	0010      	movs	r0, r2
 800dec2:	f7f4 fdd3 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l( GPIO_MT2_DIR_Port, GPIO_MT2_DIR_Pin);
 800dec6:	4b36      	ldr	r3, [pc, #216]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800dec8:	2280      	movs	r2, #128	@ 0x80
 800deca:	0492      	lsls	r2, r2, #18
 800decc:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_MT2_DIR_Pin;
 800dece:	193b      	adds	r3, r7, r4
 800ded0:	2280      	movs	r2, #128	@ 0x80
 800ded2:	0092      	lsls	r2, r2, #2
 800ded4:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT2_DIR_Mode;
 800ded6:	193b      	adds	r3, r7, r4
 800ded8:	2201      	movs	r2, #1
 800deda:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT2_DIR_Pull;
 800dedc:	193b      	adds	r3, r7, r4
 800dede:	2200      	movs	r2, #0
 800dee0:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_MT2_DIR_Speed;
 800dee2:	193b      	adds	r3, r7, r4
 800dee4:	2203      	movs	r2, #3
 800dee6:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_MT2_DIR_Port, &GPIO_Init);
 800dee8:	193b      	adds	r3, r7, r4
 800deea:	4a2d      	ldr	r2, [pc, #180]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800deec:	0019      	movs	r1, r3
 800deee:	0010      	movs	r0, r2
 800def0:	f7f4 fdbc 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l( GPIO_MT2_STEP_Port, GPIO_MT2_STEP_Pin);
 800def4:	4b2a      	ldr	r3, [pc, #168]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800def6:	2280      	movs	r2, #128	@ 0x80
 800def8:	0452      	lsls	r2, r2, #17
 800defa:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_MT2_STEP_Pin;
 800defc:	193b      	adds	r3, r7, r4
 800defe:	2280      	movs	r2, #128	@ 0x80
 800df00:	0052      	lsls	r2, r2, #1
 800df02:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT2_STEP_Mode;
 800df04:	193b      	adds	r3, r7, r4
 800df06:	2202      	movs	r2, #2
 800df08:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT2_STEP_Pull;
 800df0a:	193b      	adds	r3, r7, r4
 800df0c:	2200      	movs	r2, #0
 800df0e:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_MT2_STEP_Speed;
 800df10:	193b      	adds	r3, r7, r4
 800df12:	2203      	movs	r2, #3
 800df14:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate 	= GPIO_MT2_STEP_Alt;
 800df16:	193b      	adds	r3, r7, r4
 800df18:	2202      	movs	r2, #2
 800df1a:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init( GPIO_MT2_STEP_Port, &GPIO_Init);
 800df1c:	193b      	adds	r3, r7, r4
 800df1e:	4a20      	ldr	r2, [pc, #128]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800df20:	0019      	movs	r1, r3
 800df22:	0010      	movs	r0, r2
 800df24:	f7f4 fda2 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l( GPIO_MT_ENN_Port, GPIO_MT_ENN_Pin);
 800df28:	4b1d      	ldr	r3, [pc, #116]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800df2a:	2280      	movs	r2, #128	@ 0x80
 800df2c:	0592      	lsls	r2, r2, #22
 800df2e:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_MT_ENN_Pin;
 800df30:	193b      	adds	r3, r7, r4
 800df32:	2280      	movs	r2, #128	@ 0x80
 800df34:	0192      	lsls	r2, r2, #6
 800df36:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT_ENN_Mode;
 800df38:	193b      	adds	r3, r7, r4
 800df3a:	2201      	movs	r2, #1
 800df3c:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT_ENN_Pull;
 800df3e:	193b      	adds	r3, r7, r4
 800df40:	2200      	movs	r2, #0
 800df42:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_MT_ENN_Speed;
 800df44:	193b      	adds	r3, r7, r4
 800df46:	2203      	movs	r2, #3
 800df48:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_MT_ENN_Port, &GPIO_Init);
 800df4a:	193b      	adds	r3, r7, r4
 800df4c:	4a14      	ldr	r2, [pc, #80]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800df4e:	0019      	movs	r1, r3
 800df50:	0010      	movs	r0, r2
 800df52:	f7f4 fd8b 	bl	8002a6c <HAL_GPIO_Init>
		HAL_GPIO_DeInit(	GPIO_MT1_DIR_Port, 	GPIO_MT1_DIR_Pin 	);
		HAL_GPIO_DeInit(	GPIO_MT1_STEP_Port, 	GPIO_MT1_STEP_Pin 	);
		HAL_GPIO_DeInit(	GPIO_MT2_DIR_Port, 	GPIO_MT2_DIR_Pin 	);
		HAL_GPIO_DeInit(	GPIO_MT2_STEP_Port, 	GPIO_MT2_STEP_Pin 	);
	}
}
 800df56:	e01f      	b.n	800df98 <GPIO_Init_Motors+0x158>
	else if( gpioConf == _e_Gpio_DeInit ){
 800df58:	1dfb      	adds	r3, r7, #7
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	d11b      	bne.n	800df98 <GPIO_Init_Motors+0x158>
		HAL_GPIO_DeInit(	GPIO_MT1_DIR_Port, 	GPIO_MT1_DIR_Pin 	);
 800df60:	2380      	movs	r3, #128	@ 0x80
 800df62:	021b      	lsls	r3, r3, #8
 800df64:	4a0e      	ldr	r2, [pc, #56]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800df66:	0019      	movs	r1, r3
 800df68:	0010      	movs	r0, r2
 800df6a:	f7f4 feef 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_MT1_STEP_Port, 	GPIO_MT1_STEP_Pin 	);
 800df6e:	2380      	movs	r3, #128	@ 0x80
 800df70:	01db      	lsls	r3, r3, #7
 800df72:	4a0b      	ldr	r2, [pc, #44]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800df74:	0019      	movs	r1, r3
 800df76:	0010      	movs	r0, r2
 800df78:	f7f4 fee8 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_MT2_DIR_Port, 	GPIO_MT2_DIR_Pin 	);
 800df7c:	2380      	movs	r3, #128	@ 0x80
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	4a07      	ldr	r2, [pc, #28]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800df82:	0019      	movs	r1, r3
 800df84:	0010      	movs	r0, r2
 800df86:	f7f4 fee1 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_MT2_STEP_Port, 	GPIO_MT2_STEP_Pin 	);
 800df8a:	2380      	movs	r3, #128	@ 0x80
 800df8c:	005b      	lsls	r3, r3, #1
 800df8e:	4a04      	ldr	r2, [pc, #16]	@ (800dfa0 <GPIO_Init_Motors+0x160>)
 800df90:	0019      	movs	r1, r3
 800df92:	0010      	movs	r0, r2
 800df94:	f7f4 feda 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800df98:	46c0      	nop			@ (mov r8, r8)
 800df9a:	46bd      	mov	sp, r7
 800df9c:	b009      	add	sp, #36	@ 0x24
 800df9e:	bd90      	pop	{r4, r7, pc}
 800dfa0:	48000400 	.word	0x48000400

0800dfa4 <GPIO_Init_Urn>:

void GPIO_Init_Urn(tGpio_Conf gpioConf )
{
 800dfa4:	b590      	push	{r4, r7, lr}
 800dfa6:	b089      	sub	sp, #36	@ 0x24
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	0002      	movs	r2, r0
 800dfac:	1dfb      	adds	r3, r7, #7
 800dfae:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800dfb0:	240c      	movs	r4, #12
 800dfb2:	193b      	adds	r3, r7, r4
 800dfb4:	0018      	movs	r0, r3
 800dfb6:	2314      	movs	r3, #20
 800dfb8:	001a      	movs	r2, r3
 800dfba:	2100      	movs	r1, #0
 800dfbc:	f001 fe49 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init ){
 800dfc0:	1dfb      	adds	r3, r7, #7
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d133      	bne.n	800e030 <GPIO_Init_Urn+0x8c>
		_pin_set_l(						GPIO_IOs_Urn_Pic_Port,
 800dfc8:	4b25      	ldr	r3, [pc, #148]	@ (800e060 <GPIO_Init_Urn+0xbc>)
 800dfca:	2280      	movs	r2, #128	@ 0x80
 800dfcc:	0592      	lsls	r2, r2, #22
 800dfce:	619a      	str	r2, [r3, #24]
													GPIO_IOs_Urn_Pic_Pin);
		GPIO_Init.Pin 			= GPIO_IOs_Urn_Pic_Pin;
 800dfd0:	193b      	adds	r3, r7, r4
 800dfd2:	2280      	movs	r2, #128	@ 0x80
 800dfd4:	0192      	lsls	r2, r2, #6
 800dfd6:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_IOs_Urn_Pic_Mode;
 800dfd8:	193b      	adds	r3, r7, r4
 800dfda:	2201      	movs	r2, #1
 800dfdc:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_IOs_Urn_Pic_Pull;
 800dfde:	193b      	adds	r3, r7, r4
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_IOs_Urn_Pic_Speed;
 800dfe4:	193b      	adds	r3, r7, r4
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(				GPIO_IOs_Urn_Pic_Port, &GPIO_Init);
 800dfea:	193b      	adds	r3, r7, r4
 800dfec:	4a1c      	ldr	r2, [pc, #112]	@ (800e060 <GPIO_Init_Urn+0xbc>)
 800dfee:	0019      	movs	r1, r3
 800dff0:	0010      	movs	r0, r2
 800dff2:	f7f4 fd3b 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_IOs_Urn_Det_Port,
 800dff6:	4b1b      	ldr	r3, [pc, #108]	@ (800e064 <GPIO_Init_Urn+0xc0>)
 800dff8:	2280      	movs	r2, #128	@ 0x80
 800dffa:	0252      	lsls	r2, r2, #9
 800dffc:	619a      	str	r2, [r3, #24]
													GPIO_IOs_Urn_Det_Pin);
		GPIO_Init.Pin 			= GPIO_IOs_Urn_Det_Pin;
 800dffe:	193b      	adds	r3, r7, r4
 800e000:	2201      	movs	r2, #1
 800e002:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_IOs_Urn_Det_Mode;
 800e004:	193b      	adds	r3, r7, r4
 800e006:	2288      	movs	r2, #136	@ 0x88
 800e008:	0352      	lsls	r2, r2, #13
 800e00a:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_IOs_Urn_Det_Pull;
 800e00c:	193b      	adds	r3, r7, r4
 800e00e:	2201      	movs	r2, #1
 800e010:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(				GPIO_IOs_Urn_Det_Port, &GPIO_Init);
 800e012:	193b      	adds	r3, r7, r4
 800e014:	4a13      	ldr	r2, [pc, #76]	@ (800e064 <GPIO_Init_Urn+0xc0>)
 800e016:	0019      	movs	r1, r3
 800e018:	0010      	movs	r0, r2
 800e01a:	f7f4 fd27 	bl	8002a6c <HAL_GPIO_Init>

		HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 1);
 800e01e:	2201      	movs	r2, #1
 800e020:	2102      	movs	r1, #2
 800e022:	2007      	movs	r0, #7
 800e024:	f7f4 fac6 	bl	80025b4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800e028:	2007      	movs	r0, #7
 800e02a:	f7f4 fad8 	bl	80025de <HAL_NVIC_EnableIRQ>
	else if( gpioConf == _e_Gpio_DeInit ){
		HAL_GPIO_DeInit(	GPIO_IOs_Urn_Pic_Port, 	GPIO_IOs_Urn_Pic_Pin 	);
		HAL_GPIO_DeInit(	GPIO_IOs_Urn_Det_Port, 	GPIO_IOs_Urn_Det_Pin 	);
		HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
	}
}
 800e02e:	e012      	b.n	800e056 <GPIO_Init_Urn+0xb2>
	else if( gpioConf == _e_Gpio_DeInit ){
 800e030:	1dfb      	adds	r3, r7, #7
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	2b01      	cmp	r3, #1
 800e036:	d10e      	bne.n	800e056 <GPIO_Init_Urn+0xb2>
		HAL_GPIO_DeInit(	GPIO_IOs_Urn_Pic_Port, 	GPIO_IOs_Urn_Pic_Pin 	);
 800e038:	2380      	movs	r3, #128	@ 0x80
 800e03a:	019b      	lsls	r3, r3, #6
 800e03c:	4a08      	ldr	r2, [pc, #32]	@ (800e060 <GPIO_Init_Urn+0xbc>)
 800e03e:	0019      	movs	r1, r3
 800e040:	0010      	movs	r0, r2
 800e042:	f7f4 fe83 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_IOs_Urn_Det_Port, 	GPIO_IOs_Urn_Det_Pin 	);
 800e046:	4b07      	ldr	r3, [pc, #28]	@ (800e064 <GPIO_Init_Urn+0xc0>)
 800e048:	2101      	movs	r1, #1
 800e04a:	0018      	movs	r0, r3
 800e04c:	f7f4 fe7e 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800e050:	2007      	movs	r0, #7
 800e052:	f7f4 fad4 	bl	80025fe <HAL_NVIC_DisableIRQ>
}
 800e056:	46c0      	nop			@ (mov r8, r8)
 800e058:	46bd      	mov	sp, r7
 800e05a:	b009      	add	sp, #36	@ 0x24
 800e05c:	bd90      	pop	{r4, r7, pc}
 800e05e:	46c0      	nop			@ (mov r8, r8)
 800e060:	48000800 	.word	0x48000800
 800e064:	48000400 	.word	0x48000400

0800e068 <GPIO_Init_Sensor>:

void GPIO_Init_Sensor(tGpio_Conf gpioConf )
{
 800e068:	b590      	push	{r4, r7, lr}
 800e06a:	b089      	sub	sp, #36	@ 0x24
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	0002      	movs	r2, r0
 800e070:	1dfb      	adds	r3, r7, #7
 800e072:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800e074:	240c      	movs	r4, #12
 800e076:	193b      	adds	r3, r7, r4
 800e078:	0018      	movs	r0, r3
 800e07a:	2314      	movs	r3, #20
 800e07c:	001a      	movs	r2, r3
 800e07e:	2100      	movs	r1, #0
 800e080:	f001 fde7 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init ){
 800e084:	1dfb      	adds	r3, r7, #7
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d14e      	bne.n	800e12a <GPIO_Init_Sensor+0xc2>
		_pin_set_l(	GPIO_IOs_Sen_In_Port, GPIO_IOs_Sen_In_Pin );
 800e08c:	4b37      	ldr	r3, [pc, #220]	@ (800e16c <GPIO_Init_Sensor+0x104>)
 800e08e:	2280      	movs	r2, #128	@ 0x80
 800e090:	05d2      	lsls	r2, r2, #23
 800e092:	619a      	str	r2, [r3, #24]
		GPIO_Init.Pin  = GPIO_IOs_Sen_In_Pin;
 800e094:	193b      	adds	r3, r7, r4
 800e096:	2280      	movs	r2, #128	@ 0x80
 800e098:	01d2      	lsls	r2, r2, #7
 800e09a:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode = GPIO_IOs_Sen_In_Mode;
 800e09c:	193b      	adds	r3, r7, r4
 800e09e:	2200      	movs	r2, #0
 800e0a0:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull = GPIO_IOs_Sen_In_Pull;
 800e0a2:	193b      	adds	r3, r7, r4
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init( GPIO_IOs_Sen_In_Port, &GPIO_Init );
 800e0a8:	193b      	adds	r3, r7, r4
 800e0aa:	4a30      	ldr	r2, [pc, #192]	@ (800e16c <GPIO_Init_Sensor+0x104>)
 800e0ac:	0019      	movs	r1, r3
 800e0ae:	0010      	movs	r0, r2
 800e0b0:	f7f4 fcdc 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l( GPIO_IOs_Sen_Out_Port, GPIO_IOs_Sen_Out_Pin );
 800e0b4:	4b2d      	ldr	r3, [pc, #180]	@ (800e16c <GPIO_Init_Sensor+0x104>)
 800e0b6:	2280      	movs	r2, #128	@ 0x80
 800e0b8:	0612      	lsls	r2, r2, #24
 800e0ba:	619a      	str	r2, [r3, #24]
		GPIO_Init.Pin  = GPIO_IOs_Sen_Out_Pin;
 800e0bc:	193b      	adds	r3, r7, r4
 800e0be:	2280      	movs	r2, #128	@ 0x80
 800e0c0:	0212      	lsls	r2, r2, #8
 800e0c2:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode = GPIO_IOs_Sen_Out_Mode;
 800e0c4:	193b      	adds	r3, r7, r4
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull = GPIO_IOs_Sen_Out_Pull;
 800e0ca:	193b      	adds	r3, r7, r4
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init( GPIO_IOs_Sen_Out_Port, &GPIO_Init );
 800e0d0:	193b      	adds	r3, r7, r4
 800e0d2:	4a26      	ldr	r2, [pc, #152]	@ (800e16c <GPIO_Init_Sensor+0x104>)
 800e0d4:	0019      	movs	r1, r3
 800e0d6:	0010      	movs	r0, r2
 800e0d8:	f7f4 fcc8 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l( GPIO_IOs_Sen_MidUp_Port, GPIO_IOs_Sen_MidUp_Pin );
 800e0dc:	4b24      	ldr	r3, [pc, #144]	@ (800e170 <GPIO_Init_Sensor+0x108>)
 800e0de:	2280      	movs	r2, #128	@ 0x80
 800e0e0:	0252      	lsls	r2, r2, #9
 800e0e2:	619a      	str	r2, [r3, #24]
		GPIO_Init.Pin  = GPIO_IOs_Sen_MidUp_Pin;
 800e0e4:	193b      	adds	r3, r7, r4
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode = GPIO_IOs_Sen_MidUp_Mode;
 800e0ea:	193b      	adds	r3, r7, r4
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull = GPIO_IOs_Sen_MidUp_Pull;
 800e0f0:	193b      	adds	r3, r7, r4
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init( GPIO_IOs_Sen_MidUp_Port, &GPIO_Init );
 800e0f6:	193b      	adds	r3, r7, r4
 800e0f8:	4a1d      	ldr	r2, [pc, #116]	@ (800e170 <GPIO_Init_Sensor+0x108>)
 800e0fa:	0019      	movs	r1, r3
 800e0fc:	0010      	movs	r0, r2
 800e0fe:	f7f4 fcb5 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l( GPIO_IOs_Sen_MidDown_Port, GPIO_IOs_Sen_MidDown_Pin );
 800e102:	4b1b      	ldr	r3, [pc, #108]	@ (800e170 <GPIO_Init_Sensor+0x108>)
 800e104:	2280      	movs	r2, #128	@ 0x80
 800e106:	0292      	lsls	r2, r2, #10
 800e108:	619a      	str	r2, [r3, #24]
		GPIO_Init.Pin  = GPIO_IOs_Sen_MidDown_Pin;
 800e10a:	193b      	adds	r3, r7, r4
 800e10c:	2202      	movs	r2, #2
 800e10e:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode = GPIO_IOs_Sen_MidDown_Mode;
 800e110:	193b      	adds	r3, r7, r4
 800e112:	2200      	movs	r2, #0
 800e114:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull = GPIO_IOs_Sen_MidDown_Pull;
 800e116:	193b      	adds	r3, r7, r4
 800e118:	2200      	movs	r2, #0
 800e11a:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init( GPIO_IOs_Sen_MidDown_Port, &GPIO_Init );
 800e11c:	193b      	adds	r3, r7, r4
 800e11e:	4a14      	ldr	r2, [pc, #80]	@ (800e170 <GPIO_Init_Sensor+0x108>)
 800e120:	0019      	movs	r1, r3
 800e122:	0010      	movs	r0, r2
 800e124:	f7f4 fca2 	bl	8002a6c <HAL_GPIO_Init>
		HAL_GPIO_DeInit( GPIO_IOs_Sen_In_Port,      GPIO_IOs_Sen_In_Pin      );
		HAL_GPIO_DeInit( GPIO_IOs_Sen_Out_Port,     GPIO_IOs_Sen_Out_Pin     );
		HAL_GPIO_DeInit( GPIO_IOs_Sen_MidUp_Port,   GPIO_IOs_Sen_MidUp_Pin   );
		HAL_GPIO_DeInit( GPIO_IOs_Sen_MidDown_Port, GPIO_IOs_Sen_MidDown_Pin );
	}
}
 800e128:	e01b      	b.n	800e162 <GPIO_Init_Sensor+0xfa>
	else if( gpioConf == _e_Gpio_DeInit ){
 800e12a:	1dfb      	adds	r3, r7, #7
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	2b01      	cmp	r3, #1
 800e130:	d117      	bne.n	800e162 <GPIO_Init_Sensor+0xfa>
		HAL_GPIO_DeInit( GPIO_IOs_Sen_In_Port,      GPIO_IOs_Sen_In_Pin      );
 800e132:	2380      	movs	r3, #128	@ 0x80
 800e134:	01db      	lsls	r3, r3, #7
 800e136:	4a0d      	ldr	r2, [pc, #52]	@ (800e16c <GPIO_Init_Sensor+0x104>)
 800e138:	0019      	movs	r1, r3
 800e13a:	0010      	movs	r0, r2
 800e13c:	f7f4 fe06 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit( GPIO_IOs_Sen_Out_Port,     GPIO_IOs_Sen_Out_Pin     );
 800e140:	2380      	movs	r3, #128	@ 0x80
 800e142:	021b      	lsls	r3, r3, #8
 800e144:	4a09      	ldr	r2, [pc, #36]	@ (800e16c <GPIO_Init_Sensor+0x104>)
 800e146:	0019      	movs	r1, r3
 800e148:	0010      	movs	r0, r2
 800e14a:	f7f4 fdff 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit( GPIO_IOs_Sen_MidUp_Port,   GPIO_IOs_Sen_MidUp_Pin   );
 800e14e:	4b08      	ldr	r3, [pc, #32]	@ (800e170 <GPIO_Init_Sensor+0x108>)
 800e150:	2101      	movs	r1, #1
 800e152:	0018      	movs	r0, r3
 800e154:	f7f4 fdfa 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit( GPIO_IOs_Sen_MidDown_Port, GPIO_IOs_Sen_MidDown_Pin );
 800e158:	4b05      	ldr	r3, [pc, #20]	@ (800e170 <GPIO_Init_Sensor+0x108>)
 800e15a:	2102      	movs	r1, #2
 800e15c:	0018      	movs	r0, r3
 800e15e:	f7f4 fdf5 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800e162:	46c0      	nop			@ (mov r8, r8)
 800e164:	46bd      	mov	sp, r7
 800e166:	b009      	add	sp, #36	@ 0x24
 800e168:	bd90      	pop	{r4, r7, pc}
 800e16a:	46c0      	nop			@ (mov r8, r8)
 800e16c:	48000800 	.word	0x48000800
 800e170:	48001400 	.word	0x48001400

0800e174 <GPIO_Init_PicA>:

void GPIO_Init_PicA(tGpio_Conf gpioConf )
{
 800e174:	b590      	push	{r4, r7, lr}
 800e176:	b089      	sub	sp, #36	@ 0x24
 800e178:	af00      	add	r7, sp, #0
 800e17a:	0002      	movs	r2, r0
 800e17c:	1dfb      	adds	r3, r7, #7
 800e17e:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800e180:	240c      	movs	r4, #12
 800e182:	193b      	adds	r3, r7, r4
 800e184:	0018      	movs	r0, r3
 800e186:	2314      	movs	r3, #20
 800e188:	001a      	movs	r2, r3
 800e18a:	2100      	movs	r1, #0
 800e18c:	f001 fd61 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init ){
 800e190:	1dfb      	adds	r3, r7, #7
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d147      	bne.n	800e228 <GPIO_Init_PicA+0xb4>
		_pin_set_l(						GPIO_IOs_PicA_X_Port,
 800e198:	4b31      	ldr	r3, [pc, #196]	@ (800e260 <GPIO_Init_PicA+0xec>)
 800e19a:	2280      	movs	r2, #128	@ 0x80
 800e19c:	0552      	lsls	r2, r2, #21
 800e19e:	619a      	str	r2, [r3, #24]
													GPIO_IOs_PicA_X_Pin);
		GPIO_Init.Pin 			= GPIO_IOs_PicA_X_Pin;
 800e1a0:	193b      	adds	r3, r7, r4
 800e1a2:	2280      	movs	r2, #128	@ 0x80
 800e1a4:	0152      	lsls	r2, r2, #5
 800e1a6:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_IOs_PicA_X_Mode;
 800e1a8:	193b      	adds	r3, r7, r4
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_IOs_PicA_X_Pull;
 800e1ae:	193b      	adds	r3, r7, r4
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_IOs_PicA_X_Speed;
 800e1b4:	193b      	adds	r3, r7, r4
 800e1b6:	2203      	movs	r2, #3
 800e1b8:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(				GPIO_IOs_PicA_X_Port, &GPIO_Init);
 800e1ba:	193b      	adds	r3, r7, r4
 800e1bc:	4a28      	ldr	r2, [pc, #160]	@ (800e260 <GPIO_Init_PicA+0xec>)
 800e1be:	0019      	movs	r1, r3
 800e1c0:	0010      	movs	r0, r2
 800e1c2:	f7f4 fc53 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_IOs_PicA_D_Port,
 800e1c6:	2390      	movs	r3, #144	@ 0x90
 800e1c8:	05db      	lsls	r3, r3, #23
 800e1ca:	2280      	movs	r2, #128	@ 0x80
 800e1cc:	0552      	lsls	r2, r2, #21
 800e1ce:	619a      	str	r2, [r3, #24]
													GPIO_IOs_PicA_D_Pin);
		GPIO_Init.Pin 			= GPIO_IOs_PicA_D_Pin;
 800e1d0:	193b      	adds	r3, r7, r4
 800e1d2:	2280      	movs	r2, #128	@ 0x80
 800e1d4:	0152      	lsls	r2, r2, #5
 800e1d6:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_IOs_PicA_D_Mode;
 800e1d8:	193b      	adds	r3, r7, r4
 800e1da:	2201      	movs	r2, #1
 800e1dc:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_IOs_PicA_D_Pull;
 800e1de:	193b      	adds	r3, r7, r4
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_IOs_PicA_D_Speed;
 800e1e4:	193b      	adds	r3, r7, r4
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(				GPIO_IOs_PicA_D_Port, &GPIO_Init);
 800e1ea:	193a      	adds	r2, r7, r4
 800e1ec:	2390      	movs	r3, #144	@ 0x90
 800e1ee:	05db      	lsls	r3, r3, #23
 800e1f0:	0011      	movs	r1, r2
 800e1f2:	0018      	movs	r0, r3
 800e1f4:	f7f4 fc3a 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_IOs_PicA_E_Port,
 800e1f8:	4b1a      	ldr	r3, [pc, #104]	@ (800e264 <GPIO_Init_PicA+0xf0>)
 800e1fa:	2280      	movs	r2, #128	@ 0x80
 800e1fc:	03d2      	lsls	r2, r2, #15
 800e1fe:	619a      	str	r2, [r3, #24]
													GPIO_IOs_PicA_E_Pin);
		GPIO_Init.Pin 			= GPIO_IOs_PicA_E_Pin;
 800e200:	0021      	movs	r1, r4
 800e202:	187b      	adds	r3, r7, r1
 800e204:	2240      	movs	r2, #64	@ 0x40
 800e206:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_IOs_PicA_E_Mode;
 800e208:	187b      	adds	r3, r7, r1
 800e20a:	2201      	movs	r2, #1
 800e20c:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_IOs_PicA_E_Pull;
 800e20e:	187b      	adds	r3, r7, r1
 800e210:	2200      	movs	r2, #0
 800e212:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_IOs_PicA_E_Speed;
 800e214:	187b      	adds	r3, r7, r1
 800e216:	2200      	movs	r2, #0
 800e218:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(				GPIO_IOs_PicA_E_Port, &GPIO_Init);
 800e21a:	187b      	adds	r3, r7, r1
 800e21c:	4a11      	ldr	r2, [pc, #68]	@ (800e264 <GPIO_Init_PicA+0xf0>)
 800e21e:	0019      	movs	r1, r3
 800e220:	0010      	movs	r0, r2
 800e222:	f7f4 fc23 	bl	8002a6c <HAL_GPIO_Init>
	else if( gpioConf == _e_Gpio_DeInit ){
		HAL_GPIO_DeInit(	GPIO_IOs_PicA_X_Port, 			GPIO_IOs_PicA_X_Pin 			);
		HAL_GPIO_DeInit(	GPIO_IOs_PicA_D_Port, 			GPIO_IOs_PicA_D_Pin 			);
		HAL_GPIO_DeInit(	GPIO_IOs_PicA_E_Port, 			GPIO_IOs_PicA_E_Pin 			);
	}
}
 800e226:	e017      	b.n	800e258 <GPIO_Init_PicA+0xe4>
	else if( gpioConf == _e_Gpio_DeInit ){
 800e228:	1dfb      	adds	r3, r7, #7
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d113      	bne.n	800e258 <GPIO_Init_PicA+0xe4>
		HAL_GPIO_DeInit(	GPIO_IOs_PicA_X_Port, 			GPIO_IOs_PicA_X_Pin 			);
 800e230:	2380      	movs	r3, #128	@ 0x80
 800e232:	015b      	lsls	r3, r3, #5
 800e234:	4a0a      	ldr	r2, [pc, #40]	@ (800e260 <GPIO_Init_PicA+0xec>)
 800e236:	0019      	movs	r1, r3
 800e238:	0010      	movs	r0, r2
 800e23a:	f7f4 fd87 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_IOs_PicA_D_Port, 			GPIO_IOs_PicA_D_Pin 			);
 800e23e:	2380      	movs	r3, #128	@ 0x80
 800e240:	015a      	lsls	r2, r3, #5
 800e242:	2390      	movs	r3, #144	@ 0x90
 800e244:	05db      	lsls	r3, r3, #23
 800e246:	0011      	movs	r1, r2
 800e248:	0018      	movs	r0, r3
 800e24a:	f7f4 fd7f 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_IOs_PicA_E_Port, 			GPIO_IOs_PicA_E_Pin 			);
 800e24e:	4b05      	ldr	r3, [pc, #20]	@ (800e264 <GPIO_Init_PicA+0xf0>)
 800e250:	2140      	movs	r1, #64	@ 0x40
 800e252:	0018      	movs	r0, r3
 800e254:	f7f4 fd7a 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800e258:	46c0      	nop			@ (mov r8, r8)
 800e25a:	46bd      	mov	sp, r7
 800e25c:	b009      	add	sp, #36	@ 0x24
 800e25e:	bd90      	pop	{r4, r7, pc}
 800e260:	48000400 	.word	0x48000400
 800e264:	48001400 	.word	0x48001400

0800e268 <GPIO_Init_ComIo>:

void GPIO_Init_ComIo(tGpio_Conf gpioConf )
{
 800e268:	b590      	push	{r4, r7, lr}
 800e26a:	b089      	sub	sp, #36	@ 0x24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	0002      	movs	r2, r0
 800e270:	1dfb      	adds	r3, r7, #7
 800e272:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800e274:	240c      	movs	r4, #12
 800e276:	193b      	adds	r3, r7, r4
 800e278:	0018      	movs	r0, r3
 800e27a:	2314      	movs	r3, #20
 800e27c:	001a      	movs	r2, r3
 800e27e:	2100      	movs	r1, #0
 800e280:	f001 fce7 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init ){
 800e284:	1dfb      	adds	r3, r7, #7
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d152      	bne.n	800e332 <GPIO_Init_ComIo+0xca>
		_pin_set_l(						GPIO_COM_OUT1_Port,
 800e28c:	4b37      	ldr	r3, [pc, #220]	@ (800e36c <GPIO_Init_ComIo+0x104>)
 800e28e:	2280      	movs	r2, #128	@ 0x80
 800e290:	02d2      	lsls	r2, r2, #11
 800e292:	619a      	str	r2, [r3, #24]
													GPIO_COM_OUT1_Pin);
		GPIO_Init.Pin 			= GPIO_COM_OUT1_Pin;
 800e294:	193b      	adds	r3, r7, r4
 800e296:	2204      	movs	r2, #4
 800e298:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_COM_OUT1_Mode;
 800e29a:	193b      	adds	r3, r7, r4
 800e29c:	2201      	movs	r2, #1
 800e29e:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_COM_OUT1_Pull;
 800e2a0:	193b      	adds	r3, r7, r4
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_COM_OUT1_Speed;
 800e2a6:	193b      	adds	r3, r7, r4
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(				GPIO_COM_OUT1_Port, &GPIO_Init);
 800e2ac:	193b      	adds	r3, r7, r4
 800e2ae:	4a2f      	ldr	r2, [pc, #188]	@ (800e36c <GPIO_Init_ComIo+0x104>)
 800e2b0:	0019      	movs	r1, r3
 800e2b2:	0010      	movs	r0, r2
 800e2b4:	f7f4 fbda 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_COM_OUT2_Port,
 800e2b8:	4b2c      	ldr	r3, [pc, #176]	@ (800e36c <GPIO_Init_ComIo+0x104>)
 800e2ba:	2280      	movs	r2, #128	@ 0x80
 800e2bc:	0312      	lsls	r2, r2, #12
 800e2be:	619a      	str	r2, [r3, #24]
													GPIO_COM_OUT2_Pin);
		GPIO_Init.Pin 			= GPIO_COM_OUT2_Pin;
 800e2c0:	193b      	adds	r3, r7, r4
 800e2c2:	2208      	movs	r2, #8
 800e2c4:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_COM_OUT2_Mode;
 800e2c6:	193b      	adds	r3, r7, r4
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_COM_OUT2_Pull;
 800e2cc:	193b      	adds	r3, r7, r4
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_COM_OUT2_Speed;
 800e2d2:	193b      	adds	r3, r7, r4
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(				GPIO_COM_OUT2_Port, &GPIO_Init);
 800e2d8:	193b      	adds	r3, r7, r4
 800e2da:	4a24      	ldr	r2, [pc, #144]	@ (800e36c <GPIO_Init_ComIo+0x104>)
 800e2dc:	0019      	movs	r1, r3
 800e2de:	0010      	movs	r0, r2
 800e2e0:	f7f4 fbc4 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_COM_IN1_Port,
 800e2e4:	4b21      	ldr	r3, [pc, #132]	@ (800e36c <GPIO_Init_ComIo+0x104>)
 800e2e6:	2280      	movs	r2, #128	@ 0x80
 800e2e8:	0292      	lsls	r2, r2, #10
 800e2ea:	619a      	str	r2, [r3, #24]
													GPIO_COM_IN1_Pin);
		GPIO_Init.Pin 			= GPIO_COM_IN1_Pin;
 800e2ec:	193b      	adds	r3, r7, r4
 800e2ee:	2202      	movs	r2, #2
 800e2f0:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_COM_IN1_Mode;
 800e2f2:	193b      	adds	r3, r7, r4
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_COM_IN1_Pull;
 800e2f8:	193b      	adds	r3, r7, r4
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(				GPIO_COM_IN1_Port, &GPIO_Init);
 800e2fe:	193b      	adds	r3, r7, r4
 800e300:	4a1a      	ldr	r2, [pc, #104]	@ (800e36c <GPIO_Init_ComIo+0x104>)
 800e302:	0019      	movs	r1, r3
 800e304:	0010      	movs	r0, r2
 800e306:	f7f4 fbb1 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_COM_IN2_Port,
 800e30a:	4b18      	ldr	r3, [pc, #96]	@ (800e36c <GPIO_Init_ComIo+0x104>)
 800e30c:	2280      	movs	r2, #128	@ 0x80
 800e30e:	0252      	lsls	r2, r2, #9
 800e310:	619a      	str	r2, [r3, #24]
													GPIO_COM_IN2_Pin);
		GPIO_Init.Pin 			= GPIO_COM_IN2_Pin;
 800e312:	193b      	adds	r3, r7, r4
 800e314:	2201      	movs	r2, #1
 800e316:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_COM_IN2_Mode;
 800e318:	193b      	adds	r3, r7, r4
 800e31a:	2200      	movs	r2, #0
 800e31c:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_COM_IN2_Pull;
 800e31e:	193b      	adds	r3, r7, r4
 800e320:	2200      	movs	r2, #0
 800e322:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(				GPIO_COM_IN2_Port, &GPIO_Init);
 800e324:	193b      	adds	r3, r7, r4
 800e326:	4a11      	ldr	r2, [pc, #68]	@ (800e36c <GPIO_Init_ComIo+0x104>)
 800e328:	0019      	movs	r1, r3
 800e32a:	0010      	movs	r0, r2
 800e32c:	f7f4 fb9e 	bl	8002a6c <HAL_GPIO_Init>
		HAL_GPIO_DeInit(	GPIO_COM_OUT1_Port, GPIO_COM_OUT1_Pin );
		HAL_GPIO_DeInit(	GPIO_COM_OUT2_Port, GPIO_COM_OUT2_Pin );
		HAL_GPIO_DeInit(	GPIO_COM_IN1_Port, 	GPIO_COM_IN1_Pin 	);
		HAL_GPIO_DeInit(	GPIO_COM_IN2_Port, 	GPIO_COM_IN2_Pin 	);
	}
}
 800e330:	e017      	b.n	800e362 <GPIO_Init_ComIo+0xfa>
	else if( gpioConf == _e_Gpio_DeInit ){
 800e332:	1dfb      	adds	r3, r7, #7
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	2b01      	cmp	r3, #1
 800e338:	d113      	bne.n	800e362 <GPIO_Init_ComIo+0xfa>
		HAL_GPIO_DeInit(	GPIO_COM_OUT1_Port, GPIO_COM_OUT1_Pin );
 800e33a:	4b0c      	ldr	r3, [pc, #48]	@ (800e36c <GPIO_Init_ComIo+0x104>)
 800e33c:	2104      	movs	r1, #4
 800e33e:	0018      	movs	r0, r3
 800e340:	f7f4 fd04 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_COM_OUT2_Port, GPIO_COM_OUT2_Pin );
 800e344:	4b09      	ldr	r3, [pc, #36]	@ (800e36c <GPIO_Init_ComIo+0x104>)
 800e346:	2108      	movs	r1, #8
 800e348:	0018      	movs	r0, r3
 800e34a:	f7f4 fcff 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_COM_IN1_Port, 	GPIO_COM_IN1_Pin 	);
 800e34e:	4b07      	ldr	r3, [pc, #28]	@ (800e36c <GPIO_Init_ComIo+0x104>)
 800e350:	2102      	movs	r1, #2
 800e352:	0018      	movs	r0, r3
 800e354:	f7f4 fcfa 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_COM_IN2_Port, 	GPIO_COM_IN2_Pin 	);
 800e358:	4b04      	ldr	r3, [pc, #16]	@ (800e36c <GPIO_Init_ComIo+0x104>)
 800e35a:	2101      	movs	r1, #1
 800e35c:	0018      	movs	r0, r3
 800e35e:	f7f4 fcf5 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800e362:	46c0      	nop			@ (mov r8, r8)
 800e364:	46bd      	mov	sp, r7
 800e366:	b009      	add	sp, #36	@ 0x24
 800e368:	bd90      	pop	{r4, r7, pc}
 800e36a:	46c0      	nop			@ (mov r8, r8)
 800e36c:	48000800 	.word	0x48000800

0800e370 <GPIO_Init_Hmi>:
#if CONFIG_SWING_GPIO_HMI_BUS

// Configurado os IOs PD2, PB3, PB4, PB5 como Input para Configurar a Swing

void GPIO_Init_Hmi(tGpio_Conf gpioConf )
{
 800e370:	b590      	push	{r4, r7, lr}
 800e372:	b08d      	sub	sp, #52	@ 0x34
 800e374:	af00      	add	r7, sp, #0
 800e376:	0002      	movs	r2, r0
 800e378:	1dfb      	adds	r3, r7, #7
 800e37a:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800e37c:	241c      	movs	r4, #28
 800e37e:	193b      	adds	r3, r7, r4
 800e380:	0018      	movs	r0, r3
 800e382:	2314      	movs	r3, #20
 800e384:	001a      	movs	r2, r3
 800e386:	2100      	movs	r1, #0
 800e388:	f001 fc63 	bl	800fc52 <memset>

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e38c:	4bc5      	ldr	r3, [pc, #788]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e38e:	695a      	ldr	r2, [r3, #20]
 800e390:	4bc4      	ldr	r3, [pc, #784]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e392:	2180      	movs	r1, #128	@ 0x80
 800e394:	0289      	lsls	r1, r1, #10
 800e396:	430a      	orrs	r2, r1
 800e398:	615a      	str	r2, [r3, #20]
 800e39a:	4bc2      	ldr	r3, [pc, #776]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e39c:	695a      	ldr	r2, [r3, #20]
 800e39e:	2380      	movs	r3, #128	@ 0x80
 800e3a0:	029b      	lsls	r3, r3, #10
 800e3a2:	4013      	ands	r3, r2
 800e3a4:	61bb      	str	r3, [r7, #24]
 800e3a6:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e3a8:	4bbe      	ldr	r3, [pc, #760]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e3aa:	695a      	ldr	r2, [r3, #20]
 800e3ac:	4bbd      	ldr	r3, [pc, #756]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e3ae:	2180      	movs	r1, #128	@ 0x80
 800e3b0:	02c9      	lsls	r1, r1, #11
 800e3b2:	430a      	orrs	r2, r1
 800e3b4:	615a      	str	r2, [r3, #20]
 800e3b6:	4bbb      	ldr	r3, [pc, #748]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e3b8:	695a      	ldr	r2, [r3, #20]
 800e3ba:	2380      	movs	r3, #128	@ 0x80
 800e3bc:	02db      	lsls	r3, r3, #11
 800e3be:	4013      	ands	r3, r2
 800e3c0:	617b      	str	r3, [r7, #20]
 800e3c2:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e3c4:	4bb7      	ldr	r3, [pc, #732]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e3c6:	695a      	ldr	r2, [r3, #20]
 800e3c8:	4bb6      	ldr	r3, [pc, #728]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e3ca:	2180      	movs	r1, #128	@ 0x80
 800e3cc:	0309      	lsls	r1, r1, #12
 800e3ce:	430a      	orrs	r2, r1
 800e3d0:	615a      	str	r2, [r3, #20]
 800e3d2:	4bb4      	ldr	r3, [pc, #720]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e3d4:	695a      	ldr	r2, [r3, #20]
 800e3d6:	2380      	movs	r3, #128	@ 0x80
 800e3d8:	031b      	lsls	r3, r3, #12
 800e3da:	4013      	ands	r3, r2
 800e3dc:	613b      	str	r3, [r7, #16]
 800e3de:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e3e0:	4bb0      	ldr	r3, [pc, #704]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e3e2:	695a      	ldr	r2, [r3, #20]
 800e3e4:	4baf      	ldr	r3, [pc, #700]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e3e6:	2180      	movs	r1, #128	@ 0x80
 800e3e8:	0349      	lsls	r1, r1, #13
 800e3ea:	430a      	orrs	r2, r1
 800e3ec:	615a      	str	r2, [r3, #20]
 800e3ee:	4bad      	ldr	r3, [pc, #692]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e3f0:	695a      	ldr	r2, [r3, #20]
 800e3f2:	2380      	movs	r3, #128	@ 0x80
 800e3f4:	035b      	lsls	r3, r3, #13
 800e3f6:	4013      	ands	r3, r2
 800e3f8:	60fb      	str	r3, [r7, #12]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 800e3fc:	4ba9      	ldr	r3, [pc, #676]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e3fe:	695a      	ldr	r2, [r3, #20]
 800e400:	4ba8      	ldr	r3, [pc, #672]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e402:	2180      	movs	r1, #128	@ 0x80
 800e404:	03c9      	lsls	r1, r1, #15
 800e406:	430a      	orrs	r2, r1
 800e408:	615a      	str	r2, [r3, #20]
 800e40a:	4ba6      	ldr	r3, [pc, #664]	@ (800e6a4 <GPIO_Init_Hmi+0x334>)
 800e40c:	695a      	ldr	r2, [r3, #20]
 800e40e:	2380      	movs	r3, #128	@ 0x80
 800e410:	03db      	lsls	r3, r3, #15
 800e412:	4013      	ands	r3, r2
 800e414:	60bb      	str	r3, [r7, #8]
 800e416:	68bb      	ldr	r3, [r7, #8]

	if( gpioConf == _e_Gpio_Init ){
 800e418:	1dfb      	adds	r3, r7, #7
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d000      	beq.n	800e422 <GPIO_Init_Hmi+0xb2>
 800e420:	e0f7      	b.n	800e612 <GPIO_Init_Hmi+0x2a2>
		_pin_set_h(	GPIO_HMI_BUS_D0_Port, GPIO_HMI_BUS_D0_Pin);
 800e422:	2390      	movs	r3, #144	@ 0x90
 800e424:	05db      	lsls	r3, r3, #23
 800e426:	2280      	movs	r2, #128	@ 0x80
 800e428:	0212      	lsls	r2, r2, #8
 800e42a:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_HMI_BUS_D0_Pin;
 800e42c:	193b      	adds	r3, r7, r4
 800e42e:	2280      	movs	r2, #128	@ 0x80
 800e430:	0212      	lsls	r2, r2, #8
 800e432:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_HMI_BUS_D0_Mode;
 800e434:	193b      	adds	r3, r7, r4
 800e436:	2201      	movs	r2, #1
 800e438:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_HMI_BUS_D0_Pull;
 800e43a:	193b      	adds	r3, r7, r4
 800e43c:	2202      	movs	r2, #2
 800e43e:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_HMI_BUS_D0_Speed;
 800e440:	193b      	adds	r3, r7, r4
 800e442:	2203      	movs	r2, #3
 800e444:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_HMI_BUS_D0_Port, &GPIO_Init);
 800e446:	193a      	adds	r2, r7, r4
 800e448:	2390      	movs	r3, #144	@ 0x90
 800e44a:	05db      	lsls	r3, r3, #23
 800e44c:	0011      	movs	r1, r2
 800e44e:	0018      	movs	r0, r3
 800e450:	f7f4 fb0c 	bl	8002a6c <HAL_GPIO_Init>


		_pin_set_h(	GPIO_HMI_BUS_D1_Port, GPIO_HMI_BUS_D1_Pin);
 800e454:	4b94      	ldr	r3, [pc, #592]	@ (800e6a8 <GPIO_Init_Hmi+0x338>)
 800e456:	2280      	movs	r2, #128	@ 0x80
 800e458:	00d2      	lsls	r2, r2, #3
 800e45a:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_HMI_BUS_D1_Pin;
 800e45c:	193b      	adds	r3, r7, r4
 800e45e:	2280      	movs	r2, #128	@ 0x80
 800e460:	00d2      	lsls	r2, r2, #3
 800e462:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_HMI_BUS_D1_Mode;
 800e464:	193b      	adds	r3, r7, r4
 800e466:	2201      	movs	r2, #1
 800e468:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_HMI_BUS_D1_Pull;
 800e46a:	193b      	adds	r3, r7, r4
 800e46c:	2202      	movs	r2, #2
 800e46e:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_HMI_BUS_D1_Speed;
 800e470:	193b      	adds	r3, r7, r4
 800e472:	2203      	movs	r2, #3
 800e474:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_HMI_BUS_D1_Port, &GPIO_Init);
 800e476:	193b      	adds	r3, r7, r4
 800e478:	4a8b      	ldr	r2, [pc, #556]	@ (800e6a8 <GPIO_Init_Hmi+0x338>)
 800e47a:	0019      	movs	r1, r3
 800e47c:	0010      	movs	r0, r2
 800e47e:	f7f4 faf5 	bl	8002a6c <HAL_GPIO_Init>


		_pin_set_h(	GPIO_HMI_BUS_D2_Port, GPIO_HMI_BUS_D2_Pin);
 800e482:	4b89      	ldr	r3, [pc, #548]	@ (800e6a8 <GPIO_Init_Hmi+0x338>)
 800e484:	2280      	movs	r2, #128	@ 0x80
 800e486:	0112      	lsls	r2, r2, #4
 800e488:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_HMI_BUS_D2_Pin;
 800e48a:	193b      	adds	r3, r7, r4
 800e48c:	2280      	movs	r2, #128	@ 0x80
 800e48e:	0112      	lsls	r2, r2, #4
 800e490:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_HMI_BUS_D2_Mode;
 800e492:	193b      	adds	r3, r7, r4
 800e494:	2201      	movs	r2, #1
 800e496:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_HMI_BUS_D2_Pull;
 800e498:	193b      	adds	r3, r7, r4
 800e49a:	2202      	movs	r2, #2
 800e49c:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_HMI_BUS_D2_Speed;
 800e49e:	193b      	adds	r3, r7, r4
 800e4a0:	2203      	movs	r2, #3
 800e4a2:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_HMI_BUS_D2_Port, &GPIO_Init);
 800e4a4:	193b      	adds	r3, r7, r4
 800e4a6:	4a80      	ldr	r2, [pc, #512]	@ (800e6a8 <GPIO_Init_Hmi+0x338>)
 800e4a8:	0019      	movs	r1, r3
 800e4aa:	0010      	movs	r0, r2
 800e4ac:	f7f4 fade 	bl	8002a6c <HAL_GPIO_Init>


		_pin_set_h( GPIO_HMI_BUS_D3_Port, GPIO_HMI_BUS_D3_Pin);
 800e4b0:	4b7d      	ldr	r3, [pc, #500]	@ (800e6a8 <GPIO_Init_Hmi+0x338>)
 800e4b2:	2280      	movs	r2, #128	@ 0x80
 800e4b4:	0152      	lsls	r2, r2, #5
 800e4b6:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_HMI_BUS_D3_Pin;
 800e4b8:	193b      	adds	r3, r7, r4
 800e4ba:	2280      	movs	r2, #128	@ 0x80
 800e4bc:	0152      	lsls	r2, r2, #5
 800e4be:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_HMI_BUS_D3_Mode;
 800e4c0:	193b      	adds	r3, r7, r4
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_HMI_BUS_D3_Pull;
 800e4c6:	193b      	adds	r3, r7, r4
 800e4c8:	2202      	movs	r2, #2
 800e4ca:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_HMI_BUS_D3_Speed;
 800e4cc:	193b      	adds	r3, r7, r4
 800e4ce:	2203      	movs	r2, #3
 800e4d0:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_HMI_BUS_D3_Port, &GPIO_Init);
 800e4d2:	193b      	adds	r3, r7, r4
 800e4d4:	4a74      	ldr	r2, [pc, #464]	@ (800e6a8 <GPIO_Init_Hmi+0x338>)
 800e4d6:	0019      	movs	r1, r3
 800e4d8:	0010      	movs	r0, r2
 800e4da:	f7f4 fac7 	bl	8002a6c <HAL_GPIO_Init>


		_pin_set_h( GPIO_HMI_BUS_D4_Port, GPIO_HMI_BUS_D4_Pin);
 800e4de:	4b73      	ldr	r3, [pc, #460]	@ (800e6ac <GPIO_Init_Hmi+0x33c>)
 800e4e0:	2204      	movs	r2, #4
 800e4e2:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_HMI_BUS_D4_Pin;
 800e4e4:	193b      	adds	r3, r7, r4
 800e4e6:	2204      	movs	r2, #4
 800e4e8:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_HMI_BUS_D4_Mode;
 800e4ea:	193b      	adds	r3, r7, r4
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_HMI_BUS_D4_Pull;
 800e4f0:	193b      	adds	r3, r7, r4
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_HMI_BUS_D4_Speed;
 800e4f6:	193b      	adds	r3, r7, r4
 800e4f8:	2203      	movs	r2, #3
 800e4fa:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_HMI_BUS_D4_Port, &GPIO_Init);
 800e4fc:	193b      	adds	r3, r7, r4
 800e4fe:	4a6b      	ldr	r2, [pc, #428]	@ (800e6ac <GPIO_Init_Hmi+0x33c>)
 800e500:	0019      	movs	r1, r3
 800e502:	0010      	movs	r0, r2
 800e504:	f7f4 fab2 	bl	8002a6c <HAL_GPIO_Init>


		_pin_set_h(	GPIO_HMI_BUS_D5_Port, GPIO_HMI_BUS_D5_Pin);
 800e508:	4b69      	ldr	r3, [pc, #420]	@ (800e6b0 <GPIO_Init_Hmi+0x340>)
 800e50a:	2208      	movs	r2, #8
 800e50c:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_HMI_BUS_D5_Pin;
 800e50e:	193b      	adds	r3, r7, r4
 800e510:	2208      	movs	r2, #8
 800e512:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_HMI_BUS_D5_Mode;
 800e514:	193b      	adds	r3, r7, r4
 800e516:	2200      	movs	r2, #0
 800e518:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_HMI_BUS_D5_Pull;
 800e51a:	193b      	adds	r3, r7, r4
 800e51c:	2201      	movs	r2, #1
 800e51e:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_HMI_BUS_D5_Speed;
 800e520:	193b      	adds	r3, r7, r4
 800e522:	2203      	movs	r2, #3
 800e524:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_HMI_BUS_D5_Port, &GPIO_Init);
 800e526:	193b      	adds	r3, r7, r4
 800e528:	4a61      	ldr	r2, [pc, #388]	@ (800e6b0 <GPIO_Init_Hmi+0x340>)
 800e52a:	0019      	movs	r1, r3
 800e52c:	0010      	movs	r0, r2
 800e52e:	f7f4 fa9d 	bl	8002a6c <HAL_GPIO_Init>


		_pin_set_h(	GPIO_HMI_BUS_D6_Port, GPIO_HMI_BUS_D6_Pin);
 800e532:	4b5f      	ldr	r3, [pc, #380]	@ (800e6b0 <GPIO_Init_Hmi+0x340>)
 800e534:	2210      	movs	r2, #16
 800e536:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_HMI_BUS_D6_Pin;
 800e538:	193b      	adds	r3, r7, r4
 800e53a:	2210      	movs	r2, #16
 800e53c:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_HMI_BUS_D6_Mode;
 800e53e:	193b      	adds	r3, r7, r4
 800e540:	2200      	movs	r2, #0
 800e542:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_HMI_BUS_D6_Pull;
 800e544:	193b      	adds	r3, r7, r4
 800e546:	2201      	movs	r2, #1
 800e548:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_HMI_BUS_D6_Speed;
 800e54a:	193b      	adds	r3, r7, r4
 800e54c:	2203      	movs	r2, #3
 800e54e:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_HMI_BUS_D6_Port, &GPIO_Init);
 800e550:	193b      	adds	r3, r7, r4
 800e552:	4a57      	ldr	r2, [pc, #348]	@ (800e6b0 <GPIO_Init_Hmi+0x340>)
 800e554:	0019      	movs	r1, r3
 800e556:	0010      	movs	r0, r2
 800e558:	f7f4 fa88 	bl	8002a6c <HAL_GPIO_Init>


		_pin_set_h( GPIO_HMI_BUS_D7_Port, GPIO_HMI_BUS_D7_Pin);
 800e55c:	4b54      	ldr	r3, [pc, #336]	@ (800e6b0 <GPIO_Init_Hmi+0x340>)
 800e55e:	2220      	movs	r2, #32
 800e560:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_HMI_BUS_D7_Pin;
 800e562:	193b      	adds	r3, r7, r4
 800e564:	2220      	movs	r2, #32
 800e566:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_HMI_BUS_D7_Mode;
 800e568:	193b      	adds	r3, r7, r4
 800e56a:	2200      	movs	r2, #0
 800e56c:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_HMI_BUS_D7_Pull;
 800e56e:	193b      	adds	r3, r7, r4
 800e570:	2201      	movs	r2, #1
 800e572:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_HMI_BUS_D7_Speed;
 800e574:	193b      	adds	r3, r7, r4
 800e576:	2203      	movs	r2, #3
 800e578:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(	GPIO_HMI_BUS_D7_Port, &GPIO_Init);
 800e57a:	193b      	adds	r3, r7, r4
 800e57c:	4a4c      	ldr	r2, [pc, #304]	@ (800e6b0 <GPIO_Init_Hmi+0x340>)
 800e57e:	0019      	movs	r1, r3
 800e580:	0010      	movs	r0, r2
 800e582:	f7f4 fa73 	bl	8002a6c <HAL_GPIO_Init>


		_pin_set_l(	GPIO_HMI_Disp_Rst_Port, GPIO_HMI_Disp_Rst_Pin);
 800e586:	2390      	movs	r3, #144	@ 0x90
 800e588:	05db      	lsls	r3, r3, #23
 800e58a:	2280      	movs	r2, #128	@ 0x80
 800e58c:	0252      	lsls	r2, r2, #9
 800e58e:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_HMI_Disp_Rst_Pin;
 800e590:	193b      	adds	r3, r7, r4
 800e592:	2201      	movs	r2, #1
 800e594:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_HMI_Disp_Rst_Mode;
 800e596:	193b      	adds	r3, r7, r4
 800e598:	2201      	movs	r2, #1
 800e59a:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_HMI_Disp_Rst_Pull;
 800e59c:	193b      	adds	r3, r7, r4
 800e59e:	2200      	movs	r2, #0
 800e5a0:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_HMI_Disp_Rst_Speed;
 800e5a2:	193b      	adds	r3, r7, r4
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_HMI_Disp_Rst_Port, &GPIO_Init);
 800e5a8:	193a      	adds	r2, r7, r4
 800e5aa:	2390      	movs	r3, #144	@ 0x90
 800e5ac:	05db      	lsls	r3, r3, #23
 800e5ae:	0011      	movs	r1, r2
 800e5b0:	0018      	movs	r0, r3
 800e5b2:	f7f4 fa5b 	bl	8002a6c <HAL_GPIO_Init>


		_pin_set_l(	GPIO_HMI_DISP_EN_Port, GPIO_HMI_DISP_EN_Pin);
 800e5b6:	4b3e      	ldr	r3, [pc, #248]	@ (800e6b0 <GPIO_Init_Hmi+0x340>)
 800e5b8:	2280      	movs	r2, #128	@ 0x80
 800e5ba:	03d2      	lsls	r2, r2, #15
 800e5bc:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_HMI_DISP_EN_Pin;
 800e5be:	193b      	adds	r3, r7, r4
 800e5c0:	2240      	movs	r2, #64	@ 0x40
 800e5c2:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_HMI_DISP_EN_Mode;
 800e5c4:	193b      	adds	r3, r7, r4
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_HMI_DISP_EN_Pull;
 800e5ca:	193b      	adds	r3, r7, r4
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_HMI_DISP_EN_Speed;
 800e5d0:	193b      	adds	r3, r7, r4
 800e5d2:	2203      	movs	r2, #3
 800e5d4:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_HMI_DISP_EN_Port, &GPIO_Init);
 800e5d6:	193b      	adds	r3, r7, r4
 800e5d8:	4a35      	ldr	r2, [pc, #212]	@ (800e6b0 <GPIO_Init_Hmi+0x340>)
 800e5da:	0019      	movs	r1, r3
 800e5dc:	0010      	movs	r0, r2
 800e5de:	f7f4 fa45 	bl	8002a6c <HAL_GPIO_Init>


		_pin_set_l(	GPIO_HMI_Sel_Disp_Key_Port, GPIO_HMI_Sel_Disp_Key_Pin);
 800e5e2:	4b34      	ldr	r3, [pc, #208]	@ (800e6b4 <GPIO_Init_Hmi+0x344>)
 800e5e4:	2280      	movs	r2, #128	@ 0x80
 800e5e6:	0412      	lsls	r2, r2, #16
 800e5e8:	619a      	str	r2, [r3, #24]

		GPIO_Init.Pin 			= GPIO_HMI_Sel_Disp_Key_Pin;
 800e5ea:	0021      	movs	r1, r4
 800e5ec:	187b      	adds	r3, r7, r1
 800e5ee:	2280      	movs	r2, #128	@ 0x80
 800e5f0:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_HMI_Sel_Disp_Key_Mode;
 800e5f2:	187b      	adds	r3, r7, r1
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_HMI_Sel_Disp_Key_Pull;
 800e5f8:	187b      	adds	r3, r7, r1
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_HMI_Sel_Disp_Key_Speed;
 800e5fe:	187b      	adds	r3, r7, r1
 800e600:	2203      	movs	r2, #3
 800e602:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init( GPIO_HMI_Sel_Disp_Key_Port, &GPIO_Init);
 800e604:	187b      	adds	r3, r7, r1
 800e606:	4a2b      	ldr	r2, [pc, #172]	@ (800e6b4 <GPIO_Init_Hmi+0x344>)
 800e608:	0019      	movs	r1, r3
 800e60a:	0010      	movs	r0, r2
 800e60c:	f7f4 fa2e 	bl	8002a6c <HAL_GPIO_Init>

		HAL_GPIO_DeInit(	GPIO_HMI_Disp_Rst_Port, GPIO_HMI_Disp_Rst_Pin );
		HAL_GPIO_DeInit(	GPIO_HMI_DISP_EN_Port, GPIO_HMI_DISP_EN_Pin );
		HAL_GPIO_DeInit(	GPIO_HMI_Sel_Disp_Key_Port, GPIO_HMI_Sel_Disp_Key_Pin );
	}
}
 800e610:	e044      	b.n	800e69c <GPIO_Init_Hmi+0x32c>
	else if( gpioConf == _e_Gpio_DeInit ){
 800e612:	1dfb      	adds	r3, r7, #7
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	2b01      	cmp	r3, #1
 800e618:	d140      	bne.n	800e69c <GPIO_Init_Hmi+0x32c>
		HAL_GPIO_DeInit(	GPIO_HMI_BUS_D0_Port, GPIO_HMI_BUS_D0_Pin );
 800e61a:	2380      	movs	r3, #128	@ 0x80
 800e61c:	021a      	lsls	r2, r3, #8
 800e61e:	2390      	movs	r3, #144	@ 0x90
 800e620:	05db      	lsls	r3, r3, #23
 800e622:	0011      	movs	r1, r2
 800e624:	0018      	movs	r0, r3
 800e626:	f7f4 fb91 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_HMI_BUS_D1_Port, GPIO_HMI_BUS_D1_Pin );
 800e62a:	2380      	movs	r3, #128	@ 0x80
 800e62c:	00db      	lsls	r3, r3, #3
 800e62e:	4a1e      	ldr	r2, [pc, #120]	@ (800e6a8 <GPIO_Init_Hmi+0x338>)
 800e630:	0019      	movs	r1, r3
 800e632:	0010      	movs	r0, r2
 800e634:	f7f4 fb8a 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_HMI_BUS_D2_Port, GPIO_HMI_BUS_D2_Pin );
 800e638:	2380      	movs	r3, #128	@ 0x80
 800e63a:	011b      	lsls	r3, r3, #4
 800e63c:	4a1a      	ldr	r2, [pc, #104]	@ (800e6a8 <GPIO_Init_Hmi+0x338>)
 800e63e:	0019      	movs	r1, r3
 800e640:	0010      	movs	r0, r2
 800e642:	f7f4 fb83 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_HMI_BUS_D3_Port, GPIO_HMI_BUS_D3_Pin );
 800e646:	2380      	movs	r3, #128	@ 0x80
 800e648:	015b      	lsls	r3, r3, #5
 800e64a:	4a17      	ldr	r2, [pc, #92]	@ (800e6a8 <GPIO_Init_Hmi+0x338>)
 800e64c:	0019      	movs	r1, r3
 800e64e:	0010      	movs	r0, r2
 800e650:	f7f4 fb7c 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_HMI_BUS_D4_Port, GPIO_HMI_BUS_D4_Pin );
 800e654:	4b15      	ldr	r3, [pc, #84]	@ (800e6ac <GPIO_Init_Hmi+0x33c>)
 800e656:	2104      	movs	r1, #4
 800e658:	0018      	movs	r0, r3
 800e65a:	f7f4 fb77 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_HMI_BUS_D5_Port, GPIO_HMI_BUS_D5_Pin );
 800e65e:	4b14      	ldr	r3, [pc, #80]	@ (800e6b0 <GPIO_Init_Hmi+0x340>)
 800e660:	2108      	movs	r1, #8
 800e662:	0018      	movs	r0, r3
 800e664:	f7f4 fb72 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_HMI_BUS_D6_Port, GPIO_HMI_BUS_D6_Pin );
 800e668:	4b11      	ldr	r3, [pc, #68]	@ (800e6b0 <GPIO_Init_Hmi+0x340>)
 800e66a:	2110      	movs	r1, #16
 800e66c:	0018      	movs	r0, r3
 800e66e:	f7f4 fb6d 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_HMI_BUS_D7_Port, GPIO_HMI_BUS_D7_Pin );
 800e672:	4b0f      	ldr	r3, [pc, #60]	@ (800e6b0 <GPIO_Init_Hmi+0x340>)
 800e674:	2120      	movs	r1, #32
 800e676:	0018      	movs	r0, r3
 800e678:	f7f4 fb68 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_HMI_Disp_Rst_Port, GPIO_HMI_Disp_Rst_Pin );
 800e67c:	2390      	movs	r3, #144	@ 0x90
 800e67e:	05db      	lsls	r3, r3, #23
 800e680:	2101      	movs	r1, #1
 800e682:	0018      	movs	r0, r3
 800e684:	f7f4 fb62 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_HMI_DISP_EN_Port, GPIO_HMI_DISP_EN_Pin );
 800e688:	4b09      	ldr	r3, [pc, #36]	@ (800e6b0 <GPIO_Init_Hmi+0x340>)
 800e68a:	2140      	movs	r1, #64	@ 0x40
 800e68c:	0018      	movs	r0, r3
 800e68e:	f7f4 fb5d 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_HMI_Sel_Disp_Key_Port, GPIO_HMI_Sel_Disp_Key_Pin );
 800e692:	4b08      	ldr	r3, [pc, #32]	@ (800e6b4 <GPIO_Init_Hmi+0x344>)
 800e694:	2180      	movs	r1, #128	@ 0x80
 800e696:	0018      	movs	r0, r3
 800e698:	f7f4 fb58 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800e69c:	46c0      	nop			@ (mov r8, r8)
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	b00d      	add	sp, #52	@ 0x34
 800e6a2:	bd90      	pop	{r4, r7, pc}
 800e6a4:	40021000 	.word	0x40021000
 800e6a8:	48000800 	.word	0x48000800
 800e6ac:	48000c00 	.word	0x48000c00
 800e6b0:	48000400 	.word	0x48000400
 800e6b4:	48001400 	.word	0x48001400

0800e6b8 <GPIO_Init_Motor_Locks>:
}

#endif  // CONFIG_SWING_GPIO_HMI_BUS

void GPIO_Init_Motor_Locks(tGpio_Conf gpioConf )
{
 800e6b8:	b590      	push	{r4, r7, lr}
 800e6ba:	b089      	sub	sp, #36	@ 0x24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	0002      	movs	r2, r0
 800e6c0:	1dfb      	adds	r3, r7, #7
 800e6c2:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800e6c4:	240c      	movs	r4, #12
 800e6c6:	193b      	adds	r3, r7, r4
 800e6c8:	0018      	movs	r0, r3
 800e6ca:	2314      	movs	r3, #20
 800e6cc:	001a      	movs	r2, r3
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	f001 fabf 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init ){
 800e6d4:	1dfb      	adds	r3, r7, #7
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d000      	beq.n	800e6de <GPIO_Init_Motor_Locks+0x26>
 800e6dc:	e0ce      	b.n	800e87c <GPIO_Init_Motor_Locks+0x1c4>
		GPIO_Init.Pin 			= GPIO_MT1_Enc2_Pin;
 800e6de:	193b      	adds	r3, r7, r4
 800e6e0:	2220      	movs	r2, #32
 800e6e2:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT1_Enc2_Mode;
 800e6e4:	193b      	adds	r3, r7, r4
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT1_Enc2_Pull;
 800e6ea:	193b      	adds	r3, r7, r4
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(				GPIO_MT1_Enc2_Port, &GPIO_Init);
 800e6f0:	193b      	adds	r3, r7, r4
 800e6f2:	4a74      	ldr	r2, [pc, #464]	@ (800e8c4 <GPIO_Init_Motor_Locks+0x20c>)
 800e6f4:	0019      	movs	r1, r3
 800e6f6:	0010      	movs	r0, r2
 800e6f8:	f7f4 f9b8 	bl	8002a6c <HAL_GPIO_Init>

		GPIO_Init.Pin 			= GPIO_MT2_Enc2_Pin;
 800e6fc:	193b      	adds	r3, r7, r4
 800e6fe:	2210      	movs	r2, #16
 800e700:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT2_Enc2_Mode;
 800e702:	193b      	adds	r3, r7, r4
 800e704:	2200      	movs	r2, #0
 800e706:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT2_Enc2_Pull;
 800e708:	193b      	adds	r3, r7, r4
 800e70a:	2201      	movs	r2, #1
 800e70c:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(				GPIO_MT2_Enc2_Port, &GPIO_Init);
 800e70e:	193b      	adds	r3, r7, r4
 800e710:	4a6c      	ldr	r2, [pc, #432]	@ (800e8c4 <GPIO_Init_Motor_Locks+0x20c>)
 800e712:	0019      	movs	r1, r3
 800e714:	0010      	movs	r0, r2
 800e716:	f7f4 f9a9 	bl	8002a6c <HAL_GPIO_Init>

		GPIO_Init.Pin 			= GPIO_MT1_Enc1_Pin;
 800e71a:	193b      	adds	r3, r7, r4
 800e71c:	2204      	movs	r2, #4
 800e71e:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT1_Enc1_Mode;
 800e720:	193b      	adds	r3, r7, r4
 800e722:	2200      	movs	r2, #0
 800e724:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT1_Enc1_Pull;
 800e726:	193b      	adds	r3, r7, r4
 800e728:	2201      	movs	r2, #1
 800e72a:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(				GPIO_MT1_Enc1_Port, &GPIO_Init);
 800e72c:	193b      	adds	r3, r7, r4
 800e72e:	4a66      	ldr	r2, [pc, #408]	@ (800e8c8 <GPIO_Init_Motor_Locks+0x210>)
 800e730:	0019      	movs	r1, r3
 800e732:	0010      	movs	r0, r2
 800e734:	f7f4 f99a 	bl	8002a6c <HAL_GPIO_Init>

		GPIO_Init.Pin 			= GPIO_MT2_Enc1_Pin;
 800e738:	193b      	adds	r3, r7, r4
 800e73a:	2280      	movs	r2, #128	@ 0x80
 800e73c:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT2_Enc1_Mode;
 800e73e:	193b      	adds	r3, r7, r4
 800e740:	2200      	movs	r2, #0
 800e742:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT2_Enc1_Pull;
 800e744:	193b      	adds	r3, r7, r4
 800e746:	2201      	movs	r2, #1
 800e748:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(				GPIO_MT2_Enc1_Port, &GPIO_Init);
 800e74a:	193a      	adds	r2, r7, r4
 800e74c:	2390      	movs	r3, #144	@ 0x90
 800e74e:	05db      	lsls	r3, r3, #23
 800e750:	0011      	movs	r1, r2
 800e752:	0018      	movs	r0, r3
 800e754:	f7f4 f98a 	bl	8002a6c <HAL_GPIO_Init>

		GPIO_Init.Pin 			= GPIO_MT1_Disc1_Pin;
 800e758:	0021      	movs	r1, r4
 800e75a:	187b      	adds	r3, r7, r1
 800e75c:	2280      	movs	r2, #128	@ 0x80
 800e75e:	00d2      	lsls	r2, r2, #3
 800e760:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT1_Disc1_Mode;
 800e762:	000c      	movs	r4, r1
 800e764:	193b      	adds	r3, r7, r4
 800e766:	2200      	movs	r2, #0
 800e768:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT1_Disc1_Pull;
 800e76a:	193b      	adds	r3, r7, r4
 800e76c:	2201      	movs	r2, #1
 800e76e:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(				GPIO_MT1_Disc1_Port, &GPIO_Init);
 800e770:	193b      	adds	r3, r7, r4
 800e772:	4a55      	ldr	r2, [pc, #340]	@ (800e8c8 <GPIO_Init_Motor_Locks+0x210>)
 800e774:	0019      	movs	r1, r3
 800e776:	0010      	movs	r0, r2
 800e778:	f7f4 f978 	bl	8002a6c <HAL_GPIO_Init>

		GPIO_Init.Pin 			= GPIO_MT2_Disc1_Pin;
 800e77c:	193b      	adds	r3, r7, r4
 800e77e:	2220      	movs	r2, #32
 800e780:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT2_Disc1_Mode;
 800e782:	193b      	adds	r3, r7, r4
 800e784:	2200      	movs	r2, #0
 800e786:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT2_Disc1_Pull;
 800e788:	193b      	adds	r3, r7, r4
 800e78a:	2201      	movs	r2, #1
 800e78c:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(				GPIO_MT2_Disc1_Port, &GPIO_Init);
 800e78e:	193a      	adds	r2, r7, r4
 800e790:	2390      	movs	r3, #144	@ 0x90
 800e792:	05db      	lsls	r3, r3, #23
 800e794:	0011      	movs	r1, r2
 800e796:	0018      	movs	r0, r3
 800e798:	f7f4 f968 	bl	8002a6c <HAL_GPIO_Init>

		GPIO_Init.Pin 			= GPIO_MT1_Disc2_Pin;
 800e79c:	0021      	movs	r1, r4
 800e79e:	187b      	adds	r3, r7, r1
 800e7a0:	2280      	movs	r2, #128	@ 0x80
 800e7a2:	0112      	lsls	r2, r2, #4
 800e7a4:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT1_Disc2_Mode;
 800e7a6:	000c      	movs	r4, r1
 800e7a8:	193b      	adds	r3, r7, r4
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT1_Disc2_Pull;
 800e7ae:	193b      	adds	r3, r7, r4
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(				GPIO_MT1_Disc2_Port, &GPIO_Init);
 800e7b4:	193b      	adds	r3, r7, r4
 800e7b6:	4a44      	ldr	r2, [pc, #272]	@ (800e8c8 <GPIO_Init_Motor_Locks+0x210>)
 800e7b8:	0019      	movs	r1, r3
 800e7ba:	0010      	movs	r0, r2
 800e7bc:	f7f4 f956 	bl	8002a6c <HAL_GPIO_Init>

		GPIO_Init.Pin 			= GPIO_MT2_Disc2_Pin;
 800e7c0:	193b      	adds	r3, r7, r4
 800e7c2:	2240      	movs	r2, #64	@ 0x40
 800e7c4:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT2_Disc2_Mode;
 800e7c6:	193b      	adds	r3, r7, r4
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT2_Disc2_Pull;
 800e7cc:	193b      	adds	r3, r7, r4
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(				GPIO_MT2_Disc2_Port, &GPIO_Init);
 800e7d2:	193a      	adds	r2, r7, r4
 800e7d4:	2390      	movs	r3, #144	@ 0x90
 800e7d6:	05db      	lsls	r3, r3, #23
 800e7d8:	0011      	movs	r1, r2
 800e7da:	0018      	movs	r0, r3
 800e7dc:	f7f4 f946 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_MT1_STEP_Port,
 800e7e0:	4b39      	ldr	r3, [pc, #228]	@ (800e8c8 <GPIO_Init_Motor_Locks+0x210>)
 800e7e2:	2280      	movs	r2, #128	@ 0x80
 800e7e4:	05d2      	lsls	r2, r2, #23
 800e7e6:	619a      	str	r2, [r3, #24]
													GPIO_MT1_STEP_Pin);
		GPIO_Init.Pin 			= GPIO_MT1_STEP_Pin;
 800e7e8:	193b      	adds	r3, r7, r4
 800e7ea:	2280      	movs	r2, #128	@ 0x80
 800e7ec:	01d2      	lsls	r2, r2, #7
 800e7ee:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT1_STEP_Mode;
 800e7f0:	193b      	adds	r3, r7, r4
 800e7f2:	2202      	movs	r2, #2
 800e7f4:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT1_STEP_Pull;
 800e7f6:	193b      	adds	r3, r7, r4
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_MT1_STEP_Speed;
 800e7fc:	193b      	adds	r3, r7, r4
 800e7fe:	2203      	movs	r2, #3
 800e800:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate 	= GPIO_MT1_STEP_Alt;
 800e802:	193b      	adds	r3, r7, r4
 800e804:	2201      	movs	r2, #1
 800e806:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(				GPIO_MT1_STEP_Port, &GPIO_Init);
 800e808:	193b      	adds	r3, r7, r4
 800e80a:	4a2f      	ldr	r2, [pc, #188]	@ (800e8c8 <GPIO_Init_Motor_Locks+0x210>)
 800e80c:	0019      	movs	r1, r3
 800e80e:	0010      	movs	r0, r2
 800e810:	f7f4 f92c 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_MT1_Lock1_Port,
 800e814:	4b2b      	ldr	r3, [pc, #172]	@ (800e8c4 <GPIO_Init_Motor_Locks+0x20c>)
 800e816:	2280      	movs	r2, #128	@ 0x80
 800e818:	0412      	lsls	r2, r2, #16
 800e81a:	619a      	str	r2, [r3, #24]
													GPIO_MT1_Lock1_Pin);
		GPIO_Init.Pin 			= GPIO_MT1_Lock1_Pin;
 800e81c:	193b      	adds	r3, r7, r4
 800e81e:	2280      	movs	r2, #128	@ 0x80
 800e820:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT1_Lock1_Mode;
 800e822:	193b      	adds	r3, r7, r4
 800e824:	2202      	movs	r2, #2
 800e826:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT1_Lock1_Pull;
 800e828:	193b      	adds	r3, r7, r4
 800e82a:	2200      	movs	r2, #0
 800e82c:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_MT1_Lock1_Speed;
 800e82e:	193b      	adds	r3, r7, r4
 800e830:	2203      	movs	r2, #3
 800e832:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate 	= GPIO_MT1_Lock1_Atl;
 800e834:	193b      	adds	r3, r7, r4
 800e836:	2201      	movs	r2, #1
 800e838:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(				GPIO_MT1_Lock1_Port, &GPIO_Init);
 800e83a:	193b      	adds	r3, r7, r4
 800e83c:	4a21      	ldr	r2, [pc, #132]	@ (800e8c4 <GPIO_Init_Motor_Locks+0x20c>)
 800e83e:	0019      	movs	r1, r3
 800e840:	0010      	movs	r0, r2
 800e842:	f7f4 f913 	bl	8002a6c <HAL_GPIO_Init>

		_pin_set_l(						GPIO_MT2_Lock1_Port,
 800e846:	4b1f      	ldr	r3, [pc, #124]	@ (800e8c4 <GPIO_Init_Motor_Locks+0x20c>)
 800e848:	2280      	movs	r2, #128	@ 0x80
 800e84a:	03d2      	lsls	r2, r2, #15
 800e84c:	619a      	str	r2, [r3, #24]
													GPIO_MT2_Lock1_Pin);
		GPIO_Init.Pin 			= GPIO_MT2_Lock1_Pin;
 800e84e:	0021      	movs	r1, r4
 800e850:	187b      	adds	r3, r7, r1
 800e852:	2240      	movs	r2, #64	@ 0x40
 800e854:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT2_Lock1_Mode;
 800e856:	187b      	adds	r3, r7, r1
 800e858:	2202      	movs	r2, #2
 800e85a:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT2_Lock1_Pull;
 800e85c:	187b      	adds	r3, r7, r1
 800e85e:	2200      	movs	r2, #0
 800e860:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_MT2_Lock1_Speed;
 800e862:	187b      	adds	r3, r7, r1
 800e864:	2200      	movs	r2, #0
 800e866:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate 	= GPIO_MT2_Lock1_Alt;
 800e868:	187b      	adds	r3, r7, r1
 800e86a:	2201      	movs	r2, #1
 800e86c:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(				GPIO_MT2_Lock1_Port, &GPIO_Init);
 800e86e:	187b      	adds	r3, r7, r1
 800e870:	4a14      	ldr	r2, [pc, #80]	@ (800e8c4 <GPIO_Init_Motor_Locks+0x20c>)
 800e872:	0019      	movs	r1, r3
 800e874:	0010      	movs	r0, r2
 800e876:	f7f4 f8f9 	bl	8002a6c <HAL_GPIO_Init>
		HAL_GPIO_DeInit(	GPIO_MT1_DIR_Port, 	GPIO_MT1_DIR_Pin 	);
		HAL_GPIO_DeInit(	GPIO_MT1_STEP_Port, 	GPIO_MT1_STEP_Pin 	);
		HAL_GPIO_DeInit(	GPIO_MT2_DIR_Port, 	GPIO_MT2_DIR_Pin 	);
		HAL_GPIO_DeInit(	GPIO_MT2_STEP_Port, 	GPIO_MT2_STEP_Pin 	);
	}
}
 800e87a:	e01f      	b.n	800e8bc <GPIO_Init_Motor_Locks+0x204>
	else if( gpioConf == _e_Gpio_DeInit ){
 800e87c:	1dfb      	adds	r3, r7, #7
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	2b01      	cmp	r3, #1
 800e882:	d11b      	bne.n	800e8bc <GPIO_Init_Motor_Locks+0x204>
		HAL_GPIO_DeInit(	GPIO_MT1_DIR_Port, 	GPIO_MT1_DIR_Pin 	);
 800e884:	2380      	movs	r3, #128	@ 0x80
 800e886:	021b      	lsls	r3, r3, #8
 800e888:	4a0f      	ldr	r2, [pc, #60]	@ (800e8c8 <GPIO_Init_Motor_Locks+0x210>)
 800e88a:	0019      	movs	r1, r3
 800e88c:	0010      	movs	r0, r2
 800e88e:	f7f4 fa5d 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_MT1_STEP_Port, 	GPIO_MT1_STEP_Pin 	);
 800e892:	2380      	movs	r3, #128	@ 0x80
 800e894:	01db      	lsls	r3, r3, #7
 800e896:	4a0c      	ldr	r2, [pc, #48]	@ (800e8c8 <GPIO_Init_Motor_Locks+0x210>)
 800e898:	0019      	movs	r1, r3
 800e89a:	0010      	movs	r0, r2
 800e89c:	f7f4 fa56 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_MT2_DIR_Port, 	GPIO_MT2_DIR_Pin 	);
 800e8a0:	2380      	movs	r3, #128	@ 0x80
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	4a08      	ldr	r2, [pc, #32]	@ (800e8c8 <GPIO_Init_Motor_Locks+0x210>)
 800e8a6:	0019      	movs	r1, r3
 800e8a8:	0010      	movs	r0, r2
 800e8aa:	f7f4 fa4f 	bl	8002d4c <HAL_GPIO_DeInit>
		HAL_GPIO_DeInit(	GPIO_MT2_STEP_Port, 	GPIO_MT2_STEP_Pin 	);
 800e8ae:	2380      	movs	r3, #128	@ 0x80
 800e8b0:	005b      	lsls	r3, r3, #1
 800e8b2:	4a05      	ldr	r2, [pc, #20]	@ (800e8c8 <GPIO_Init_Motor_Locks+0x210>)
 800e8b4:	0019      	movs	r1, r3
 800e8b6:	0010      	movs	r0, r2
 800e8b8:	f7f4 fa48 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800e8bc:	46c0      	nop			@ (mov r8, r8)
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	b009      	add	sp, #36	@ 0x24
 800e8c2:	bd90      	pop	{r4, r7, pc}
 800e8c4:	48000800 	.word	0x48000800
 800e8c8:	48000400 	.word	0x48000400

0800e8cc <GPIO_Init_Motor1_Lock1>:

void GPIO_Init_Motor1_Lock1(tGpio_Conf gpioConf )
{
 800e8cc:	b590      	push	{r4, r7, lr}
 800e8ce:	b089      	sub	sp, #36	@ 0x24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	0002      	movs	r2, r0
 800e8d4:	1dfb      	adds	r3, r7, #7
 800e8d6:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_Init = {0};
 800e8d8:	240c      	movs	r4, #12
 800e8da:	193b      	adds	r3, r7, r4
 800e8dc:	0018      	movs	r0, r3
 800e8de:	2314      	movs	r3, #20
 800e8e0:	001a      	movs	r2, r3
 800e8e2:	2100      	movs	r1, #0
 800e8e4:	f001 f9b5 	bl	800fc52 <memset>

	if( gpioConf == _e_Gpio_Init ){
 800e8e8:	1dfb      	adds	r3, r7, #7
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d11a      	bne.n	800e926 <GPIO_Init_Motor1_Lock1+0x5a>

		_pin_set_l(				GPIO_MT1_Lock1_Port,
 800e8f0:	4b13      	ldr	r3, [pc, #76]	@ (800e940 <GPIO_Init_Motor1_Lock1+0x74>)
 800e8f2:	2280      	movs	r2, #128	@ 0x80
 800e8f4:	0412      	lsls	r2, r2, #16
 800e8f6:	619a      	str	r2, [r3, #24]
								GPIO_MT1_Lock1_Pin);
		GPIO_Init.Pin 			= GPIO_MT1_Lock1_Pin;
 800e8f8:	0021      	movs	r1, r4
 800e8fa:	187b      	adds	r3, r7, r1
 800e8fc:	2280      	movs	r2, #128	@ 0x80
 800e8fe:	601a      	str	r2, [r3, #0]
		GPIO_Init.Mode 			= GPIO_MT1_Lock1_Mode;
 800e900:	187b      	adds	r3, r7, r1
 800e902:	2202      	movs	r2, #2
 800e904:	605a      	str	r2, [r3, #4]
		GPIO_Init.Pull 			= GPIO_MT1_Lock1_Pull;
 800e906:	187b      	adds	r3, r7, r1
 800e908:	2200      	movs	r2, #0
 800e90a:	609a      	str	r2, [r3, #8]
		GPIO_Init.Speed 		= GPIO_MT1_Lock1_Speed;
 800e90c:	187b      	adds	r3, r7, r1
 800e90e:	2203      	movs	r2, #3
 800e910:	60da      	str	r2, [r3, #12]
		GPIO_Init.Alternate 	= GPIO_MT1_Lock1_Atl;
 800e912:	187b      	adds	r3, r7, r1
 800e914:	2201      	movs	r2, #1
 800e916:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(			GPIO_MT1_Lock1_Port, &GPIO_Init);
 800e918:	187b      	adds	r3, r7, r1
 800e91a:	4a09      	ldr	r2, [pc, #36]	@ (800e940 <GPIO_Init_Motor1_Lock1+0x74>)
 800e91c:	0019      	movs	r1, r3
 800e91e:	0010      	movs	r0, r2
 800e920:	f7f4 f8a4 	bl	8002a6c <HAL_GPIO_Init>

	}
	else if( gpioConf == _e_Gpio_DeInit ){
		HAL_GPIO_DeInit(	GPIO_MT1_Lock1_Port, 	GPIO_MT1_Lock1_Pin 	);
	}
}
 800e924:	e008      	b.n	800e938 <GPIO_Init_Motor1_Lock1+0x6c>
	else if( gpioConf == _e_Gpio_DeInit ){
 800e926:	1dfb      	adds	r3, r7, #7
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d104      	bne.n	800e938 <GPIO_Init_Motor1_Lock1+0x6c>
		HAL_GPIO_DeInit(	GPIO_MT1_Lock1_Port, 	GPIO_MT1_Lock1_Pin 	);
 800e92e:	4b04      	ldr	r3, [pc, #16]	@ (800e940 <GPIO_Init_Motor1_Lock1+0x74>)
 800e930:	2180      	movs	r1, #128	@ 0x80
 800e932:	0018      	movs	r0, r3
 800e934:	f7f4 fa0a 	bl	8002d4c <HAL_GPIO_DeInit>
}
 800e938:	46c0      	nop			@ (mov r8, r8)
 800e93a:	46bd      	mov	sp, r7
 800e93c:	b009      	add	sp, #36	@ 0x24
 800e93e:	bd90      	pop	{r4, r7, pc}
 800e940:	48000800 	.word	0x48000800

0800e944 <GPIO_Init_All>:
		HAL_GPIO_DeInit(	GPIO_MT2_Lock1_Port, 	GPIO_MT2_Lock1_Pin 	);
	}
}

void GPIO_Init_All(void)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e94a:	4b38      	ldr	r3, [pc, #224]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e94c:	695a      	ldr	r2, [r3, #20]
 800e94e:	4b37      	ldr	r3, [pc, #220]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e950:	2180      	movs	r1, #128	@ 0x80
 800e952:	0289      	lsls	r1, r1, #10
 800e954:	430a      	orrs	r2, r1
 800e956:	615a      	str	r2, [r3, #20]
 800e958:	4b34      	ldr	r3, [pc, #208]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e95a:	695a      	ldr	r2, [r3, #20]
 800e95c:	2380      	movs	r3, #128	@ 0x80
 800e95e:	029b      	lsls	r3, r3, #10
 800e960:	4013      	ands	r3, r2
 800e962:	617b      	str	r3, [r7, #20]
 800e964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e966:	4b31      	ldr	r3, [pc, #196]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e968:	695a      	ldr	r2, [r3, #20]
 800e96a:	4b30      	ldr	r3, [pc, #192]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e96c:	2180      	movs	r1, #128	@ 0x80
 800e96e:	02c9      	lsls	r1, r1, #11
 800e970:	430a      	orrs	r2, r1
 800e972:	615a      	str	r2, [r3, #20]
 800e974:	4b2d      	ldr	r3, [pc, #180]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e976:	695a      	ldr	r2, [r3, #20]
 800e978:	2380      	movs	r3, #128	@ 0x80
 800e97a:	02db      	lsls	r3, r3, #11
 800e97c:	4013      	ands	r3, r2
 800e97e:	613b      	str	r3, [r7, #16]
 800e980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e982:	4b2a      	ldr	r3, [pc, #168]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e984:	695a      	ldr	r2, [r3, #20]
 800e986:	4b29      	ldr	r3, [pc, #164]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e988:	2180      	movs	r1, #128	@ 0x80
 800e98a:	0309      	lsls	r1, r1, #12
 800e98c:	430a      	orrs	r2, r1
 800e98e:	615a      	str	r2, [r3, #20]
 800e990:	4b26      	ldr	r3, [pc, #152]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e992:	695a      	ldr	r2, [r3, #20]
 800e994:	2380      	movs	r3, #128	@ 0x80
 800e996:	031b      	lsls	r3, r3, #12
 800e998:	4013      	ands	r3, r2
 800e99a:	60fb      	str	r3, [r7, #12]
 800e99c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e99e:	4b23      	ldr	r3, [pc, #140]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e9a0:	695a      	ldr	r2, [r3, #20]
 800e9a2:	4b22      	ldr	r3, [pc, #136]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e9a4:	2180      	movs	r1, #128	@ 0x80
 800e9a6:	0349      	lsls	r1, r1, #13
 800e9a8:	430a      	orrs	r2, r1
 800e9aa:	615a      	str	r2, [r3, #20]
 800e9ac:	4b1f      	ldr	r3, [pc, #124]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e9ae:	695a      	ldr	r2, [r3, #20]
 800e9b0:	2380      	movs	r3, #128	@ 0x80
 800e9b2:	035b      	lsls	r3, r3, #13
 800e9b4:	4013      	ands	r3, r2
 800e9b6:	60bb      	str	r3, [r7, #8]
 800e9b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800e9ba:	4b1c      	ldr	r3, [pc, #112]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e9bc:	695a      	ldr	r2, [r3, #20]
 800e9be:	4b1b      	ldr	r3, [pc, #108]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e9c0:	2180      	movs	r1, #128	@ 0x80
 800e9c2:	03c9      	lsls	r1, r1, #15
 800e9c4:	430a      	orrs	r2, r1
 800e9c6:	615a      	str	r2, [r3, #20]
 800e9c8:	4b18      	ldr	r3, [pc, #96]	@ (800ea2c <GPIO_Init_All+0xe8>)
 800e9ca:	695a      	ldr	r2, [r3, #20]
 800e9cc:	2380      	movs	r3, #128	@ 0x80
 800e9ce:	03db      	lsls	r3, r3, #15
 800e9d0:	4013      	ands	r3, r2
 800e9d2:	607b      	str	r3, [r7, #4]
 800e9d4:	687b      	ldr	r3, [r7, #4]
	//COM
	GPIO_Init_RS485(_e_Gpio_Init);
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	f7ff f800 	bl	800d9dc <GPIO_Init_RS485>
	GPIO_Init_ComIo(_e_Gpio_Init);
 800e9dc:	2000      	movs	r0, #0
 800e9de:	f7ff fc43 	bl	800e268 <GPIO_Init_ComIo>
	//IOS
	GPIO_Init_PictoInOut_Part1(_e_Gpio_Init);
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	f7ff f8e0 	bl	800dba8 <GPIO_Init_PictoInOut_Part1>
	GPIO_Init_PictoInOut_Part2(_e_Gpio_Init);
 800e9e8:	2000      	movs	r0, #0
 800e9ea:	f7ff f941 	bl	800dc70 <GPIO_Init_PictoInOut_Part2>
	GPIO_Init_Urn_Sol(_e_Gpio_Init);
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	f7ff f9ea 	bl	800ddc8 <GPIO_Init_Urn_Sol>
	GPIO_Init_Urn(_e_Gpio_Init);
 800e9f4:	2000      	movs	r0, #0
 800e9f6:	f7ff fad5 	bl	800dfa4 <GPIO_Init_Urn>
	GPIO_Init_Sensor(_e_Gpio_Init);
 800e9fa:	2000      	movs	r0, #0
 800e9fc:	f7ff fb34 	bl	800e068 <GPIO_Init_Sensor>
	GPIO_Init_PicA(_e_Gpio_Init);
 800ea00:	2000      	movs	r0, #0
 800ea02:	f7ff fbb7 	bl	800e174 <GPIO_Init_PicA>

	//HMI
	GPIO_Init_Hmi(_e_Gpio_Init);
 800ea06:	2000      	movs	r0, #0
 800ea08:	f7ff fcb2 	bl	800e370 <GPIO_Init_Hmi>

	GPIO_Init_Buzzer(_e_Gpio_Init);
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	f7ff f857 	bl	800dac0 <GPIO_Init_Buzzer>
	GPIO_Init_Disp_Led(_e_Gpio_Init);
 800ea12:	2000      	movs	r0, #0
 800ea14:	f7ff f88e 	bl	800db34 <GPIO_Init_Disp_Led>
	//Motors
	GPIO_Init_Motors(_e_Gpio_Init);
 800ea18:	2000      	movs	r0, #0
 800ea1a:	f7ff fa11 	bl	800de40 <GPIO_Init_Motors>
	GPIO_Init_Motor_Locks( _e_Gpio_Init );
 800ea1e:	2000      	movs	r0, #0
 800ea20:	f7ff fe4a 	bl	800e6b8 <GPIO_Init_Motor_Locks>
}
 800ea24:	46c0      	nop			@ (mov r8, r8)
 800ea26:	46bd      	mov	sp, r7
 800ea28:	b006      	add	sp, #24
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	40021000 	.word	0x40021000

0800ea30 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
	HAL_Init();
 800ea36:	f7f3 fc79 	bl	800232c <HAL_Init>

	SystemClock_Config();
 800ea3a:	f000 f829 	bl	800ea90 <SystemClock_Config>

	TIM_Init_All();
 800ea3e:	f000 fe67 	bl	800f710 <TIM_Init_All>

	Encoder_Init();
 800ea42:	f7fa fefd 	bl	8009840 <Encoder_Init>
	GPIO_Init_All();
 800ea46:	f7ff ff7d 	bl	800e944 <GPIO_Init_All>

	for( uint8_t i = 0 ; i < 250 ; i++ )
 800ea4a:	1dfb      	adds	r3, r7, #7
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	701a      	strb	r2, [r3, #0]
 800ea50:	e008      	b.n	800ea64 <main+0x34>
	{
		Inputs_Task();
 800ea52:	f7fb fd7d 	bl	800a550 <Inputs_Task>
		Outputs_Task();
 800ea56:	f7fc feae 	bl	800b7b6 <Outputs_Task>
	for( uint8_t i = 0 ; i < 250 ; i++ )
 800ea5a:	1dfb      	adds	r3, r7, #7
 800ea5c:	781a      	ldrb	r2, [r3, #0]
 800ea5e:	1dfb      	adds	r3, r7, #7
 800ea60:	3201      	adds	r2, #1
 800ea62:	701a      	strb	r2, [r3, #0]
 800ea64:	1dfb      	adds	r3, r7, #7
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	2bf9      	cmp	r3, #249	@ 0xf9
 800ea6a:	d9f2      	bls.n	800ea52 <main+0x22>
	}

	Inputs_Init();
 800ea6c:	f7fb fcee 	bl	800a44c <Inputs_Init>

	MX_DMA_Init();
 800ea70:	f7fe ff96 	bl	800d9a0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800ea74:	f000 ffec 	bl	800fa50 <MX_USART2_UART_Init>

	Api_Swing_Init();
 800ea78:	f7f8 fe0c 	bl	8007694 <Api_Swing_Init>

	while (1)
	{
		Inputs_Task();
 800ea7c:	f7fb fd68 	bl	800a550 <Inputs_Task>
		Outputs_Task();
 800ea80:	f7fc fe99 	bl	800b7b6 <Outputs_Task>
		Api_Swing_Task_Alarme();
 800ea84:	f7f8 fe79 	bl	800777a <Api_Swing_Task_Alarme>
		TaskManager();
 800ea88:	f7fe fe06 	bl	800d698 <TaskManager>
		Inputs_Task();
 800ea8c:	46c0      	nop			@ (mov r8, r8)
 800ea8e:	e7f5      	b.n	800ea7c <main+0x4c>

0800ea90 <SystemClock_Config>:
    Error_Handler();
  }
}

void SystemClock_Config(void)
{
 800ea90:	b590      	push	{r4, r7, lr}
 800ea92:	b091      	sub	sp, #68	@ 0x44
 800ea94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ea96:	2410      	movs	r4, #16
 800ea98:	193b      	adds	r3, r7, r4
 800ea9a:	0018      	movs	r0, r3
 800ea9c:	2330      	movs	r3, #48	@ 0x30
 800ea9e:	001a      	movs	r2, r3
 800eaa0:	2100      	movs	r1, #0
 800eaa2:	f001 f8d6 	bl	800fc52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800eaa6:	003b      	movs	r3, r7
 800eaa8:	0018      	movs	r0, r3
 800eaaa:	2310      	movs	r3, #16
 800eaac:	001a      	movs	r2, r3
 800eaae:	2100      	movs	r1, #0
 800eab0:	f001 f8cf 	bl	800fc52 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800eab4:	0021      	movs	r1, r4
 800eab6:	187b      	adds	r3, r7, r1
 800eab8:	2202      	movs	r2, #2
 800eaba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800eabc:	187b      	adds	r3, r7, r1
 800eabe:	2201      	movs	r2, #1
 800eac0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800eac2:	187b      	adds	r3, r7, r1
 800eac4:	2210      	movs	r2, #16
 800eac6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800eac8:	187b      	adds	r3, r7, r1
 800eaca:	2202      	movs	r2, #2
 800eacc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800eace:	187b      	adds	r3, r7, r1
 800ead0:	2200      	movs	r2, #0
 800ead2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800ead4:	187b      	adds	r3, r7, r1
 800ead6:	22a0      	movs	r2, #160	@ 0xa0
 800ead8:	0392      	lsls	r2, r2, #14
 800eada:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800eadc:	187b      	adds	r3, r7, r1
 800eade:	2200      	movs	r2, #0
 800eae0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800eae2:	187b      	adds	r3, r7, r1
 800eae4:	0018      	movs	r0, r3
 800eae6:	f7f4 fa3b 	bl	8002f60 <HAL_RCC_OscConfig>
 800eaea:	1e03      	subs	r3, r0, #0
 800eaec:	d001      	beq.n	800eaf2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800eaee:	f000 f819 	bl	800eb24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800eaf2:	003b      	movs	r3, r7
 800eaf4:	2207      	movs	r2, #7
 800eaf6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800eaf8:	003b      	movs	r3, r7
 800eafa:	2202      	movs	r2, #2
 800eafc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800eafe:	003b      	movs	r3, r7
 800eb00:	2200      	movs	r2, #0
 800eb02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800eb04:	003b      	movs	r3, r7
 800eb06:	2200      	movs	r2, #0
 800eb08:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800eb0a:	003b      	movs	r3, r7
 800eb0c:	2101      	movs	r1, #1
 800eb0e:	0018      	movs	r0, r3
 800eb10:	f7f4 fd40 	bl	8003594 <HAL_RCC_ClockConfig>
 800eb14:	1e03      	subs	r3, r0, #0
 800eb16:	d001      	beq.n	800eb1c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800eb18:	f000 f804 	bl	800eb24 <Error_Handler>
  }
}
 800eb1c:	46c0      	nop			@ (mov r8, r8)
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	b011      	add	sp, #68	@ 0x44
 800eb22:	bd90      	pop	{r4, r7, pc}

0800eb24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800eb28:	46c0      	nop			@ (mov r8, r8)
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
	...

0800eb30 <HAL_MspInit>:
/* USER CODE END Includes */

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

void HAL_MspInit(void)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800eb36:	4b0f      	ldr	r3, [pc, #60]	@ (800eb74 <HAL_MspInit+0x44>)
 800eb38:	699a      	ldr	r2, [r3, #24]
 800eb3a:	4b0e      	ldr	r3, [pc, #56]	@ (800eb74 <HAL_MspInit+0x44>)
 800eb3c:	2101      	movs	r1, #1
 800eb3e:	430a      	orrs	r2, r1
 800eb40:	619a      	str	r2, [r3, #24]
 800eb42:	4b0c      	ldr	r3, [pc, #48]	@ (800eb74 <HAL_MspInit+0x44>)
 800eb44:	699b      	ldr	r3, [r3, #24]
 800eb46:	2201      	movs	r2, #1
 800eb48:	4013      	ands	r3, r2
 800eb4a:	607b      	str	r3, [r7, #4]
 800eb4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800eb4e:	4b09      	ldr	r3, [pc, #36]	@ (800eb74 <HAL_MspInit+0x44>)
 800eb50:	69da      	ldr	r2, [r3, #28]
 800eb52:	4b08      	ldr	r3, [pc, #32]	@ (800eb74 <HAL_MspInit+0x44>)
 800eb54:	2180      	movs	r1, #128	@ 0x80
 800eb56:	0549      	lsls	r1, r1, #21
 800eb58:	430a      	orrs	r2, r1
 800eb5a:	61da      	str	r2, [r3, #28]
 800eb5c:	4b05      	ldr	r3, [pc, #20]	@ (800eb74 <HAL_MspInit+0x44>)
 800eb5e:	69da      	ldr	r2, [r3, #28]
 800eb60:	2380      	movs	r3, #128	@ 0x80
 800eb62:	055b      	lsls	r3, r3, #21
 800eb64:	4013      	ands	r3, r2
 800eb66:	603b      	str	r3, [r7, #0]
 800eb68:	683b      	ldr	r3, [r7, #0]
}
 800eb6a:	46c0      	nop			@ (mov r8, r8)
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	b002      	add	sp, #8
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	46c0      	nop			@ (mov r8, r8)
 800eb74:	40021000 	.word	0x40021000

0800eb78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	4a2f      	ldr	r2, [pc, #188]	@ (800ec44 <HAL_TIM_PWM_MspInit+0xcc>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d10e      	bne.n	800eba8 <HAL_TIM_PWM_MspInit+0x30>
  {
    __HAL_RCC_TIM1_CLK_ENABLE();
 800eb8a:	4b2f      	ldr	r3, [pc, #188]	@ (800ec48 <HAL_TIM_PWM_MspInit+0xd0>)
 800eb8c:	699a      	ldr	r2, [r3, #24]
 800eb8e:	4b2e      	ldr	r3, [pc, #184]	@ (800ec48 <HAL_TIM_PWM_MspInit+0xd0>)
 800eb90:	2180      	movs	r1, #128	@ 0x80
 800eb92:	0109      	lsls	r1, r1, #4
 800eb94:	430a      	orrs	r2, r1
 800eb96:	619a      	str	r2, [r3, #24]
 800eb98:	4b2b      	ldr	r3, [pc, #172]	@ (800ec48 <HAL_TIM_PWM_MspInit+0xd0>)
 800eb9a:	699a      	ldr	r2, [r3, #24]
 800eb9c:	2380      	movs	r3, #128	@ 0x80
 800eb9e:	011b      	lsls	r3, r3, #4
 800eba0:	4013      	ands	r3, r2
 800eba2:	617b      	str	r3, [r7, #20]
 800eba4:	697b      	ldr	r3, [r7, #20]
#if MOTOR_TASK_IT_BY_OUTPUT_CAPTURE
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 1);
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
#endif
  }
}
 800eba6:	e048      	b.n	800ec3a <HAL_TIM_PWM_MspInit+0xc2>
  else if(htim_pwm->Instance==TIM3)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	4a27      	ldr	r2, [pc, #156]	@ (800ec4c <HAL_TIM_PWM_MspInit+0xd4>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d10c      	bne.n	800ebcc <HAL_TIM_PWM_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ebb2:	4b25      	ldr	r3, [pc, #148]	@ (800ec48 <HAL_TIM_PWM_MspInit+0xd0>)
 800ebb4:	69da      	ldr	r2, [r3, #28]
 800ebb6:	4b24      	ldr	r3, [pc, #144]	@ (800ec48 <HAL_TIM_PWM_MspInit+0xd0>)
 800ebb8:	2102      	movs	r1, #2
 800ebba:	430a      	orrs	r2, r1
 800ebbc:	61da      	str	r2, [r3, #28]
 800ebbe:	4b22      	ldr	r3, [pc, #136]	@ (800ec48 <HAL_TIM_PWM_MspInit+0xd0>)
 800ebc0:	69db      	ldr	r3, [r3, #28]
 800ebc2:	2202      	movs	r2, #2
 800ebc4:	4013      	ands	r3, r2
 800ebc6:	613b      	str	r3, [r7, #16]
 800ebc8:	693b      	ldr	r3, [r7, #16]
}
 800ebca:	e036      	b.n	800ec3a <HAL_TIM_PWM_MspInit+0xc2>
  else if(htim_pwm->Instance==TIM15)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4a1f      	ldr	r2, [pc, #124]	@ (800ec50 <HAL_TIM_PWM_MspInit+0xd8>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d116      	bne.n	800ec04 <HAL_TIM_PWM_MspInit+0x8c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800ebd6:	4b1c      	ldr	r3, [pc, #112]	@ (800ec48 <HAL_TIM_PWM_MspInit+0xd0>)
 800ebd8:	699a      	ldr	r2, [r3, #24]
 800ebda:	4b1b      	ldr	r3, [pc, #108]	@ (800ec48 <HAL_TIM_PWM_MspInit+0xd0>)
 800ebdc:	2180      	movs	r1, #128	@ 0x80
 800ebde:	0249      	lsls	r1, r1, #9
 800ebe0:	430a      	orrs	r2, r1
 800ebe2:	619a      	str	r2, [r3, #24]
 800ebe4:	4b18      	ldr	r3, [pc, #96]	@ (800ec48 <HAL_TIM_PWM_MspInit+0xd0>)
 800ebe6:	699a      	ldr	r2, [r3, #24]
 800ebe8:	2380      	movs	r3, #128	@ 0x80
 800ebea:	025b      	lsls	r3, r3, #9
 800ebec:	4013      	ands	r3, r2
 800ebee:	60fb      	str	r3, [r7, #12]
 800ebf0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	2100      	movs	r1, #0
 800ebf6:	2014      	movs	r0, #20
 800ebf8:	f7f3 fcdc 	bl	80025b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800ebfc:	2014      	movs	r0, #20
 800ebfe:	f7f3 fcee 	bl	80025de <HAL_NVIC_EnableIRQ>
}
 800ec02:	e01a      	b.n	800ec3a <HAL_TIM_PWM_MspInit+0xc2>
  else if(htim_pwm->Instance==TIM16)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4a12      	ldr	r2, [pc, #72]	@ (800ec54 <HAL_TIM_PWM_MspInit+0xdc>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d115      	bne.n	800ec3a <HAL_TIM_PWM_MspInit+0xc2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800ec0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ec48 <HAL_TIM_PWM_MspInit+0xd0>)
 800ec10:	699a      	ldr	r2, [r3, #24]
 800ec12:	4b0d      	ldr	r3, [pc, #52]	@ (800ec48 <HAL_TIM_PWM_MspInit+0xd0>)
 800ec14:	2180      	movs	r1, #128	@ 0x80
 800ec16:	0289      	lsls	r1, r1, #10
 800ec18:	430a      	orrs	r2, r1
 800ec1a:	619a      	str	r2, [r3, #24]
 800ec1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ec48 <HAL_TIM_PWM_MspInit+0xd0>)
 800ec1e:	699a      	ldr	r2, [r3, #24]
 800ec20:	2380      	movs	r3, #128	@ 0x80
 800ec22:	029b      	lsls	r3, r3, #10
 800ec24:	4013      	ands	r3, r2
 800ec26:	60bb      	str	r3, [r7, #8]
 800ec28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 1);
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	2100      	movs	r1, #0
 800ec2e:	2015      	movs	r0, #21
 800ec30:	f7f3 fcc0 	bl	80025b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800ec34:	2015      	movs	r0, #21
 800ec36:	f7f3 fcd2 	bl	80025de <HAL_NVIC_EnableIRQ>
}
 800ec3a:	46c0      	nop			@ (mov r8, r8)
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	b006      	add	sp, #24
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	46c0      	nop			@ (mov r8, r8)
 800ec44:	40012c00 	.word	0x40012c00
 800ec48:	40021000 	.word	0x40021000
 800ec4c:	40000400 	.word	0x40000400
 800ec50:	40014000 	.word	0x40014000
 800ec54:	40014400 	.word	0x40014400

0800ec58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b086      	sub	sp, #24
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	4a27      	ldr	r2, [pc, #156]	@ (800ed04 <HAL_TIM_Base_MspInit+0xac>)
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d10c      	bne.n	800ec84 <HAL_TIM_Base_MspInit+0x2c>
  {
    __HAL_RCC_TIM6_CLK_ENABLE();
 800ec6a:	4b27      	ldr	r3, [pc, #156]	@ (800ed08 <HAL_TIM_Base_MspInit+0xb0>)
 800ec6c:	69da      	ldr	r2, [r3, #28]
 800ec6e:	4b26      	ldr	r3, [pc, #152]	@ (800ed08 <HAL_TIM_Base_MspInit+0xb0>)
 800ec70:	2110      	movs	r1, #16
 800ec72:	430a      	orrs	r2, r1
 800ec74:	61da      	str	r2, [r3, #28]
 800ec76:	4b24      	ldr	r3, [pc, #144]	@ (800ed08 <HAL_TIM_Base_MspInit+0xb0>)
 800ec78:	69db      	ldr	r3, [r3, #28]
 800ec7a:	2210      	movs	r2, #16
 800ec7c:	4013      	ands	r3, r2
 800ec7e:	617b      	str	r3, [r7, #20]
 800ec80:	697b      	ldr	r3, [r7, #20]
  }
  else if(htim_base->Instance==TIM17)
  {
    __HAL_RCC_TIM17_CLK_ENABLE();
  }
}
 800ec82:	e03a      	b.n	800ecfa <HAL_TIM_Base_MspInit+0xa2>
	else if(htim_base->Instance==TIM14)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a20      	ldr	r2, [pc, #128]	@ (800ed0c <HAL_TIM_Base_MspInit+0xb4>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d10e      	bne.n	800ecac <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800ec8e:	4b1e      	ldr	r3, [pc, #120]	@ (800ed08 <HAL_TIM_Base_MspInit+0xb0>)
 800ec90:	69da      	ldr	r2, [r3, #28]
 800ec92:	4b1d      	ldr	r3, [pc, #116]	@ (800ed08 <HAL_TIM_Base_MspInit+0xb0>)
 800ec94:	2180      	movs	r1, #128	@ 0x80
 800ec96:	0049      	lsls	r1, r1, #1
 800ec98:	430a      	orrs	r2, r1
 800ec9a:	61da      	str	r2, [r3, #28]
 800ec9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ed08 <HAL_TIM_Base_MspInit+0xb0>)
 800ec9e:	69da      	ldr	r2, [r3, #28]
 800eca0:	2380      	movs	r3, #128	@ 0x80
 800eca2:	005b      	lsls	r3, r3, #1
 800eca4:	4013      	ands	r3, r2
 800eca6:	613b      	str	r3, [r7, #16]
 800eca8:	693b      	ldr	r3, [r7, #16]
}
 800ecaa:	e026      	b.n	800ecfa <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	4a17      	ldr	r2, [pc, #92]	@ (800ed10 <HAL_TIM_Base_MspInit+0xb8>)
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d10e      	bne.n	800ecd4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800ecb6:	4b14      	ldr	r3, [pc, #80]	@ (800ed08 <HAL_TIM_Base_MspInit+0xb0>)
 800ecb8:	699a      	ldr	r2, [r3, #24]
 800ecba:	4b13      	ldr	r3, [pc, #76]	@ (800ed08 <HAL_TIM_Base_MspInit+0xb0>)
 800ecbc:	2180      	movs	r1, #128	@ 0x80
 800ecbe:	0289      	lsls	r1, r1, #10
 800ecc0:	430a      	orrs	r2, r1
 800ecc2:	619a      	str	r2, [r3, #24]
 800ecc4:	4b10      	ldr	r3, [pc, #64]	@ (800ed08 <HAL_TIM_Base_MspInit+0xb0>)
 800ecc6:	699a      	ldr	r2, [r3, #24]
 800ecc8:	2380      	movs	r3, #128	@ 0x80
 800ecca:	029b      	lsls	r3, r3, #10
 800eccc:	4013      	ands	r3, r2
 800ecce:	60fb      	str	r3, [r7, #12]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
}
 800ecd2:	e012      	b.n	800ecfa <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4a0e      	ldr	r2, [pc, #56]	@ (800ed14 <HAL_TIM_Base_MspInit+0xbc>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d10d      	bne.n	800ecfa <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800ecde:	4b0a      	ldr	r3, [pc, #40]	@ (800ed08 <HAL_TIM_Base_MspInit+0xb0>)
 800ece0:	699a      	ldr	r2, [r3, #24]
 800ece2:	4b09      	ldr	r3, [pc, #36]	@ (800ed08 <HAL_TIM_Base_MspInit+0xb0>)
 800ece4:	2180      	movs	r1, #128	@ 0x80
 800ece6:	02c9      	lsls	r1, r1, #11
 800ece8:	430a      	orrs	r2, r1
 800ecea:	619a      	str	r2, [r3, #24]
 800ecec:	4b06      	ldr	r3, [pc, #24]	@ (800ed08 <HAL_TIM_Base_MspInit+0xb0>)
 800ecee:	699a      	ldr	r2, [r3, #24]
 800ecf0:	2380      	movs	r3, #128	@ 0x80
 800ecf2:	02db      	lsls	r3, r3, #11
 800ecf4:	4013      	ands	r3, r2
 800ecf6:	60bb      	str	r3, [r7, #8]
 800ecf8:	68bb      	ldr	r3, [r7, #8]
}
 800ecfa:	46c0      	nop			@ (mov r8, r8)
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	b006      	add	sp, #24
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	46c0      	nop			@ (mov r8, r8)
 800ed04:	40001000 	.word	0x40001000
 800ed08:	40021000 	.word	0x40021000
 800ed0c:	40002000 	.word	0x40002000
 800ed10:	40014400 	.word	0x40014400
 800ed14:	40014800 	.word	0x40014800

0800ed18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b08a      	sub	sp, #40	@ 0x28
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
//  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a4a      	ldr	r2, [pc, #296]	@ (800ee50 <HAL_TIM_MspPostInit+0x138>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d10e      	bne.n	800ed48 <HAL_TIM_MspPostInit+0x30>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed2a:	4b4a      	ldr	r3, [pc, #296]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ed2c:	695a      	ldr	r2, [r3, #20]
 800ed2e:	4b49      	ldr	r3, [pc, #292]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ed30:	2180      	movs	r1, #128	@ 0x80
 800ed32:	0289      	lsls	r1, r1, #10
 800ed34:	430a      	orrs	r2, r1
 800ed36:	615a      	str	r2, [r3, #20]
 800ed38:	4b46      	ldr	r3, [pc, #280]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ed3a:	695a      	ldr	r2, [r3, #20]
 800ed3c:	2380      	movs	r3, #128	@ 0x80
 800ed3e:	029b      	lsls	r3, r3, #10
 800ed40:	4013      	ands	r3, r2
 800ed42:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
    //GPIO_Init_Buzzer(_e_Gpio_Init);
    GPIO_Init_Motor1_Lock1( _e_Gpio_Init );
  }
}
 800ed46:	e07f      	b.n	800ee48 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM3)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a42      	ldr	r2, [pc, #264]	@ (800ee58 <HAL_TIM_MspPostInit+0x140>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d11f      	bne.n	800ed92 <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed52:	4b40      	ldr	r3, [pc, #256]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ed54:	695a      	ldr	r2, [r3, #20]
 800ed56:	4b3f      	ldr	r3, [pc, #252]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ed58:	2180      	movs	r1, #128	@ 0x80
 800ed5a:	0289      	lsls	r1, r1, #10
 800ed5c:	430a      	orrs	r2, r1
 800ed5e:	615a      	str	r2, [r3, #20]
 800ed60:	4b3c      	ldr	r3, [pc, #240]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ed62:	695a      	ldr	r2, [r3, #20]
 800ed64:	2380      	movs	r3, #128	@ 0x80
 800ed66:	029b      	lsls	r3, r3, #10
 800ed68:	4013      	ands	r3, r2
 800ed6a:	623b      	str	r3, [r7, #32]
 800ed6c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ed6e:	4b39      	ldr	r3, [pc, #228]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ed70:	695a      	ldr	r2, [r3, #20]
 800ed72:	4b38      	ldr	r3, [pc, #224]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ed74:	2180      	movs	r1, #128	@ 0x80
 800ed76:	02c9      	lsls	r1, r1, #11
 800ed78:	430a      	orrs	r2, r1
 800ed7a:	615a      	str	r2, [r3, #20]
 800ed7c:	4b35      	ldr	r3, [pc, #212]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ed7e:	695a      	ldr	r2, [r3, #20]
 800ed80:	2380      	movs	r3, #128	@ 0x80
 800ed82:	02db      	lsls	r3, r3, #11
 800ed84:	4013      	ands	r3, r2
 800ed86:	61fb      	str	r3, [r7, #28]
 800ed88:	69fb      	ldr	r3, [r7, #28]
    GPIO_Init_PictoInOut_Part2(_e_Gpio_Init);
 800ed8a:	2000      	movs	r0, #0
 800ed8c:	f7fe ff70 	bl	800dc70 <GPIO_Init_PictoInOut_Part2>
}
 800ed90:	e05a      	b.n	800ee48 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM14)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	4a31      	ldr	r2, [pc, #196]	@ (800ee5c <HAL_TIM_MspPostInit+0x144>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d111      	bne.n	800edc0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed9c:	4b2d      	ldr	r3, [pc, #180]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ed9e:	695a      	ldr	r2, [r3, #20]
 800eda0:	4b2c      	ldr	r3, [pc, #176]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800eda2:	2180      	movs	r1, #128	@ 0x80
 800eda4:	0289      	lsls	r1, r1, #10
 800eda6:	430a      	orrs	r2, r1
 800eda8:	615a      	str	r2, [r3, #20]
 800edaa:	4b2a      	ldr	r3, [pc, #168]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800edac:	695a      	ldr	r2, [r3, #20]
 800edae:	2380      	movs	r3, #128	@ 0x80
 800edb0:	029b      	lsls	r3, r3, #10
 800edb2:	4013      	ands	r3, r2
 800edb4:	61bb      	str	r3, [r7, #24]
 800edb6:	69bb      	ldr	r3, [r7, #24]
    GPIO_Init_Urn_Sol(_e_Gpio_Init);
 800edb8:	2000      	movs	r0, #0
 800edba:	f7ff f805 	bl	800ddc8 <GPIO_Init_Urn_Sol>
}
 800edbe:	e043      	b.n	800ee48 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM15)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4a26      	ldr	r2, [pc, #152]	@ (800ee60 <HAL_TIM_MspPostInit+0x148>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d111      	bne.n	800edee <HAL_TIM_MspPostInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800edca:	4b22      	ldr	r3, [pc, #136]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800edcc:	695a      	ldr	r2, [r3, #20]
 800edce:	4b21      	ldr	r3, [pc, #132]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800edd0:	2180      	movs	r1, #128	@ 0x80
 800edd2:	02c9      	lsls	r1, r1, #11
 800edd4:	430a      	orrs	r2, r1
 800edd6:	615a      	str	r2, [r3, #20]
 800edd8:	4b1e      	ldr	r3, [pc, #120]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800edda:	695a      	ldr	r2, [r3, #20]
 800eddc:	2380      	movs	r3, #128	@ 0x80
 800edde:	02db      	lsls	r3, r3, #11
 800ede0:	4013      	ands	r3, r2
 800ede2:	617b      	str	r3, [r7, #20]
 800ede4:	697b      	ldr	r3, [r7, #20]
    GPIO_Init_Motors(_e_Gpio_Init);
 800ede6:	2000      	movs	r0, #0
 800ede8:	f7ff f82a 	bl	800de40 <GPIO_Init_Motors>
}
 800edec:	e02c      	b.n	800ee48 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM16)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	4a1c      	ldr	r2, [pc, #112]	@ (800ee64 <HAL_TIM_MspPostInit+0x14c>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d111      	bne.n	800ee1c <HAL_TIM_MspPostInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800edf8:	4b16      	ldr	r3, [pc, #88]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800edfa:	695a      	ldr	r2, [r3, #20]
 800edfc:	4b15      	ldr	r3, [pc, #84]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800edfe:	2180      	movs	r1, #128	@ 0x80
 800ee00:	02c9      	lsls	r1, r1, #11
 800ee02:	430a      	orrs	r2, r1
 800ee04:	615a      	str	r2, [r3, #20]
 800ee06:	4b13      	ldr	r3, [pc, #76]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ee08:	695a      	ldr	r2, [r3, #20]
 800ee0a:	2380      	movs	r3, #128	@ 0x80
 800ee0c:	02db      	lsls	r3, r3, #11
 800ee0e:	4013      	ands	r3, r2
 800ee10:	613b      	str	r3, [r7, #16]
 800ee12:	693b      	ldr	r3, [r7, #16]
    GPIO_Init_Motors(_e_Gpio_Init);
 800ee14:	2000      	movs	r0, #0
 800ee16:	f7ff f813 	bl	800de40 <GPIO_Init_Motors>
}
 800ee1a:	e015      	b.n	800ee48 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM17)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4a11      	ldr	r2, [pc, #68]	@ (800ee68 <HAL_TIM_MspPostInit+0x150>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d110      	bne.n	800ee48 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee26:	4b0b      	ldr	r3, [pc, #44]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ee28:	695a      	ldr	r2, [r3, #20]
 800ee2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ee2c:	2180      	movs	r1, #128	@ 0x80
 800ee2e:	02c9      	lsls	r1, r1, #11
 800ee30:	430a      	orrs	r2, r1
 800ee32:	615a      	str	r2, [r3, #20]
 800ee34:	4b07      	ldr	r3, [pc, #28]	@ (800ee54 <HAL_TIM_MspPostInit+0x13c>)
 800ee36:	695a      	ldr	r2, [r3, #20]
 800ee38:	2380      	movs	r3, #128	@ 0x80
 800ee3a:	02db      	lsls	r3, r3, #11
 800ee3c:	4013      	ands	r3, r2
 800ee3e:	60fb      	str	r3, [r7, #12]
 800ee40:	68fb      	ldr	r3, [r7, #12]
    GPIO_Init_Motor1_Lock1( _e_Gpio_Init );
 800ee42:	2000      	movs	r0, #0
 800ee44:	f7ff fd42 	bl	800e8cc <GPIO_Init_Motor1_Lock1>
}
 800ee48:	46c0      	nop			@ (mov r8, r8)
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	b00a      	add	sp, #40	@ 0x28
 800ee4e:	bd80      	pop	{r7, pc}
 800ee50:	40012c00 	.word	0x40012c00
 800ee54:	40021000 	.word	0x40021000
 800ee58:	40000400 	.word	0x40000400
 800ee5c:	40002000 	.word	0x40002000
 800ee60:	40014000 	.word	0x40014000
 800ee64:	40014400 	.word	0x40014400
 800ee68:	40014800 	.word	0x40014800

0800ee6c <USART2_IRQHandler>:
  */
/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	af00      	add	r7, sp, #0

#else
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ee70:	4b03      	ldr	r3, [pc, #12]	@ (800ee80 <USART2_IRQHandler+0x14>)
 800ee72:	0018      	movs	r0, r3
 800ee74:	f7f5 fef4 	bl	8004c60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
#endif
}
 800ee78:	46c0      	nop			@ (mov r8, r8)
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	46c0      	nop			@ (mov r8, r8)
 800ee80:	2000085c 	.word	0x2000085c

0800ee84 <TIM6_IRQHandler>:

/**
  * @brief This function handles timer 6 interrupt.
  */
void TIM6_IRQHandler(void)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim6);
 800ee88:	4b05      	ldr	r3, [pc, #20]	@ (800eea0 <TIM6_IRQHandler+0x1c>)
 800ee8a:	0018      	movs	r0, r3
 800ee8c:	f7f5 f830 	bl	8003ef0 <HAL_TIM_IRQHandler>

	Timing_IT();
 800ee90:	f000 fd00 	bl	800f894 <Timing_IT>
	//Inputs_IT();
	Outputs_Task_IT();
 800ee94:	f7fc fc84 	bl	800b7a0 <Outputs_Task_IT>

#if MOTOR_TASK_IT_BY_OUTPUT_CAPTURE == 0
//	Motor_Task_IT();
#endif
}
 800ee98:	46c0      	nop			@ (mov r8, r8)
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	46c0      	nop			@ (mov r8, r8)
 800eea0:	200006c8 	.word	0x200006c8

0800eea4 <TIM15_IRQHandler>:

/**
  * @brief This function handles timer 15 interrupt.
  */
void TIM15_IRQHandler(void)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim15);
 800eea8:	4b04      	ldr	r3, [pc, #16]	@ (800eebc <TIM15_IRQHandler+0x18>)
 800eeaa:	0018      	movs	r0, r3
 800eeac:	f7f5 f820 	bl	8003ef0 <HAL_TIM_IRQHandler>
//#if MOTOR_TASK_IT_BY_OUTPUT_CAPTURE
//	Motor_Task_IT(0);
//#endif

	StepMotor_IT(_e_StpMt_Pri);
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	f7fe f86b 	bl	800cf8c <StepMotor_IT>
}
 800eeb6:	46c0      	nop			@ (mov r8, r8)
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	20000758 	.word	0x20000758

0800eec0 <TIM16_IRQHandler>:

/**
  * @brief This function handles timer 16 interrupt.
  */
void TIM16_IRQHandler(void)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim16);
 800eec4:	4b04      	ldr	r3, [pc, #16]	@ (800eed8 <TIM16_IRQHandler+0x18>)
 800eec6:	0018      	movs	r0, r3
 800eec8:	f7f5 f812 	bl	8003ef0 <HAL_TIM_IRQHandler>

//#if MOTOR_TASK_IT_BY_OUTPUT_CAPTURE
//	Motor_Task_IT(1);
//#endif

	StepMotor_IT(_e_StpMt_Sec);
 800eecc:	2001      	movs	r0, #1
 800eece:	f7fe f85d 	bl	800cf8c <StepMotor_IT>
}
 800eed2:	46c0      	nop			@ (mov r8, r8)
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	200007a0 	.word	0x200007a0

0800eedc <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_IOs_Urn_Det_Pin);
 800eee0:	2001      	movs	r0, #1
 800eee2:	f7f4 f821 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
}
 800eee6:	46c0      	nop			@ (mov r8, r8)
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}

0800eeec <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_MT1_Enc1_Pin);
 800eef0:	2004      	movs	r0, #4
 800eef2:	f7f4 f819 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
}
 800eef6:	46c0      	nop			@ (mov r8, r8)
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_MT1_Enc2_Pin);
 800ef00:	2020      	movs	r0, #32
 800ef02:	f7f4 f811 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_MT2_Enc1_Pin);
 800ef06:	2080      	movs	r0, #128	@ 0x80
 800ef08:	f7f4 f80e 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(GPIO_MT2_Enc2_Pin);
 800ef0c:	2010      	movs	r0, #16
 800ef0e:	f7f4 f80b 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
}
 800ef12:	46c0      	nop			@ (mov r8, r8)
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ef1c:	46c0      	nop			@ (mov r8, r8)
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void){
 800ef22:	b580      	push	{r7, lr}
 800ef24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 800ef26:	f7f3 fb7a 	bl	800261e <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		HAL_NVIC_SystemReset();
 800ef2a:	f7f3 fb78 	bl	800261e <HAL_NVIC_SystemReset>
 800ef2e:	e7fc      	b.n	800ef2a <HardFault_Handler+0x8>

0800ef30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800ef34:	46c0      	nop			@ (mov r8, r8)
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}

0800ef3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ef3e:	46c0      	nop			@ (mov r8, r8)
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ef48:	f7f3 fa38 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ef4c:	46c0      	nop			@ (mov r8, r8)
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
	...

0800ef54 <DMA1_Channel4_5_IRQHandler>:

// IRQ handler for DMA chanel 4 and 5 global interrupt

void DMA1_Channel4_5_IRQHandler(void)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	af00      	add	r7, sp, #0
	//USART_CallbackError();
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800ef58:	4b05      	ldr	r3, [pc, #20]	@ (800ef70 <DMA1_Channel4_5_IRQHandler+0x1c>)
 800ef5a:	0018      	movs	r0, r3
 800ef5c:	f7f3 fc9b 	bl	8002896 <HAL_DMA_IRQHandler>
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800ef60:	4b04      	ldr	r3, [pc, #16]	@ (800ef74 <DMA1_Channel4_5_IRQHandler+0x20>)
 800ef62:	0018      	movs	r0, r3
 800ef64:	f7f3 fc97 	bl	8002896 <HAL_DMA_IRQHandler>

	//HAL_UART_IRQHandler(&huart2);
}
 800ef68:	46c0      	nop			@ (mov r8, r8)
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	46c0      	nop			@ (mov r8, r8)
 800ef70:	20000924 	.word	0x20000924
 800ef74:	200008e0 	.word	0x200008e0

0800ef78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800ef7c:	46c0      	nop			@ (mov r8, r8)
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
	...

0800ef84 <TIM_1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void TIM_1_Init(void)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b092      	sub	sp, #72	@ 0x48
 800ef88:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ef8a:	2340      	movs	r3, #64	@ 0x40
 800ef8c:	18fb      	adds	r3, r7, r3
 800ef8e:	0018      	movs	r0, r3
 800ef90:	2308      	movs	r3, #8
 800ef92:	001a      	movs	r2, r3
 800ef94:	2100      	movs	r1, #0
 800ef96:	f000 fe5c 	bl	800fc52 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ef9a:	2324      	movs	r3, #36	@ 0x24
 800ef9c:	18fb      	adds	r3, r7, r3
 800ef9e:	0018      	movs	r0, r3
 800efa0:	231c      	movs	r3, #28
 800efa2:	001a      	movs	r2, r3
 800efa4:	2100      	movs	r1, #0
 800efa6:	f000 fe54 	bl	800fc52 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800efaa:	1d3b      	adds	r3, r7, #4
 800efac:	0018      	movs	r0, r3
 800efae:	2320      	movs	r3, #32
 800efb0:	001a      	movs	r2, r3
 800efb2:	2100      	movs	r1, #0
 800efb4:	f000 fe4d 	bl	800fc52 <memset>

  htim1.Instance = TIM1;
 800efb8:	4b5d      	ldr	r3, [pc, #372]	@ (800f130 <TIM_1_Init+0x1ac>)
 800efba:	4a5e      	ldr	r2, [pc, #376]	@ (800f134 <TIM_1_Init+0x1b0>)
 800efbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2500;//1000;//250;//64;//48;
 800efbe:	4b5c      	ldr	r3, [pc, #368]	@ (800f130 <TIM_1_Init+0x1ac>)
 800efc0:	4a5d      	ldr	r2, [pc, #372]	@ (800f138 <TIM_1_Init+0x1b4>)
 800efc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800efc4:	4b5a      	ldr	r3, [pc, #360]	@ (800f130 <TIM_1_Init+0x1ac>)
 800efc6:	2200      	movs	r2, #0
 800efc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800efca:	4b59      	ldr	r3, [pc, #356]	@ (800f130 <TIM_1_Init+0x1ac>)
 800efcc:	2264      	movs	r2, #100	@ 0x64
 800efce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;//TIM_CLOCKDIVISION_DIV1;
 800efd0:	4b57      	ldr	r3, [pc, #348]	@ (800f130 <TIM_1_Init+0x1ac>)
 800efd2:	2280      	movs	r2, #128	@ 0x80
 800efd4:	0092      	lsls	r2, r2, #2
 800efd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800efd8:	4b55      	ldr	r3, [pc, #340]	@ (800f130 <TIM_1_Init+0x1ac>)
 800efda:	2200      	movs	r2, #0
 800efdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800efde:	4b54      	ldr	r3, [pc, #336]	@ (800f130 <TIM_1_Init+0x1ac>)
 800efe0:	2200      	movs	r2, #0
 800efe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800efe4:	4b52      	ldr	r3, [pc, #328]	@ (800f130 <TIM_1_Init+0x1ac>)
 800efe6:	0018      	movs	r0, r3
 800efe8:	f7f4 fcc2 	bl	8003970 <HAL_TIM_PWM_Init>
 800efec:	1e03      	subs	r3, r0, #0
 800efee:	d001      	beq.n	800eff4 <TIM_1_Init+0x70>
  {
    Error_Handler();
 800eff0:	f7ff fd98 	bl	800eb24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eff4:	2140      	movs	r1, #64	@ 0x40
 800eff6:	187b      	adds	r3, r7, r1
 800eff8:	2200      	movs	r2, #0
 800effa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800effc:	187b      	adds	r3, r7, r1
 800effe:	2200      	movs	r2, #0
 800f000:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800f002:	187a      	adds	r2, r7, r1
 800f004:	4b4a      	ldr	r3, [pc, #296]	@ (800f130 <TIM_1_Init+0x1ac>)
 800f006:	0011      	movs	r1, r2
 800f008:	0018      	movs	r0, r3
 800f00a:	f7f5 fc0b 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 800f00e:	1e03      	subs	r3, r0, #0
 800f010:	d001      	beq.n	800f016 <TIM_1_Init+0x92>
  {
    Error_Handler();
 800f012:	f7ff fd87 	bl	800eb24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f016:	2124      	movs	r1, #36	@ 0x24
 800f018:	187b      	adds	r3, r7, r1
 800f01a:	2260      	movs	r2, #96	@ 0x60
 800f01c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 800f01e:	187b      	adds	r3, r7, r1
 800f020:	2232      	movs	r2, #50	@ 0x32
 800f022:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f024:	187b      	adds	r3, r7, r1
 800f026:	2200      	movs	r2, #0
 800f028:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f02a:	187b      	adds	r3, r7, r1
 800f02c:	2200      	movs	r2, #0
 800f02e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f030:	187b      	adds	r3, r7, r1
 800f032:	2200      	movs	r2, #0
 800f034:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f036:	187b      	adds	r3, r7, r1
 800f038:	2200      	movs	r2, #0
 800f03a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f03c:	187b      	adds	r3, r7, r1
 800f03e:	2200      	movs	r2, #0
 800f040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f042:	1879      	adds	r1, r7, r1
 800f044:	4b3a      	ldr	r3, [pc, #232]	@ (800f130 <TIM_1_Init+0x1ac>)
 800f046:	2200      	movs	r2, #0
 800f048:	0018      	movs	r0, r3
 800f04a:	f7f5 f867 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800f04e:	1e03      	subs	r3, r0, #0
 800f050:	d001      	beq.n	800f056 <TIM_1_Init+0xd2>
  {
    Error_Handler();
 800f052:	f7ff fd67 	bl	800eb24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f056:	2324      	movs	r3, #36	@ 0x24
 800f058:	18f9      	adds	r1, r7, r3
 800f05a:	4b35      	ldr	r3, [pc, #212]	@ (800f130 <TIM_1_Init+0x1ac>)
 800f05c:	2204      	movs	r2, #4
 800f05e:	0018      	movs	r0, r3
 800f060:	f7f5 f85c 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800f064:	1e03      	subs	r3, r0, #0
 800f066:	d001      	beq.n	800f06c <TIM_1_Init+0xe8>
  {
    Error_Handler();
 800f068:	f7ff fd5c 	bl	800eb24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f06c:	2324      	movs	r3, #36	@ 0x24
 800f06e:	18f9      	adds	r1, r7, r3
 800f070:	4b2f      	ldr	r3, [pc, #188]	@ (800f130 <TIM_1_Init+0x1ac>)
 800f072:	2208      	movs	r2, #8
 800f074:	0018      	movs	r0, r3
 800f076:	f7f5 f851 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800f07a:	1e03      	subs	r3, r0, #0
 800f07c:	d001      	beq.n	800f082 <TIM_1_Init+0xfe>
  {
    Error_Handler();
 800f07e:	f7ff fd51 	bl	800eb24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f082:	2324      	movs	r3, #36	@ 0x24
 800f084:	18f9      	adds	r1, r7, r3
 800f086:	4b2a      	ldr	r3, [pc, #168]	@ (800f130 <TIM_1_Init+0x1ac>)
 800f088:	220c      	movs	r2, #12
 800f08a:	0018      	movs	r0, r3
 800f08c:	f7f5 f846 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800f090:	1e03      	subs	r3, r0, #0
 800f092:	d001      	beq.n	800f098 <TIM_1_Init+0x114>
  {
    Error_Handler();
 800f094:	f7ff fd46 	bl	800eb24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f098:	1d3b      	adds	r3, r7, #4
 800f09a:	2200      	movs	r2, #0
 800f09c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f09e:	1d3b      	adds	r3, r7, #4
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f0a4:	1d3b      	adds	r3, r7, #4
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f0aa:	1d3b      	adds	r3, r7, #4
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f0b0:	1d3b      	adds	r3, r7, #4
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f0b6:	1d3b      	adds	r3, r7, #4
 800f0b8:	2280      	movs	r2, #128	@ 0x80
 800f0ba:	0192      	lsls	r2, r2, #6
 800f0bc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f0be:	1d3b      	adds	r3, r7, #4
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800f0c4:	1d3a      	adds	r2, r7, #4
 800f0c6:	4b1a      	ldr	r3, [pc, #104]	@ (800f130 <TIM_1_Init+0x1ac>)
 800f0c8:	0011      	movs	r1, r2
 800f0ca:	0018      	movs	r0, r3
 800f0cc:	f7f5 fc02 	bl	80048d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800f0d0:	1e03      	subs	r3, r0, #0
 800f0d2:	d001      	beq.n	800f0d8 <TIM_1_Init+0x154>
  {
    Error_Handler();
 800f0d4:	f7ff fd26 	bl	800eb24 <Error_Handler>
  }

	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 800f0d8:	4b15      	ldr	r3, [pc, #84]	@ (800f130 <TIM_1_Init+0x1ac>)
 800f0da:	2100      	movs	r1, #0
 800f0dc:	0018      	movs	r0, r3
 800f0de:	f7f4 fc97 	bl	8003a10 <HAL_TIM_PWM_Start>
 800f0e2:	1e03      	subs	r3, r0, #0
 800f0e4:	d001      	beq.n	800f0ea <TIM_1_Init+0x166>
  {
    Error_Handler();
 800f0e6:	f7ff fd1d 	bl	800eb24 <Error_Handler>
  }
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 800f0ea:	4b11      	ldr	r3, [pc, #68]	@ (800f130 <TIM_1_Init+0x1ac>)
 800f0ec:	2104      	movs	r1, #4
 800f0ee:	0018      	movs	r0, r3
 800f0f0:	f7f4 fc8e 	bl	8003a10 <HAL_TIM_PWM_Start>
 800f0f4:	1e03      	subs	r3, r0, #0
 800f0f6:	d001      	beq.n	800f0fc <TIM_1_Init+0x178>
  {
    Error_Handler();
 800f0f8:	f7ff fd14 	bl	800eb24 <Error_Handler>
  }
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3) != HAL_OK)
 800f0fc:	4b0c      	ldr	r3, [pc, #48]	@ (800f130 <TIM_1_Init+0x1ac>)
 800f0fe:	2108      	movs	r1, #8
 800f100:	0018      	movs	r0, r3
 800f102:	f7f4 fc85 	bl	8003a10 <HAL_TIM_PWM_Start>
 800f106:	1e03      	subs	r3, r0, #0
 800f108:	d001      	beq.n	800f10e <TIM_1_Init+0x18a>
  {
    Error_Handler();
 800f10a:	f7ff fd0b 	bl	800eb24 <Error_Handler>
  }
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 800f10e:	4b08      	ldr	r3, [pc, #32]	@ (800f130 <TIM_1_Init+0x1ac>)
 800f110:	210c      	movs	r1, #12
 800f112:	0018      	movs	r0, r3
 800f114:	f7f4 fc7c 	bl	8003a10 <HAL_TIM_PWM_Start>
 800f118:	1e03      	subs	r3, r0, #0
 800f11a:	d001      	beq.n	800f120 <TIM_1_Init+0x19c>
  {
    Error_Handler();
 800f11c:	f7ff fd02 	bl	800eb24 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 800f120:	4b03      	ldr	r3, [pc, #12]	@ (800f130 <TIM_1_Init+0x1ac>)
 800f122:	0018      	movs	r0, r3
 800f124:	f7ff fdf8 	bl	800ed18 <HAL_TIM_MspPostInit>
}
 800f128:	46c0      	nop			@ (mov r8, r8)
 800f12a:	46bd      	mov	sp, r7
 800f12c:	b012      	add	sp, #72	@ 0x48
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	20000638 	.word	0x20000638
 800f134:	40012c00 	.word	0x40012c00
 800f138:	000009c4 	.word	0x000009c4

0800f13c <TIM_3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void TIM_3_Init(void)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b08a      	sub	sp, #40	@ 0x28
 800f140:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f142:	2320      	movs	r3, #32
 800f144:	18fb      	adds	r3, r7, r3
 800f146:	0018      	movs	r0, r3
 800f148:	2308      	movs	r3, #8
 800f14a:	001a      	movs	r2, r3
 800f14c:	2100      	movs	r1, #0
 800f14e:	f000 fd80 	bl	800fc52 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f152:	1d3b      	adds	r3, r7, #4
 800f154:	0018      	movs	r0, r3
 800f156:	231c      	movs	r3, #28
 800f158:	001a      	movs	r2, r3
 800f15a:	2100      	movs	r1, #0
 800f15c:	f000 fd79 	bl	800fc52 <memset>

  htim3.Instance = TIM3;
 800f160:	4b45      	ldr	r3, [pc, #276]	@ (800f278 <TIM_3_Init+0x13c>)
 800f162:	4a46      	ldr	r2, [pc, #280]	@ (800f27c <TIM_3_Init+0x140>)
 800f164:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 800f166:	4b44      	ldr	r3, [pc, #272]	@ (800f278 <TIM_3_Init+0x13c>)
 800f168:	2230      	movs	r2, #48	@ 0x30
 800f16a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f16c:	4b42      	ldr	r3, [pc, #264]	@ (800f278 <TIM_3_Init+0x13c>)
 800f16e:	2200      	movs	r2, #0
 800f170:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250;
 800f172:	4b41      	ldr	r3, [pc, #260]	@ (800f278 <TIM_3_Init+0x13c>)
 800f174:	22fa      	movs	r2, #250	@ 0xfa
 800f176:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;//TIM_CLOCKDIVISION_DIV1;
 800f178:	4b3f      	ldr	r3, [pc, #252]	@ (800f278 <TIM_3_Init+0x13c>)
 800f17a:	2280      	movs	r2, #128	@ 0x80
 800f17c:	0092      	lsls	r2, r2, #2
 800f17e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f180:	4b3d      	ldr	r3, [pc, #244]	@ (800f278 <TIM_3_Init+0x13c>)
 800f182:	2200      	movs	r2, #0
 800f184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800f186:	4b3c      	ldr	r3, [pc, #240]	@ (800f278 <TIM_3_Init+0x13c>)
 800f188:	0018      	movs	r0, r3
 800f18a:	f7f4 fbf1 	bl	8003970 <HAL_TIM_PWM_Init>
 800f18e:	1e03      	subs	r3, r0, #0
 800f190:	d001      	beq.n	800f196 <TIM_3_Init+0x5a>
  {
    Error_Handler();
 800f192:	f7ff fcc7 	bl	800eb24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f196:	2120      	movs	r1, #32
 800f198:	187b      	adds	r3, r7, r1
 800f19a:	2200      	movs	r2, #0
 800f19c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f19e:	187b      	adds	r3, r7, r1
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800f1a4:	187a      	adds	r2, r7, r1
 800f1a6:	4b34      	ldr	r3, [pc, #208]	@ (800f278 <TIM_3_Init+0x13c>)
 800f1a8:	0011      	movs	r1, r2
 800f1aa:	0018      	movs	r0, r3
 800f1ac:	f7f5 fb3a 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 800f1b0:	1e03      	subs	r3, r0, #0
 800f1b2:	d001      	beq.n	800f1b8 <TIM_3_Init+0x7c>
  {
    Error_Handler();
 800f1b4:	f7ff fcb6 	bl	800eb24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f1b8:	1d3b      	adds	r3, r7, #4
 800f1ba:	2260      	movs	r2, #96	@ 0x60
 800f1bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800f1be:	1d3b      	adds	r3, r7, #4
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f1c4:	1d3b      	adds	r3, r7, #4
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f1ca:	1d3b      	adds	r3, r7, #4
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f1d0:	1d39      	adds	r1, r7, #4
 800f1d2:	4b29      	ldr	r3, [pc, #164]	@ (800f278 <TIM_3_Init+0x13c>)
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	0018      	movs	r0, r3
 800f1d8:	f7f4 ffa0 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800f1dc:	1e03      	subs	r3, r0, #0
 800f1de:	d001      	beq.n	800f1e4 <TIM_3_Init+0xa8>
  {
    Error_Handler();
 800f1e0:	f7ff fca0 	bl	800eb24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f1e4:	1d39      	adds	r1, r7, #4
 800f1e6:	4b24      	ldr	r3, [pc, #144]	@ (800f278 <TIM_3_Init+0x13c>)
 800f1e8:	2204      	movs	r2, #4
 800f1ea:	0018      	movs	r0, r3
 800f1ec:	f7f4 ff96 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800f1f0:	1e03      	subs	r3, r0, #0
 800f1f2:	d001      	beq.n	800f1f8 <TIM_3_Init+0xbc>
  {
    Error_Handler();
 800f1f4:	f7ff fc96 	bl	800eb24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f1f8:	1d39      	adds	r1, r7, #4
 800f1fa:	4b1f      	ldr	r3, [pc, #124]	@ (800f278 <TIM_3_Init+0x13c>)
 800f1fc:	2208      	movs	r2, #8
 800f1fe:	0018      	movs	r0, r3
 800f200:	f7f4 ff8c 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800f204:	1e03      	subs	r3, r0, #0
 800f206:	d001      	beq.n	800f20c <TIM_3_Init+0xd0>
  {
    Error_Handler();
 800f208:	f7ff fc8c 	bl	800eb24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f20c:	1d39      	adds	r1, r7, #4
 800f20e:	4b1a      	ldr	r3, [pc, #104]	@ (800f278 <TIM_3_Init+0x13c>)
 800f210:	220c      	movs	r2, #12
 800f212:	0018      	movs	r0, r3
 800f214:	f7f4 ff82 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800f218:	1e03      	subs	r3, r0, #0
 800f21a:	d001      	beq.n	800f220 <TIM_3_Init+0xe4>
  {
    Error_Handler();
 800f21c:	f7ff fc82 	bl	800eb24 <Error_Handler>
  }

	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 800f220:	4b15      	ldr	r3, [pc, #84]	@ (800f278 <TIM_3_Init+0x13c>)
 800f222:	2100      	movs	r1, #0
 800f224:	0018      	movs	r0, r3
 800f226:	f7f4 fbf3 	bl	8003a10 <HAL_TIM_PWM_Start>
 800f22a:	1e03      	subs	r3, r0, #0
 800f22c:	d001      	beq.n	800f232 <TIM_3_Init+0xf6>
  {
    Error_Handler();
 800f22e:	f7ff fc79 	bl	800eb24 <Error_Handler>
  }
	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK)
 800f232:	4b11      	ldr	r3, [pc, #68]	@ (800f278 <TIM_3_Init+0x13c>)
 800f234:	2104      	movs	r1, #4
 800f236:	0018      	movs	r0, r3
 800f238:	f7f4 fbea 	bl	8003a10 <HAL_TIM_PWM_Start>
 800f23c:	1e03      	subs	r3, r0, #0
 800f23e:	d001      	beq.n	800f244 <TIM_3_Init+0x108>
  {
    Error_Handler();
 800f240:	f7ff fc70 	bl	800eb24 <Error_Handler>
  }
	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK)
 800f244:	4b0c      	ldr	r3, [pc, #48]	@ (800f278 <TIM_3_Init+0x13c>)
 800f246:	2108      	movs	r1, #8
 800f248:	0018      	movs	r0, r3
 800f24a:	f7f4 fbe1 	bl	8003a10 <HAL_TIM_PWM_Start>
 800f24e:	1e03      	subs	r3, r0, #0
 800f250:	d001      	beq.n	800f256 <TIM_3_Init+0x11a>
  {
    Error_Handler();
 800f252:	f7ff fc67 	bl	800eb24 <Error_Handler>
  }
	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK)
 800f256:	4b08      	ldr	r3, [pc, #32]	@ (800f278 <TIM_3_Init+0x13c>)
 800f258:	210c      	movs	r1, #12
 800f25a:	0018      	movs	r0, r3
 800f25c:	f7f4 fbd8 	bl	8003a10 <HAL_TIM_PWM_Start>
 800f260:	1e03      	subs	r3, r0, #0
 800f262:	d001      	beq.n	800f268 <TIM_3_Init+0x12c>
  {
    Error_Handler();
 800f264:	f7ff fc5e 	bl	800eb24 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 800f268:	4b03      	ldr	r3, [pc, #12]	@ (800f278 <TIM_3_Init+0x13c>)
 800f26a:	0018      	movs	r0, r3
 800f26c:	f7ff fd54 	bl	800ed18 <HAL_TIM_MspPostInit>
}
 800f270:	46c0      	nop			@ (mov r8, r8)
 800f272:	46bd      	mov	sp, r7
 800f274:	b00a      	add	sp, #40	@ 0x28
 800f276:	bd80      	pop	{r7, pc}
 800f278:	20000680 	.word	0x20000680
 800f27c:	40000400 	.word	0x40000400

0800f280 <TIM_6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void TIM_6_Init(void)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(TIM6_IRQn, 1, 1);
 800f284:	2201      	movs	r2, #1
 800f286:	2101      	movs	r1, #1
 800f288:	2011      	movs	r0, #17
 800f28a:	f7f3 f993 	bl	80025b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800f28e:	2011      	movs	r0, #17
 800f290:	f7f3 f9a5 	bl	80025de <HAL_NVIC_EnableIRQ>

  htim6.Instance = TIM6;
 800f294:	4b12      	ldr	r3, [pc, #72]	@ (800f2e0 <TIM_6_Init+0x60>)
 800f296:	4a13      	ldr	r2, [pc, #76]	@ (800f2e4 <TIM_6_Init+0x64>)
 800f298:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 480; // 100;
 800f29a:	4b11      	ldr	r3, [pc, #68]	@ (800f2e0 <TIM_6_Init+0x60>)
 800f29c:	22f0      	movs	r2, #240	@ 0xf0
 800f29e:	0052      	lsls	r2, r2, #1
 800f2a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f2a2:	4b0f      	ldr	r3, [pc, #60]	@ (800f2e0 <TIM_6_Init+0x60>)
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;//
 800f2a8:	4b0d      	ldr	r3, [pc, #52]	@ (800f2e0 <TIM_6_Init+0x60>)
 800f2aa:	2264      	movs	r2, #100	@ 0x64
 800f2ac:	60da      	str	r2, [r3, #12]
  htim6.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f2ae:	4b0c      	ldr	r3, [pc, #48]	@ (800f2e0 <TIM_6_Init+0x60>)
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	611a      	str	r2, [r3, #16]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f2b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f2e0 <TIM_6_Init+0x60>)
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK){
 800f2ba:	4b09      	ldr	r3, [pc, #36]	@ (800f2e0 <TIM_6_Init+0x60>)
 800f2bc:	0018      	movs	r0, r3
 800f2be:	f7f4 fabb 	bl	8003838 <HAL_TIM_Base_Init>
 800f2c2:	1e03      	subs	r3, r0, #0
 800f2c4:	d001      	beq.n	800f2ca <TIM_6_Init+0x4a>
    Error_Handler();
 800f2c6:	f7ff fc2d 	bl	800eb24 <Error_Handler>
  }

  if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK){
 800f2ca:	4b05      	ldr	r3, [pc, #20]	@ (800f2e0 <TIM_6_Init+0x60>)
 800f2cc:	0018      	movs	r0, r3
 800f2ce:	f7f4 fb03 	bl	80038d8 <HAL_TIM_Base_Start_IT>
 800f2d2:	1e03      	subs	r3, r0, #0
 800f2d4:	d001      	beq.n	800f2da <TIM_6_Init+0x5a>
    Error_Handler();
 800f2d6:	f7ff fc25 	bl	800eb24 <Error_Handler>
  }

}
 800f2da:	46c0      	nop			@ (mov r8, r8)
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	200006c8 	.word	0x200006c8
 800f2e4:	40001000 	.word	0x40001000

0800f2e8 <TIM_14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
void TIM_14_Init(void)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b088      	sub	sp, #32
 800f2ec:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f2ee:	1d3b      	adds	r3, r7, #4
 800f2f0:	0018      	movs	r0, r3
 800f2f2:	231c      	movs	r3, #28
 800f2f4:	001a      	movs	r2, r3
 800f2f6:	2100      	movs	r1, #0
 800f2f8:	f000 fcab 	bl	800fc52 <memset>

  htim14.Instance = TIM14;
 800f2fc:	4b24      	ldr	r3, [pc, #144]	@ (800f390 <TIM_14_Init+0xa8>)
 800f2fe:	4a25      	ldr	r2, [pc, #148]	@ (800f394 <TIM_14_Init+0xac>)
 800f300:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48;
 800f302:	4b23      	ldr	r3, [pc, #140]	@ (800f390 <TIM_14_Init+0xa8>)
 800f304:	2230      	movs	r2, #48	@ 0x30
 800f306:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f308:	4b21      	ldr	r3, [pc, #132]	@ (800f390 <TIM_14_Init+0xa8>)
 800f30a:	2200      	movs	r2, #0
 800f30c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 800f30e:	4b20      	ldr	r3, [pc, #128]	@ (800f390 <TIM_14_Init+0xa8>)
 800f310:	2264      	movs	r2, #100	@ 0x64
 800f312:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;//TIM_CLOCKDIVISION_DIV1;
 800f314:	4b1e      	ldr	r3, [pc, #120]	@ (800f390 <TIM_14_Init+0xa8>)
 800f316:	2280      	movs	r2, #128	@ 0x80
 800f318:	0092      	lsls	r2, r2, #2
 800f31a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f31c:	4b1c      	ldr	r3, [pc, #112]	@ (800f390 <TIM_14_Init+0xa8>)
 800f31e:	2200      	movs	r2, #0
 800f320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800f322:	4b1b      	ldr	r3, [pc, #108]	@ (800f390 <TIM_14_Init+0xa8>)
 800f324:	0018      	movs	r0, r3
 800f326:	f7f4 fa87 	bl	8003838 <HAL_TIM_Base_Init>
 800f32a:	1e03      	subs	r3, r0, #0
 800f32c:	d001      	beq.n	800f332 <TIM_14_Init+0x4a>
  {
    Error_Handler();
 800f32e:	f7ff fbf9 	bl	800eb24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800f332:	4b17      	ldr	r3, [pc, #92]	@ (800f390 <TIM_14_Init+0xa8>)
 800f334:	0018      	movs	r0, r3
 800f336:	f7f4 fb1b 	bl	8003970 <HAL_TIM_PWM_Init>
 800f33a:	1e03      	subs	r3, r0, #0
 800f33c:	d001      	beq.n	800f342 <TIM_14_Init+0x5a>
  {
    Error_Handler();
 800f33e:	f7ff fbf1 	bl	800eb24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f342:	1d3b      	adds	r3, r7, #4
 800f344:	2260      	movs	r2, #96	@ 0x60
 800f346:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800f348:	1d3b      	adds	r3, r7, #4
 800f34a:	2200      	movs	r2, #0
 800f34c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f34e:	1d3b      	adds	r3, r7, #4
 800f350:	2200      	movs	r2, #0
 800f352:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f354:	1d3b      	adds	r3, r7, #4
 800f356:	2200      	movs	r2, #0
 800f358:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f35a:	1d39      	adds	r1, r7, #4
 800f35c:	4b0c      	ldr	r3, [pc, #48]	@ (800f390 <TIM_14_Init+0xa8>)
 800f35e:	2200      	movs	r2, #0
 800f360:	0018      	movs	r0, r3
 800f362:	f7f4 fedb 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800f366:	1e03      	subs	r3, r0, #0
 800f368:	d001      	beq.n	800f36e <TIM_14_Init+0x86>
  {
    Error_Handler();
 800f36a:	f7ff fbdb 	bl	800eb24 <Error_Handler>
  }

	if (HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1) != HAL_OK)
 800f36e:	4b08      	ldr	r3, [pc, #32]	@ (800f390 <TIM_14_Init+0xa8>)
 800f370:	2100      	movs	r1, #0
 800f372:	0018      	movs	r0, r3
 800f374:	f7f4 fb4c 	bl	8003a10 <HAL_TIM_PWM_Start>
 800f378:	1e03      	subs	r3, r0, #0
 800f37a:	d001      	beq.n	800f380 <TIM_14_Init+0x98>
  {
    Error_Handler();
 800f37c:	f7ff fbd2 	bl	800eb24 <Error_Handler>
  }


  HAL_TIM_MspPostInit(&htim14);
 800f380:	4b03      	ldr	r3, [pc, #12]	@ (800f390 <TIM_14_Init+0xa8>)
 800f382:	0018      	movs	r0, r3
 800f384:	f7ff fcc8 	bl	800ed18 <HAL_TIM_MspPostInit>
}
 800f388:	46c0      	nop			@ (mov r8, r8)
 800f38a:	46bd      	mov	sp, r7
 800f38c:	b008      	add	sp, #32
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	20000710 	.word	0x20000710
 800f394:	40002000 	.word	0x40002000

0800f398 <TIM_15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
void TIM_15_Init(void)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b092      	sub	sp, #72	@ 0x48
 800f39c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f39e:	2340      	movs	r3, #64	@ 0x40
 800f3a0:	18fb      	adds	r3, r7, r3
 800f3a2:	0018      	movs	r0, r3
 800f3a4:	2308      	movs	r3, #8
 800f3a6:	001a      	movs	r2, r3
 800f3a8:	2100      	movs	r1, #0
 800f3aa:	f000 fc52 	bl	800fc52 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f3ae:	2324      	movs	r3, #36	@ 0x24
 800f3b0:	18fb      	adds	r3, r7, r3
 800f3b2:	0018      	movs	r0, r3
 800f3b4:	231c      	movs	r3, #28
 800f3b6:	001a      	movs	r2, r3
 800f3b8:	2100      	movs	r1, #0
 800f3ba:	f000 fc4a 	bl	800fc52 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f3be:	1d3b      	adds	r3, r7, #4
 800f3c0:	0018      	movs	r0, r3
 800f3c2:	2320      	movs	r3, #32
 800f3c4:	001a      	movs	r2, r3
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	f000 fc43 	bl	800fc52 <memset>

  htim15.Instance = TIM15;
 800f3cc:	4b3a      	ldr	r3, [pc, #232]	@ (800f4b8 <TIM_15_Init+0x120>)
 800f3ce:	4a3b      	ldr	r2, [pc, #236]	@ (800f4bc <TIM_15_Init+0x124>)
 800f3d0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = TIM_MOTOR_PRESCALER;
 800f3d2:	4b39      	ldr	r3, [pc, #228]	@ (800f4b8 <TIM_15_Init+0x120>)
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f3d8:	4b37      	ldr	r3, [pc, #220]	@ (800f4b8 <TIM_15_Init+0x120>)
 800f3da:	2200      	movs	r2, #0
 800f3dc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = TIM_MOTOR_PERIOD;
 800f3de:	4b36      	ldr	r3, [pc, #216]	@ (800f4b8 <TIM_15_Init+0x120>)
 800f3e0:	4a37      	ldr	r2, [pc, #220]	@ (800f4c0 <TIM_15_Init+0x128>)
 800f3e2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f3e4:	4b34      	ldr	r3, [pc, #208]	@ (800f4b8 <TIM_15_Init+0x120>)
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800f3ea:	4b33      	ldr	r3, [pc, #204]	@ (800f4b8 <TIM_15_Init+0x120>)
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f3f0:	4b31      	ldr	r3, [pc, #196]	@ (800f4b8 <TIM_15_Init+0x120>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800f3f6:	4b30      	ldr	r3, [pc, #192]	@ (800f4b8 <TIM_15_Init+0x120>)
 800f3f8:	0018      	movs	r0, r3
 800f3fa:	f7f4 fab9 	bl	8003970 <HAL_TIM_PWM_Init>
 800f3fe:	1e03      	subs	r3, r0, #0
 800f400:	d001      	beq.n	800f406 <TIM_15_Init+0x6e>
  {
    Error_Handler();
 800f402:	f7ff fb8f 	bl	800eb24 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f406:	2140      	movs	r1, #64	@ 0x40
 800f408:	187b      	adds	r3, r7, r1
 800f40a:	2200      	movs	r2, #0
 800f40c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f40e:	187b      	adds	r3, r7, r1
 800f410:	2200      	movs	r2, #0
 800f412:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800f414:	187a      	adds	r2, r7, r1
 800f416:	4b28      	ldr	r3, [pc, #160]	@ (800f4b8 <TIM_15_Init+0x120>)
 800f418:	0011      	movs	r1, r2
 800f41a:	0018      	movs	r0, r3
 800f41c:	f7f5 fa02 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 800f420:	1e03      	subs	r3, r0, #0
 800f422:	d001      	beq.n	800f428 <TIM_15_Init+0x90>
  {
    Error_Handler();
 800f424:	f7ff fb7e 	bl	800eb24 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f428:	2124      	movs	r1, #36	@ 0x24
 800f42a:	187b      	adds	r3, r7, r1
 800f42c:	2260      	movs	r2, #96	@ 0x60
 800f42e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = TIM_MOTOR_PULSE;
 800f430:	187b      	adds	r3, r7, r1
 800f432:	4a24      	ldr	r2, [pc, #144]	@ (800f4c4 <TIM_15_Init+0x12c>)
 800f434:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f436:	187b      	adds	r3, r7, r1
 800f438:	2200      	movs	r2, #0
 800f43a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f43c:	187b      	adds	r3, r7, r1
 800f43e:	2200      	movs	r2, #0
 800f440:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f442:	187b      	adds	r3, r7, r1
 800f444:	2200      	movs	r2, #0
 800f446:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f448:	187b      	adds	r3, r7, r1
 800f44a:	2200      	movs	r2, #0
 800f44c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f44e:	187b      	adds	r3, r7, r1
 800f450:	2200      	movs	r2, #0
 800f452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f454:	1879      	adds	r1, r7, r1
 800f456:	4b18      	ldr	r3, [pc, #96]	@ (800f4b8 <TIM_15_Init+0x120>)
 800f458:	2200      	movs	r2, #0
 800f45a:	0018      	movs	r0, r3
 800f45c:	f7f4 fe5e 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800f460:	1e03      	subs	r3, r0, #0
 800f462:	d001      	beq.n	800f468 <TIM_15_Init+0xd0>
  {
    Error_Handler();
 800f464:	f7ff fb5e 	bl	800eb24 <Error_Handler>
  }
//  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
//  {
//    Error_Handler();
//  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f468:	1d3b      	adds	r3, r7, #4
 800f46a:	2200      	movs	r2, #0
 800f46c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f46e:	1d3b      	adds	r3, r7, #4
 800f470:	2200      	movs	r2, #0
 800f472:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f474:	1d3b      	adds	r3, r7, #4
 800f476:	2200      	movs	r2, #0
 800f478:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f47a:	1d3b      	adds	r3, r7, #4
 800f47c:	2200      	movs	r2, #0
 800f47e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f480:	1d3b      	adds	r3, r7, #4
 800f482:	2200      	movs	r2, #0
 800f484:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f486:	1d3b      	adds	r3, r7, #4
 800f488:	2280      	movs	r2, #128	@ 0x80
 800f48a:	0192      	lsls	r2, r2, #6
 800f48c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f48e:	1d3b      	adds	r3, r7, #4
 800f490:	2200      	movs	r2, #0
 800f492:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800f494:	1d3a      	adds	r2, r7, #4
 800f496:	4b08      	ldr	r3, [pc, #32]	@ (800f4b8 <TIM_15_Init+0x120>)
 800f498:	0011      	movs	r1, r2
 800f49a:	0018      	movs	r0, r3
 800f49c:	f7f5 fa1a 	bl	80048d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800f4a0:	1e03      	subs	r3, r0, #0
 800f4a2:	d001      	beq.n	800f4a8 <TIM_15_Init+0x110>
  {
    Error_Handler();
 800f4a4:	f7ff fb3e 	bl	800eb24 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim15);
 800f4a8:	4b03      	ldr	r3, [pc, #12]	@ (800f4b8 <TIM_15_Init+0x120>)
 800f4aa:	0018      	movs	r0, r3
 800f4ac:	f7ff fc34 	bl	800ed18 <HAL_TIM_MspPostInit>
//  if (HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2) != HAL_OK)
//  {
//    Error_Handler();
//  }

}
 800f4b0:	46c0      	nop			@ (mov r8, r8)
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	b012      	add	sp, #72	@ 0x48
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	20000758 	.word	0x20000758
 800f4bc:	40014000 	.word	0x40014000
 800f4c0:	00004e20 	.word	0x00004e20
 800f4c4:	00002710 	.word	0x00002710

0800f4c8 <TIM_16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
void TIM_16_Init(void)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b092      	sub	sp, #72	@ 0x48
 800f4cc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f4ce:	2340      	movs	r3, #64	@ 0x40
 800f4d0:	18fb      	adds	r3, r7, r3
 800f4d2:	0018      	movs	r0, r3
 800f4d4:	2308      	movs	r3, #8
 800f4d6:	001a      	movs	r2, r3
 800f4d8:	2100      	movs	r1, #0
 800f4da:	f000 fbba 	bl	800fc52 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f4de:	2324      	movs	r3, #36	@ 0x24
 800f4e0:	18fb      	adds	r3, r7, r3
 800f4e2:	0018      	movs	r0, r3
 800f4e4:	231c      	movs	r3, #28
 800f4e6:	001a      	movs	r2, r3
 800f4e8:	2100      	movs	r1, #0
 800f4ea:	f000 fbb2 	bl	800fc52 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f4ee:	1d3b      	adds	r3, r7, #4
 800f4f0:	0018      	movs	r0, r3
 800f4f2:	2320      	movs	r3, #32
 800f4f4:	001a      	movs	r2, r3
 800f4f6:	2100      	movs	r1, #0
 800f4f8:	f000 fbab 	bl	800fc52 <memset>

  htim16.Instance = TIM16;
 800f4fc:	4b3a      	ldr	r3, [pc, #232]	@ (800f5e8 <TIM_16_Init+0x120>)
 800f4fe:	4a3b      	ldr	r2, [pc, #236]	@ (800f5ec <TIM_16_Init+0x124>)
 800f500:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = TIM_MOTOR_PRESCALER;//48;
 800f502:	4b39      	ldr	r3, [pc, #228]	@ (800f5e8 <TIM_16_Init+0x120>)
 800f504:	2201      	movs	r2, #1
 800f506:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f508:	4b37      	ldr	r3, [pc, #220]	@ (800f5e8 <TIM_16_Init+0x120>)
 800f50a:	2200      	movs	r2, #0
 800f50c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIM_MOTOR_PERIOD;
 800f50e:	4b36      	ldr	r3, [pc, #216]	@ (800f5e8 <TIM_16_Init+0x120>)
 800f510:	4a37      	ldr	r2, [pc, #220]	@ (800f5f0 <TIM_16_Init+0x128>)
 800f512:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;//TIM_CLOCKDIVISION_DIV1;
 800f514:	4b34      	ldr	r3, [pc, #208]	@ (800f5e8 <TIM_16_Init+0x120>)
 800f516:	2200      	movs	r2, #0
 800f518:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800f51a:	4b33      	ldr	r3, [pc, #204]	@ (800f5e8 <TIM_16_Init+0x120>)
 800f51c:	2200      	movs	r2, #0
 800f51e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f520:	4b31      	ldr	r3, [pc, #196]	@ (800f5e8 <TIM_16_Init+0x120>)
 800f522:	2200      	movs	r2, #0
 800f524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800f526:	4b30      	ldr	r3, [pc, #192]	@ (800f5e8 <TIM_16_Init+0x120>)
 800f528:	0018      	movs	r0, r3
 800f52a:	f7f4 fa21 	bl	8003970 <HAL_TIM_PWM_Init>
 800f52e:	1e03      	subs	r3, r0, #0
 800f530:	d001      	beq.n	800f536 <TIM_16_Init+0x6e>
  {
	Error_Handler();
 800f532:	f7ff faf7 	bl	800eb24 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f536:	2140      	movs	r1, #64	@ 0x40
 800f538:	187b      	adds	r3, r7, r1
 800f53a:	2200      	movs	r2, #0
 800f53c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f53e:	187b      	adds	r3, r7, r1
 800f540:	2200      	movs	r2, #0
 800f542:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim16, &sMasterConfig) != HAL_OK)
 800f544:	187a      	adds	r2, r7, r1
 800f546:	4b28      	ldr	r3, [pc, #160]	@ (800f5e8 <TIM_16_Init+0x120>)
 800f548:	0011      	movs	r1, r2
 800f54a:	0018      	movs	r0, r3
 800f54c:	f7f5 f96a 	bl	8004824 <HAL_TIMEx_MasterConfigSynchronization>
 800f550:	1e03      	subs	r3, r0, #0
 800f552:	d001      	beq.n	800f558 <TIM_16_Init+0x90>
  {
    Error_Handler();
 800f554:	f7ff fae6 	bl	800eb24 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f558:	2124      	movs	r1, #36	@ 0x24
 800f55a:	187b      	adds	r3, r7, r1
 800f55c:	2260      	movs	r2, #96	@ 0x60
 800f55e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = TIM_MOTOR_PULSE;
 800f560:	187b      	adds	r3, r7, r1
 800f562:	4a24      	ldr	r2, [pc, #144]	@ (800f5f4 <TIM_16_Init+0x12c>)
 800f564:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f566:	187b      	adds	r3, r7, r1
 800f568:	2200      	movs	r2, #0
 800f56a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f56c:	187b      	adds	r3, r7, r1
 800f56e:	2200      	movs	r2, #0
 800f570:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f572:	187b      	adds	r3, r7, r1
 800f574:	2200      	movs	r2, #0
 800f576:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f578:	187b      	adds	r3, r7, r1
 800f57a:	2200      	movs	r2, #0
 800f57c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f57e:	187b      	adds	r3, r7, r1
 800f580:	2200      	movs	r2, #0
 800f582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f584:	1879      	adds	r1, r7, r1
 800f586:	4b18      	ldr	r3, [pc, #96]	@ (800f5e8 <TIM_16_Init+0x120>)
 800f588:	2200      	movs	r2, #0
 800f58a:	0018      	movs	r0, r3
 800f58c:	f7f4 fdc6 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800f590:	1e03      	subs	r3, r0, #0
 800f592:	d001      	beq.n	800f598 <TIM_16_Init+0xd0>
  {
    Error_Handler();
 800f594:	f7ff fac6 	bl	800eb24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f598:	1d3b      	adds	r3, r7, #4
 800f59a:	2200      	movs	r2, #0
 800f59c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f59e:	1d3b      	adds	r3, r7, #4
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f5a4:	1d3b      	adds	r3, r7, #4
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f5aa:	1d3b      	adds	r3, r7, #4
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f5b0:	1d3b      	adds	r3, r7, #4
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f5b6:	1d3b      	adds	r3, r7, #4
 800f5b8:	2280      	movs	r2, #128	@ 0x80
 800f5ba:	0192      	lsls	r2, r2, #6
 800f5bc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f5be:	1d3b      	adds	r3, r7, #4
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800f5c4:	1d3a      	adds	r2, r7, #4
 800f5c6:	4b08      	ldr	r3, [pc, #32]	@ (800f5e8 <TIM_16_Init+0x120>)
 800f5c8:	0011      	movs	r1, r2
 800f5ca:	0018      	movs	r0, r3
 800f5cc:	f7f5 f982 	bl	80048d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800f5d0:	1e03      	subs	r3, r0, #0
 800f5d2:	d001      	beq.n	800f5d8 <TIM_16_Init+0x110>
  {
    Error_Handler();
 800f5d4:	f7ff faa6 	bl	800eb24 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim16);
 800f5d8:	4b03      	ldr	r3, [pc, #12]	@ (800f5e8 <TIM_16_Init+0x120>)
 800f5da:	0018      	movs	r0, r3
 800f5dc:	f7ff fb9c 	bl	800ed18 <HAL_TIM_MspPostInit>

//  if (HAL_TIM_PWM_Start_IT(&htim16, TIM_CHANNEL_1) != HAL_OK)
//  {
//    Error_Handler();
//  }
}
 800f5e0:	46c0      	nop			@ (mov r8, r8)
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	b012      	add	sp, #72	@ 0x48
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	200007a0 	.word	0x200007a0
 800f5ec:	40014400 	.word	0x40014400
 800f5f0:	00004e20 	.word	0x00004e20
 800f5f4:	00002710 	.word	0x00002710

0800f5f8 <TIM_17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
void TIM_17_Init(void)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b090      	sub	sp, #64	@ 0x40
 800f5fc:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f5fe:	2324      	movs	r3, #36	@ 0x24
 800f600:	18fb      	adds	r3, r7, r3
 800f602:	0018      	movs	r0, r3
 800f604:	231c      	movs	r3, #28
 800f606:	001a      	movs	r2, r3
 800f608:	2100      	movs	r1, #0
 800f60a:	f000 fb22 	bl	800fc52 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f60e:	1d3b      	adds	r3, r7, #4
 800f610:	0018      	movs	r0, r3
 800f612:	2320      	movs	r3, #32
 800f614:	001a      	movs	r2, r3
 800f616:	2100      	movs	r1, #0
 800f618:	f000 fb1b 	bl	800fc52 <memset>

  htim17.Instance = TIM17;
 800f61c:	4b3a      	ldr	r3, [pc, #232]	@ (800f708 <TIM_17_Init+0x110>)
 800f61e:	4a3b      	ldr	r2, [pc, #236]	@ (800f70c <TIM_17_Init+0x114>)
 800f620:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 24;//48;//48;
 800f622:	4b39      	ldr	r3, [pc, #228]	@ (800f708 <TIM_17_Init+0x110>)
 800f624:	2218      	movs	r2, #24
 800f626:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f628:	4b37      	ldr	r3, [pc, #220]	@ (800f708 <TIM_17_Init+0x110>)
 800f62a:	2200      	movs	r2, #0
 800f62c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 800f62e:	4b36      	ldr	r3, [pc, #216]	@ (800f708 <TIM_17_Init+0x110>)
 800f630:	2264      	movs	r2, #100	@ 0x64
 800f632:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;//TIM_CLOCKDIVISION_DIV1;
 800f634:	4b34      	ldr	r3, [pc, #208]	@ (800f708 <TIM_17_Init+0x110>)
 800f636:	2200      	movs	r2, #0
 800f638:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800f63a:	4b33      	ldr	r3, [pc, #204]	@ (800f708 <TIM_17_Init+0x110>)
 800f63c:	2200      	movs	r2, #0
 800f63e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f640:	4b31      	ldr	r3, [pc, #196]	@ (800f708 <TIM_17_Init+0x110>)
 800f642:	2200      	movs	r2, #0
 800f644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800f646:	4b30      	ldr	r3, [pc, #192]	@ (800f708 <TIM_17_Init+0x110>)
 800f648:	0018      	movs	r0, r3
 800f64a:	f7f4 f8f5 	bl	8003838 <HAL_TIM_Base_Init>
 800f64e:	1e03      	subs	r3, r0, #0
 800f650:	d001      	beq.n	800f656 <TIM_17_Init+0x5e>
  {
    Error_Handler();
 800f652:	f7ff fa67 	bl	800eb24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800f656:	4b2c      	ldr	r3, [pc, #176]	@ (800f708 <TIM_17_Init+0x110>)
 800f658:	0018      	movs	r0, r3
 800f65a:	f7f4 f989 	bl	8003970 <HAL_TIM_PWM_Init>
 800f65e:	1e03      	subs	r3, r0, #0
 800f660:	d001      	beq.n	800f666 <TIM_17_Init+0x6e>
  {
    Error_Handler();
 800f662:	f7ff fa5f 	bl	800eb24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f666:	2124      	movs	r1, #36	@ 0x24
 800f668:	187b      	adds	r3, r7, r1
 800f66a:	2260      	movs	r2, #96	@ 0x60
 800f66c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800f66e:	187b      	adds	r3, r7, r1
 800f670:	2200      	movs	r2, #0
 800f672:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f674:	187b      	adds	r3, r7, r1
 800f676:	2200      	movs	r2, #0
 800f678:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f67a:	187b      	adds	r3, r7, r1
 800f67c:	2200      	movs	r2, #0
 800f67e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f680:	187b      	adds	r3, r7, r1
 800f682:	2200      	movs	r2, #0
 800f684:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f686:	187b      	adds	r3, r7, r1
 800f688:	2200      	movs	r2, #0
 800f68a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f68c:	187b      	adds	r3, r7, r1
 800f68e:	2200      	movs	r2, #0
 800f690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f692:	1879      	adds	r1, r7, r1
 800f694:	4b1c      	ldr	r3, [pc, #112]	@ (800f708 <TIM_17_Init+0x110>)
 800f696:	2200      	movs	r2, #0
 800f698:	0018      	movs	r0, r3
 800f69a:	f7f4 fd3f 	bl	800411c <HAL_TIM_PWM_ConfigChannel>
 800f69e:	1e03      	subs	r3, r0, #0
 800f6a0:	d001      	beq.n	800f6a6 <TIM_17_Init+0xae>
  {
    Error_Handler();
 800f6a2:	f7ff fa3f 	bl	800eb24 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f6a6:	1d3b      	adds	r3, r7, #4
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f6ac:	1d3b      	adds	r3, r7, #4
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f6b2:	1d3b      	adds	r3, r7, #4
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f6b8:	1d3b      	adds	r3, r7, #4
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f6be:	1d3b      	adds	r3, r7, #4
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f6c4:	1d3b      	adds	r3, r7, #4
 800f6c6:	2280      	movs	r2, #128	@ 0x80
 800f6c8:	0192      	lsls	r2, r2, #6
 800f6ca:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f6cc:	1d3b      	adds	r3, r7, #4
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800f6d2:	1d3a      	adds	r2, r7, #4
 800f6d4:	4b0c      	ldr	r3, [pc, #48]	@ (800f708 <TIM_17_Init+0x110>)
 800f6d6:	0011      	movs	r1, r2
 800f6d8:	0018      	movs	r0, r3
 800f6da:	f7f5 f8fb 	bl	80048d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800f6de:	1e03      	subs	r3, r0, #0
 800f6e0:	d001      	beq.n	800f6e6 <TIM_17_Init+0xee>
  {
    Error_Handler();
 800f6e2:	f7ff fa1f 	bl	800eb24 <Error_Handler>
  }

  if (HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1) != HAL_OK)
 800f6e6:	4b08      	ldr	r3, [pc, #32]	@ (800f708 <TIM_17_Init+0x110>)
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	0018      	movs	r0, r3
 800f6ec:	f7f4 f990 	bl	8003a10 <HAL_TIM_PWM_Start>
 800f6f0:	1e03      	subs	r3, r0, #0
 800f6f2:	d001      	beq.n	800f6f8 <TIM_17_Init+0x100>
  {
    Error_Handler();
 800f6f4:	f7ff fa16 	bl	800eb24 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim17);
 800f6f8:	4b03      	ldr	r3, [pc, #12]	@ (800f708 <TIM_17_Init+0x110>)
 800f6fa:	0018      	movs	r0, r3
 800f6fc:	f7ff fb0c 	bl	800ed18 <HAL_TIM_MspPostInit>
}
 800f700:	46c0      	nop			@ (mov r8, r8)
 800f702:	46bd      	mov	sp, r7
 800f704:	b010      	add	sp, #64	@ 0x40
 800f706:	bd80      	pop	{r7, pc}
 800f708:	200007e8 	.word	0x200007e8
 800f70c:	40014800 	.word	0x40014800

0800f710 <TIM_Init_All>:


void TIM_Init_All(void)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	af00      	add	r7, sp, #0
	TIM_1_Init();
 800f714:	f7ff fc36 	bl	800ef84 <TIM_1_Init>
	TIM_3_Init();
 800f718:	f7ff fd10 	bl	800f13c <TIM_3_Init>
	TIM_6_Init();
 800f71c:	f7ff fdb0 	bl	800f280 <TIM_6_Init>
	TIM_14_Init();
 800f720:	f7ff fde2 	bl	800f2e8 <TIM_14_Init>
	TIM_15_Init();
 800f724:	f7ff fe38 	bl	800f398 <TIM_15_Init>
	TIM_16_Init();
 800f728:	f7ff fece 	bl	800f4c8 <TIM_16_Init>
	//#warning "BUZZER DESABILITADO"
	TIM_17_Init();
 800f72c:	f7ff ff64 	bl	800f5f8 <TIM_17_Init>
}
 800f730:	46c0      	nop			@ (mov r8, r8)
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}
	...

0800f738 <TIM_STPMT_STOP>:
	}
}


void TIM_STPMT_STOP(uint8_t p_u8Motor)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	0002      	movs	r2, r0
 800f740:	1dfb      	adds	r3, r7, #7
 800f742:	701a      	strb	r2, [r3, #0]
	if(p_u8Motor == TIM_MOTOR_1)
 800f744:	1dfb      	adds	r3, r7, #7
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d111      	bne.n	800f770 <TIM_STPMT_STOP+0x38>
	{
		HAL_TIM_PWM_Stop_IT(&htim15, TIM_CHANNEL_1);
 800f74c:	4b13      	ldr	r3, [pc, #76]	@ (800f79c <TIM_STPMT_STOP+0x64>)
 800f74e:	2100      	movs	r1, #0
 800f750:	0018      	movs	r0, r3
 800f752:	f7f4 fb09 	bl	8003d68 <HAL_TIM_PWM_Stop_IT>
		__HAL_TIM_DISABLE_IT(&htim15, TIM_IT_UPDATE);
 800f756:	4b11      	ldr	r3, [pc, #68]	@ (800f79c <TIM_STPMT_STOP+0x64>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	68da      	ldr	r2, [r3, #12]
 800f75c:	4b0f      	ldr	r3, [pc, #60]	@ (800f79c <TIM_STPMT_STOP+0x64>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2101      	movs	r1, #1
 800f762:	438a      	bics	r2, r1
 800f764:	60da      	str	r2, [r3, #12]
		GPIO_MT1_DIR_RIGHT;
 800f766:	4b0e      	ldr	r3, [pc, #56]	@ (800f7a0 <TIM_STPMT_STOP+0x68>)
 800f768:	2280      	movs	r2, #128	@ 0x80
 800f76a:	0212      	lsls	r2, r2, #8
 800f76c:	619a      	str	r2, [r3, #24]
	{
		HAL_TIM_PWM_Stop_IT(&htim16, TIM_CHANNEL_1);
		__HAL_TIM_DISABLE_IT(&htim16, TIM_IT_UPDATE);
		GPIO_MT2_DIR_RIGHT;
	}
}
 800f76e:	e010      	b.n	800f792 <TIM_STPMT_STOP+0x5a>
		HAL_TIM_PWM_Stop_IT(&htim16, TIM_CHANNEL_1);
 800f770:	4b0c      	ldr	r3, [pc, #48]	@ (800f7a4 <TIM_STPMT_STOP+0x6c>)
 800f772:	2100      	movs	r1, #0
 800f774:	0018      	movs	r0, r3
 800f776:	f7f4 faf7 	bl	8003d68 <HAL_TIM_PWM_Stop_IT>
		__HAL_TIM_DISABLE_IT(&htim16, TIM_IT_UPDATE);
 800f77a:	4b0a      	ldr	r3, [pc, #40]	@ (800f7a4 <TIM_STPMT_STOP+0x6c>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	68da      	ldr	r2, [r3, #12]
 800f780:	4b08      	ldr	r3, [pc, #32]	@ (800f7a4 <TIM_STPMT_STOP+0x6c>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	2101      	movs	r1, #1
 800f786:	438a      	bics	r2, r1
 800f788:	60da      	str	r2, [r3, #12]
		GPIO_MT2_DIR_RIGHT;
 800f78a:	4b05      	ldr	r3, [pc, #20]	@ (800f7a0 <TIM_STPMT_STOP+0x68>)
 800f78c:	2280      	movs	r2, #128	@ 0x80
 800f78e:	0092      	lsls	r2, r2, #2
 800f790:	619a      	str	r2, [r3, #24]
}
 800f792:	46c0      	nop			@ (mov r8, r8)
 800f794:	46bd      	mov	sp, r7
 800f796:	b002      	add	sp, #8
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	46c0      	nop			@ (mov r8, r8)
 800f79c:	20000758 	.word	0x20000758
 800f7a0:	48000400 	.word	0x48000400
 800f7a4:	200007a0 	.word	0x200007a0

0800f7a8 <TIM_STPMT_START>:

void TIM_STPMT_START(uint8_t p_u8Motor , uint8_t p_u8Dir )
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	0002      	movs	r2, r0
 800f7b0:	1dfb      	adds	r3, r7, #7
 800f7b2:	701a      	strb	r2, [r3, #0]
 800f7b4:	1dbb      	adds	r3, r7, #6
 800f7b6:	1c0a      	adds	r2, r1, #0
 800f7b8:	701a      	strb	r2, [r3, #0]
	if(p_u8Motor == TIM_MOTOR_1)
 800f7ba:	1dfb      	adds	r3, r7, #7
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d11a      	bne.n	800f7f8 <TIM_STPMT_START+0x50>
	{
		p_u8Dir == TIM_DIR_LEFT ? GPIO_MT1_DIR_LEFT : GPIO_MT1_DIR_RIGHT;
 800f7c2:	1dbb      	adds	r3, r7, #6
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d104      	bne.n	800f7d4 <TIM_STPMT_START+0x2c>
 800f7ca:	4b1a      	ldr	r3, [pc, #104]	@ (800f834 <TIM_STPMT_START+0x8c>)
 800f7cc:	2280      	movs	r2, #128	@ 0x80
 800f7ce:	0612      	lsls	r2, r2, #24
 800f7d0:	619a      	str	r2, [r3, #24]
 800f7d2:	e003      	b.n	800f7dc <TIM_STPMT_START+0x34>
 800f7d4:	4b17      	ldr	r3, [pc, #92]	@ (800f834 <TIM_STPMT_START+0x8c>)
 800f7d6:	2280      	movs	r2, #128	@ 0x80
 800f7d8:	0212      	lsls	r2, r2, #8
 800f7da:	619a      	str	r2, [r3, #24]
		HAL_TIM_PWM_Start_IT(&htim15, TIM_CHANNEL_1);
 800f7dc:	4b16      	ldr	r3, [pc, #88]	@ (800f838 <TIM_STPMT_START+0x90>)
 800f7de:	2100      	movs	r1, #0
 800f7e0:	0018      	movs	r0, r3
 800f7e2:	f7f4 f9c7 	bl	8003b74 <HAL_TIM_PWM_Start_IT>
		__HAL_TIM_ENABLE_IT(&htim15, TIM_IT_UPDATE);
 800f7e6:	4b14      	ldr	r3, [pc, #80]	@ (800f838 <TIM_STPMT_START+0x90>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	68da      	ldr	r2, [r3, #12]
 800f7ec:	4b12      	ldr	r3, [pc, #72]	@ (800f838 <TIM_STPMT_START+0x90>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2101      	movs	r1, #1
 800f7f2:	430a      	orrs	r2, r1
 800f7f4:	60da      	str	r2, [r3, #12]
	{
		p_u8Dir == TIM_DIR_LEFT ? GPIO_MT2_DIR_LEFT : GPIO_MT2_DIR_RIGHT;
		HAL_TIM_PWM_Start_IT(&htim16, TIM_CHANNEL_1);
		__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
	}
}
 800f7f6:	e019      	b.n	800f82c <TIM_STPMT_START+0x84>
		p_u8Dir == TIM_DIR_LEFT ? GPIO_MT2_DIR_LEFT : GPIO_MT2_DIR_RIGHT;
 800f7f8:	1dbb      	adds	r3, r7, #6
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d104      	bne.n	800f80a <TIM_STPMT_START+0x62>
 800f800:	4b0c      	ldr	r3, [pc, #48]	@ (800f834 <TIM_STPMT_START+0x8c>)
 800f802:	2280      	movs	r2, #128	@ 0x80
 800f804:	0492      	lsls	r2, r2, #18
 800f806:	619a      	str	r2, [r3, #24]
 800f808:	e003      	b.n	800f812 <TIM_STPMT_START+0x6a>
 800f80a:	4b0a      	ldr	r3, [pc, #40]	@ (800f834 <TIM_STPMT_START+0x8c>)
 800f80c:	2280      	movs	r2, #128	@ 0x80
 800f80e:	0092      	lsls	r2, r2, #2
 800f810:	619a      	str	r2, [r3, #24]
		HAL_TIM_PWM_Start_IT(&htim16, TIM_CHANNEL_1);
 800f812:	4b0a      	ldr	r3, [pc, #40]	@ (800f83c <TIM_STPMT_START+0x94>)
 800f814:	2100      	movs	r1, #0
 800f816:	0018      	movs	r0, r3
 800f818:	f7f4 f9ac 	bl	8003b74 <HAL_TIM_PWM_Start_IT>
		__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE);
 800f81c:	4b07      	ldr	r3, [pc, #28]	@ (800f83c <TIM_STPMT_START+0x94>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	68da      	ldr	r2, [r3, #12]
 800f822:	4b06      	ldr	r3, [pc, #24]	@ (800f83c <TIM_STPMT_START+0x94>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	2101      	movs	r1, #1
 800f828:	430a      	orrs	r2, r1
 800f82a:	60da      	str	r2, [r3, #12]
}
 800f82c:	46c0      	nop			@ (mov r8, r8)
 800f82e:	46bd      	mov	sp, r7
 800f830:	b002      	add	sp, #8
 800f832:	bd80      	pop	{r7, pc}
 800f834:	48000400 	.word	0x48000400
 800f838:	20000758 	.word	0x20000758
 800f83c:	200007a0 	.word	0x200007a0

0800f840 <TIM_STPMT_SET>:

void TIM_STPMT_SET(uint8_t p_u8Motor , uint16_t p_period )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	0002      	movs	r2, r0
 800f848:	1dfb      	adds	r3, r7, #7
 800f84a:	701a      	strb	r2, [r3, #0]
 800f84c:	1d3b      	adds	r3, r7, #4
 800f84e:	1c0a      	adds	r2, r1, #0
 800f850:	801a      	strh	r2, [r3, #0]
	if(p_u8Motor == TIM_MOTOR_1)
 800f852:	1dfb      	adds	r3, r7, #7
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d10a      	bne.n	800f870 <TIM_STPMT_SET+0x30>
	{
		OUTPUTS_TIMER_MOTOR_1->ARR = p_period;
 800f85a:	4b0c      	ldr	r3, [pc, #48]	@ (800f88c <TIM_STPMT_SET+0x4c>)
 800f85c:	1d3a      	adds	r2, r7, #4
 800f85e:	8812      	ldrh	r2, [r2, #0]
 800f860:	62da      	str	r2, [r3, #44]	@ 0x2c
		OUTPUTS_TIMER_MOTOR_1->CCR1 = p_period / 2;
 800f862:	1d3b      	adds	r3, r7, #4
 800f864:	881b      	ldrh	r3, [r3, #0]
 800f866:	085b      	lsrs	r3, r3, #1
 800f868:	b29a      	uxth	r2, r3
 800f86a:	4b08      	ldr	r3, [pc, #32]	@ (800f88c <TIM_STPMT_SET+0x4c>)
 800f86c:	635a      	str	r2, [r3, #52]	@ 0x34
	else
	{
		OUTPUTS_TIMER_MOTOR_2->ARR = p_period;
		OUTPUTS_TIMER_MOTOR_2->CCR1 = p_period / 2;
	}
}
 800f86e:	e009      	b.n	800f884 <TIM_STPMT_SET+0x44>
		OUTPUTS_TIMER_MOTOR_2->ARR = p_period;
 800f870:	4b07      	ldr	r3, [pc, #28]	@ (800f890 <TIM_STPMT_SET+0x50>)
 800f872:	1d3a      	adds	r2, r7, #4
 800f874:	8812      	ldrh	r2, [r2, #0]
 800f876:	62da      	str	r2, [r3, #44]	@ 0x2c
		OUTPUTS_TIMER_MOTOR_2->CCR1 = p_period / 2;
 800f878:	1d3b      	adds	r3, r7, #4
 800f87a:	881b      	ldrh	r3, [r3, #0]
 800f87c:	085b      	lsrs	r3, r3, #1
 800f87e:	b29a      	uxth	r2, r3
 800f880:	4b03      	ldr	r3, [pc, #12]	@ (800f890 <TIM_STPMT_SET+0x50>)
 800f882:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800f884:	46c0      	nop			@ (mov r8, r8)
 800f886:	46bd      	mov	sp, r7
 800f888:	b002      	add	sp, #8
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	40014000 	.word	0x40014000
 800f890:	40014400 	.word	0x40014400

0800f894 <Timing_IT>:
uint16_t Timing[_e_Timing_Qty];

/* IT Functions --------------------------------------------------------------*/

void Timing_IT(void)//   +/- 10ms
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
  uint8_t i;
  for( i = 0 ; i < _e_Timing_Qty ; i++ ){
 800f89a:	1dfb      	adds	r3, r7, #7
 800f89c:	2200      	movs	r2, #0
 800f89e:	701a      	strb	r2, [r3, #0]
 800f8a0:	e015      	b.n	800f8ce <Timing_IT+0x3a>
    if( Timing[i] > 0 )Timing[i]--;
 800f8a2:	1dfb      	adds	r3, r7, #7
 800f8a4:	781a      	ldrb	r2, [r3, #0]
 800f8a6:	4b0e      	ldr	r3, [pc, #56]	@ (800f8e0 <Timing_IT+0x4c>)
 800f8a8:	0052      	lsls	r2, r2, #1
 800f8aa:	5ad3      	ldrh	r3, [r2, r3]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d009      	beq.n	800f8c4 <Timing_IT+0x30>
 800f8b0:	1dfb      	adds	r3, r7, #7
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	4a0a      	ldr	r2, [pc, #40]	@ (800f8e0 <Timing_IT+0x4c>)
 800f8b6:	0059      	lsls	r1, r3, #1
 800f8b8:	5a8a      	ldrh	r2, [r1, r2]
 800f8ba:	3a01      	subs	r2, #1
 800f8bc:	b291      	uxth	r1, r2
 800f8be:	4a08      	ldr	r2, [pc, #32]	@ (800f8e0 <Timing_IT+0x4c>)
 800f8c0:	005b      	lsls	r3, r3, #1
 800f8c2:	5299      	strh	r1, [r3, r2]
  for( i = 0 ; i < _e_Timing_Qty ; i++ ){
 800f8c4:	1dfb      	adds	r3, r7, #7
 800f8c6:	781a      	ldrb	r2, [r3, #0]
 800f8c8:	1dfb      	adds	r3, r7, #7
 800f8ca:	3201      	adds	r2, #1
 800f8cc:	701a      	strb	r2, [r3, #0]
 800f8ce:	1dfb      	adds	r3, r7, #7
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	2b14      	cmp	r3, #20
 800f8d4:	d9e5      	bls.n	800f8a2 <Timing_IT+0xe>
  }
}
 800f8d6:	46c0      	nop			@ (mov r8, r8)
 800f8d8:	46c0      	nop			@ (mov r8, r8)
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	b002      	add	sp, #8
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	20000830 	.word	0x20000830

0800f8e4 <Timing_Set>:

/* Functions -----------------------------------------------------------------*/

void Timing_Set( t_Timing TimeType , uint16_t Time )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	0002      	movs	r2, r0
 800f8ec:	1dfb      	adds	r3, r7, #7
 800f8ee:	701a      	strb	r2, [r3, #0]
 800f8f0:	1d3b      	adds	r3, r7, #4
 800f8f2:	1c0a      	adds	r2, r1, #0
 800f8f4:	801a      	strh	r2, [r3, #0]
  Timing[TimeType] = Time;
 800f8f6:	1dfb      	adds	r3, r7, #7
 800f8f8:	781a      	ldrb	r2, [r3, #0]
 800f8fa:	4b04      	ldr	r3, [pc, #16]	@ (800f90c <Timing_Set+0x28>)
 800f8fc:	0052      	lsls	r2, r2, #1
 800f8fe:	1d39      	adds	r1, r7, #4
 800f900:	8809      	ldrh	r1, [r1, #0]
 800f902:	52d1      	strh	r1, [r2, r3]
}
 800f904:	46c0      	nop			@ (mov r8, r8)
 800f906:	46bd      	mov	sp, r7
 800f908:	b002      	add	sp, #8
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	20000830 	.word	0x20000830

0800f910 <Timing_Get_Bool>:
{
  return Timing[TimeType];
}

bool Timing_Get_Bool( t_Timing TimeType )
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	0002      	movs	r2, r0
 800f918:	1dfb      	adds	r3, r7, #7
 800f91a:	701a      	strb	r2, [r3, #0]
	if( Timing[TimeType] == 0 ){
 800f91c:	1dfb      	adds	r3, r7, #7
 800f91e:	781a      	ldrb	r2, [r3, #0]
 800f920:	4b05      	ldr	r3, [pc, #20]	@ (800f938 <Timing_Get_Bool+0x28>)
 800f922:	0052      	lsls	r2, r2, #1
 800f924:	5ad3      	ldrh	r3, [r2, r3]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d101      	bne.n	800f92e <Timing_Get_Bool+0x1e>
		return true;
 800f92a:	2301      	movs	r3, #1
 800f92c:	e000      	b.n	800f930 <Timing_Get_Bool+0x20>
	}
	else{
		return false;
 800f92e:	2300      	movs	r3, #0
	}
}
 800f930:	0018      	movs	r0, r3
 800f932:	46bd      	mov	sp, r7
 800f934:	b002      	add	sp, #8
 800f936:	bd80      	pop	{r7, pc}
 800f938:	20000830 	.word	0x20000830

0800f93c <Usart_Set_Rx_CallBack>:
HAL_StatusTypeDef halRet;

/*** ** * mecanismo rxTx * ** ***/

void Usart_Set_Rx_CallBack( _UsartCallBack_t callbackToSet )
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b082      	sub	sp, #8
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
	callBackRx = callbackToSet;
 800f944:	4b03      	ldr	r3, [pc, #12]	@ (800f954 <Usart_Set_Rx_CallBack+0x18>)
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	601a      	str	r2, [r3, #0]
}
 800f94a:	46c0      	nop			@ (mov r8, r8)
 800f94c:	46bd      	mov	sp, r7
 800f94e:	b002      	add	sp, #8
 800f950:	bd80      	pop	{r7, pc}
 800f952:	46c0      	nop			@ (mov r8, r8)
 800f954:	20000980 	.word	0x20000980

0800f958 <Usart_Set_Tx_Buff>:

HAL_StatusTypeDef Usart_Set_Tx_Buff( uint8_t *uartBuffTx, uint8_t p_u8Size )
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	000a      	movs	r2, r1
 800f962:	1cfb      	adds	r3, r7, #3
 800f964:	701a      	strb	r2, [r3, #0]
	USART_485_RTS_TX_ON();
 800f966:	2390      	movs	r3, #144	@ 0x90
 800f968:	05db      	lsls	r3, r3, #23
 800f96a:	2202      	movs	r2, #2
 800f96c:	619a      	str	r2, [r3, #24]
	memcpy(txBuffer,uartBuffTx,PACKET_SIZE);
 800f96e:	4a0c      	ldr	r2, [pc, #48]	@ (800f9a0 <Usart_Set_Tx_Buff+0x48>)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	0010      	movs	r0, r2
 800f974:	0019      	movs	r1, r3
 800f976:	230c      	movs	r3, #12
 800f978:	001a      	movs	r2, r3
 800f97a:	f000 f997 	bl	800fcac <memcpy>
	halRet = HAL_UART_Transmit_DMA(&huart2, txBuffer, PACKET_SIZE);
 800f97e:	4908      	ldr	r1, [pc, #32]	@ (800f9a0 <Usart_Set_Tx_Buff+0x48>)
 800f980:	4b08      	ldr	r3, [pc, #32]	@ (800f9a4 <Usart_Set_Tx_Buff+0x4c>)
 800f982:	220c      	movs	r2, #12
 800f984:	0018      	movs	r0, r3
 800f986:	f7f5 f867 	bl	8004a58 <HAL_UART_Transmit_DMA>
 800f98a:	0003      	movs	r3, r0
 800f98c:	001a      	movs	r2, r3
 800f98e:	4b06      	ldr	r3, [pc, #24]	@ (800f9a8 <Usart_Set_Tx_Buff+0x50>)
 800f990:	701a      	strb	r2, [r3, #0]
	__NOP();
 800f992:	46c0      	nop			@ (mov r8, r8)
	return halRet;
 800f994:	4b04      	ldr	r3, [pc, #16]	@ (800f9a8 <Usart_Set_Tx_Buff+0x50>)
 800f996:	781b      	ldrb	r3, [r3, #0]
}
 800f998:	0018      	movs	r0, r3
 800f99a:	46bd      	mov	sp, r7
 800f99c:	b002      	add	sp, #8
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	20000974 	.word	0x20000974
 800f9a4:	2000085c 	.word	0x2000085c
 800f9a8:	20000984 	.word	0x20000984

0800f9ac <HAL_UART_RxCpltCallback>:
	return halRet;
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a0d      	ldr	r2, [pc, #52]	@ (800f9f0 <HAL_UART_RxCpltCallback+0x44>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d113      	bne.n	800f9e6 <HAL_UART_RxCpltCallback+0x3a>
	{
		if( callBackRx != NULL ){
 800f9be:	4b0d      	ldr	r3, [pc, #52]	@ (800f9f4 <HAL_UART_RxCpltCallback+0x48>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d00f      	beq.n	800f9e6 <HAL_UART_RxCpltCallback+0x3a>
			callBackRx(rxBuffer);
 800f9c6:	4b0b      	ldr	r3, [pc, #44]	@ (800f9f4 <HAL_UART_RxCpltCallback+0x48>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	4a0b      	ldr	r2, [pc, #44]	@ (800f9f8 <HAL_UART_RxCpltCallback+0x4c>)
 800f9cc:	0010      	movs	r0, r2
 800f9ce:	4798      	blx	r3
			halRet = HAL_UART_Receive_DMA(&huart2, rxBuffer, PACKET_SIZE);
 800f9d0:	4909      	ldr	r1, [pc, #36]	@ (800f9f8 <HAL_UART_RxCpltCallback+0x4c>)
 800f9d2:	4b0a      	ldr	r3, [pc, #40]	@ (800f9fc <HAL_UART_RxCpltCallback+0x50>)
 800f9d4:	220c      	movs	r2, #12
 800f9d6:	0018      	movs	r0, r3
 800f9d8:	f7f5 f8e0 	bl	8004b9c <HAL_UART_Receive_DMA>
 800f9dc:	0003      	movs	r3, r0
 800f9de:	001a      	movs	r2, r3
 800f9e0:	4b07      	ldr	r3, [pc, #28]	@ (800fa00 <HAL_UART_RxCpltCallback+0x54>)
 800f9e2:	701a      	strb	r2, [r3, #0]
			__NOP();
 800f9e4:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 800f9e6:	46c0      	nop			@ (mov r8, r8)
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	b002      	add	sp, #8
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	46c0      	nop			@ (mov r8, r8)
 800f9f0:	40004400 	.word	0x40004400
 800f9f4:	20000980 	.word	0x20000980
 800f9f8:	20000968 	.word	0x20000968
 800f9fc:	2000085c 	.word	0x2000085c
 800fa00:	20000984 	.word	0x20000984

0800fa04 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	4a0b      	ldr	r2, [pc, #44]	@ (800fa40 <HAL_UART_TxCpltCallback+0x3c>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d10f      	bne.n	800fa36 <HAL_UART_TxCpltCallback+0x32>
	{
		USART_485_RTS_TX_OFF();
 800fa16:	2390      	movs	r3, #144	@ 0x90
 800fa18:	05db      	lsls	r3, r3, #23
 800fa1a:	2280      	movs	r2, #128	@ 0x80
 800fa1c:	0292      	lsls	r2, r2, #10
 800fa1e:	619a      	str	r2, [r3, #24]
		halRet = HAL_UART_Receive_DMA(&huart2, txBuffer, PACKET_SIZE);
 800fa20:	4908      	ldr	r1, [pc, #32]	@ (800fa44 <HAL_UART_TxCpltCallback+0x40>)
 800fa22:	4b09      	ldr	r3, [pc, #36]	@ (800fa48 <HAL_UART_TxCpltCallback+0x44>)
 800fa24:	220c      	movs	r2, #12
 800fa26:	0018      	movs	r0, r3
 800fa28:	f7f5 f8b8 	bl	8004b9c <HAL_UART_Receive_DMA>
 800fa2c:	0003      	movs	r3, r0
 800fa2e:	001a      	movs	r2, r3
 800fa30:	4b06      	ldr	r3, [pc, #24]	@ (800fa4c <HAL_UART_TxCpltCallback+0x48>)
 800fa32:	701a      	strb	r2, [r3, #0]
		__NOP();
 800fa34:	46c0      	nop			@ (mov r8, r8)
	}
}
 800fa36:	46c0      	nop			@ (mov r8, r8)
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	b002      	add	sp, #8
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	46c0      	nop			@ (mov r8, r8)
 800fa40:	40004400 	.word	0x40004400
 800fa44:	20000974 	.word	0x20000974
 800fa48:	2000085c 	.word	0x2000085c
 800fa4c:	20000984 	.word	0x20000984

0800fa50 <MX_USART2_UART_Init>:
*/

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800fa54:	4b20      	ldr	r3, [pc, #128]	@ (800fad8 <MX_USART2_UART_Init+0x88>)
 800fa56:	4a21      	ldr	r2, [pc, #132]	@ (800fadc <MX_USART2_UART_Init+0x8c>)
 800fa58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800fa5a:	4b1f      	ldr	r3, [pc, #124]	@ (800fad8 <MX_USART2_UART_Init+0x88>)
 800fa5c:	2296      	movs	r2, #150	@ 0x96
 800fa5e:	0212      	lsls	r2, r2, #8
 800fa60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800fa62:	4b1d      	ldr	r3, [pc, #116]	@ (800fad8 <MX_USART2_UART_Init+0x88>)
 800fa64:	2200      	movs	r2, #0
 800fa66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800fa68:	4b1b      	ldr	r3, [pc, #108]	@ (800fad8 <MX_USART2_UART_Init+0x88>)
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800fa6e:	4b1a      	ldr	r3, [pc, #104]	@ (800fad8 <MX_USART2_UART_Init+0x88>)
 800fa70:	2200      	movs	r2, #0
 800fa72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800fa74:	4b18      	ldr	r3, [pc, #96]	@ (800fad8 <MX_USART2_UART_Init+0x88>)
 800fa76:	220c      	movs	r2, #12
 800fa78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;//UART_HWCONTROL_RTS;
 800fa7a:	4b17      	ldr	r3, [pc, #92]	@ (800fad8 <MX_USART2_UART_Init+0x88>)
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800fa80:	4b15      	ldr	r3, [pc, #84]	@ (800fad8 <MX_USART2_UART_Init+0x88>)
 800fa82:	2200      	movs	r2, #0
 800fa84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800fa86:	4b14      	ldr	r3, [pc, #80]	@ (800fad8 <MX_USART2_UART_Init+0x88>)
 800fa88:	2200      	movs	r2, #0
 800fa8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800fa8c:	4b12      	ldr	r3, [pc, #72]	@ (800fad8 <MX_USART2_UART_Init+0x88>)
 800fa8e:	2200      	movs	r2, #0
 800fa90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800fa92:	4b11      	ldr	r3, [pc, #68]	@ (800fad8 <MX_USART2_UART_Init+0x88>)
 800fa94:	0018      	movs	r0, r3
 800fa96:	f7f4 ff8b 	bl	80049b0 <HAL_UART_Init>
 800fa9a:	1e03      	subs	r3, r0, #0
 800fa9c:	d001      	beq.n	800faa2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800fa9e:	f7ff f841 	bl	800eb24 <Error_Handler>
  }

  USART_485_RTS_TX_OFF();
 800faa2:	2390      	movs	r3, #144	@ 0x90
 800faa4:	05db      	lsls	r3, r3, #23
 800faa6:	2280      	movs	r2, #128	@ 0x80
 800faa8:	0292      	lsls	r2, r2, #10
 800faaa:	619a      	str	r2, [r3, #24]
  if( HAL_UART_Receive_DMA(&huart2, rxBuffer, PACKET_SIZE ) != HAL_OK )
 800faac:	490c      	ldr	r1, [pc, #48]	@ (800fae0 <MX_USART2_UART_Init+0x90>)
 800faae:	4b0a      	ldr	r3, [pc, #40]	@ (800fad8 <MX_USART2_UART_Init+0x88>)
 800fab0:	220c      	movs	r2, #12
 800fab2:	0018      	movs	r0, r3
 800fab4:	f7f5 f872 	bl	8004b9c <HAL_UART_Receive_DMA>
 800fab8:	1e03      	subs	r3, r0, #0
 800faba:	d001      	beq.n	800fac0 <MX_USART2_UART_Init+0x70>
  {
	  Error_Handler();
 800fabc:	f7ff f832 	bl	800eb24 <Error_Handler>
  }

  USART_485_RTS_TX_OFF();
 800fac0:	2390      	movs	r3, #144	@ 0x90
 800fac2:	05db      	lsls	r3, r3, #23
 800fac4:	2280      	movs	r2, #128	@ 0x80
 800fac6:	0292      	lsls	r2, r2, #10
 800fac8:	619a      	str	r2, [r3, #24]

  Usart_Set_Rx_CallBack(Api_Swing_Rx_CallBack);
 800faca:	4b06      	ldr	r3, [pc, #24]	@ (800fae4 <MX_USART2_UART_Init+0x94>)
 800facc:	0018      	movs	r0, r3
 800face:	f7ff ff35 	bl	800f93c <Usart_Set_Rx_CallBack>
}
 800fad2:	46c0      	nop			@ (mov r8, r8)
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	2000085c 	.word	0x2000085c
 800fadc:	40004400 	.word	0x40004400
 800fae0:	20000968 	.word	0x20000968
 800fae4:	08005dd9 	.word	0x08005dd9

0800fae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a3c      	ldr	r2, [pc, #240]	@ (800fbe8 <HAL_UART_MspInit+0x100>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d172      	bne.n	800fbe0 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800fafa:	4b3c      	ldr	r3, [pc, #240]	@ (800fbec <HAL_UART_MspInit+0x104>)
 800fafc:	69da      	ldr	r2, [r3, #28]
 800fafe:	4b3b      	ldr	r3, [pc, #236]	@ (800fbec <HAL_UART_MspInit+0x104>)
 800fb00:	2180      	movs	r1, #128	@ 0x80
 800fb02:	0289      	lsls	r1, r1, #10
 800fb04:	430a      	orrs	r2, r1
 800fb06:	61da      	str	r2, [r3, #28]
 800fb08:	4b38      	ldr	r3, [pc, #224]	@ (800fbec <HAL_UART_MspInit+0x104>)
 800fb0a:	69da      	ldr	r2, [r3, #28]
 800fb0c:	2380      	movs	r3, #128	@ 0x80
 800fb0e:	029b      	lsls	r3, r3, #10
 800fb10:	4013      	ands	r3, r2
 800fb12:	60fb      	str	r3, [r7, #12]
 800fb14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fb16:	4b35      	ldr	r3, [pc, #212]	@ (800fbec <HAL_UART_MspInit+0x104>)
 800fb18:	695a      	ldr	r2, [r3, #20]
 800fb1a:	4b34      	ldr	r3, [pc, #208]	@ (800fbec <HAL_UART_MspInit+0x104>)
 800fb1c:	2180      	movs	r1, #128	@ 0x80
 800fb1e:	0289      	lsls	r1, r1, #10
 800fb20:	430a      	orrs	r2, r1
 800fb22:	615a      	str	r2, [r3, #20]
 800fb24:	4b31      	ldr	r3, [pc, #196]	@ (800fbec <HAL_UART_MspInit+0x104>)
 800fb26:	695a      	ldr	r2, [r3, #20]
 800fb28:	2380      	movs	r3, #128	@ 0x80
 800fb2a:	029b      	lsls	r3, r3, #10
 800fb2c:	4013      	ands	r3, r2
 800fb2e:	60bb      	str	r3, [r7, #8]
 800fb30:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_Init_RS485(_e_Gpio_Init);
 800fb32:	2000      	movs	r0, #0
 800fb34:	f7fd ff52 	bl	800d9dc <GPIO_Init_RS485>



    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800fb38:	4b2d      	ldr	r3, [pc, #180]	@ (800fbf0 <HAL_UART_MspInit+0x108>)
 800fb3a:	4a2e      	ldr	r2, [pc, #184]	@ (800fbf4 <HAL_UART_MspInit+0x10c>)
 800fb3c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fb3e:	4b2c      	ldr	r3, [pc, #176]	@ (800fbf0 <HAL_UART_MspInit+0x108>)
 800fb40:	2200      	movs	r2, #0
 800fb42:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800fb44:	4b2a      	ldr	r3, [pc, #168]	@ (800fbf0 <HAL_UART_MspInit+0x108>)
 800fb46:	2200      	movs	r2, #0
 800fb48:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800fb4a:	4b29      	ldr	r3, [pc, #164]	@ (800fbf0 <HAL_UART_MspInit+0x108>)
 800fb4c:	2280      	movs	r2, #128	@ 0x80
 800fb4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fb50:	4b27      	ldr	r3, [pc, #156]	@ (800fbf0 <HAL_UART_MspInit+0x108>)
 800fb52:	2200      	movs	r2, #0
 800fb54:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800fb56:	4b26      	ldr	r3, [pc, #152]	@ (800fbf0 <HAL_UART_MspInit+0x108>)
 800fb58:	2200      	movs	r2, #0
 800fb5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800fb5c:	4b24      	ldr	r3, [pc, #144]	@ (800fbf0 <HAL_UART_MspInit+0x108>)
 800fb5e:	2200      	movs	r2, #0
 800fb60:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800fb62:	4b23      	ldr	r3, [pc, #140]	@ (800fbf0 <HAL_UART_MspInit+0x108>)
 800fb64:	2200      	movs	r2, #0
 800fb66:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800fb68:	4b21      	ldr	r3, [pc, #132]	@ (800fbf0 <HAL_UART_MspInit+0x108>)
 800fb6a:	0018      	movs	r0, r3
 800fb6c:	f7f2 fd68 	bl	8002640 <HAL_DMA_Init>
 800fb70:	1e03      	subs	r3, r0, #0
 800fb72:	d001      	beq.n	800fb78 <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 800fb74:	f7fe ffd6 	bl	800eb24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4a1d      	ldr	r2, [pc, #116]	@ (800fbf0 <HAL_UART_MspInit+0x108>)
 800fb7c:	671a      	str	r2, [r3, #112]	@ 0x70
 800fb7e:	4b1c      	ldr	r3, [pc, #112]	@ (800fbf0 <HAL_UART_MspInit+0x108>)
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800fb84:	4b1c      	ldr	r3, [pc, #112]	@ (800fbf8 <HAL_UART_MspInit+0x110>)
 800fb86:	4a1d      	ldr	r2, [pc, #116]	@ (800fbfc <HAL_UART_MspInit+0x114>)
 800fb88:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800fb8a:	4b1b      	ldr	r3, [pc, #108]	@ (800fbf8 <HAL_UART_MspInit+0x110>)
 800fb8c:	2210      	movs	r2, #16
 800fb8e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800fb90:	4b19      	ldr	r3, [pc, #100]	@ (800fbf8 <HAL_UART_MspInit+0x110>)
 800fb92:	2200      	movs	r2, #0
 800fb94:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800fb96:	4b18      	ldr	r3, [pc, #96]	@ (800fbf8 <HAL_UART_MspInit+0x110>)
 800fb98:	2280      	movs	r2, #128	@ 0x80
 800fb9a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800fb9c:	4b16      	ldr	r3, [pc, #88]	@ (800fbf8 <HAL_UART_MspInit+0x110>)
 800fb9e:	2200      	movs	r2, #0
 800fba0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800fba2:	4b15      	ldr	r3, [pc, #84]	@ (800fbf8 <HAL_UART_MspInit+0x110>)
 800fba4:	2200      	movs	r2, #0
 800fba6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800fba8:	4b13      	ldr	r3, [pc, #76]	@ (800fbf8 <HAL_UART_MspInit+0x110>)
 800fbaa:	2200      	movs	r2, #0
 800fbac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800fbae:	4b12      	ldr	r3, [pc, #72]	@ (800fbf8 <HAL_UART_MspInit+0x110>)
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800fbb4:	4b10      	ldr	r3, [pc, #64]	@ (800fbf8 <HAL_UART_MspInit+0x110>)
 800fbb6:	0018      	movs	r0, r3
 800fbb8:	f7f2 fd42 	bl	8002640 <HAL_DMA_Init>
 800fbbc:	1e03      	subs	r3, r0, #0
 800fbbe:	d001      	beq.n	800fbc4 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 800fbc0:	f7fe ffb0 	bl	800eb24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	4a0c      	ldr	r2, [pc, #48]	@ (800fbf8 <HAL_UART_MspInit+0x110>)
 800fbc8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fbca:	4b0b      	ldr	r3, [pc, #44]	@ (800fbf8 <HAL_UART_MspInit+0x110>)
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	625a      	str	r2, [r3, #36]	@ 0x24


  /* USER CODE BEGIN USART2_MspInit 1 */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 3);
 800fbd0:	2203      	movs	r2, #3
 800fbd2:	2103      	movs	r1, #3
 800fbd4:	201c      	movs	r0, #28
 800fbd6:	f7f2 fced 	bl	80025b4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800fbda:	201c      	movs	r0, #28
 800fbdc:	f7f2 fcff 	bl	80025de <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_MspInit 1 */
  }
}
 800fbe0:	46c0      	nop			@ (mov r8, r8)
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	b004      	add	sp, #16
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	40004400 	.word	0x40004400
 800fbec:	40021000 	.word	0x40021000
 800fbf0:	200008e0 	.word	0x200008e0
 800fbf4:	40020058 	.word	0x40020058
 800fbf8:	20000924 	.word	0x20000924
 800fbfc:	40020044 	.word	0x40020044

0800fc00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800fc00:	480d      	ldr	r0, [pc, #52]	@ (800fc38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800fc02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800fc04:	480d      	ldr	r0, [pc, #52]	@ (800fc3c <LoopForever+0x6>)
  ldr r1, =_edata
 800fc06:	490e      	ldr	r1, [pc, #56]	@ (800fc40 <LoopForever+0xa>)
  ldr r2, =_sidata
 800fc08:	4a0e      	ldr	r2, [pc, #56]	@ (800fc44 <LoopForever+0xe>)
  movs r3, #0
 800fc0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800fc0c:	e002      	b.n	800fc14 <LoopCopyDataInit>

0800fc0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800fc0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800fc10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800fc12:	3304      	adds	r3, #4

0800fc14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800fc14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800fc16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800fc18:	d3f9      	bcc.n	800fc0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800fc1a:	4a0b      	ldr	r2, [pc, #44]	@ (800fc48 <LoopForever+0x12>)
  ldr r4, =_ebss
 800fc1c:	4c0b      	ldr	r4, [pc, #44]	@ (800fc4c <LoopForever+0x16>)
  movs r3, #0
 800fc1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800fc20:	e001      	b.n	800fc26 <LoopFillZerobss>

0800fc22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800fc22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800fc24:	3204      	adds	r2, #4

0800fc26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800fc26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800fc28:	d3fb      	bcc.n	800fc22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800fc2a:	f7ff f9a5 	bl	800ef78 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800fc2e:	f000 f819 	bl	800fc64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800fc32:	f7fe fefd 	bl	800ea30 <main>

0800fc36 <LoopForever>:

LoopForever:
    b LoopForever
 800fc36:	e7fe      	b.n	800fc36 <LoopForever>
  ldr   r0, =_estack
 800fc38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800fc3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800fc40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800fc44:	0800ff98 	.word	0x0800ff98
  ldr r2, =_sbss
 800fc48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800fc4c:	20000988 	.word	0x20000988

0800fc50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800fc50:	e7fe      	b.n	800fc50 <ADC1_IRQHandler>

0800fc52 <memset>:
 800fc52:	0003      	movs	r3, r0
 800fc54:	1882      	adds	r2, r0, r2
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d100      	bne.n	800fc5c <memset+0xa>
 800fc5a:	4770      	bx	lr
 800fc5c:	7019      	strb	r1, [r3, #0]
 800fc5e:	3301      	adds	r3, #1
 800fc60:	e7f9      	b.n	800fc56 <memset+0x4>
	...

0800fc64 <__libc_init_array>:
 800fc64:	b570      	push	{r4, r5, r6, lr}
 800fc66:	2600      	movs	r6, #0
 800fc68:	4c0c      	ldr	r4, [pc, #48]	@ (800fc9c <__libc_init_array+0x38>)
 800fc6a:	4d0d      	ldr	r5, [pc, #52]	@ (800fca0 <__libc_init_array+0x3c>)
 800fc6c:	1b64      	subs	r4, r4, r5
 800fc6e:	10a4      	asrs	r4, r4, #2
 800fc70:	42a6      	cmp	r6, r4
 800fc72:	d109      	bne.n	800fc88 <__libc_init_array+0x24>
 800fc74:	2600      	movs	r6, #0
 800fc76:	f000 f823 	bl	800fcc0 <_init>
 800fc7a:	4c0a      	ldr	r4, [pc, #40]	@ (800fca4 <__libc_init_array+0x40>)
 800fc7c:	4d0a      	ldr	r5, [pc, #40]	@ (800fca8 <__libc_init_array+0x44>)
 800fc7e:	1b64      	subs	r4, r4, r5
 800fc80:	10a4      	asrs	r4, r4, #2
 800fc82:	42a6      	cmp	r6, r4
 800fc84:	d105      	bne.n	800fc92 <__libc_init_array+0x2e>
 800fc86:	bd70      	pop	{r4, r5, r6, pc}
 800fc88:	00b3      	lsls	r3, r6, #2
 800fc8a:	58eb      	ldr	r3, [r5, r3]
 800fc8c:	4798      	blx	r3
 800fc8e:	3601      	adds	r6, #1
 800fc90:	e7ee      	b.n	800fc70 <__libc_init_array+0xc>
 800fc92:	00b3      	lsls	r3, r6, #2
 800fc94:	58eb      	ldr	r3, [r5, r3]
 800fc96:	4798      	blx	r3
 800fc98:	3601      	adds	r6, #1
 800fc9a:	e7f2      	b.n	800fc82 <__libc_init_array+0x1e>
 800fc9c:	0800ff90 	.word	0x0800ff90
 800fca0:	0800ff90 	.word	0x0800ff90
 800fca4:	0800ff94 	.word	0x0800ff94
 800fca8:	0800ff90 	.word	0x0800ff90

0800fcac <memcpy>:
 800fcac:	2300      	movs	r3, #0
 800fcae:	b510      	push	{r4, lr}
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d100      	bne.n	800fcb6 <memcpy+0xa>
 800fcb4:	bd10      	pop	{r4, pc}
 800fcb6:	5ccc      	ldrb	r4, [r1, r3]
 800fcb8:	54c4      	strb	r4, [r0, r3]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	e7f8      	b.n	800fcb0 <memcpy+0x4>
	...

0800fcc0 <_init>:
 800fcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcc2:	46c0      	nop			@ (mov r8, r8)
 800fcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcc6:	bc08      	pop	{r3}
 800fcc8:	469e      	mov	lr, r3
 800fcca:	4770      	bx	lr

0800fccc <_fini>:
 800fccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcce:	46c0      	nop			@ (mov r8, r8)
 800fcd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcd2:	bc08      	pop	{r3}
 800fcd4:	469e      	mov	lr, r3
 800fcd6:	4770      	bx	lr
